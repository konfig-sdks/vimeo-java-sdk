/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Picture;
import com.konfigthis.client.model.VideosThumbnailsAddThumbnailToVideoRequest;
import com.konfigthis.client.model.VideosThumbnailsAddThumbnailToVideoRequest1;
import com.konfigthis.client.model.VideosThumbnailsEditThumbnailImageRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VideosThumbnailsApi
 */
@Disabled
public class VideosThumbnailsApiTest {

    private static VideosThumbnailsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new VideosThumbnailsApi(apiClient);
    }

    /**
     * Add a video thumbnail
     *
     * This method adds a thumbnail image to the specified video. The authenticated user must have team permissions for the video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addThumbnailToVideoTest() throws ApiException {
        Double channelId = null;
        Double videoId = null;
        Boolean active = null;
        Double time = null;
        Picture response = api.addThumbnailToVideo(channelId, videoId)
                .active(active)
                .time(time)
                .execute();
        // TODO: test validations
    }

    /**
     * Add a video thumbnail
     *
     * This method adds a thumbnail image to the specified video. The authenticated user must have team permissions for the video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addThumbnailToVideo_0Test() throws ApiException {
        Double videoId = null;
        Boolean active = null;
        Double time = null;
        Picture response = api.addThumbnailToVideo_0(videoId)
                .active(active)
                .time(time)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a video thumbnail
     *
     * This method deletes the specified thumbnail image from a video. The authenticated user must have team permissions for the video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteThumbnailFromVideoTest() throws ApiException {
        Double pictureId = null;
        Double videoId = null;
        api.deleteThumbnailFromVideo(pictureId, videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Edit a video thumbnail
     *
     * This method edits the specified video thumbnail image. The authenticated user must be the owner of the thumbnail.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void editThumbnailImageTest() throws ApiException {
        Double pictureId = null;
        Double videoId = null;
        Boolean active = null;
        Picture response = api.editThumbnailImage(pictureId, videoId)
                .active(active)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the thumbnails of a video
     *
     * This method returns all thumbnail images of the specified video. The authenticated user must have team permissions for the video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllByVideoIdTest() throws ApiException {
        Double channelId = null;
        Double videoId = null;
        Double page = null;
        Double perPage = null;
        List<Picture> response = api.getAllByVideoId(channelId, videoId)
                .page(page)
                .perPage(perPage)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the thumbnails of a video
     *
     * This method returns all thumbnail images of the specified video. The authenticated user must have team permissions for the video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllByVideoId_0Test() throws ApiException {
        Double videoId = null;
        Double page = null;
        Double perPage = null;
        List<Picture> response = api.getAllByVideoId_0(videoId)
                .page(page)
                .perPage(perPage)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a specific video thumbnail
     *
     * This method returns a single thumbnail image from the specified video. The authenticated user must have team permissions for the video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getThumbnailFromVideoTest() throws ApiException {
        Double pictureId = null;
        Double videoId = null;
        Picture response = api.getThumbnailFromVideo(pictureId, videoId)
                .execute();
        // TODO: test validations
    }

}
