/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.SubscriptionPlansCurrency;
import com.konfigthis.client.model.SubscriptionPlansDiscount;
import com.konfigthis.client.model.SubscriptionPlansMetadata;
import com.konfigthis.client.model.SubscriptionPlansPrice;
import com.konfigthis.client.model.SubscriptionPlansPromotion;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * SubscriptionPlans
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SubscriptionPlans {
  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private SubscriptionPlansCurrency currency;

  public static final String SERIALIZED_NAME_DISCOUNT = "discount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT)
  private SubscriptionPlansDiscount discount;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Double id;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private SubscriptionPlansMetadata metadata;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private SubscriptionPlansPrice price;

  public static final String SERIALIZED_NAME_PROMOTION = "promotion";
  @SerializedName(SERIALIZED_NAME_PROMOTION)
  private SubscriptionPlansPromotion promotion;

  /**
   * The plan type.  Option descriptions:  * &#x60;advanced&#x60; - The plan type is Vimeo Advanced.  * &#x60;basic&#x60; - The plan type is Vimeo Basic.  * &#x60;business&#x60; - The plan type is Vimeo Business.  * &#x60;enterprise&#x60; - The plan type is Vimeo Enterprise.  * &#x60;free&#x60; - The plan type is Vimeo Free.  * &#x60;livePremium&#x60; - The plan type is Vimeo Premium.  * &#x60;ott&#x60; - The plan type is Vimeo OTT.  * &#x60;plus&#x60; - The plan type is Vimeo Plus.  * &#x60;pro&#x60; - The plan type is Vimeo Pro.  * &#x60;proUnlimited&#x60; - The plan type is Vimeo Pro Unlimited.  * &#x60;standard&#x60; - The plan type is Vimeo Standard.  * &#x60;starter&#x60; - The plan type is Vimeo Starter. 
   */
  @JsonAdapter(TierEnum.Adapter.class)
 public enum TierEnum {
    ADVANCED("advanced"),
    
    BASIC("basic"),
    
    BUSINESS("business"),
    
    ENTERPRISE("enterprise"),
    
    FREE("free"),
    
    LIVEPREMIUM("livePremium"),
    
    OTT("ott"),
    
    PLUS("plus"),
    
    PRO("pro"),
    
    PROUNLIMITED("proUnlimited"),
    
    STANDARD("standard"),
    
    STARTER("starter");

    private String value;

    TierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TierEnum fromValue(String value) {
      for (TierEnum b : TierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TierEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TIER = "tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  private TierEnum tier;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public SubscriptionPlans() {
  }

  public SubscriptionPlans currency(SubscriptionPlansCurrency currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public SubscriptionPlansCurrency getCurrency() {
    return currency;
  }


  public void setCurrency(SubscriptionPlansCurrency currency) {
    
    
    
    this.currency = currency;
  }


  public SubscriptionPlans discount(SubscriptionPlansDiscount discount) {
    
    
    
    
    this.discount = discount;
    return this;
  }

   /**
   * Get discount
   * @return discount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public SubscriptionPlansDiscount getDiscount() {
    return discount;
  }


  public void setDiscount(SubscriptionPlansDiscount discount) {
    
    
    
    this.discount = discount;
  }


  public SubscriptionPlans id(Double id) {
    
    
    
    
    this.id = id;
    return this;
  }

  public SubscriptionPlans id(Integer id) {
    
    
    
    
    this.id = id.doubleValue();
    return this;
  }

   /**
   * The SKU of the plan.
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "12341", required = true, value = "The SKU of the plan.")

  public Double getId() {
    return id;
  }


  public void setId(Double id) {
    
    
    
    this.id = id;
  }


  public SubscriptionPlans metadata(SubscriptionPlansMetadata metadata) {
    
    
    
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public SubscriptionPlansMetadata getMetadata() {
    return metadata;
  }


  public void setMetadata(SubscriptionPlansMetadata metadata) {
    
    
    
    this.metadata = metadata;
  }


  public SubscriptionPlans name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The name of the plan.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Pro", required = true, value = "The name of the plan.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public SubscriptionPlans price(SubscriptionPlansPrice price) {
    
    
    
    
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public SubscriptionPlansPrice getPrice() {
    return price;
  }


  public void setPrice(SubscriptionPlansPrice price) {
    
    
    
    this.price = price;
  }


  public SubscriptionPlans promotion(SubscriptionPlansPromotion promotion) {
    
    
    
    
    this.promotion = promotion;
    return this;
  }

   /**
   * Get promotion
   * @return promotion
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public SubscriptionPlansPromotion getPromotion() {
    return promotion;
  }


  public void setPromotion(SubscriptionPlansPromotion promotion) {
    
    
    
    this.promotion = promotion;
  }


  public SubscriptionPlans tier(TierEnum tier) {
    
    
    
    
    this.tier = tier;
    return this;
  }

   /**
   * The plan type.  Option descriptions:  * &#x60;advanced&#x60; - The plan type is Vimeo Advanced.  * &#x60;basic&#x60; - The plan type is Vimeo Basic.  * &#x60;business&#x60; - The plan type is Vimeo Business.  * &#x60;enterprise&#x60; - The plan type is Vimeo Enterprise.  * &#x60;free&#x60; - The plan type is Vimeo Free.  * &#x60;livePremium&#x60; - The plan type is Vimeo Premium.  * &#x60;ott&#x60; - The plan type is Vimeo OTT.  * &#x60;plus&#x60; - The plan type is Vimeo Plus.  * &#x60;pro&#x60; - The plan type is Vimeo Pro.  * &#x60;proUnlimited&#x60; - The plan type is Vimeo Pro Unlimited.  * &#x60;standard&#x60; - The plan type is Vimeo Standard.  * &#x60;starter&#x60; - The plan type is Vimeo Starter. 
   * @return tier
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "PRO", required = true, value = "The plan type.  Option descriptions:  * `advanced` - The plan type is Vimeo Advanced.  * `basic` - The plan type is Vimeo Basic.  * `business` - The plan type is Vimeo Business.  * `enterprise` - The plan type is Vimeo Enterprise.  * `free` - The plan type is Vimeo Free.  * `livePremium` - The plan type is Vimeo Premium.  * `ott` - The plan type is Vimeo OTT.  * `plus` - The plan type is Vimeo Plus.  * `pro` - The plan type is Vimeo Pro.  * `proUnlimited` - The plan type is Vimeo Pro Unlimited.  * `standard` - The plan type is Vimeo Standard.  * `starter` - The plan type is Vimeo Starter. ")

  public TierEnum getTier() {
    return tier;
  }


  public void setTier(TierEnum tier) {
    
    
    
    this.tier = tier;
  }


  public SubscriptionPlans uri(String uri) {
    
    
    
    
    this.uri = uri;
    return this;
  }

   /**
   * The URI of the plan.
   * @return uri
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "/plans/pro", required = true, value = "The URI of the plan.")

  public String getUri() {
    return uri;
  }


  public void setUri(String uri) {
    
    
    
    this.uri = uri;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SubscriptionPlans instance itself
   */
  public SubscriptionPlans putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionPlans subscriptionPlans = (SubscriptionPlans) o;
    return Objects.equals(this.currency, subscriptionPlans.currency) &&
        Objects.equals(this.discount, subscriptionPlans.discount) &&
        Objects.equals(this.id, subscriptionPlans.id) &&
        Objects.equals(this.metadata, subscriptionPlans.metadata) &&
        Objects.equals(this.name, subscriptionPlans.name) &&
        Objects.equals(this.price, subscriptionPlans.price) &&
        Objects.equals(this.promotion, subscriptionPlans.promotion) &&
        Objects.equals(this.tier, subscriptionPlans.tier) &&
        Objects.equals(this.uri, subscriptionPlans.uri)&&
        Objects.equals(this.additionalProperties, subscriptionPlans.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currency, discount, id, metadata, name, price, promotion, tier, uri, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionPlans {\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    discount: ").append(toIndentedString(discount)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    promotion: ").append(toIndentedString(promotion)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currency");
    openapiFields.add("discount");
    openapiFields.add("id");
    openapiFields.add("metadata");
    openapiFields.add("name");
    openapiFields.add("price");
    openapiFields.add("promotion");
    openapiFields.add("tier");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("discount");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("price");
    openapiRequiredFields.add("promotion");
    openapiRequiredFields.add("tier");
    openapiRequiredFields.add("uri");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SubscriptionPlans
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SubscriptionPlans.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubscriptionPlans is not found in the empty JSON string", SubscriptionPlans.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SubscriptionPlans.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `currency`
      SubscriptionPlansCurrency.validateJsonObject(jsonObj.getAsJsonObject("currency"));
      // validate the required field `discount`
      SubscriptionPlansDiscount.validateJsonObject(jsonObj.getAsJsonObject("discount"));
      // validate the required field `metadata`
      SubscriptionPlansMetadata.validateJsonObject(jsonObj.getAsJsonObject("metadata"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `price`
      SubscriptionPlansPrice.validateJsonObject(jsonObj.getAsJsonObject("price"));
      // validate the required field `promotion`
      SubscriptionPlansPromotion.validateJsonObject(jsonObj.getAsJsonObject("promotion"));
      if (!jsonObj.get("tier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tier").toString()));
      }
      if (!jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubscriptionPlans.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubscriptionPlans' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubscriptionPlans> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubscriptionPlans.class));

       return (TypeAdapter<T>) new TypeAdapter<SubscriptionPlans>() {
           @Override
           public void write(JsonWriter out, SubscriptionPlans value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SubscriptionPlans read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SubscriptionPlans instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SubscriptionPlans given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SubscriptionPlans
  * @throws IOException if the JSON string is invalid with respect to SubscriptionPlans
  */
  public static SubscriptionPlans fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubscriptionPlans.class);
  }

 /**
  * Convert an instance of SubscriptionPlans to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

