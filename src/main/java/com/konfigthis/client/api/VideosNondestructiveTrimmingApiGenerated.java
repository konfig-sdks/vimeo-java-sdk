/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClipTrimRequest;
import com.konfigthis.client.model.TrimmedVideo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class VideosNondestructiveTrimmingApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VideosNondestructiveTrimmingApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public VideosNondestructiveTrimmingApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call trimCall(Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/trim"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trimValidateBeforeCall(Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling trim(Async)");
        }

        return trimCall(videoId, _callback);

    }


    private ApiResponse<TrimmedVideo> trimWithHttpInfo(Double videoId) throws ApiException {
        okhttp3.Call localVarCall = trimValidateBeforeCall(videoId, null);
        Type localVarReturnType = new TypeToken<TrimmedVideo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call trimAsync(Double videoId, final ApiCallback<TrimmedVideo> _callback) throws ApiException {

        okhttp3.Call localVarCall = trimValidateBeforeCall(videoId, _callback);
        Type localVarReturnType = new TypeToken<TrimmedVideo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TrimRequestBuilder {
        private final Double videoId;

        private TrimRequestBuilder(double videoId) {
            this.videoId = videoId;
        }

        /**
         * Build call for trim
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The status of the trim operation was returned or updated. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return trimCall(videoId, _callback);
        }


        /**
         * Execute trim request
         * @return TrimmedVideo
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The status of the trim operation was returned or updated. </td><td>  -  </td></tr>
         </table>
         */
        public TrimmedVideo execute() throws ApiException {
            ApiResponse<TrimmedVideo> localVarResp = trimWithHttpInfo(videoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute trim request with HTTP info returned
         * @return ApiResponse&lt;TrimmedVideo&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The status of the trim operation was returned or updated. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TrimmedVideo> executeWithHttpInfo() throws ApiException {
            return trimWithHttpInfo(videoId);
        }

        /**
         * Execute trim request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The status of the trim operation was returned or updated. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TrimmedVideo> _callback) throws ApiException {
            return trimAsync(videoId, _callback);
        }
    }

    /**
     * Get the status of a video&#39;s trim operation
     * This method returns the status of the trim operation for the specified video.
     * @param videoId The ID of the video. (required)
     * @return TrimRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The status of the trim operation was returned or updated. </td><td>  -  </td></tr>
     </table>
     */
    public TrimRequestBuilder trim(double videoId) throws IllegalArgumentException {
        
        return new TrimRequestBuilder(videoId);
    }
    private okhttp3.Call trim_0Call(Double videoId, ClipTrimRequest clipTrimRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = clipTrimRequest;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/trim"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trim_0ValidateBeforeCall(Double videoId, ClipTrimRequest clipTrimRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling trim_0(Async)");
        }

        return trim_0Call(videoId, clipTrimRequest, _callback);

    }


    private ApiResponse<TrimmedVideo> trim_0WithHttpInfo(Double videoId, ClipTrimRequest clipTrimRequest) throws ApiException {
        okhttp3.Call localVarCall = trim_0ValidateBeforeCall(videoId, clipTrimRequest, null);
        Type localVarReturnType = new TypeToken<TrimmedVideo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call trim_0Async(Double videoId, ClipTrimRequest clipTrimRequest, final ApiCallback<TrimmedVideo> _callback) throws ApiException {

        okhttp3.Call localVarCall = trim_0ValidateBeforeCall(videoId, clipTrimRequest, _callback);
        Type localVarReturnType = new TypeToken<TrimmedVideo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Trim0RequestBuilder {
        private final Double videoId;
        private String trimEnd;
        private String trimStart;

        private Trim0RequestBuilder(double videoId) {
            this.videoId = videoId;
        }

        /**
         * Set trimEnd
         * @param trimEnd The end position in seconds of the trim in the video. (optional)
         * @return Trim0RequestBuilder
         */
        public Trim0RequestBuilder trimEnd(String trimEnd) {
            this.trimEnd = trimEnd;
            return this;
        }
        
        /**
         * Set trimStart
         * @param trimStart The start position in seconds of the trim in the video. (optional)
         * @return Trim0RequestBuilder
         */
        public Trim0RequestBuilder trimStart(String trimStart) {
            this.trimStart = trimStart;
            return this;
        }
        
        /**
         * Build call for trim_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The status of the trim operation was returned or updated. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ClipTrimRequest clipTrimRequest = buildBodyParams();
            return trim_0Call(videoId, clipTrimRequest, _callback);
        }

        private ClipTrimRequest buildBodyParams() {
            ClipTrimRequest clipTrimRequest = new ClipTrimRequest();
            clipTrimRequest.trimEnd(this.trimEnd);
            clipTrimRequest.trimStart(this.trimStart);
            return clipTrimRequest;
        }

        /**
         * Execute trim_0 request
         * @return TrimmedVideo
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The status of the trim operation was returned or updated. </td><td>  -  </td></tr>
         </table>
         */
        public TrimmedVideo execute() throws ApiException {
            ClipTrimRequest clipTrimRequest = buildBodyParams();
            ApiResponse<TrimmedVideo> localVarResp = trim_0WithHttpInfo(videoId, clipTrimRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute trim_0 request with HTTP info returned
         * @return ApiResponse&lt;TrimmedVideo&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The status of the trim operation was returned or updated. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TrimmedVideo> executeWithHttpInfo() throws ApiException {
            ClipTrimRequest clipTrimRequest = buildBodyParams();
            return trim_0WithHttpInfo(videoId, clipTrimRequest);
        }

        /**
         * Execute trim_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The status of the trim operation was returned or updated. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TrimmedVideo> _callback) throws ApiException {
            ClipTrimRequest clipTrimRequest = buildBodyParams();
            return trim_0Async(videoId, clipTrimRequest, _callback);
        }
    }

    /**
     * Start a trim operation for a video
     * This method starts a trim operation for the specified video.
     * @param videoId The ID of the video. (required)
     * @return Trim0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The status of the trim operation was returned or updated. </td><td>  -  </td></tr>
     </table>
     */
    public Trim0RequestBuilder trim_0(double videoId) throws IllegalArgumentException {
        
        return new Trim0RequestBuilder(videoId);
    }
}
