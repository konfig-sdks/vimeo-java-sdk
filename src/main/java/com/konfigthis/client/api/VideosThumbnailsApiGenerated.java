/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Picture;
import com.konfigthis.client.model.VideosThumbnailsAddThumbnailToVideoRequest;
import com.konfigthis.client.model.VideosThumbnailsAddThumbnailToVideoRequest1;
import com.konfigthis.client.model.VideosThumbnailsEditThumbnailImageRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class VideosThumbnailsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VideosThumbnailsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public VideosThumbnailsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addThumbnailToVideoCall(Double channelId, Double videoId, VideosThumbnailsAddThumbnailToVideoRequest videosThumbnailsAddThumbnailToVideoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = videosThumbnailsAddThumbnailToVideoRequest;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/videos/{video_id}/pictures"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addThumbnailToVideoValidateBeforeCall(Double channelId, Double videoId, VideosThumbnailsAddThumbnailToVideoRequest videosThumbnailsAddThumbnailToVideoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling addThumbnailToVideo(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addThumbnailToVideo(Async)");
        }

        return addThumbnailToVideoCall(channelId, videoId, videosThumbnailsAddThumbnailToVideoRequest, _callback);

    }


    private ApiResponse<Picture> addThumbnailToVideoWithHttpInfo(Double channelId, Double videoId, VideosThumbnailsAddThumbnailToVideoRequest videosThumbnailsAddThumbnailToVideoRequest) throws ApiException {
        okhttp3.Call localVarCall = addThumbnailToVideoValidateBeforeCall(channelId, videoId, videosThumbnailsAddThumbnailToVideoRequest, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addThumbnailToVideoAsync(Double channelId, Double videoId, VideosThumbnailsAddThumbnailToVideoRequest videosThumbnailsAddThumbnailToVideoRequest, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = addThumbnailToVideoValidateBeforeCall(channelId, videoId, videosThumbnailsAddThumbnailToVideoRequest, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddThumbnailToVideoRequestBuilder {
        private final Double channelId;
        private final Double videoId;
        private Boolean active;
        private Double time;

        private AddThumbnailToVideoRequestBuilder(double channelId, double videoId) {
            this.channelId = channelId;
            this.videoId = videoId;
        }

        /**
         * Set active
         * @param active Whether the image created by the **time** field should be the default thumbnail for the video. (optional)
         * @return AddThumbnailToVideoRequestBuilder
         */
        public AddThumbnailToVideoRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Set time
         * @param time The time offset in seconds from which to create the thumbnail. (optional)
         * @return AddThumbnailToVideoRequestBuilder
         */
        public AddThumbnailToVideoRequestBuilder time(Double time) {
            this.time = time;
            return this;
        }
        
        /**
         * Build call for addThumbnailToVideo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The thumbnail was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VideosThumbnailsAddThumbnailToVideoRequest videosThumbnailsAddThumbnailToVideoRequest = buildBodyParams();
            return addThumbnailToVideoCall(channelId, videoId, videosThumbnailsAddThumbnailToVideoRequest, _callback);
        }

        private VideosThumbnailsAddThumbnailToVideoRequest buildBodyParams() {
            VideosThumbnailsAddThumbnailToVideoRequest videosThumbnailsAddThumbnailToVideoRequest = new VideosThumbnailsAddThumbnailToVideoRequest();
            videosThumbnailsAddThumbnailToVideoRequest.active(this.active);
            videosThumbnailsAddThumbnailToVideoRequest.time(this.time);
            return videosThumbnailsAddThumbnailToVideoRequest;
        }

        /**
         * Execute addThumbnailToVideo request
         * @return Picture
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The thumbnail was created. </td><td>  -  </td></tr>
         </table>
         */
        public Picture execute() throws ApiException {
            VideosThumbnailsAddThumbnailToVideoRequest videosThumbnailsAddThumbnailToVideoRequest = buildBodyParams();
            ApiResponse<Picture> localVarResp = addThumbnailToVideoWithHttpInfo(channelId, videoId, videosThumbnailsAddThumbnailToVideoRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addThumbnailToVideo request with HTTP info returned
         * @return ApiResponse&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The thumbnail was created. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Picture> executeWithHttpInfo() throws ApiException {
            VideosThumbnailsAddThumbnailToVideoRequest videosThumbnailsAddThumbnailToVideoRequest = buildBodyParams();
            return addThumbnailToVideoWithHttpInfo(channelId, videoId, videosThumbnailsAddThumbnailToVideoRequest);
        }

        /**
         * Execute addThumbnailToVideo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The thumbnail was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Picture> _callback) throws ApiException {
            VideosThumbnailsAddThumbnailToVideoRequest videosThumbnailsAddThumbnailToVideoRequest = buildBodyParams();
            return addThumbnailToVideoAsync(channelId, videoId, videosThumbnailsAddThumbnailToVideoRequest, _callback);
        }
    }

    /**
     * Add a video thumbnail
     * This method adds a thumbnail image to the specified video. The authenticated user must have team permissions for the video.
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @return AddThumbnailToVideoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The thumbnail was created. </td><td>  -  </td></tr>
     </table>
     */
    public AddThumbnailToVideoRequestBuilder addThumbnailToVideo(double channelId, double videoId) throws IllegalArgumentException {
        
        
        return new AddThumbnailToVideoRequestBuilder(channelId, videoId);
    }
    private okhttp3.Call addThumbnailToVideo_0Call(Double videoId, VideosThumbnailsAddThumbnailToVideoRequest1 videosThumbnailsAddThumbnailToVideoRequest1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = videosThumbnailsAddThumbnailToVideoRequest1;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/pictures"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addThumbnailToVideo_0ValidateBeforeCall(Double videoId, VideosThumbnailsAddThumbnailToVideoRequest1 videosThumbnailsAddThumbnailToVideoRequest1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addThumbnailToVideo_0(Async)");
        }

        return addThumbnailToVideo_0Call(videoId, videosThumbnailsAddThumbnailToVideoRequest1, _callback);

    }


    private ApiResponse<Picture> addThumbnailToVideo_0WithHttpInfo(Double videoId, VideosThumbnailsAddThumbnailToVideoRequest1 videosThumbnailsAddThumbnailToVideoRequest1) throws ApiException {
        okhttp3.Call localVarCall = addThumbnailToVideo_0ValidateBeforeCall(videoId, videosThumbnailsAddThumbnailToVideoRequest1, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addThumbnailToVideo_0Async(Double videoId, VideosThumbnailsAddThumbnailToVideoRequest1 videosThumbnailsAddThumbnailToVideoRequest1, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = addThumbnailToVideo_0ValidateBeforeCall(videoId, videosThumbnailsAddThumbnailToVideoRequest1, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddThumbnailToVideo0RequestBuilder {
        private final Double videoId;
        private Boolean active;
        private Double time;

        private AddThumbnailToVideo0RequestBuilder(double videoId) {
            this.videoId = videoId;
        }

        /**
         * Set active
         * @param active Whether the image created by the **time** field should be the default thumbnail for the video. (optional)
         * @return AddThumbnailToVideo0RequestBuilder
         */
        public AddThumbnailToVideo0RequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Set time
         * @param time The time offset in seconds from which to create the thumbnail. (optional)
         * @return AddThumbnailToVideo0RequestBuilder
         */
        public AddThumbnailToVideo0RequestBuilder time(Double time) {
            this.time = time;
            return this;
        }
        
        /**
         * Build call for addThumbnailToVideo_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The thumbnail was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VideosThumbnailsAddThumbnailToVideoRequest1 videosThumbnailsAddThumbnailToVideoRequest1 = buildBodyParams();
            return addThumbnailToVideo_0Call(videoId, videosThumbnailsAddThumbnailToVideoRequest1, _callback);
        }

        private VideosThumbnailsAddThumbnailToVideoRequest1 buildBodyParams() {
            VideosThumbnailsAddThumbnailToVideoRequest1 videosThumbnailsAddThumbnailToVideoRequest1 = new VideosThumbnailsAddThumbnailToVideoRequest1();
            videosThumbnailsAddThumbnailToVideoRequest1.active(this.active);
            videosThumbnailsAddThumbnailToVideoRequest1.time(this.time);
            return videosThumbnailsAddThumbnailToVideoRequest1;
        }

        /**
         * Execute addThumbnailToVideo_0 request
         * @return Picture
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The thumbnail was created. </td><td>  -  </td></tr>
         </table>
         */
        public Picture execute() throws ApiException {
            VideosThumbnailsAddThumbnailToVideoRequest1 videosThumbnailsAddThumbnailToVideoRequest1 = buildBodyParams();
            ApiResponse<Picture> localVarResp = addThumbnailToVideo_0WithHttpInfo(videoId, videosThumbnailsAddThumbnailToVideoRequest1);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addThumbnailToVideo_0 request with HTTP info returned
         * @return ApiResponse&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The thumbnail was created. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Picture> executeWithHttpInfo() throws ApiException {
            VideosThumbnailsAddThumbnailToVideoRequest1 videosThumbnailsAddThumbnailToVideoRequest1 = buildBodyParams();
            return addThumbnailToVideo_0WithHttpInfo(videoId, videosThumbnailsAddThumbnailToVideoRequest1);
        }

        /**
         * Execute addThumbnailToVideo_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The thumbnail was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Picture> _callback) throws ApiException {
            VideosThumbnailsAddThumbnailToVideoRequest1 videosThumbnailsAddThumbnailToVideoRequest1 = buildBodyParams();
            return addThumbnailToVideo_0Async(videoId, videosThumbnailsAddThumbnailToVideoRequest1, _callback);
        }
    }

    /**
     * Add a video thumbnail
     * This method adds a thumbnail image to the specified video. The authenticated user must have team permissions for the video.
     * @param videoId The ID of the video. (required)
     * @return AddThumbnailToVideo0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The thumbnail was created. </td><td>  -  </td></tr>
     </table>
     */
    public AddThumbnailToVideo0RequestBuilder addThumbnailToVideo_0(double videoId) throws IllegalArgumentException {
        
        return new AddThumbnailToVideo0RequestBuilder(videoId);
    }
    private okhttp3.Call deleteThumbnailFromVideoCall(Double pictureId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/pictures/{picture_id}"
            .replace("{" + "picture_id" + "}", localVarApiClient.escapeString(pictureId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteThumbnailFromVideoValidateBeforeCall(Double pictureId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pictureId' is set
        if (pictureId == null) {
            throw new ApiException("Missing the required parameter 'pictureId' when calling deleteThumbnailFromVideo(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling deleteThumbnailFromVideo(Async)");
        }

        return deleteThumbnailFromVideoCall(pictureId, videoId, _callback);

    }


    private ApiResponse<Void> deleteThumbnailFromVideoWithHttpInfo(Double pictureId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = deleteThumbnailFromVideoValidateBeforeCall(pictureId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteThumbnailFromVideoAsync(Double pictureId, Double videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteThumbnailFromVideoValidateBeforeCall(pictureId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteThumbnailFromVideoRequestBuilder {
        private final Double pictureId;
        private final Double videoId;

        private DeleteThumbnailFromVideoRequestBuilder(double pictureId, double videoId) {
            this.pictureId = pictureId;
            this.videoId = videoId;
        }

        /**
         * Build call for deleteThumbnailFromVideo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The thumbnail was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteThumbnailFromVideoCall(pictureId, videoId, _callback);
        }


        /**
         * Execute deleteThumbnailFromVideo request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The thumbnail was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteThumbnailFromVideoWithHttpInfo(pictureId, videoId);
        }

        /**
         * Execute deleteThumbnailFromVideo request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The thumbnail was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteThumbnailFromVideoWithHttpInfo(pictureId, videoId);
        }

        /**
         * Execute deleteThumbnailFromVideo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The thumbnail was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteThumbnailFromVideoAsync(pictureId, videoId, _callback);
        }
    }

    /**
     * Delete a video thumbnail
     * This method deletes the specified thumbnail image from a video. The authenticated user must have team permissions for the video.
     * @param pictureId The ID of the thumbnail. (required)
     * @param videoId The ID of the video. (required)
     * @return DeleteThumbnailFromVideoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The thumbnail was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteThumbnailFromVideoRequestBuilder deleteThumbnailFromVideo(double pictureId, double videoId) throws IllegalArgumentException {
        
        
        return new DeleteThumbnailFromVideoRequestBuilder(pictureId, videoId);
    }
    private okhttp3.Call editThumbnailImageCall(Double pictureId, Double videoId, VideosThumbnailsEditThumbnailImageRequest videosThumbnailsEditThumbnailImageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = videosThumbnailsEditThumbnailImageRequest;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/pictures/{picture_id}"
            .replace("{" + "picture_id" + "}", localVarApiClient.escapeString(pictureId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editThumbnailImageValidateBeforeCall(Double pictureId, Double videoId, VideosThumbnailsEditThumbnailImageRequest videosThumbnailsEditThumbnailImageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pictureId' is set
        if (pictureId == null) {
            throw new ApiException("Missing the required parameter 'pictureId' when calling editThumbnailImage(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling editThumbnailImage(Async)");
        }

        return editThumbnailImageCall(pictureId, videoId, videosThumbnailsEditThumbnailImageRequest, _callback);

    }


    private ApiResponse<Picture> editThumbnailImageWithHttpInfo(Double pictureId, Double videoId, VideosThumbnailsEditThumbnailImageRequest videosThumbnailsEditThumbnailImageRequest) throws ApiException {
        okhttp3.Call localVarCall = editThumbnailImageValidateBeforeCall(pictureId, videoId, videosThumbnailsEditThumbnailImageRequest, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call editThumbnailImageAsync(Double pictureId, Double videoId, VideosThumbnailsEditThumbnailImageRequest videosThumbnailsEditThumbnailImageRequest, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = editThumbnailImageValidateBeforeCall(pictureId, videoId, videosThumbnailsEditThumbnailImageRequest, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EditThumbnailImageRequestBuilder {
        private final Double pictureId;
        private final Double videoId;
        private Boolean active;

        private EditThumbnailImageRequestBuilder(double pictureId, double videoId) {
            this.pictureId = pictureId;
            this.videoId = videoId;
        }

        /**
         * Set active
         * @param active Whether this thumbnail is the default. (optional)
         * @return EditThumbnailImageRequestBuilder
         */
        public EditThumbnailImageRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Build call for editThumbnailImage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VideosThumbnailsEditThumbnailImageRequest videosThumbnailsEditThumbnailImageRequest = buildBodyParams();
            return editThumbnailImageCall(pictureId, videoId, videosThumbnailsEditThumbnailImageRequest, _callback);
        }

        private VideosThumbnailsEditThumbnailImageRequest buildBodyParams() {
            VideosThumbnailsEditThumbnailImageRequest videosThumbnailsEditThumbnailImageRequest = new VideosThumbnailsEditThumbnailImageRequest();
            videosThumbnailsEditThumbnailImageRequest.active(this.active);
            return videosThumbnailsEditThumbnailImageRequest;
        }

        /**
         * Execute editThumbnailImage request
         * @return Picture
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was edited. </td><td>  -  </td></tr>
         </table>
         */
        public Picture execute() throws ApiException {
            VideosThumbnailsEditThumbnailImageRequest videosThumbnailsEditThumbnailImageRequest = buildBodyParams();
            ApiResponse<Picture> localVarResp = editThumbnailImageWithHttpInfo(pictureId, videoId, videosThumbnailsEditThumbnailImageRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute editThumbnailImage request with HTTP info returned
         * @return ApiResponse&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was edited. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Picture> executeWithHttpInfo() throws ApiException {
            VideosThumbnailsEditThumbnailImageRequest videosThumbnailsEditThumbnailImageRequest = buildBodyParams();
            return editThumbnailImageWithHttpInfo(pictureId, videoId, videosThumbnailsEditThumbnailImageRequest);
        }

        /**
         * Execute editThumbnailImage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Picture> _callback) throws ApiException {
            VideosThumbnailsEditThumbnailImageRequest videosThumbnailsEditThumbnailImageRequest = buildBodyParams();
            return editThumbnailImageAsync(pictureId, videoId, videosThumbnailsEditThumbnailImageRequest, _callback);
        }
    }

    /**
     * Edit a video thumbnail
     * This method edits the specified video thumbnail image. The authenticated user must be the owner of the thumbnail.
     * @param pictureId The ID of the thumbnail. (required)
     * @param videoId The ID of the video. (required)
     * @return EditThumbnailImageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The thumbnail was edited. </td><td>  -  </td></tr>
     </table>
     */
    public EditThumbnailImageRequestBuilder editThumbnailImage(double pictureId, double videoId) throws IllegalArgumentException {
        
        
        return new EditThumbnailImageRequestBuilder(pictureId, videoId);
    }
    private okhttp3.Call getAllByVideoIdCall(Double channelId, Double videoId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/videos/{video_id}/pictures"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllByVideoIdValidateBeforeCall(Double channelId, Double videoId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getAllByVideoId(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getAllByVideoId(Async)");
        }

        return getAllByVideoIdCall(channelId, videoId, page, perPage, _callback);

    }


    private ApiResponse<List<Picture>> getAllByVideoIdWithHttpInfo(Double channelId, Double videoId, Double page, Double perPage) throws ApiException {
        okhttp3.Call localVarCall = getAllByVideoIdValidateBeforeCall(channelId, videoId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllByVideoIdAsync(Double channelId, Double videoId, Double page, Double perPage, final ApiCallback<List<Picture>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllByVideoIdValidateBeforeCall(channelId, videoId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllByVideoIdRequestBuilder {
        private final Double channelId;
        private final Double videoId;
        private Double page;
        private Double perPage;

        private GetAllByVideoIdRequestBuilder(double channelId, double videoId) {
            this.channelId = channelId;
            this.videoId = videoId;
        }

        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetAllByVideoIdRequestBuilder
         */
        public GetAllByVideoIdRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetAllByVideoIdRequestBuilder
         */
        public GetAllByVideoIdRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getAllByVideoId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnails were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllByVideoIdCall(channelId, videoId, page, perPage, _callback);
        }


        /**
         * Execute getAllByVideoId request
         * @return List&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnails were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Picture> execute() throws ApiException {
            ApiResponse<List<Picture>> localVarResp = getAllByVideoIdWithHttpInfo(channelId, videoId, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllByVideoId request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Picture&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnails were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Picture>> executeWithHttpInfo() throws ApiException {
            return getAllByVideoIdWithHttpInfo(channelId, videoId, page, perPage);
        }

        /**
         * Execute getAllByVideoId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnails were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Picture>> _callback) throws ApiException {
            return getAllByVideoIdAsync(channelId, videoId, page, perPage, _callback);
        }
    }

    /**
     * Get all the thumbnails of a video
     * This method returns all thumbnail images of the specified video. The authenticated user must have team permissions for the video.
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @return GetAllByVideoIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The thumbnails were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllByVideoIdRequestBuilder getAllByVideoId(double channelId, double videoId) throws IllegalArgumentException {
        
        
        return new GetAllByVideoIdRequestBuilder(channelId, videoId);
    }
    private okhttp3.Call getAllByVideoId_0Call(Double videoId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/pictures"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllByVideoId_0ValidateBeforeCall(Double videoId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getAllByVideoId_0(Async)");
        }

        return getAllByVideoId_0Call(videoId, page, perPage, _callback);

    }


    private ApiResponse<List<Picture>> getAllByVideoId_0WithHttpInfo(Double videoId, Double page, Double perPage) throws ApiException {
        okhttp3.Call localVarCall = getAllByVideoId_0ValidateBeforeCall(videoId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllByVideoId_0Async(Double videoId, Double page, Double perPage, final ApiCallback<List<Picture>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllByVideoId_0ValidateBeforeCall(videoId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllByVideoId0RequestBuilder {
        private final Double videoId;
        private Double page;
        private Double perPage;

        private GetAllByVideoId0RequestBuilder(double videoId) {
            this.videoId = videoId;
        }

        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetAllByVideoId0RequestBuilder
         */
        public GetAllByVideoId0RequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetAllByVideoId0RequestBuilder
         */
        public GetAllByVideoId0RequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getAllByVideoId_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnails were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllByVideoId_0Call(videoId, page, perPage, _callback);
        }


        /**
         * Execute getAllByVideoId_0 request
         * @return List&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnails were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Picture> execute() throws ApiException {
            ApiResponse<List<Picture>> localVarResp = getAllByVideoId_0WithHttpInfo(videoId, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllByVideoId_0 request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Picture&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnails were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Picture>> executeWithHttpInfo() throws ApiException {
            return getAllByVideoId_0WithHttpInfo(videoId, page, perPage);
        }

        /**
         * Execute getAllByVideoId_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnails were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Picture>> _callback) throws ApiException {
            return getAllByVideoId_0Async(videoId, page, perPage, _callback);
        }
    }

    /**
     * Get all the thumbnails of a video
     * This method returns all thumbnail images of the specified video. The authenticated user must have team permissions for the video.
     * @param videoId The ID of the video. (required)
     * @return GetAllByVideoId0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The thumbnails were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllByVideoId0RequestBuilder getAllByVideoId_0(double videoId) throws IllegalArgumentException {
        
        return new GetAllByVideoId0RequestBuilder(videoId);
    }
    private okhttp3.Call getThumbnailFromVideoCall(Double pictureId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/pictures/{picture_id}"
            .replace("{" + "picture_id" + "}", localVarApiClient.escapeString(pictureId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getThumbnailFromVideoValidateBeforeCall(Double pictureId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pictureId' is set
        if (pictureId == null) {
            throw new ApiException("Missing the required parameter 'pictureId' when calling getThumbnailFromVideo(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getThumbnailFromVideo(Async)");
        }

        return getThumbnailFromVideoCall(pictureId, videoId, _callback);

    }


    private ApiResponse<Picture> getThumbnailFromVideoWithHttpInfo(Double pictureId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = getThumbnailFromVideoValidateBeforeCall(pictureId, videoId, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getThumbnailFromVideoAsync(Double pictureId, Double videoId, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = getThumbnailFromVideoValidateBeforeCall(pictureId, videoId, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetThumbnailFromVideoRequestBuilder {
        private final Double pictureId;
        private final Double videoId;

        private GetThumbnailFromVideoRequestBuilder(double pictureId, double videoId) {
            this.pictureId = pictureId;
            this.videoId = videoId;
        }

        /**
         * Build call for getThumbnailFromVideo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getThumbnailFromVideoCall(pictureId, videoId, _callback);
        }


        /**
         * Execute getThumbnailFromVideo request
         * @return Picture
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was returned. </td><td>  -  </td></tr>
         </table>
         */
        public Picture execute() throws ApiException {
            ApiResponse<Picture> localVarResp = getThumbnailFromVideoWithHttpInfo(pictureId, videoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getThumbnailFromVideo request with HTTP info returned
         * @return ApiResponse&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Picture> executeWithHttpInfo() throws ApiException {
            return getThumbnailFromVideoWithHttpInfo(pictureId, videoId);
        }

        /**
         * Execute getThumbnailFromVideo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Picture> _callback) throws ApiException {
            return getThumbnailFromVideoAsync(pictureId, videoId, _callback);
        }
    }

    /**
     * Get a specific video thumbnail
     * This method returns a single thumbnail image from the specified video. The authenticated user must have team permissions for the video.
     * @param pictureId The ID of the thumbnail. (required)
     * @param videoId The ID of the video. (required)
     * @return GetThumbnailFromVideoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The thumbnail was returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetThumbnailFromVideoRequestBuilder getThumbnailFromVideo(double pictureId, double videoId) throws IllegalArgumentException {
        
        
        return new GetThumbnailFromVideoRequestBuilder(pictureId, videoId);
    }
}
