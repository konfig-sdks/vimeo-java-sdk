/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed;
import com.konfigthis.client.model.LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2InteractionToolsSettings;
import com.konfigthis.client.model.LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Schedule;
import com.konfigthis.client.model.LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2StreamEmbed;
import com.konfigthis.client.model.LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2StreamPrivacy;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_AUTO_CC_ENABLED = "auto_cc_enabled";
  @SerializedName(SERIALIZED_NAME_AUTO_CC_ENABLED)
  private Boolean autoCcEnabled;

  public static final String SERIALIZED_NAME_AUTO_CC_KEYWORDS = "auto_cc_keywords";
  @SerializedName(SERIALIZED_NAME_AUTO_CC_KEYWORDS)
  private String autoCcKeywords;

  /**
   * The language of the automated closed captions.  Option descriptions:  * &#x60;de-DE&#x60; - The language is German.  * &#x60;en-US&#x60; - The language is English.  * &#x60;es-ES&#x60; - The language is Spanish.  * &#x60;fr-FR&#x60; - The language is French.  * &#x60;pt-BR&#x60; - The language is Portuguese. 
   */
  @JsonAdapter(AutoCcLanguageEnum.Adapter.class)
 public enum AutoCcLanguageEnum {
    DE_DE("de-DE"),
    
    EN_US("en-US"),
    
    ES_ES("es-ES"),
    
    FR_FR("fr-FR"),
    
    PT_BR("pt-BR");

    private String value;

    AutoCcLanguageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AutoCcLanguageEnum fromValue(String value) {
      for (AutoCcLanguageEnum b : AutoCcLanguageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AutoCcLanguageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AutoCcLanguageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AutoCcLanguageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AutoCcLanguageEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AUTO_CC_LANGUAGE = "auto_cc_language";
  @SerializedName(SERIALIZED_NAME_AUTO_CC_LANGUAGE)
  private AutoCcLanguageEnum autoCcLanguage;

  public static final String SERIALIZED_NAME_AUTOMATICALLY_TITLE_STREAM = "automatically_title_stream";
  @SerializedName(SERIALIZED_NAME_AUTOMATICALLY_TITLE_STREAM)
  private Boolean automaticallyTitleStream;

  public static final String SERIALIZED_NAME_CHAT_ENABLED = "chat_enabled";
  @SerializedName(SERIALIZED_NAME_CHAT_ENABLED)
  private Boolean chatEnabled;

  public static final String SERIALIZED_NAME_CONTENT_RATING = "content_rating";
  @SerializedName(SERIALIZED_NAME_CONTENT_RATING)
  private List<String> contentRating = null;

  public static final String SERIALIZED_NAME_DVR = "dvr";
  @SerializedName(SERIALIZED_NAME_DVR)
  private Boolean dvr;

  public static final String SERIALIZED_NAME_EMBED = "embed";
  @SerializedName(SERIALIZED_NAME_EMBED)
  private LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed embed;

  public static final String SERIALIZED_NAME_INTERACTION_TOOLS_SETTINGS = "interaction_tools_settings";
  @SerializedName(SERIALIZED_NAME_INTERACTION_TOOLS_SETTINGS)
  private LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2InteractionToolsSettings interactionToolsSettings;

  /**
   * The order in which the videos of the event appear within the event&#39;s playlist.  Option descriptions:  * &#x60;added_first&#x60; - The most recently added videos appear first.  * &#x60;added_last&#x60; - The most recently added videos appear last.  * &#x60;alphabetical&#x60; - The videos appear in alphabetical order.  * &#x60;arranged&#x60; - The videos appear in the order in which the user has arranged them.  * &#x60;comments&#x60; - The videos appear in order of number of comments.  * &#x60;duration&#x60; - The videos appear in order of duration.  * &#x60;likes&#x60; - The videos appear in order of number of likes.  * &#x60;newest&#x60; - The newest videos appear first.  * &#x60;oldest&#x60; - The oldest videos appear first.  * &#x60;plays&#x60; - The videos appear in order of number of plays. 
   */
  @JsonAdapter(PlaylistSortEnum.Adapter.class)
 public enum PlaylistSortEnum {
    ADDED_FIRST("added_first"),
    
    ADDED_LAST("added_last"),
    
    ALPHABETICAL("alphabetical"),
    
    ARRANGED("arranged"),
    
    COMMENTS("comments"),
    
    DURATION("duration"),
    
    LIKES("likes"),
    
    NEWEST("newest"),
    
    OLDEST("oldest"),
    
    PLAYS("plays");

    private String value;

    PlaylistSortEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlaylistSortEnum fromValue(String value) {
      for (PlaylistSortEnum b : PlaylistSortEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlaylistSortEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlaylistSortEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlaylistSortEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlaylistSortEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PLAYLIST_SORT = "playlist_sort";
  @SerializedName(SERIALIZED_NAME_PLAYLIST_SORT)
  private PlaylistSortEnum playlistSort;

  public static final String SERIALIZED_NAME_SCHEDULE = "schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Schedule schedule;

  public static final String SERIALIZED_NAME_SCHEDULED_PLAYBACK = "scheduled_playback";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_PLAYBACK)
  private Boolean scheduledPlayback;

  public static final String SERIALIZED_NAME_STREAM_DESCRIPTION = "stream_description";
  @SerializedName(SERIALIZED_NAME_STREAM_DESCRIPTION)
  private String streamDescription;

  public static final String SERIALIZED_NAME_STREAM_EMBED = "stream_embed";
  @SerializedName(SERIALIZED_NAME_STREAM_EMBED)
  private LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2StreamEmbed streamEmbed;

  /**
   * The stream mode of the event.  Option descriptions:  * &#x60;live&#x60; - The stream is live playback.  * &#x60;record&#x60; - The stream is in record mode.  * &#x60;simulive&#x60; - The stream is scheduled media playback. 
   */
  @JsonAdapter(StreamModeEnum.Adapter.class)
 public enum StreamModeEnum {
    LIVE("live"),
    
    RECORD("record"),
    
    SIMULIVE("simulive");

    private String value;

    StreamModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StreamModeEnum fromValue(String value) {
      for (StreamModeEnum b : StreamModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StreamModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StreamModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StreamModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StreamModeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STREAM_MODE = "stream_mode";
  @SerializedName(SERIALIZED_NAME_STREAM_MODE)
  private StreamModeEnum streamMode;

  public static final String SERIALIZED_NAME_STREAM_PASSWORD = "stream_password";
  @SerializedName(SERIALIZED_NAME_STREAM_PASSWORD)
  private String streamPassword;

  public static final String SERIALIZED_NAME_STREAM_PRIVACY = "stream_privacy";
  @SerializedName(SERIALIZED_NAME_STREAM_PRIVACY)
  private LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2StreamPrivacy streamPrivacy;

  public static final String SERIALIZED_NAME_STREAM_TITLE = "stream_title";
  @SerializedName(SERIALIZED_NAME_STREAM_TITLE)
  private String streamTitle;

  public static final String SERIALIZED_NAME_TIME_ZONE = "time_zone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2() {
  }

  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * The title of the event. If **automatically_title_stream** is &#x60;true&#x60;, this value is the base title for videos created by streaming to this event.
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Live Content", value = "The title of the event. If **automatically_title_stream** is `true`, this value is the base title for videos created by streaming to this event.")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 autoCcEnabled(Boolean autoCcEnabled) {
    
    
    
    
    this.autoCcEnabled = autoCcEnabled;
    return this;
  }

   /**
   * Whether automated closed captions are enabled for the event.
   * @return autoCcEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether automated closed captions are enabled for the event.")

  public Boolean getAutoCcEnabled() {
    return autoCcEnabled;
  }


  public void setAutoCcEnabled(Boolean autoCcEnabled) {
    
    
    
    this.autoCcEnabled = autoCcEnabled;
  }


  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 autoCcKeywords(String autoCcKeywords) {
    
    
    
    
    this.autoCcKeywords = autoCcKeywords;
    return this;
  }

   /**
   * A comma-separated list of keywords for enhancing the speech detection of automated closed captions.
   * @return autoCcKeywords
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A comma-separated list of keywords for enhancing the speech detection of automated closed captions.")

  public String getAutoCcKeywords() {
    return autoCcKeywords;
  }


  public void setAutoCcKeywords(String autoCcKeywords) {
    
    
    
    this.autoCcKeywords = autoCcKeywords;
  }


  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 autoCcLanguage(AutoCcLanguageEnum autoCcLanguage) {
    
    
    
    
    this.autoCcLanguage = autoCcLanguage;
    return this;
  }

   /**
   * The language of the automated closed captions.  Option descriptions:  * &#x60;de-DE&#x60; - The language is German.  * &#x60;en-US&#x60; - The language is English.  * &#x60;es-ES&#x60; - The language is Spanish.  * &#x60;fr-FR&#x60; - The language is French.  * &#x60;pt-BR&#x60; - The language is Portuguese. 
   * @return autoCcLanguage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "EN_US", value = "The language of the automated closed captions.  Option descriptions:  * `de-DE` - The language is German.  * `en-US` - The language is English.  * `es-ES` - The language is Spanish.  * `fr-FR` - The language is French.  * `pt-BR` - The language is Portuguese. ")

  public AutoCcLanguageEnum getAutoCcLanguage() {
    return autoCcLanguage;
  }


  public void setAutoCcLanguage(AutoCcLanguageEnum autoCcLanguage) {
    
    
    
    this.autoCcLanguage = autoCcLanguage;
  }


  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 automaticallyTitleStream(Boolean automaticallyTitleStream) {
    
    
    
    
    this.automaticallyTitleStream = automaticallyTitleStream;
    return this;
  }

   /**
   * Whether the title for the next video in the event is generated based on the time of the stream and the **title** field of the event.
   * @return automaticallyTitleStream
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the title for the next video in the event is generated based on the time of the stream and the **title** field of the event.")

  public Boolean getAutomaticallyTitleStream() {
    return automaticallyTitleStream;
  }


  public void setAutomaticallyTitleStream(Boolean automaticallyTitleStream) {
    
    
    
    this.automaticallyTitleStream = automaticallyTitleStream;
  }


  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 chatEnabled(Boolean chatEnabled) {
    
    
    
    
    this.chatEnabled = chatEnabled;
    return this;
  }

   /**
   * Whether to display the live chat client on the Vimeo event page.
   * @return chatEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether to display the live chat client on the Vimeo event page.")

  public Boolean getChatEnabled() {
    return chatEnabled;
  }


  public void setChatEnabled(Boolean chatEnabled) {
    
    
    
    this.chatEnabled = chatEnabled;
  }


  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 contentRating(List<String> contentRating) {
    
    
    
    
    this.contentRating = contentRating;
    return this;
  }

  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 addContentRatingItem(String contentRatingItem) {
    if (this.contentRating == null) {
      this.contentRating = new ArrayList<>();
    }
    this.contentRating.add(contentRatingItem);
    return this;
  }

   /**
   * A list of values describing the content in this event. To return the list of all possible content rating values, use the [&#x60;/contentratings&#x60;](https://developer.vimeo.com/api/reference/videos#get_content_ratings) endpoint.
   * @return contentRating
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of values describing the content in this event. To return the list of all possible content rating values, use the [`/contentratings`](https://developer.vimeo.com/api/reference/videos#get_content_ratings) endpoint.")

  public List<String> getContentRating() {
    return contentRating;
  }


  public void setContentRating(List<String> contentRating) {
    
    
    
    this.contentRating = contentRating;
  }


  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 dvr(Boolean dvr) {
    
    
    
    
    this.dvr = dvr;
    return this;
  }

   /**
   * Whether the DVR feature is enabled.
   * @return dvr
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the DVR feature is enabled.")

  public Boolean getDvr() {
    return dvr;
  }


  public void setDvr(Boolean dvr) {
    
    
    
    this.dvr = dvr;
  }


  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 embed(LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed embed) {
    
    
    
    
    this.embed = embed;
    return this;
  }

   /**
   * Get embed
   * @return embed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed getEmbed() {
    return embed;
  }


  public void setEmbed(LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed embed) {
    
    
    
    this.embed = embed;
  }


  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 interactionToolsSettings(LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2InteractionToolsSettings interactionToolsSettings) {
    
    
    
    
    this.interactionToolsSettings = interactionToolsSettings;
    return this;
  }

   /**
   * Get interactionToolsSettings
   * @return interactionToolsSettings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2InteractionToolsSettings getInteractionToolsSettings() {
    return interactionToolsSettings;
  }


  public void setInteractionToolsSettings(LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2InteractionToolsSettings interactionToolsSettings) {
    
    
    
    this.interactionToolsSettings = interactionToolsSettings;
  }


  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 playlistSort(PlaylistSortEnum playlistSort) {
    
    
    
    
    this.playlistSort = playlistSort;
    return this;
  }

   /**
   * The order in which the videos of the event appear within the event&#39;s playlist.  Option descriptions:  * &#x60;added_first&#x60; - The most recently added videos appear first.  * &#x60;added_last&#x60; - The most recently added videos appear last.  * &#x60;alphabetical&#x60; - The videos appear in alphabetical order.  * &#x60;arranged&#x60; - The videos appear in the order in which the user has arranged them.  * &#x60;comments&#x60; - The videos appear in order of number of comments.  * &#x60;duration&#x60; - The videos appear in order of duration.  * &#x60;likes&#x60; - The videos appear in order of number of likes.  * &#x60;newest&#x60; - The newest videos appear first.  * &#x60;oldest&#x60; - The oldest videos appear first.  * &#x60;plays&#x60; - The videos appear in order of number of plays. 
   * @return playlistSort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ADDED_FIRST", value = "The order in which the videos of the event appear within the event's playlist.  Option descriptions:  * `added_first` - The most recently added videos appear first.  * `added_last` - The most recently added videos appear last.  * `alphabetical` - The videos appear in alphabetical order.  * `arranged` - The videos appear in the order in which the user has arranged them.  * `comments` - The videos appear in order of number of comments.  * `duration` - The videos appear in order of duration.  * `likes` - The videos appear in order of number of likes.  * `newest` - The newest videos appear first.  * `oldest` - The oldest videos appear first.  * `plays` - The videos appear in order of number of plays. ")

  public PlaylistSortEnum getPlaylistSort() {
    return playlistSort;
  }


  public void setPlaylistSort(PlaylistSortEnum playlistSort) {
    
    
    
    this.playlistSort = playlistSort;
  }


  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 schedule(LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Schedule schedule) {
    
    
    
    
    this.schedule = schedule;
    return this;
  }

   /**
   * Get schedule
   * @return schedule
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Schedule getSchedule() {
    return schedule;
  }


  public void setSchedule(LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Schedule schedule) {
    
    
    
    this.schedule = schedule;
  }


  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 scheduledPlayback(Boolean scheduledPlayback) {
    
    
    
    
    this.scheduledPlayback = scheduledPlayback;
    return this;
  }

   /**
   * Whether the scheduled playback feature is enabled.
   * @return scheduledPlayback
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether the scheduled playback feature is enabled.")

  public Boolean getScheduledPlayback() {
    return scheduledPlayback;
  }


  public void setScheduledPlayback(Boolean scheduledPlayback) {
    
    
    
    this.scheduledPlayback = scheduledPlayback;
  }


  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 streamDescription(String streamDescription) {
    
    
    
    
    this.streamDescription = streamDescription;
    return this;
  }

   /**
   * The description of the next video to be streamed to the event.
   * @return streamDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "In this episode, we interview a surprise guest", value = "The description of the next video to be streamed to the event.")

  public String getStreamDescription() {
    return streamDescription;
  }


  public void setStreamDescription(String streamDescription) {
    
    
    
    this.streamDescription = streamDescription;
  }


  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 streamEmbed(LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2StreamEmbed streamEmbed) {
    
    
    
    
    this.streamEmbed = streamEmbed;
    return this;
  }

   /**
   * Get streamEmbed
   * @return streamEmbed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2StreamEmbed getStreamEmbed() {
    return streamEmbed;
  }


  public void setStreamEmbed(LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2StreamEmbed streamEmbed) {
    
    
    
    this.streamEmbed = streamEmbed;
  }


  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 streamMode(StreamModeEnum streamMode) {
    
    
    
    
    this.streamMode = streamMode;
    return this;
  }

   /**
   * The stream mode of the event.  Option descriptions:  * &#x60;live&#x60; - The stream is live playback.  * &#x60;record&#x60; - The stream is in record mode.  * &#x60;simulive&#x60; - The stream is scheduled media playback. 
   * @return streamMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "LIVE", value = "The stream mode of the event.  Option descriptions:  * `live` - The stream is live playback.  * `record` - The stream is in record mode.  * `simulive` - The stream is scheduled media playback. ")

  public StreamModeEnum getStreamMode() {
    return streamMode;
  }


  public void setStreamMode(StreamModeEnum streamMode) {
    
    
    
    this.streamMode = streamMode;
  }


  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 streamPassword(String streamPassword) {
    
    
    
    
    this.streamPassword = streamPassword;
    return this;
  }

   /**
   * The password when **stream_privacy.view** is &#x60;password&#x60;. Anyone with the password can view the videos generated by streaming to the event.
   * @return streamPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "hunter1", value = "The password when **stream_privacy.view** is `password`. Anyone with the password can view the videos generated by streaming to the event.")

  public String getStreamPassword() {
    return streamPassword;
  }


  public void setStreamPassword(String streamPassword) {
    
    
    
    this.streamPassword = streamPassword;
  }


  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 streamPrivacy(LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2StreamPrivacy streamPrivacy) {
    
    
    
    
    this.streamPrivacy = streamPrivacy;
    return this;
  }

   /**
   * Get streamPrivacy
   * @return streamPrivacy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2StreamPrivacy getStreamPrivacy() {
    return streamPrivacy;
  }


  public void setStreamPrivacy(LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2StreamPrivacy streamPrivacy) {
    
    
    
    this.streamPrivacy = streamPrivacy;
  }


  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 streamTitle(String streamTitle) {
    
    
    
    
    this.streamTitle = streamTitle;
    return this;
  }

   /**
   * The title of the next video to be streamed to the event. This parameter is required when **automatically_title_stream** is &#x60;false&#x60;.
   * @return streamTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Special Feature", value = "The title of the next video to be streamed to the event. This parameter is required when **automatically_title_stream** is `false`.")

  public String getStreamTitle() {
    return streamTitle;
  }


  public void setStreamTitle(String streamTitle) {
    
    
    
    this.streamTitle = streamTitle;
  }


  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 timeZone(String timeZone) {
    
    
    
    
    this.timeZone = timeZone;
    return this;
  }

   /**
   * The time zone used in resolving the timestamps that are included in automatically generated video titles.
   * @return timeZone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "America/New_York", value = "The time zone used in resolving the timestamps that are included in automatically generated video titles.")

  public String getTimeZone() {
    return timeZone;
  }


  public void setTimeZone(String timeZone) {
    
    
    
    this.timeZone = timeZone;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 instance itself
   */
  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 = (LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2) o;
    return Objects.equals(this.title, liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2.title) &&
        Objects.equals(this.autoCcEnabled, liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2.autoCcEnabled) &&
        Objects.equals(this.autoCcKeywords, liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2.autoCcKeywords) &&
        Objects.equals(this.autoCcLanguage, liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2.autoCcLanguage) &&
        Objects.equals(this.automaticallyTitleStream, liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2.automaticallyTitleStream) &&
        Objects.equals(this.chatEnabled, liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2.chatEnabled) &&
        Objects.equals(this.contentRating, liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2.contentRating) &&
        Objects.equals(this.dvr, liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2.dvr) &&
        Objects.equals(this.embed, liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2.embed) &&
        Objects.equals(this.interactionToolsSettings, liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2.interactionToolsSettings) &&
        Objects.equals(this.playlistSort, liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2.playlistSort) &&
        Objects.equals(this.schedule, liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2.schedule) &&
        Objects.equals(this.scheduledPlayback, liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2.scheduledPlayback) &&
        Objects.equals(this.streamDescription, liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2.streamDescription) &&
        Objects.equals(this.streamEmbed, liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2.streamEmbed) &&
        Objects.equals(this.streamMode, liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2.streamMode) &&
        Objects.equals(this.streamPassword, liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2.streamPassword) &&
        Objects.equals(this.streamPrivacy, liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2.streamPrivacy) &&
        Objects.equals(this.streamTitle, liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2.streamTitle) &&
        Objects.equals(this.timeZone, liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2.timeZone)&&
        Objects.equals(this.additionalProperties, liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, autoCcEnabled, autoCcKeywords, autoCcLanguage, automaticallyTitleStream, chatEnabled, contentRating, dvr, embed, interactionToolsSettings, playlistSort, schedule, scheduledPlayback, streamDescription, streamEmbed, streamMode, streamPassword, streamPrivacy, streamTitle, timeZone, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    autoCcEnabled: ").append(toIndentedString(autoCcEnabled)).append("\n");
    sb.append("    autoCcKeywords: ").append(toIndentedString(autoCcKeywords)).append("\n");
    sb.append("    autoCcLanguage: ").append(toIndentedString(autoCcLanguage)).append("\n");
    sb.append("    automaticallyTitleStream: ").append(toIndentedString(automaticallyTitleStream)).append("\n");
    sb.append("    chatEnabled: ").append(toIndentedString(chatEnabled)).append("\n");
    sb.append("    contentRating: ").append(toIndentedString(contentRating)).append("\n");
    sb.append("    dvr: ").append(toIndentedString(dvr)).append("\n");
    sb.append("    embed: ").append(toIndentedString(embed)).append("\n");
    sb.append("    interactionToolsSettings: ").append(toIndentedString(interactionToolsSettings)).append("\n");
    sb.append("    playlistSort: ").append(toIndentedString(playlistSort)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    scheduledPlayback: ").append(toIndentedString(scheduledPlayback)).append("\n");
    sb.append("    streamDescription: ").append(toIndentedString(streamDescription)).append("\n");
    sb.append("    streamEmbed: ").append(toIndentedString(streamEmbed)).append("\n");
    sb.append("    streamMode: ").append(toIndentedString(streamMode)).append("\n");
    sb.append("    streamPassword: ").append(toIndentedString(streamPassword)).append("\n");
    sb.append("    streamPrivacy: ").append(toIndentedString(streamPrivacy)).append("\n");
    sb.append("    streamTitle: ").append(toIndentedString(streamTitle)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("auto_cc_enabled");
    openapiFields.add("auto_cc_keywords");
    openapiFields.add("auto_cc_language");
    openapiFields.add("automatically_title_stream");
    openapiFields.add("chat_enabled");
    openapiFields.add("content_rating");
    openapiFields.add("dvr");
    openapiFields.add("embed");
    openapiFields.add("interaction_tools_settings");
    openapiFields.add("playlist_sort");
    openapiFields.add("schedule");
    openapiFields.add("scheduled_playback");
    openapiFields.add("stream_description");
    openapiFields.add("stream_embed");
    openapiFields.add("stream_mode");
    openapiFields.add("stream_password");
    openapiFields.add("stream_privacy");
    openapiFields.add("stream_title");
    openapiFields.add("time_zone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 is not found in the empty JSON string", LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("auto_cc_keywords") != null && !jsonObj.get("auto_cc_keywords").isJsonNull()) && !jsonObj.get("auto_cc_keywords").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auto_cc_keywords` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auto_cc_keywords").toString()));
      }
      if ((jsonObj.get("auto_cc_language") != null && !jsonObj.get("auto_cc_language").isJsonNull()) && !jsonObj.get("auto_cc_language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auto_cc_language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auto_cc_language").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("content_rating") != null && !jsonObj.get("content_rating").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_rating` to be an array in the JSON string but got `%s`", jsonObj.get("content_rating").toString()));
      }
      // validate the optional field `embed`
      if (jsonObj.get("embed") != null && !jsonObj.get("embed").isJsonNull()) {
        LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed.validateJsonObject(jsonObj.getAsJsonObject("embed"));
      }
      // validate the optional field `interaction_tools_settings`
      if (jsonObj.get("interaction_tools_settings") != null && !jsonObj.get("interaction_tools_settings").isJsonNull()) {
        LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2InteractionToolsSettings.validateJsonObject(jsonObj.getAsJsonObject("interaction_tools_settings"));
      }
      if ((jsonObj.get("playlist_sort") != null && !jsonObj.get("playlist_sort").isJsonNull()) && !jsonObj.get("playlist_sort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `playlist_sort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("playlist_sort").toString()));
      }
      // validate the optional field `schedule`
      if (jsonObj.get("schedule") != null && !jsonObj.get("schedule").isJsonNull()) {
        LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Schedule.validateJsonObject(jsonObj.getAsJsonObject("schedule"));
      }
      if ((jsonObj.get("stream_description") != null && !jsonObj.get("stream_description").isJsonNull()) && !jsonObj.get("stream_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stream_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stream_description").toString()));
      }
      // validate the optional field `stream_embed`
      if (jsonObj.get("stream_embed") != null && !jsonObj.get("stream_embed").isJsonNull()) {
        LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2StreamEmbed.validateJsonObject(jsonObj.getAsJsonObject("stream_embed"));
      }
      if ((jsonObj.get("stream_mode") != null && !jsonObj.get("stream_mode").isJsonNull()) && !jsonObj.get("stream_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stream_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stream_mode").toString()));
      }
      if ((jsonObj.get("stream_password") != null && !jsonObj.get("stream_password").isJsonNull()) && !jsonObj.get("stream_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stream_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stream_password").toString()));
      }
      // validate the optional field `stream_privacy`
      if (jsonObj.get("stream_privacy") != null && !jsonObj.get("stream_privacy").isJsonNull()) {
        LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2StreamPrivacy.validateJsonObject(jsonObj.getAsJsonObject("stream_privacy"));
      }
      if ((jsonObj.get("stream_title") != null && !jsonObj.get("stream_title").isJsonNull()) && !jsonObj.get("stream_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stream_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stream_title").toString()));
      }
      if ((jsonObj.get("time_zone") != null && !jsonObj.get("time_zone").isJsonNull()) && !jsonObj.get("time_zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_zone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2.class));

       return (TypeAdapter<T>) new TypeAdapter<LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2>() {
           @Override
           public void write(JsonWriter out, LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2
  * @throws IOException if the JSON string is invalid with respect to LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2
  */
  public static LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2.class);
  }

 /**
  * Convert an instance of LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

