/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AlbumEmbed;
import com.konfigthis.client.model.AlbumMetadata;
import com.konfigthis.client.model.AlbumPrivacy;
import com.konfigthis.client.model.Picture;
import com.konfigthis.client.model.User;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Album
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Album {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ALLOW_CONTINUOUS_PLAY = "allow_continuous_play";
  @SerializedName(SERIALIZED_NAME_ALLOW_CONTINUOUS_PLAY)
  private Boolean allowContinuousPlay;

  public static final String SERIALIZED_NAME_ALLOW_DOWNLOADS = "allow_downloads";
  @SerializedName(SERIALIZED_NAME_ALLOW_DOWNLOADS)
  private Boolean allowDownloads;

  public static final String SERIALIZED_NAME_ALLOW_SHARE = "allow_share";
  @SerializedName(SERIALIZED_NAME_ALLOW_SHARE)
  private Boolean allowShare;

  public static final String SERIALIZED_NAME_AUTOPLAY = "autoplay";
  @SerializedName(SERIALIZED_NAME_AUTOPLAY)
  private Boolean autoplay;

  public static final String SERIALIZED_NAME_BRAND_COLOR = "brand_color";
  @SerializedName(SERIALIZED_NAME_BRAND_COLOR)
  private String brandColor;

  public static final String SERIALIZED_NAME_CREATED_TIME = "created_time";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private String createdTime;

  public static final String SERIALIZED_NAME_CUSTOM_LOGO = "custom_logo";
  @SerializedName(SERIALIZED_NAME_CUSTOM_LOGO)
  private Picture customLogo;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  /**
   * The state of the SSL certificate that is associated with the showcase&#39;s domain.  Option descriptions:  * &#x60;null&#x60; - There is no associated HTTPS domain with this showcase.  * &#x60;0&#x60; - The new certificate has yet to be processed.  * &#x60;1&#x60; - The new certificate is being processed in the queue.  * &#x60;2&#x60; - The certificate is being processed for renewal in the queue.  * &#x60;3&#x60; - The new certificate has failed to be issued in the queue.  * &#x60;4&#x60; - The certificate has failed to be renewed in the queue.  * &#x60;5&#x60; - The certificate has been successfully issued.  * &#x60;6&#x60; - The certificate has been successfully renewed.  * &#x60;7&#x60; - The certificate has failed in the polling flow.  * &#x60;8&#x60; - The certificate has failed to be renewed in the polling flow. 
   */
  @JsonAdapter(DomainCertificateStateEnum.Adapter.class)
 public enum DomainCertificateStateEnum {
    NULL("null"),
    
    _0("0"),
    
    _1("1"),
    
    _2("2"),
    
    _3("3"),
    
    _4("4"),
    
    _5("5"),
    
    _6("6"),
    
    _7("7"),
    
    _8("8");

    private String value;

    DomainCertificateStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DomainCertificateStateEnum fromValue(String value) {
      for (DomainCertificateStateEnum b : DomainCertificateStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DomainCertificateStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DomainCertificateStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DomainCertificateStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DomainCertificateStateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DOMAIN_CERTIFICATE_STATE = "domain_certificate_state";
  @SerializedName(SERIALIZED_NAME_DOMAIN_CERTIFICATE_STATE)
  private DomainCertificateStateEnum domainCertificateState;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Double duration;

  public static final String SERIALIZED_NAME_EMBED = "embed";
  @SerializedName(SERIALIZED_NAME_EMBED)
  private AlbumEmbed embed;

  public static final String SERIALIZED_NAME_EMBED_BRAND_COLOR = "embed_brand_color";
  @SerializedName(SERIALIZED_NAME_EMBED_BRAND_COLOR)
  private Boolean embedBrandColor;

  public static final String SERIALIZED_NAME_EMBED_CUSTOM_LOGO = "embed_custom_logo";
  @SerializedName(SERIALIZED_NAME_EMBED_CUSTOM_LOGO)
  private Boolean embedCustomLogo;

  public static final String SERIALIZED_NAME_HAS_CHOSEN_THUMBNAIL = "has_chosen_thumbnail";
  @SerializedName(SERIALIZED_NAME_HAS_CHOSEN_THUMBNAIL)
  private Boolean hasChosenThumbnail;

  public static final String SERIALIZED_NAME_HIDE_FROM_VIMEO = "hide_from_vimeo";
  @SerializedName(SERIALIZED_NAME_HIDE_FROM_VIMEO)
  private Boolean hideFromVimeo;

  public static final String SERIALIZED_NAME_HIDE_NAV = "hide_nav";
  @SerializedName(SERIALIZED_NAME_HIDE_NAV)
  private Boolean hideNav;

  public static final String SERIALIZED_NAME_HIDE_UPCOMING = "hide_upcoming";
  @SerializedName(SERIALIZED_NAME_HIDE_UPCOMING)
  private Boolean hideUpcoming;

  public static final String SERIALIZED_NAME_HIDE_VIMEO_LOGO = "hide_vimeo_logo";
  @SerializedName(SERIALIZED_NAME_HIDE_VIMEO_LOGO)
  private Boolean hideVimeoLogo;

  /**
   * The type of layout for presenting the showcase.  Option descriptions:  * &#x60;grid&#x60; - The showcase videos appear in a grid.  * &#x60;player&#x60; - The showcase videos appear in the player. 
   */
  @JsonAdapter(LayoutEnum.Adapter.class)
 public enum LayoutEnum {
    GRID("grid"),
    
    PLAYER("player");

    private String value;

    LayoutEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LayoutEnum fromValue(String value) {
      for (LayoutEnum b : LayoutEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LayoutEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LayoutEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LayoutEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LayoutEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LAYOUT = "layout";
  @SerializedName(SERIALIZED_NAME_LAYOUT)
  private LayoutEnum layout;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_LOOP = "loop";
  @SerializedName(SERIALIZED_NAME_LOOP)
  private Boolean loop;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private AlbumMetadata metadata;

  public static final String SERIALIZED_NAME_MODIFIED_TIME = "modified_time";
  @SerializedName(SERIALIZED_NAME_MODIFIED_TIME)
  private String modifiedTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PICTURES = "pictures";
  @SerializedName(SERIALIZED_NAME_PICTURES)
  private Picture pictures;

  public static final String SERIALIZED_NAME_PRIVACY = "privacy";
  @SerializedName(SERIALIZED_NAME_PRIVACY)
  private AlbumPrivacy privacy;

  public static final String SERIALIZED_NAME_RESOURCE_KEY = "resource_key";
  @SerializedName(SERIALIZED_NAME_RESOURCE_KEY)
  private String resourceKey;

  public static final String SERIALIZED_NAME_REVIEW_MODE = "review_mode";
  @SerializedName(SERIALIZED_NAME_REVIEW_MODE)
  private Boolean reviewMode;

  public static final String SERIALIZED_NAME_SEO_ALLOW_INDEXED = "seo_allow_indexed";
  @SerializedName(SERIALIZED_NAME_SEO_ALLOW_INDEXED)
  private Boolean seoAllowIndexed;

  public static final String SERIALIZED_NAME_SEO_DESCRIPTION = "seo_description";
  @SerializedName(SERIALIZED_NAME_SEO_DESCRIPTION)
  private String seoDescription;

  public static final String SERIALIZED_NAME_SEO_KEYWORDS = "seo_keywords";
  @SerializedName(SERIALIZED_NAME_SEO_KEYWORDS)
  private List<String> seoKeywords = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEO_TITLE = "seo_title";
  @SerializedName(SERIALIZED_NAME_SEO_TITLE)
  private String seoTitle;

  public static final String SERIALIZED_NAME_SHARE_LINK = "share_link";
  @SerializedName(SERIALIZED_NAME_SHARE_LINK)
  private String shareLink;

  /**
   * The sort order of the showcase.  Option descriptions:  * &#x60;added_first&#x60; - Sort the showcase videos in order of those most recently added.  * &#x60;added_last&#x60; - Sort the showcase videos in order of those least recently added.  * &#x60;alphabetical&#x60; - Sort the showcase videos alphabetically.  * &#x60;arranged&#x60; - Sort the showcase videos according to their custom arrangement.  * &#x60;comments&#x60; - Sort the showcase videos by number of comments.  * &#x60;likes&#x60; - Sort the showcase videos by number of likes.  * &#x60;newest&#x60; - Sort the showcase videos in order of creation date with the newest first.  * &#x60;oldest&#x60; - Sort the showcase videos in order of creation date with the oldest first.  * &#x60;plays&#x60; - Sort the showcase videos by number of plays. 
   */
  @JsonAdapter(SortEnum.Adapter.class)
 public enum SortEnum {
    ADDED_FIRST("added_first"),
    
    ADDED_LAST("added_last"),
    
    ALPHABETICAL("alphabetical"),
    
    ARRANGED("arranged"),
    
    COMMENTS("comments"),
    
    LIKES("likes"),
    
    NEWEST("newest"),
    
    OLDEST("oldest"),
    
    PLAYS("plays");

    private String value;

    SortEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SortEnum fromValue(String value) {
      for (SortEnum b : SortEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SortEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SortEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SortEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SortEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SORT = "sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  private SortEnum sort;

  /**
   * The color theme of the showcase.  Option descriptions:  * &#x60;dark&#x60; - The showcase uses the dark theme.  * &#x60;standard&#x60; - The showcase uses the standard theme. 
   */
  @JsonAdapter(ThemeEnum.Adapter.class)
 public enum ThemeEnum {
    DARK("dark"),
    
    STANDARD("standard");

    private String value;

    ThemeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ThemeEnum fromValue(String value) {
      for (ThemeEnum b : ThemeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ThemeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ThemeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ThemeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ThemeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_THEME = "theme";
  @SerializedName(SERIALIZED_NAME_THEME)
  private ThemeEnum theme;

  public static final String SERIALIZED_NAME_UNLISTED_HASH = "unlisted_hash";
  @SerializedName(SERIALIZED_NAME_UNLISTED_HASH)
  private String unlistedHash;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_USE_CUSTOM_DOMAIN = "use_custom_domain";
  @SerializedName(SERIALIZED_NAME_USE_CUSTOM_DOMAIN)
  private Boolean useCustomDomain;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public static final String SERIALIZED_NAME_WEB_BRAND_COLOR = "web_brand_color";
  @SerializedName(SERIALIZED_NAME_WEB_BRAND_COLOR)
  private Boolean webBrandColor;

  public static final String SERIALIZED_NAME_WEB_CUSTOM_LOGO = "web_custom_logo";
  @SerializedName(SERIALIZED_NAME_WEB_CUSTOM_LOGO)
  private Boolean webCustomLogo;

  public Album() {
  }

  public Album description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A brief description of the showcase&#39;s content.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Vimeo holiday videos!", required = true, value = "A brief description of the showcase's content.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public Album allowContinuousPlay(Boolean allowContinuousPlay) {
    
    
    
    
    this.allowContinuousPlay = allowContinuousPlay;
    return this;
  }

   /**
   * Whether the showcase permits continuous play.
   * @return allowContinuousPlay
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the showcase permits continuous play.")

  public Boolean getAllowContinuousPlay() {
    return allowContinuousPlay;
  }


  public void setAllowContinuousPlay(Boolean allowContinuousPlay) {
    
    
    
    this.allowContinuousPlay = allowContinuousPlay;
  }


  public Album allowDownloads(Boolean allowDownloads) {
    
    
    
    
    this.allowDownloads = allowDownloads;
    return this;
  }

   /**
   * Whether the showcase permits downloads.
   * @return allowDownloads
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the showcase permits downloads.")

  public Boolean getAllowDownloads() {
    return allowDownloads;
  }


  public void setAllowDownloads(Boolean allowDownloads) {
    
    
    
    this.allowDownloads = allowDownloads;
  }


  public Album allowShare(Boolean allowShare) {
    
    
    
    
    this.allowShare = allowShare;
    return this;
  }

   /**
   * Whether the showcase permits sharing.
   * @return allowShare
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the showcase permits sharing.")

  public Boolean getAllowShare() {
    return allowShare;
  }


  public void setAllowShare(Boolean allowShare) {
    
    
    
    this.allowShare = allowShare;
  }


  public Album autoplay(Boolean autoplay) {
    
    
    
    
    this.autoplay = autoplay;
    return this;
  }

   /**
   * Whether to start playback of the next video in the showcase&#39;s embedded playlist immediately after the previous video finishes.
   * @return autoplay
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether to start playback of the next video in the showcase's embedded playlist immediately after the previous video finishes.")

  public Boolean getAutoplay() {
    return autoplay;
  }


  public void setAutoplay(Boolean autoplay) {
    
    
    
    this.autoplay = autoplay;
  }


  public Album brandColor(String brandColor) {
    
    
    
    
    this.brandColor = brandColor;
    return this;
  }

   /**
   * The hexadecimal code for the color of the player buttons and showcase controls.
   * @return brandColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ff66ee", required = true, value = "The hexadecimal code for the color of the player buttons and showcase controls.")

  public String getBrandColor() {
    return brandColor;
  }


  public void setBrandColor(String brandColor) {
    
    
    
    this.brandColor = brandColor;
  }


  public Album createdTime(String createdTime) {
    
    
    
    
    this.createdTime = createdTime;
    return this;
  }

   /**
   * The time in ISO 8601 format when the showcase was created.
   * @return createdTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2015-12-17T21:32:44+00:00", required = true, value = "The time in ISO 8601 format when the showcase was created.")

  public String getCreatedTime() {
    return createdTime;
  }


  public void setCreatedTime(String createdTime) {
    
    
    
    this.createdTime = createdTime;
  }


  public Album customLogo(Picture customLogo) {
    
    
    
    
    this.customLogo = customLogo;
    return this;
  }

   /**
   * The custom logo of the showcase.
   * @return customLogo
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The custom logo of the showcase.")

  public Picture getCustomLogo() {
    return customLogo;
  }


  public void setCustomLogo(Picture customLogo) {
    
    
    
    this.customLogo = customLogo;
  }


  public Album domain(String domain) {
    
    
    
    
    this.domain = domain;
    return this;
  }

   /**
   * The custom domain of the showcase.
   * @return domain
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "mycustomdomain.com", required = true, value = "The custom domain of the showcase.")

  public String getDomain() {
    return domain;
  }


  public void setDomain(String domain) {
    
    
    
    this.domain = domain;
  }


  public Album domainCertificateState(DomainCertificateStateEnum domainCertificateState) {
    
    
    
    
    this.domainCertificateState = domainCertificateState;
    return this;
  }

   /**
   * The state of the SSL certificate that is associated with the showcase&#39;s domain.  Option descriptions:  * &#x60;null&#x60; - There is no associated HTTPS domain with this showcase.  * &#x60;0&#x60; - The new certificate has yet to be processed.  * &#x60;1&#x60; - The new certificate is being processed in the queue.  * &#x60;2&#x60; - The certificate is being processed for renewal in the queue.  * &#x60;3&#x60; - The new certificate has failed to be issued in the queue.  * &#x60;4&#x60; - The certificate has failed to be renewed in the queue.  * &#x60;5&#x60; - The certificate has been successfully issued.  * &#x60;6&#x60; - The certificate has been successfully renewed.  * &#x60;7&#x60; - The certificate has failed in the polling flow.  * &#x60;8&#x60; - The certificate has failed to be renewed in the polling flow. 
   * @return domainCertificateState
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "NULL", required = true, value = "The state of the SSL certificate that is associated with the showcase's domain.  Option descriptions:  * `null` - There is no associated HTTPS domain with this showcase.  * `0` - The new certificate has yet to be processed.  * `1` - The new certificate is being processed in the queue.  * `2` - The certificate is being processed for renewal in the queue.  * `3` - The new certificate has failed to be issued in the queue.  * `4` - The certificate has failed to be renewed in the queue.  * `5` - The certificate has been successfully issued.  * `6` - The certificate has been successfully renewed.  * `7` - The certificate has failed in the polling flow.  * `8` - The certificate has failed to be renewed in the polling flow. ")

  public DomainCertificateStateEnum getDomainCertificateState() {
    return domainCertificateState;
  }


  public void setDomainCertificateState(DomainCertificateStateEnum domainCertificateState) {
    
    
    
    this.domainCertificateState = domainCertificateState;
  }


  public Album duration(Double duration) {
    
    
    
    
    this.duration = duration;
    return this;
  }

  public Album duration(Integer duration) {
    
    
    
    
    this.duration = duration.doubleValue();
    return this;
  }

   /**
   * The total duration in seconds of all the videos in the showcase.
   * @return duration
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1163", required = true, value = "The total duration in seconds of all the videos in the showcase.")

  public Double getDuration() {
    return duration;
  }


  public void setDuration(Double duration) {
    
    
    
    this.duration = duration;
  }


  public Album embed(AlbumEmbed embed) {
    
    
    
    
    this.embed = embed;
    return this;
  }

   /**
   * Get embed
   * @return embed
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public AlbumEmbed getEmbed() {
    return embed;
  }


  public void setEmbed(AlbumEmbed embed) {
    
    
    
    this.embed = embed;
  }


  public Album embedBrandColor(Boolean embedBrandColor) {
    
    
    
    
    this.embedBrandColor = embedBrandColor;
    return this;
  }

   /**
   * Whether to show the showcase&#39;s custom brand color in the player of the showcase&#39;s embedded playlist.
   * @return embedBrandColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", required = true, value = "Whether to show the showcase's custom brand color in the player of the showcase's embedded playlist.")

  public Boolean getEmbedBrandColor() {
    return embedBrandColor;
  }


  public void setEmbedBrandColor(Boolean embedBrandColor) {
    
    
    
    this.embedBrandColor = embedBrandColor;
  }


  public Album embedCustomLogo(Boolean embedCustomLogo) {
    
    
    
    
    this.embedCustomLogo = embedCustomLogo;
    return this;
  }

   /**
   * Whether to show the showcase&#39;s custom logo in the player of the showcase&#39;s embedded playlist.
   * @return embedCustomLogo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", required = true, value = "Whether to show the showcase's custom logo in the player of the showcase's embedded playlist.")

  public Boolean getEmbedCustomLogo() {
    return embedCustomLogo;
  }


  public void setEmbedCustomLogo(Boolean embedCustomLogo) {
    
    
    
    this.embedCustomLogo = embedCustomLogo;
  }


  public Album hasChosenThumbnail(Boolean hasChosenThumbnail) {
    
    
    
    
    this.hasChosenThumbnail = hasChosenThumbnail;
    return this;
  }

   /**
   * Whether the showcase has a thumbnail.
   * @return hasChosenThumbnail
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the showcase has a thumbnail.")

  public Boolean getHasChosenThumbnail() {
    return hasChosenThumbnail;
  }


  public void setHasChosenThumbnail(Boolean hasChosenThumbnail) {
    
    
    
    this.hasChosenThumbnail = hasChosenThumbnail;
  }


  public Album hideFromVimeo(Boolean hideFromVimeo) {
    
    
    
    
    this.hideFromVimeo = hideFromVimeo;
    return this;
  }

   /**
   * Whether the showcase should be hidden from Vimeo when unlisted.
   * @return hideFromVimeo
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "Whether the showcase should be hidden from Vimeo when unlisted.")

  public Boolean getHideFromVimeo() {
    return hideFromVimeo;
  }


  public void setHideFromVimeo(Boolean hideFromVimeo) {
    
    
    
    this.hideFromVimeo = hideFromVimeo;
  }


  public Album hideNav(Boolean hideNav) {
    
    
    
    
    this.hideNav = hideNav;
    return this;
  }

   /**
   * Whether to hide Vimeo navigation when displaying the showcase.
   * @return hideNav
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether to hide Vimeo navigation when displaying the showcase.")

  public Boolean getHideNav() {
    return hideNav;
  }


  public void setHideNav(Boolean hideNav) {
    
    
    
    this.hideNav = hideNav;
  }


  public Album hideUpcoming(Boolean hideUpcoming) {
    
    
    
    
    this.hideUpcoming = hideUpcoming;
    return this;
  }

   /**
   * Whether to include the upcoming event in the showcase.
   * @return hideUpcoming
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "Whether to include the upcoming event in the showcase.")

  public Boolean getHideUpcoming() {
    return hideUpcoming;
  }


  public void setHideUpcoming(Boolean hideUpcoming) {
    
    
    
    this.hideUpcoming = hideUpcoming;
  }


  public Album hideVimeoLogo(Boolean hideVimeoLogo) {
    
    
    
    
    this.hideVimeoLogo = hideVimeoLogo;
    return this;
  }

   /**
   * Whether to hide the Vimeo logo in the player of the showcase&#39;s embedded playlist.
   * @return hideVimeoLogo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", required = true, value = "Whether to hide the Vimeo logo in the player of the showcase's embedded playlist.")

  public Boolean getHideVimeoLogo() {
    return hideVimeoLogo;
  }


  public void setHideVimeoLogo(Boolean hideVimeoLogo) {
    
    
    
    this.hideVimeoLogo = hideVimeoLogo;
  }


  public Album layout(LayoutEnum layout) {
    
    
    
    
    this.layout = layout;
    return this;
  }

   /**
   * The type of layout for presenting the showcase.  Option descriptions:  * &#x60;grid&#x60; - The showcase videos appear in a grid.  * &#x60;player&#x60; - The showcase videos appear in the player. 
   * @return layout
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "GRID", required = true, value = "The type of layout for presenting the showcase.  Option descriptions:  * `grid` - The showcase videos appear in a grid.  * `player` - The showcase videos appear in the player. ")

  public LayoutEnum getLayout() {
    return layout;
  }


  public void setLayout(LayoutEnum layout) {
    
    
    
    this.layout = layout;
  }


  public Album link(String link) {
    
    
    
    
    this.link = link;
    return this;
  }

   /**
   * The URL of the showcase.
   * @return link
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://vimeo.com/showcase/Vimeo Holiday Videos!", required = true, value = "The URL of the showcase.")

  public String getLink() {
    return link;
  }


  public void setLink(String link) {
    
    
    
    this.link = link;
  }


  public Album loop(Boolean loop) {
    
    
    
    
    this.loop = loop;
    return this;
  }

   /**
   * Whether automatic playback restarts at the top of the showcase&#39;s embedded playlist after reaching the end of the last video in the playlist.
   * @return loop
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether automatic playback restarts at the top of the showcase's embedded playlist after reaching the end of the last video in the playlist.")

  public Boolean getLoop() {
    return loop;
  }


  public void setLoop(Boolean loop) {
    
    
    
    this.loop = loop;
  }


  public Album metadata(AlbumMetadata metadata) {
    
    
    
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public AlbumMetadata getMetadata() {
    return metadata;
  }


  public void setMetadata(AlbumMetadata metadata) {
    
    
    
    this.metadata = metadata;
  }


  public Album modifiedTime(String modifiedTime) {
    
    
    
    
    this.modifiedTime = modifiedTime;
    return this;
  }

   /**
   * The time in ISO 8601 format when the showcase was last modified.
   * @return modifiedTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2018-02-06T21:24:17+00:00", required = true, value = "The time in ISO 8601 format when the showcase was last modified.")

  public String getModifiedTime() {
    return modifiedTime;
  }


  public void setModifiedTime(String modifiedTime) {
    
    
    
    this.modifiedTime = modifiedTime;
  }


  public Album name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The display name of the showcase.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Vimeo Holiday Videos!", required = true, value = "The display name of the showcase.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public Album pictures(Picture pictures) {
    
    
    
    
    this.pictures = pictures;
    return this;
  }

   /**
   * The active image of the showcase.
   * @return pictures
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The active image of the showcase.")

  public Picture getPictures() {
    return pictures;
  }


  public void setPictures(Picture pictures) {
    
    
    
    this.pictures = pictures;
  }


  public Album privacy(AlbumPrivacy privacy) {
    
    
    
    
    this.privacy = privacy;
    return this;
  }

   /**
   * Get privacy
   * @return privacy
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public AlbumPrivacy getPrivacy() {
    return privacy;
  }


  public void setPrivacy(AlbumPrivacy privacy) {
    
    
    
    this.privacy = privacy;
  }


  public Album resourceKey(String resourceKey) {
    
    
    
    
    this.resourceKey = resourceKey;
    return this;
  }

   /**
   * The resource key of the showcase.
   * @return resourceKey
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "e5595241643259c658ed6c85ca82985a6341edc7", required = true, value = "The resource key of the showcase.")

  public String getResourceKey() {
    return resourceKey;
  }


  public void setResourceKey(String resourceKey) {
    
    
    
    this.resourceKey = resourceKey;
  }


  public Album reviewMode(Boolean reviewMode) {
    
    
    
    
    this.reviewMode = reviewMode;
    return this;
  }

   /**
   * Whether showcase videos use the review mode URL.
   * @return reviewMode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether showcase videos use the review mode URL.")

  public Boolean getReviewMode() {
    return reviewMode;
  }


  public void setReviewMode(Boolean reviewMode) {
    
    
    
    this.reviewMode = reviewMode;
  }


  public Album seoAllowIndexed(Boolean seoAllowIndexed) {
    
    
    
    
    this.seoAllowIndexed = seoAllowIndexed;
    return this;
  }

   /**
   * Whether search engines can index the showcase.
   * @return seoAllowIndexed
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "Whether search engines can index the showcase.")

  public Boolean getSeoAllowIndexed() {
    return seoAllowIndexed;
  }


  public void setSeoAllowIndexed(Boolean seoAllowIndexed) {
    
    
    
    this.seoAllowIndexed = seoAllowIndexed;
  }


  public Album seoDescription(String seoDescription) {
    
    
    
    
    this.seoDescription = seoDescription;
    return this;
  }

   /**
   * The SEO description of the showcase.
   * @return seoDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The SEO description of the showcase.")

  public String getSeoDescription() {
    return seoDescription;
  }


  public void setSeoDescription(String seoDescription) {
    
    
    
    this.seoDescription = seoDescription;
  }


  public Album seoKeywords(List<String> seoKeywords) {
    
    
    
    
    this.seoKeywords = seoKeywords;
    return this;
  }

  public Album addSeoKeywordsItem(String seoKeywordsItem) {
    this.seoKeywords.add(seoKeywordsItem);
    return this;
  }

   /**
   * The SEO keywords of the showcase.
   * @return seoKeywords
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The SEO keywords of the showcase.")

  public List<String> getSeoKeywords() {
    return seoKeywords;
  }


  public void setSeoKeywords(List<String> seoKeywords) {
    
    
    
    this.seoKeywords = seoKeywords;
  }


  public Album seoTitle(String seoTitle) {
    
    
    
    
    this.seoTitle = seoTitle;
    return this;
  }

   /**
   * The SEO title of the showcase.
   * @return seoTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The SEO title of the showcase.")

  public String getSeoTitle() {
    return seoTitle;
  }


  public void setSeoTitle(String seoTitle) {
    
    
    
    this.seoTitle = seoTitle;
  }


  public Album shareLink(String shareLink) {
    
    
    
    
    this.shareLink = shareLink;
    return this;
  }

   /**
   * The URL for sharing the showcase.
   * @return shareLink
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The URL for sharing the showcase.")

  public String getShareLink() {
    return shareLink;
  }


  public void setShareLink(String shareLink) {
    
    
    
    this.shareLink = shareLink;
  }


  public Album sort(SortEnum sort) {
    
    
    
    
    this.sort = sort;
    return this;
  }

   /**
   * The sort order of the showcase.  Option descriptions:  * &#x60;added_first&#x60; - Sort the showcase videos in order of those most recently added.  * &#x60;added_last&#x60; - Sort the showcase videos in order of those least recently added.  * &#x60;alphabetical&#x60; - Sort the showcase videos alphabetically.  * &#x60;arranged&#x60; - Sort the showcase videos according to their custom arrangement.  * &#x60;comments&#x60; - Sort the showcase videos by number of comments.  * &#x60;likes&#x60; - Sort the showcase videos by number of likes.  * &#x60;newest&#x60; - Sort the showcase videos in order of creation date with the newest first.  * &#x60;oldest&#x60; - Sort the showcase videos in order of creation date with the oldest first.  * &#x60;plays&#x60; - Sort the showcase videos by number of plays. 
   * @return sort
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ADDED_FIRST", required = true, value = "The sort order of the showcase.  Option descriptions:  * `added_first` - Sort the showcase videos in order of those most recently added.  * `added_last` - Sort the showcase videos in order of those least recently added.  * `alphabetical` - Sort the showcase videos alphabetically.  * `arranged` - Sort the showcase videos according to their custom arrangement.  * `comments` - Sort the showcase videos by number of comments.  * `likes` - Sort the showcase videos by number of likes.  * `newest` - Sort the showcase videos in order of creation date with the newest first.  * `oldest` - Sort the showcase videos in order of creation date with the oldest first.  * `plays` - Sort the showcase videos by number of plays. ")

  public SortEnum getSort() {
    return sort;
  }


  public void setSort(SortEnum sort) {
    
    
    
    this.sort = sort;
  }


  public Album theme(ThemeEnum theme) {
    
    
    
    
    this.theme = theme;
    return this;
  }

   /**
   * The color theme of the showcase.  Option descriptions:  * &#x60;dark&#x60; - The showcase uses the dark theme.  * &#x60;standard&#x60; - The showcase uses the standard theme. 
   * @return theme
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "DARK", required = true, value = "The color theme of the showcase.  Option descriptions:  * `dark` - The showcase uses the dark theme.  * `standard` - The showcase uses the standard theme. ")

  public ThemeEnum getTheme() {
    return theme;
  }


  public void setTheme(ThemeEnum theme) {
    
    
    
    this.theme = theme;
  }


  public Album unlistedHash(String unlistedHash) {
    
    
    
    
    this.unlistedHash = unlistedHash;
    return this;
  }

   /**
   * The unlisted hash of the showcase. Omit this hash from the showcase URL to prevent access to the showcase on Vimeo.
   * @return unlistedHash
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The unlisted hash of the showcase. Omit this hash from the showcase URL to prevent access to the showcase on Vimeo.")

  public String getUnlistedHash() {
    return unlistedHash;
  }


  public void setUnlistedHash(String unlistedHash) {
    
    
    
    this.unlistedHash = unlistedHash;
  }


  public Album uri(String uri) {
    
    
    
    
    this.uri = uri;
    return this;
  }

   /**
   * The URI of the showcase.
   * @return uri
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "/users/152184/albums/3706071", required = true, value = "The URI of the showcase.")

  public String getUri() {
    return uri;
  }


  public void setUri(String uri) {
    
    
    
    this.uri = uri;
  }


  public Album url(String url) {
    
    
    
    
    this.url = url;
    return this;
  }

   /**
   * The custom Vimeo URL of the showcase.
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "my-custom-url", required = true, value = "The custom Vimeo URL of the showcase.")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    
    
    
    this.url = url;
  }


  public Album useCustomDomain(Boolean useCustomDomain) {
    
    
    
    
    this.useCustomDomain = useCustomDomain;
    return this;
  }

   /**
   * Whether the showcase uses a custom domain.
   * @return useCustomDomain
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "Whether the showcase uses a custom domain.")

  public Boolean getUseCustomDomain() {
    return useCustomDomain;
  }


  public void setUseCustomDomain(Boolean useCustomDomain) {
    
    
    
    this.useCustomDomain = useCustomDomain;
  }


  public Album user(User user) {
    
    
    
    
    this.user = user;
    return this;
  }

   /**
   * The owner of the showcase.
   * @return user
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The owner of the showcase.")

  public User getUser() {
    return user;
  }


  public void setUser(User user) {
    
    
    
    this.user = user;
  }


  public Album webBrandColor(Boolean webBrandColor) {
    
    
    
    
    this.webBrandColor = webBrandColor;
    return this;
  }

   /**
   * Whether to use the showcase&#39;s brand color in the web layout.
   * @return webBrandColor
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether to use the showcase's brand color in the web layout.")

  public Boolean getWebBrandColor() {
    return webBrandColor;
  }


  public void setWebBrandColor(Boolean webBrandColor) {
    
    
    
    this.webBrandColor = webBrandColor;
  }


  public Album webCustomLogo(Boolean webCustomLogo) {
    
    
    
    
    this.webCustomLogo = webCustomLogo;
    return this;
  }

   /**
   * Whether to use the showcase&#39;s custom logo in the web layout.
   * @return webCustomLogo
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether to use the showcase's custom logo in the web layout.")

  public Boolean getWebCustomLogo() {
    return webCustomLogo;
  }


  public void setWebCustomLogo(Boolean webCustomLogo) {
    
    
    
    this.webCustomLogo = webCustomLogo;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Album instance itself
   */
  public Album putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Album album = (Album) o;
    return Objects.equals(this.description, album.description) &&
        Objects.equals(this.allowContinuousPlay, album.allowContinuousPlay) &&
        Objects.equals(this.allowDownloads, album.allowDownloads) &&
        Objects.equals(this.allowShare, album.allowShare) &&
        Objects.equals(this.autoplay, album.autoplay) &&
        Objects.equals(this.brandColor, album.brandColor) &&
        Objects.equals(this.createdTime, album.createdTime) &&
        Objects.equals(this.customLogo, album.customLogo) &&
        Objects.equals(this.domain, album.domain) &&
        Objects.equals(this.domainCertificateState, album.domainCertificateState) &&
        Objects.equals(this.duration, album.duration) &&
        Objects.equals(this.embed, album.embed) &&
        Objects.equals(this.embedBrandColor, album.embedBrandColor) &&
        Objects.equals(this.embedCustomLogo, album.embedCustomLogo) &&
        Objects.equals(this.hasChosenThumbnail, album.hasChosenThumbnail) &&
        Objects.equals(this.hideFromVimeo, album.hideFromVimeo) &&
        Objects.equals(this.hideNav, album.hideNav) &&
        Objects.equals(this.hideUpcoming, album.hideUpcoming) &&
        Objects.equals(this.hideVimeoLogo, album.hideVimeoLogo) &&
        Objects.equals(this.layout, album.layout) &&
        Objects.equals(this.link, album.link) &&
        Objects.equals(this.loop, album.loop) &&
        Objects.equals(this.metadata, album.metadata) &&
        Objects.equals(this.modifiedTime, album.modifiedTime) &&
        Objects.equals(this.name, album.name) &&
        Objects.equals(this.pictures, album.pictures) &&
        Objects.equals(this.privacy, album.privacy) &&
        Objects.equals(this.resourceKey, album.resourceKey) &&
        Objects.equals(this.reviewMode, album.reviewMode) &&
        Objects.equals(this.seoAllowIndexed, album.seoAllowIndexed) &&
        Objects.equals(this.seoDescription, album.seoDescription) &&
        Objects.equals(this.seoKeywords, album.seoKeywords) &&
        Objects.equals(this.seoTitle, album.seoTitle) &&
        Objects.equals(this.shareLink, album.shareLink) &&
        Objects.equals(this.sort, album.sort) &&
        Objects.equals(this.theme, album.theme) &&
        Objects.equals(this.unlistedHash, album.unlistedHash) &&
        Objects.equals(this.uri, album.uri) &&
        Objects.equals(this.url, album.url) &&
        Objects.equals(this.useCustomDomain, album.useCustomDomain) &&
        Objects.equals(this.user, album.user) &&
        Objects.equals(this.webBrandColor, album.webBrandColor) &&
        Objects.equals(this.webCustomLogo, album.webCustomLogo)&&
        Objects.equals(this.additionalProperties, album.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, allowContinuousPlay, allowDownloads, allowShare, autoplay, brandColor, createdTime, customLogo, domain, domainCertificateState, duration, embed, embedBrandColor, embedCustomLogo, hasChosenThumbnail, hideFromVimeo, hideNav, hideUpcoming, hideVimeoLogo, layout, link, loop, metadata, modifiedTime, name, pictures, privacy, resourceKey, reviewMode, seoAllowIndexed, seoDescription, seoKeywords, seoTitle, shareLink, sort, theme, unlistedHash, uri, url, useCustomDomain, user, webBrandColor, webCustomLogo, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Album {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    allowContinuousPlay: ").append(toIndentedString(allowContinuousPlay)).append("\n");
    sb.append("    allowDownloads: ").append(toIndentedString(allowDownloads)).append("\n");
    sb.append("    allowShare: ").append(toIndentedString(allowShare)).append("\n");
    sb.append("    autoplay: ").append(toIndentedString(autoplay)).append("\n");
    sb.append("    brandColor: ").append(toIndentedString(brandColor)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    customLogo: ").append(toIndentedString(customLogo)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    domainCertificateState: ").append(toIndentedString(domainCertificateState)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    embed: ").append(toIndentedString(embed)).append("\n");
    sb.append("    embedBrandColor: ").append(toIndentedString(embedBrandColor)).append("\n");
    sb.append("    embedCustomLogo: ").append(toIndentedString(embedCustomLogo)).append("\n");
    sb.append("    hasChosenThumbnail: ").append(toIndentedString(hasChosenThumbnail)).append("\n");
    sb.append("    hideFromVimeo: ").append(toIndentedString(hideFromVimeo)).append("\n");
    sb.append("    hideNav: ").append(toIndentedString(hideNav)).append("\n");
    sb.append("    hideUpcoming: ").append(toIndentedString(hideUpcoming)).append("\n");
    sb.append("    hideVimeoLogo: ").append(toIndentedString(hideVimeoLogo)).append("\n");
    sb.append("    layout: ").append(toIndentedString(layout)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    loop: ").append(toIndentedString(loop)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    modifiedTime: ").append(toIndentedString(modifiedTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pictures: ").append(toIndentedString(pictures)).append("\n");
    sb.append("    privacy: ").append(toIndentedString(privacy)).append("\n");
    sb.append("    resourceKey: ").append(toIndentedString(resourceKey)).append("\n");
    sb.append("    reviewMode: ").append(toIndentedString(reviewMode)).append("\n");
    sb.append("    seoAllowIndexed: ").append(toIndentedString(seoAllowIndexed)).append("\n");
    sb.append("    seoDescription: ").append(toIndentedString(seoDescription)).append("\n");
    sb.append("    seoKeywords: ").append(toIndentedString(seoKeywords)).append("\n");
    sb.append("    seoTitle: ").append(toIndentedString(seoTitle)).append("\n");
    sb.append("    shareLink: ").append(toIndentedString(shareLink)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    theme: ").append(toIndentedString(theme)).append("\n");
    sb.append("    unlistedHash: ").append(toIndentedString(unlistedHash)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    useCustomDomain: ").append(toIndentedString(useCustomDomain)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    webBrandColor: ").append(toIndentedString(webBrandColor)).append("\n");
    sb.append("    webCustomLogo: ").append(toIndentedString(webCustomLogo)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("allow_continuous_play");
    openapiFields.add("allow_downloads");
    openapiFields.add("allow_share");
    openapiFields.add("autoplay");
    openapiFields.add("brand_color");
    openapiFields.add("created_time");
    openapiFields.add("custom_logo");
    openapiFields.add("domain");
    openapiFields.add("domain_certificate_state");
    openapiFields.add("duration");
    openapiFields.add("embed");
    openapiFields.add("embed_brand_color");
    openapiFields.add("embed_custom_logo");
    openapiFields.add("has_chosen_thumbnail");
    openapiFields.add("hide_from_vimeo");
    openapiFields.add("hide_nav");
    openapiFields.add("hide_upcoming");
    openapiFields.add("hide_vimeo_logo");
    openapiFields.add("layout");
    openapiFields.add("link");
    openapiFields.add("loop");
    openapiFields.add("metadata");
    openapiFields.add("modified_time");
    openapiFields.add("name");
    openapiFields.add("pictures");
    openapiFields.add("privacy");
    openapiFields.add("resource_key");
    openapiFields.add("review_mode");
    openapiFields.add("seo_allow_indexed");
    openapiFields.add("seo_description");
    openapiFields.add("seo_keywords");
    openapiFields.add("seo_title");
    openapiFields.add("share_link");
    openapiFields.add("sort");
    openapiFields.add("theme");
    openapiFields.add("unlisted_hash");
    openapiFields.add("uri");
    openapiFields.add("url");
    openapiFields.add("use_custom_domain");
    openapiFields.add("user");
    openapiFields.add("web_brand_color");
    openapiFields.add("web_custom_logo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("allow_continuous_play");
    openapiRequiredFields.add("allow_downloads");
    openapiRequiredFields.add("allow_share");
    openapiRequiredFields.add("autoplay");
    openapiRequiredFields.add("brand_color");
    openapiRequiredFields.add("created_time");
    openapiRequiredFields.add("custom_logo");
    openapiRequiredFields.add("domain");
    openapiRequiredFields.add("domain_certificate_state");
    openapiRequiredFields.add("duration");
    openapiRequiredFields.add("embed");
    openapiRequiredFields.add("embed_brand_color");
    openapiRequiredFields.add("embed_custom_logo");
    openapiRequiredFields.add("has_chosen_thumbnail");
    openapiRequiredFields.add("hide_from_vimeo");
    openapiRequiredFields.add("hide_nav");
    openapiRequiredFields.add("hide_upcoming");
    openapiRequiredFields.add("hide_vimeo_logo");
    openapiRequiredFields.add("layout");
    openapiRequiredFields.add("link");
    openapiRequiredFields.add("loop");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("modified_time");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("pictures");
    openapiRequiredFields.add("privacy");
    openapiRequiredFields.add("resource_key");
    openapiRequiredFields.add("review_mode");
    openapiRequiredFields.add("seo_allow_indexed");
    openapiRequiredFields.add("seo_description");
    openapiRequiredFields.add("seo_keywords");
    openapiRequiredFields.add("seo_title");
    openapiRequiredFields.add("share_link");
    openapiRequiredFields.add("sort");
    openapiRequiredFields.add("theme");
    openapiRequiredFields.add("unlisted_hash");
    openapiRequiredFields.add("uri");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("use_custom_domain");
    openapiRequiredFields.add("user");
    openapiRequiredFields.add("web_brand_color");
    openapiRequiredFields.add("web_custom_logo");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Album
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Album.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Album is not found in the empty JSON string", Album.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Album.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("description").isJsonNull() && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("brand_color").isJsonNull() && !jsonObj.get("brand_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand_color").toString()));
      }
      if (!jsonObj.get("created_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_time").toString()));
      }
      // validate the required field `custom_logo`
      Picture.validateJsonObject(jsonObj.getAsJsonObject("custom_logo"));
      if (!jsonObj.get("domain").isJsonNull() && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if (!jsonObj.get("domain_certificate_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain_certificate_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain_certificate_state").toString()));
      }
      // validate the required field `embed`
      AlbumEmbed.validateJsonObject(jsonObj.getAsJsonObject("embed"));
      if (!jsonObj.get("layout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `layout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("layout").toString()));
      }
      if (!jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      // validate the required field `metadata`
      AlbumMetadata.validateJsonObject(jsonObj.getAsJsonObject("metadata"));
      if (!jsonObj.get("modified_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modified_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modified_time").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `pictures`
      Picture.validateJsonObject(jsonObj.getAsJsonObject("pictures"));
      // validate the required field `privacy`
      AlbumPrivacy.validateJsonObject(jsonObj.getAsJsonObject("privacy"));
      if (!jsonObj.get("resource_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_key").toString()));
      }
      if (!jsonObj.get("seo_description").isJsonNull() && !jsonObj.get("seo_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seo_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seo_description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("seo_keywords") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("seo_keywords").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `seo_keywords` to be an array in the JSON string but got `%s`", jsonObj.get("seo_keywords").toString()));
      }
      if (!jsonObj.get("seo_title").isJsonNull() && !jsonObj.get("seo_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seo_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seo_title").toString()));
      }
      if (!jsonObj.get("share_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `share_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("share_link").toString()));
      }
      if (!jsonObj.get("sort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sort").toString()));
      }
      if (!jsonObj.get("theme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `theme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("theme").toString()));
      }
      if (!jsonObj.get("unlisted_hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unlisted_hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unlisted_hash").toString()));
      }
      if (!jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      if (!jsonObj.get("url").isJsonNull() && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // validate the required field `user`
      User.validateJsonObject(jsonObj.getAsJsonObject("user"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Album.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Album' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Album> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Album.class));

       return (TypeAdapter<T>) new TypeAdapter<Album>() {
           @Override
           public void write(JsonWriter out, Album value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Album read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Album instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Album given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Album
  * @throws IOException if the JSON string is invalid with respect to Album
  */
  public static Album fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Album.class);
  }

 /**
  * Convert an instance of Album to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

