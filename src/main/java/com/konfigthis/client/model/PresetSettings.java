/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.PresetSettingsButtons;
import com.konfigthis.client.model.PresetSettingsColors;
import com.konfigthis.client.model.PresetSettingsLogos;
import com.konfigthis.client.model.PresetSettingsOutro;
import com.konfigthis.client.model.PresetSettingsPlayButton;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The contents of the preset group.
 */
@ApiModel(description = "The contents of the preset group.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PresetSettings {
  /**
   * How the embeddable player handles the video title.  Option descriptions:  * &#x60;hide&#x60; - The title is hidden.  * &#x60;show&#x60; - The title is shown.  * &#x60;user&#x60; - The title can be toggled to &#x60;show&#x60; or &#x60;hide&#x60; by the user. 
   */
  @JsonAdapter(TitleEnum.Adapter.class)
 public enum TitleEnum {
    HIDE("hide"),
    
    SHOW("show"),
    
    USER("user");

    private String value;

    TitleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TitleEnum fromValue(String value) {
      for (TitleEnum b : TitleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TitleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TitleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TitleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TitleEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private TitleEnum title;

  public static final String SERIALIZED_NAME_AIRPLAY = "airplay";
  @SerializedName(SERIALIZED_NAME_AIRPLAY)
  private Boolean airplay;

  public static final String SERIALIZED_NAME_AUDIO_TRACKS = "audio_tracks";
  @SerializedName(SERIALIZED_NAME_AUDIO_TRACKS)
  private Boolean audioTracks;

  public static final String SERIALIZED_NAME_BUTTONS = "buttons";
  @SerializedName(SERIALIZED_NAME_BUTTONS)
  private PresetSettingsButtons buttons;

  /**
   * How the embeddable player handles the video owner&#39;s information.  Option descriptions:  * &#x60;hide&#x60; - The owner&#39;s information is hidden.  * &#x60;show&#x60; - The owner&#39;s information is shown.  * &#x60;user&#x60; - The owner&#39;s information can be toggled to &#x60;show&#x60; or &#x60;hide&#x60; by the user. 
   */
  @JsonAdapter(BylineEnum.Adapter.class)
 public enum BylineEnum {
    HIDE("hide"),
    
    SHOW("show"),
    
    USER("user");

    private String value;

    BylineEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BylineEnum fromValue(String value) {
      for (BylineEnum b : BylineEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BylineEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BylineEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BylineEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BylineEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BYLINE = "byline";
  @SerializedName(SERIALIZED_NAME_BYLINE)
  private BylineEnum byline;

  public static final String SERIALIZED_NAME_CHAPTERS = "chapters";
  @SerializedName(SERIALIZED_NAME_CHAPTERS)
  private Boolean chapters;

  public static final String SERIALIZED_NAME_CHROMECAST = "chromecast";
  @SerializedName(SERIALIZED_NAME_CHROMECAST)
  private Boolean chromecast;

  public static final String SERIALIZED_NAME_CLOSED_CAPTIONS = "closed_captions";
  @SerializedName(SERIALIZED_NAME_CLOSED_CAPTIONS)
  private Boolean closedCaptions;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_COLORS = "colors";
  @SerializedName(SERIALIZED_NAME_COLORS)
  private PresetSettingsColors colors;

  public static final String SERIALIZED_NAME_LOGOS = "logos";
  @SerializedName(SERIALIZED_NAME_LOGOS)
  private PresetSettingsLogos logos;

  public static final String SERIALIZED_NAME_OUTRO = "outro";
  @SerializedName(SERIALIZED_NAME_OUTRO)
  private PresetSettingsOutro outro;

  public static final String SERIALIZED_NAME_PIP = "pip";
  @SerializedName(SERIALIZED_NAME_PIP)
  private Boolean pip;

  public static final String SERIALIZED_NAME_PLAY_BUTTON = "play_button";
  @SerializedName(SERIALIZED_NAME_PLAY_BUTTON)
  private PresetSettingsPlayButton playButton;

  public static final String SERIALIZED_NAME_PLAYBAR = "playbar";
  @SerializedName(SERIALIZED_NAME_PLAYBAR)
  private Boolean playbar;

  /**
   * How the embeddable player handles the video owner&#39;s portrait.  Option descriptions:  * &#x60;hide&#x60; - The owner&#39;s portrait is hidden.  * &#x60;show&#x60; - The owner&#39;s portrait is shown.  * &#x60;user&#x60; - The owner&#39;s portrait can be toggled to &#x60;show&#x60; or &#x60;hide&#x60; by the user. 
   */
  @JsonAdapter(PortraitEnum.Adapter.class)
 public enum PortraitEnum {
    HIDE("hide"),
    
    SHOW("show"),
    
    USER("user");

    private String value;

    PortraitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PortraitEnum fromValue(String value) {
      for (PortraitEnum b : PortraitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PortraitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PortraitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PortraitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PortraitEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PORTRAIT = "portrait";
  @SerializedName(SERIALIZED_NAME_PORTRAIT)
  private PortraitEnum portrait;

  public static final String SERIALIZED_NAME_QUALITY_SELECTOR = "quality_selector";
  @SerializedName(SERIALIZED_NAME_QUALITY_SELECTOR)
  private Boolean qualitySelector;

  public static final String SERIALIZED_NAME_SPEED = "speed";
  @SerializedName(SERIALIZED_NAME_SPEED)
  private Boolean speed;

  public static final String SERIALIZED_NAME_TRANSCRIPT = "transcript";
  @SerializedName(SERIALIZED_NAME_TRANSCRIPT)
  private Boolean transcript;

  public static final String SERIALIZED_NAME_VOLUME = "volume";
  @SerializedName(SERIALIZED_NAME_VOLUME)
  private Boolean volume;

  public PresetSettings() {
  }

  public PresetSettings title(TitleEnum title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * How the embeddable player handles the video title.  Option descriptions:  * &#x60;hide&#x60; - The title is hidden.  * &#x60;show&#x60; - The title is shown.  * &#x60;user&#x60; - The title can be toggled to &#x60;show&#x60; or &#x60;hide&#x60; by the user. 
   * @return title
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "HIDE", required = true, value = "How the embeddable player handles the video title.  Option descriptions:  * `hide` - The title is hidden.  * `show` - The title is shown.  * `user` - The title can be toggled to `show` or `hide` by the user. ")

  public TitleEnum getTitle() {
    return title;
  }


  public void setTitle(TitleEnum title) {
    
    
    
    this.title = title;
  }


  public PresetSettings airplay(Boolean airplay) {
    
    
    
    
    this.airplay = airplay;
    return this;
  }

   /**
   * Whether AirPlay is enabled in the embeddable player.
   * @return airplay
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether AirPlay is enabled in the embeddable player.")

  public Boolean getAirplay() {
    return airplay;
  }


  public void setAirplay(Boolean airplay) {
    
    
    
    this.airplay = airplay;
  }


  public PresetSettings audioTracks(Boolean audioTracks) {
    
    
    
    
    this.audioTracks = audioTracks;
    return this;
  }

   /**
   * Whether multiple audio tracks can appear in the embeddable player.
   * @return audioTracks
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether multiple audio tracks can appear in the embeddable player.")

  public Boolean getAudioTracks() {
    return audioTracks;
  }


  public void setAudioTracks(Boolean audioTracks) {
    
    
    
    this.audioTracks = audioTracks;
  }


  public PresetSettings buttons(PresetSettingsButtons buttons) {
    
    
    
    
    this.buttons = buttons;
    return this;
  }

   /**
   * Get buttons
   * @return buttons
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PresetSettingsButtons getButtons() {
    return buttons;
  }


  public void setButtons(PresetSettingsButtons buttons) {
    
    
    
    this.buttons = buttons;
  }


  public PresetSettings byline(BylineEnum byline) {
    
    
    
    
    this.byline = byline;
    return this;
  }

   /**
   * How the embeddable player handles the video owner&#39;s information.  Option descriptions:  * &#x60;hide&#x60; - The owner&#39;s information is hidden.  * &#x60;show&#x60; - The owner&#39;s information is shown.  * &#x60;user&#x60; - The owner&#39;s information can be toggled to &#x60;show&#x60; or &#x60;hide&#x60; by the user. 
   * @return byline
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "HIDE", required = true, value = "How the embeddable player handles the video owner's information.  Option descriptions:  * `hide` - The owner's information is hidden.  * `show` - The owner's information is shown.  * `user` - The owner's information can be toggled to `show` or `hide` by the user. ")

  public BylineEnum getByline() {
    return byline;
  }


  public void setByline(BylineEnum byline) {
    
    
    
    this.byline = byline;
  }


  public PresetSettings chapters(Boolean chapters) {
    
    
    
    
    this.chapters = chapters;
    return this;
  }

   /**
   * Whether chapters are enabled in the embeddable player.
   * @return chapters
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether chapters are enabled in the embeddable player.")

  public Boolean getChapters() {
    return chapters;
  }


  public void setChapters(Boolean chapters) {
    
    
    
    this.chapters = chapters;
  }


  public PresetSettings chromecast(Boolean chromecast) {
    
    
    
    
    this.chromecast = chromecast;
    return this;
  }

   /**
   * Whether the Chromecast button appears in the embeddable player.
   * @return chromecast
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the Chromecast button appears in the embeddable player.")

  public Boolean getChromecast() {
    return chromecast;
  }


  public void setChromecast(Boolean chromecast) {
    
    
    
    this.chromecast = chromecast;
  }


  public PresetSettings closedCaptions(Boolean closedCaptions) {
    
    
    
    
    this.closedCaptions = closedCaptions;
    return this;
  }

   /**
   * Whether closed captions are enabled in the embeddable player.
   * @return closedCaptions
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether closed captions are enabled in the embeddable player.")

  public Boolean getClosedCaptions() {
    return closedCaptions;
  }


  public void setClosedCaptions(Boolean closedCaptions) {
    
    
    
    this.closedCaptions = closedCaptions;
  }


  public PresetSettings color(String color) {
    
    
    
    
    this.color = color;
    return this;
  }

   /**
   * The first player color, which controls the color of the progress bar, buttons, and more.
   * @return color
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "#0a0808", required = true, value = "The first player color, which controls the color of the progress bar, buttons, and more.")

  public String getColor() {
    return color;
  }


  public void setColor(String color) {
    
    
    
    this.color = color;
  }


  public PresetSettings colors(PresetSettingsColors colors) {
    
    
    
    
    this.colors = colors;
    return this;
  }

   /**
   * Get colors
   * @return colors
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PresetSettingsColors getColors() {
    return colors;
  }


  public void setColors(PresetSettingsColors colors) {
    
    
    
    this.colors = colors;
  }


  public PresetSettings logos(PresetSettingsLogos logos) {
    
    
    
    
    this.logos = logos;
    return this;
  }

   /**
   * Get logos
   * @return logos
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PresetSettingsLogos getLogos() {
    return logos;
  }


  public void setLogos(PresetSettingsLogos logos) {
    
    
    
    this.logos = logos;
  }


  public PresetSettings outro(PresetSettingsOutro outro) {
    
    
    
    
    this.outro = outro;
    return this;
  }

   /**
   * Get outro
   * @return outro
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PresetSettingsOutro getOutro() {
    return outro;
  }


  public void setOutro(PresetSettingsOutro outro) {
    
    
    
    this.outro = outro;
  }


  public PresetSettings pip(Boolean pip) {
    
    
    
    
    this.pip = pip;
    return this;
  }

   /**
   * Whether picture-in-picture is enabled and the button appears in the embeddable player.
   * @return pip
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether picture-in-picture is enabled and the button appears in the embeddable player.")

  public Boolean getPip() {
    return pip;
  }


  public void setPip(Boolean pip) {
    
    
    
    this.pip = pip;
  }


  public PresetSettings playButton(PresetSettingsPlayButton playButton) {
    
    
    
    
    this.playButton = playButton;
    return this;
  }

   /**
   * Get playButton
   * @return playButton
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PresetSettingsPlayButton getPlayButton() {
    return playButton;
  }


  public void setPlayButton(PresetSettingsPlayButton playButton) {
    
    
    
    this.playButton = playButton;
  }


  public PresetSettings playbar(Boolean playbar) {
    
    
    
    
    this.playbar = playbar;
    return this;
  }

   /**
   * Whether the playbar appears in the embeddable player.
   * @return playbar
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the playbar appears in the embeddable player.")

  public Boolean getPlaybar() {
    return playbar;
  }


  public void setPlaybar(Boolean playbar) {
    
    
    
    this.playbar = playbar;
  }


  public PresetSettings portrait(PortraitEnum portrait) {
    
    
    
    
    this.portrait = portrait;
    return this;
  }

   /**
   * How the embeddable player handles the video owner&#39;s portrait.  Option descriptions:  * &#x60;hide&#x60; - The owner&#39;s portrait is hidden.  * &#x60;show&#x60; - The owner&#39;s portrait is shown.  * &#x60;user&#x60; - The owner&#39;s portrait can be toggled to &#x60;show&#x60; or &#x60;hide&#x60; by the user. 
   * @return portrait
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "HIDE", required = true, value = "How the embeddable player handles the video owner's portrait.  Option descriptions:  * `hide` - The owner's portrait is hidden.  * `show` - The owner's portrait is shown.  * `user` - The owner's portrait can be toggled to `show` or `hide` by the user. ")

  public PortraitEnum getPortrait() {
    return portrait;
  }


  public void setPortrait(PortraitEnum portrait) {
    
    
    
    this.portrait = portrait;
  }


  public PresetSettings qualitySelector(Boolean qualitySelector) {
    
    
    
    
    this.qualitySelector = qualitySelector;
    return this;
  }

   /**
   * Whether to show the quality selector in the embeddable player.
   * @return qualitySelector
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether to show the quality selector in the embeddable player.")

  public Boolean getQualitySelector() {
    return qualitySelector;
  }


  public void setQualitySelector(Boolean qualitySelector) {
    
    
    
    this.qualitySelector = qualitySelector;
  }


  public PresetSettings speed(Boolean speed) {
    
    
    
    
    this.speed = speed;
    return this;
  }

   /**
   * Whether the speed controls appear in the embeddable player.
   * @return speed
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the speed controls appear in the embeddable player.")

  public Boolean getSpeed() {
    return speed;
  }


  public void setSpeed(Boolean speed) {
    
    
    
    this.speed = speed;
  }


  public PresetSettings transcript(Boolean transcript) {
    
    
    
    
    this.transcript = transcript;
    return this;
  }

   /**
   * Whether the transcript controls appear in the embeddable player.
   * @return transcript
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the transcript controls appear in the embeddable player.")

  public Boolean getTranscript() {
    return transcript;
  }


  public void setTranscript(Boolean transcript) {
    
    
    
    this.transcript = transcript;
  }


  public PresetSettings volume(Boolean volume) {
    
    
    
    
    this.volume = volume;
    return this;
  }

   /**
   * Whether the volume controls appear in the embeddable player.
   * @return volume
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the volume controls appear in the embeddable player.")

  public Boolean getVolume() {
    return volume;
  }


  public void setVolume(Boolean volume) {
    
    
    
    this.volume = volume;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PresetSettings instance itself
   */
  public PresetSettings putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PresetSettings presetSettings = (PresetSettings) o;
    return Objects.equals(this.title, presetSettings.title) &&
        Objects.equals(this.airplay, presetSettings.airplay) &&
        Objects.equals(this.audioTracks, presetSettings.audioTracks) &&
        Objects.equals(this.buttons, presetSettings.buttons) &&
        Objects.equals(this.byline, presetSettings.byline) &&
        Objects.equals(this.chapters, presetSettings.chapters) &&
        Objects.equals(this.chromecast, presetSettings.chromecast) &&
        Objects.equals(this.closedCaptions, presetSettings.closedCaptions) &&
        Objects.equals(this.color, presetSettings.color) &&
        Objects.equals(this.colors, presetSettings.colors) &&
        Objects.equals(this.logos, presetSettings.logos) &&
        Objects.equals(this.outro, presetSettings.outro) &&
        Objects.equals(this.pip, presetSettings.pip) &&
        Objects.equals(this.playButton, presetSettings.playButton) &&
        Objects.equals(this.playbar, presetSettings.playbar) &&
        Objects.equals(this.portrait, presetSettings.portrait) &&
        Objects.equals(this.qualitySelector, presetSettings.qualitySelector) &&
        Objects.equals(this.speed, presetSettings.speed) &&
        Objects.equals(this.transcript, presetSettings.transcript) &&
        Objects.equals(this.volume, presetSettings.volume)&&
        Objects.equals(this.additionalProperties, presetSettings.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, airplay, audioTracks, buttons, byline, chapters, chromecast, closedCaptions, color, colors, logos, outro, pip, playButton, playbar, portrait, qualitySelector, speed, transcript, volume, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PresetSettings {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    airplay: ").append(toIndentedString(airplay)).append("\n");
    sb.append("    audioTracks: ").append(toIndentedString(audioTracks)).append("\n");
    sb.append("    buttons: ").append(toIndentedString(buttons)).append("\n");
    sb.append("    byline: ").append(toIndentedString(byline)).append("\n");
    sb.append("    chapters: ").append(toIndentedString(chapters)).append("\n");
    sb.append("    chromecast: ").append(toIndentedString(chromecast)).append("\n");
    sb.append("    closedCaptions: ").append(toIndentedString(closedCaptions)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    colors: ").append(toIndentedString(colors)).append("\n");
    sb.append("    logos: ").append(toIndentedString(logos)).append("\n");
    sb.append("    outro: ").append(toIndentedString(outro)).append("\n");
    sb.append("    pip: ").append(toIndentedString(pip)).append("\n");
    sb.append("    playButton: ").append(toIndentedString(playButton)).append("\n");
    sb.append("    playbar: ").append(toIndentedString(playbar)).append("\n");
    sb.append("    portrait: ").append(toIndentedString(portrait)).append("\n");
    sb.append("    qualitySelector: ").append(toIndentedString(qualitySelector)).append("\n");
    sb.append("    speed: ").append(toIndentedString(speed)).append("\n");
    sb.append("    transcript: ").append(toIndentedString(transcript)).append("\n");
    sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("airplay");
    openapiFields.add("audio_tracks");
    openapiFields.add("buttons");
    openapiFields.add("byline");
    openapiFields.add("chapters");
    openapiFields.add("chromecast");
    openapiFields.add("closed_captions");
    openapiFields.add("color");
    openapiFields.add("colors");
    openapiFields.add("logos");
    openapiFields.add("outro");
    openapiFields.add("pip");
    openapiFields.add("play_button");
    openapiFields.add("playbar");
    openapiFields.add("portrait");
    openapiFields.add("quality_selector");
    openapiFields.add("speed");
    openapiFields.add("transcript");
    openapiFields.add("volume");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("airplay");
    openapiRequiredFields.add("audio_tracks");
    openapiRequiredFields.add("buttons");
    openapiRequiredFields.add("byline");
    openapiRequiredFields.add("chapters");
    openapiRequiredFields.add("chromecast");
    openapiRequiredFields.add("closed_captions");
    openapiRequiredFields.add("color");
    openapiRequiredFields.add("colors");
    openapiRequiredFields.add("logos");
    openapiRequiredFields.add("outro");
    openapiRequiredFields.add("pip");
    openapiRequiredFields.add("play_button");
    openapiRequiredFields.add("playbar");
    openapiRequiredFields.add("portrait");
    openapiRequiredFields.add("quality_selector");
    openapiRequiredFields.add("speed");
    openapiRequiredFields.add("transcript");
    openapiRequiredFields.add("volume");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PresetSettings
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PresetSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PresetSettings is not found in the empty JSON string", PresetSettings.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PresetSettings.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // validate the required field `buttons`
      PresetSettingsButtons.validateJsonObject(jsonObj.getAsJsonObject("buttons"));
      if (!jsonObj.get("byline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `byline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("byline").toString()));
      }
      if (!jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      // validate the required field `colors`
      PresetSettingsColors.validateJsonObject(jsonObj.getAsJsonObject("colors"));
      // validate the required field `logos`
      PresetSettingsLogos.validateJsonObject(jsonObj.getAsJsonObject("logos"));
      // validate the required field `outro`
      PresetSettingsOutro.validateJsonObject(jsonObj.getAsJsonObject("outro"));
      // validate the required field `play_button`
      PresetSettingsPlayButton.validateJsonObject(jsonObj.getAsJsonObject("play_button"));
      if (!jsonObj.get("portrait").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `portrait` to be a primitive type in the JSON string but got `%s`", jsonObj.get("portrait").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PresetSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PresetSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PresetSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PresetSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<PresetSettings>() {
           @Override
           public void write(JsonWriter out, PresetSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PresetSettings read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PresetSettings instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PresetSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PresetSettings
  * @throws IOException if the JSON string is invalid with respect to PresetSettings
  */
  public static PresetSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PresetSettings.class);
  }

 /**
  * Convert an instance of PresetSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

