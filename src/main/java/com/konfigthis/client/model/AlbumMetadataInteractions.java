/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AlbumMetadataInteractionsAddCustomThumbnails;
import com.konfigthis.client.model.AlbumMetadataInteractionsAddLiveEvents;
import com.konfigthis.client.model.AlbumMetadataInteractionsAddLogos;
import com.konfigthis.client.model.AlbumMetadataInteractionsAddTo;
import com.konfigthis.client.model.AlbumMetadataInteractionsAddVideos;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A list of resource URIs related to the showcase.
 */
@ApiModel(description = "A list of resource URIs related to the showcase.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AlbumMetadataInteractions {
  public static final String SERIALIZED_NAME_ADD_CUSTOM_THUMBNAILS = "add_custom_thumbnails";
  @SerializedName(SERIALIZED_NAME_ADD_CUSTOM_THUMBNAILS)
  private AlbumMetadataInteractionsAddCustomThumbnails addCustomThumbnails;

  public static final String SERIALIZED_NAME_ADD_LIVE_EVENTS = "add_live_events";
  @SerializedName(SERIALIZED_NAME_ADD_LIVE_EVENTS)
  private AlbumMetadataInteractionsAddLiveEvents addLiveEvents;

  public static final String SERIALIZED_NAME_ADD_LOGOS = "add_logos";
  @SerializedName(SERIALIZED_NAME_ADD_LOGOS)
  private AlbumMetadataInteractionsAddLogos addLogos;

  public static final String SERIALIZED_NAME_ADD_TO = "add_to";
  @SerializedName(SERIALIZED_NAME_ADD_TO)
  private AlbumMetadataInteractionsAddTo addTo;

  public static final String SERIALIZED_NAME_ADD_VIDEOS = "add_videos";
  @SerializedName(SERIALIZED_NAME_ADD_VIDEOS)
  private AlbumMetadataInteractionsAddVideos addVideos;

  public AlbumMetadataInteractions() {
  }

  public AlbumMetadataInteractions addCustomThumbnails(AlbumMetadataInteractionsAddCustomThumbnails addCustomThumbnails) {
    
    
    
    
    this.addCustomThumbnails = addCustomThumbnails;
    return this;
  }

   /**
   * Get addCustomThumbnails
   * @return addCustomThumbnails
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public AlbumMetadataInteractionsAddCustomThumbnails getAddCustomThumbnails() {
    return addCustomThumbnails;
  }


  public void setAddCustomThumbnails(AlbumMetadataInteractionsAddCustomThumbnails addCustomThumbnails) {
    
    
    
    this.addCustomThumbnails = addCustomThumbnails;
  }


  public AlbumMetadataInteractions addLiveEvents(AlbumMetadataInteractionsAddLiveEvents addLiveEvents) {
    
    
    
    
    this.addLiveEvents = addLiveEvents;
    return this;
  }

   /**
   * Get addLiveEvents
   * @return addLiveEvents
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public AlbumMetadataInteractionsAddLiveEvents getAddLiveEvents() {
    return addLiveEvents;
  }


  public void setAddLiveEvents(AlbumMetadataInteractionsAddLiveEvents addLiveEvents) {
    
    
    
    this.addLiveEvents = addLiveEvents;
  }


  public AlbumMetadataInteractions addLogos(AlbumMetadataInteractionsAddLogos addLogos) {
    
    
    
    
    this.addLogos = addLogos;
    return this;
  }

   /**
   * Get addLogos
   * @return addLogos
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public AlbumMetadataInteractionsAddLogos getAddLogos() {
    return addLogos;
  }


  public void setAddLogos(AlbumMetadataInteractionsAddLogos addLogos) {
    
    
    
    this.addLogos = addLogos;
  }


  public AlbumMetadataInteractions addTo(AlbumMetadataInteractionsAddTo addTo) {
    
    
    
    
    this.addTo = addTo;
    return this;
  }

   /**
   * Get addTo
   * @return addTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public AlbumMetadataInteractionsAddTo getAddTo() {
    return addTo;
  }


  public void setAddTo(AlbumMetadataInteractionsAddTo addTo) {
    
    
    
    this.addTo = addTo;
  }


  public AlbumMetadataInteractions addVideos(AlbumMetadataInteractionsAddVideos addVideos) {
    
    
    
    
    this.addVideos = addVideos;
    return this;
  }

   /**
   * Get addVideos
   * @return addVideos
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public AlbumMetadataInteractionsAddVideos getAddVideos() {
    return addVideos;
  }


  public void setAddVideos(AlbumMetadataInteractionsAddVideos addVideos) {
    
    
    
    this.addVideos = addVideos;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AlbumMetadataInteractions instance itself
   */
  public AlbumMetadataInteractions putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlbumMetadataInteractions albumMetadataInteractions = (AlbumMetadataInteractions) o;
    return Objects.equals(this.addCustomThumbnails, albumMetadataInteractions.addCustomThumbnails) &&
        Objects.equals(this.addLiveEvents, albumMetadataInteractions.addLiveEvents) &&
        Objects.equals(this.addLogos, albumMetadataInteractions.addLogos) &&
        Objects.equals(this.addTo, albumMetadataInteractions.addTo) &&
        Objects.equals(this.addVideos, albumMetadataInteractions.addVideos)&&
        Objects.equals(this.additionalProperties, albumMetadataInteractions.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addCustomThumbnails, addLiveEvents, addLogos, addTo, addVideos, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlbumMetadataInteractions {\n");
    sb.append("    addCustomThumbnails: ").append(toIndentedString(addCustomThumbnails)).append("\n");
    sb.append("    addLiveEvents: ").append(toIndentedString(addLiveEvents)).append("\n");
    sb.append("    addLogos: ").append(toIndentedString(addLogos)).append("\n");
    sb.append("    addTo: ").append(toIndentedString(addTo)).append("\n");
    sb.append("    addVideos: ").append(toIndentedString(addVideos)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("add_custom_thumbnails");
    openapiFields.add("add_live_events");
    openapiFields.add("add_logos");
    openapiFields.add("add_to");
    openapiFields.add("add_videos");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("add_custom_thumbnails");
    openapiRequiredFields.add("add_live_events");
    openapiRequiredFields.add("add_logos");
    openapiRequiredFields.add("add_to");
    openapiRequiredFields.add("add_videos");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AlbumMetadataInteractions
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AlbumMetadataInteractions.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlbumMetadataInteractions is not found in the empty JSON string", AlbumMetadataInteractions.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AlbumMetadataInteractions.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `add_custom_thumbnails`
      AlbumMetadataInteractionsAddCustomThumbnails.validateJsonObject(jsonObj.getAsJsonObject("add_custom_thumbnails"));
      // validate the required field `add_live_events`
      AlbumMetadataInteractionsAddLiveEvents.validateJsonObject(jsonObj.getAsJsonObject("add_live_events"));
      // validate the required field `add_logos`
      AlbumMetadataInteractionsAddLogos.validateJsonObject(jsonObj.getAsJsonObject("add_logos"));
      // validate the required field `add_to`
      AlbumMetadataInteractionsAddTo.validateJsonObject(jsonObj.getAsJsonObject("add_to"));
      // validate the required field `add_videos`
      AlbumMetadataInteractionsAddVideos.validateJsonObject(jsonObj.getAsJsonObject("add_videos"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlbumMetadataInteractions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlbumMetadataInteractions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlbumMetadataInteractions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlbumMetadataInteractions.class));

       return (TypeAdapter<T>) new TypeAdapter<AlbumMetadataInteractions>() {
           @Override
           public void write(JsonWriter out, AlbumMetadataInteractions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AlbumMetadataInteractions read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AlbumMetadataInteractions instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AlbumMetadataInteractions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AlbumMetadataInteractions
  * @throws IOException if the JSON string is invalid with respect to AlbumMetadataInteractions
  */
  public static AlbumMetadataInteractions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlbumMetadataInteractions.class);
  }

 /**
  * Convert an instance of AlbumMetadataInteractions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

