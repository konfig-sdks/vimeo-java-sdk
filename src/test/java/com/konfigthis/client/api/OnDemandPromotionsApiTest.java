/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.OnDemandPromotion;
import com.konfigthis.client.model.OnDemandPromotionCode;
import com.konfigthis.client.model.OnDemandPromotionsAddPromotionToPageRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OnDemandPromotionsApi
 */
@Disabled
public class OnDemandPromotionsApiTest {

    private static OnDemandPromotionsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new OnDemandPromotionsApi(apiClient);
    }

    /**
     * Add a promotion to an On Demand page
     *
     * This method adds a promotion to the specified On Demand page. The authenticated user must be the owner of the page.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addPromotionToPageTest() throws ApiException {
        Boolean download = null;
        String streamPeriod = null;
        Double total = null;
        String type = null;
        Double ondemandId = null;
        String accessType = null;
        String code = null;
        String discountType = null;
        String endTime = null;
        String label = null;
        Double percentOff = null;
        String productType = null;
        String startTime = null;
        OnDemandPromotion response = api.addPromotionToPage(download, streamPeriod, total, type, ondemandId)
                .accessType(accessType)
                .code(code)
                .discountType(discountType)
                .endTime(endTime)
                .label(label)
                .percentOff(percentOff)
                .productType(productType)
                .startTime(startTime)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a promotion on an On Demand page
     *
     * This method deletes a promotion on the specified On Demand page. The authenticated user must be the owner of the page.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePromotionOnPageTest() throws ApiException {
        Double ondemandId = null;
        Double promotionId = null;
        api.deletePromotionOnPage(ondemandId, promotionId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the promotions on an On Demand page
     *
     * This method returns every promotion on the specified On Demand page. The authenticated user must be the owner of the page.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPagePromotionsTest() throws ApiException {
        Double ondemandId = null;
        String filter = null;
        Double page = null;
        Double perPage = null;
        OnDemandPromotion response = api.getAllPagePromotions(ondemandId, filter)
                .page(page)
                .perPage(perPage)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the codes of a promotion on an On Demand page
     *
     * This method returns every code of the specified promotion on an On Demand page. The authenticated user must be the owner of the page.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPromotionCodesTest() throws ApiException {
        Double ondemandId = null;
        Double promotionId = null;
        Double page = null;
        Double perPage = null;
        OnDemandPromotionCode response = api.getAllPromotionCodes(ondemandId, promotionId)
                .page(page)
                .perPage(perPage)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a specific promotion on an On Demand page
     *
     * This method returns a single promotion on the specified On Demand page. The authenticated user must be the owner of the page.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void specificPromotionGetTest() throws ApiException {
        Double ondemandId = null;
        Double promotionId = null;
        OnDemandPromotion response = api.specificPromotionGet(ondemandId, promotionId)
                .execute();
        // TODO: test validations
    }

}
