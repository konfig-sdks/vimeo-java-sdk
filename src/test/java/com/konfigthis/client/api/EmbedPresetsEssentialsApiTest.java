/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.EmbedPresetsEssentialsCreateEmbedPresetRequest;
import com.konfigthis.client.model.EmbedPresetsEssentialsCreateEmbedPresetRequestEmbed;
import com.konfigthis.client.model.EmbedPresetsEssentialsCreatePresetRequest;
import com.konfigthis.client.model.EmbedPresetsEssentialsCreatePresetRequestEmbed;
import com.konfigthis.client.model.EmbedPresetsEssentialsEditPresetRequest;
import com.konfigthis.client.model.EmbedPresetsEssentialsEditPresetRequest1;
import com.konfigthis.client.model.Preset;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EmbedPresetsEssentialsApi
 */
@Disabled
public class EmbedPresetsEssentialsApiTest {

    private static EmbedPresetsEssentialsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new EmbedPresetsEssentialsApi(apiClient);
    }

    /**
     * Create an embed preset
     *
     * This method creates an embed preset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEmbedPresetTest() throws ApiException {
        Double userId = null;
        EmbedPresetsEssentialsCreateEmbedPresetRequestEmbed embed = null;
        String name = null;
        Preset response = api.createEmbedPreset(userId)
                .embed(embed)
                .name(name)
                .execute();
        // TODO: test validations
    }

    /**
     * Create an embed preset
     *
     * This method creates an embed preset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPresetTest() throws ApiException {
        EmbedPresetsEssentialsCreatePresetRequestEmbed embed = null;
        String name = null;
        Preset response = api.createPreset()
                .embed(embed)
                .name(name)
                .execute();
        // TODO: test validations
    }

    /**
     * Edit an embed preset
     *
     * This method edits the specified embed preset. The authenticated user must be the owner of the preset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void editPresetTest() throws ApiException {
        Double presetId = null;
        String outro = null;
        Preset response = api.editPreset(presetId)
                .outro(outro)
                .execute();
        // TODO: test validations
    }

    /**
     * Edit an embed preset
     *
     * This method edits the specified embed preset. The authenticated user must be the owner of the preset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void editPreset_0Test() throws ApiException {
        Double presetId = null;
        Double userId = null;
        String outro = null;
        Preset response = api.editPreset_0(presetId, userId)
                .outro(outro)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the embed presets that a user has created
     *
     * This method returns every embed preset that belongs to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllUserCreatedEmbedPresetsTest() throws ApiException {
        Double page = null;
        Double perPage = null;
        List<Preset> response = api.getAllUserCreatedEmbedPresets()
                .page(page)
                .perPage(perPage)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a specific embed preset
     *
     * This method returns a single embed preset. The authenticated user must be the owner of the preset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSpecificEmbedPresetTest() throws ApiException {
        Double presetId = null;
        Double userId = null;
        Preset response = api.getSpecificEmbedPreset(presetId, userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a specific embed preset
     *
     * This method returns a single embed preset. The authenticated user must be the owner of the preset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSpecificPresetTest() throws ApiException {
        Double presetId = null;
        Preset response = api.getSpecificPreset(presetId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the embed presets that a user has created
     *
     * This method returns every embed preset that belongs to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserEmbedPresetsTest() throws ApiException {
        Double userId = null;
        Double page = null;
        Double perPage = null;
        List<Preset> response = api.getUserEmbedPresets(userId)
                .page(page)
                .perPage(perPage)
                .execute();
        // TODO: test validations
    }

}
