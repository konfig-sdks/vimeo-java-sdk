/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Chapter;
import com.konfigthis.client.model.CreateChapterRequest;
import com.konfigthis.client.model.EditChapterRequest;
import com.konfigthis.client.model.Picture;
import com.konfigthis.client.model.VideosChaptersGenerateChapterThumbnailOrUploadLinkRequest;
import com.konfigthis.client.model.VideosChaptersGenerateChapterThumbnailRequest;
import com.konfigthis.client.model.VideosChaptersSetChapterThumbnailActiveRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class VideosChaptersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VideosChaptersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public VideosChaptersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call chapterCall(Double videoId, CreateChapterRequest createChapterRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createChapterRequest;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/chapters"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video.chapter+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.video.chapter+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chapterValidateBeforeCall(Double videoId, CreateChapterRequest createChapterRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling chapter(Async)");
        }

        return chapterCall(videoId, createChapterRequest, _callback);

    }


    private ApiResponse<Chapter> chapterWithHttpInfo(Double videoId, CreateChapterRequest createChapterRequest) throws ApiException {
        okhttp3.Call localVarCall = chapterValidateBeforeCall(videoId, createChapterRequest, null);
        Type localVarReturnType = new TypeToken<Chapter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call chapterAsync(Double videoId, CreateChapterRequest createChapterRequest, final ApiCallback<Chapter> _callback) throws ApiException {

        okhttp3.Call localVarCall = chapterValidateBeforeCall(videoId, createChapterRequest, _callback);
        Type localVarReturnType = new TypeToken<Chapter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ChapterRequestBuilder {
        private final Double videoId;
        private String title;
        private String activeThumbnailUri;
        private List<String> thumbnailUris;
        private Double timecode;

        private ChapterRequestBuilder(double videoId) {
            this.videoId = videoId;
        }

        /**
         * Set title
         * @param title The title of the chapter. (optional)
         * @return ChapterRequestBuilder
         */
        public ChapterRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set activeThumbnailUri
         * @param activeThumbnailUri The URI of the chapter&#39;s active thumbnail. (optional)
         * @return ChapterRequestBuilder
         */
        public ChapterRequestBuilder activeThumbnailUri(String activeThumbnailUri) {
            this.activeThumbnailUri = activeThumbnailUri;
            return this;
        }
        
        /**
         * Set thumbnailUris
         * @param thumbnailUris An array of URIs of the thumbnails associated with the video chapter. (optional)
         * @return ChapterRequestBuilder
         */
        public ChapterRequestBuilder thumbnailUris(List<String> thumbnailUris) {
            this.thumbnailUris = thumbnailUris;
            return this;
        }
        
        /**
         * Set timecode
         * @param timecode The timecode of the chapter in seconds from the start of the video. (optional)
         * @return ChapterRequestBuilder
         */
        public ChapterRequestBuilder timecode(Double timecode) {
            this.timecode = timecode;
            return this;
        }
        

        /**
         * Set timecode
         * @param timecode The timecode of the chapter in seconds from the start of the video. (optional)
         * @return ChapterRequestBuilder
         */
        public ChapterRequestBuilder timecode(Integer timecode) {
            this.timecode = timecode.doubleValue();
            return this;
        }
        
        /**
         * Build call for chapter
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The chapter was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateChapterRequest createChapterRequest = buildBodyParams();
            return chapterCall(videoId, createChapterRequest, _callback);
        }

        private CreateChapterRequest buildBodyParams() {
            CreateChapterRequest createChapterRequest = new CreateChapterRequest();
            createChapterRequest.title(this.title);
            createChapterRequest.activeThumbnailUri(this.activeThumbnailUri);
            createChapterRequest.thumbnailUris(this.thumbnailUris);
            createChapterRequest.timecode(this.timecode);
            return createChapterRequest;
        }

        /**
         * Execute chapter request
         * @return Chapter
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The chapter was added. </td><td>  -  </td></tr>
         </table>
         */
        public Chapter execute() throws ApiException {
            CreateChapterRequest createChapterRequest = buildBodyParams();
            ApiResponse<Chapter> localVarResp = chapterWithHttpInfo(videoId, createChapterRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute chapter request with HTTP info returned
         * @return ApiResponse&lt;Chapter&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The chapter was added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Chapter> executeWithHttpInfo() throws ApiException {
            CreateChapterRequest createChapterRequest = buildBodyParams();
            return chapterWithHttpInfo(videoId, createChapterRequest);
        }

        /**
         * Execute chapter request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The chapter was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Chapter> _callback) throws ApiException {
            CreateChapterRequest createChapterRequest = buildBodyParams();
            return chapterAsync(videoId, createChapterRequest, _callback);
        }
    }

    /**
     * Add a chapter to a video
     * This method adds a chapter to the specified video.
     * @param videoId The ID of the video. (required)
     * @return ChapterRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The chapter was added. </td><td>  -  </td></tr>
     </table>
     */
    public ChapterRequestBuilder chapter(double videoId) throws IllegalArgumentException {
        
        return new ChapterRequestBuilder(videoId);
    }
    private okhttp3.Call chapter_0Call(Double chapterId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/chapters/{chapter_id}"
            .replace("{" + "chapter_id" + "}", localVarApiClient.escapeString(chapterId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video.chapter+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chapter_0ValidateBeforeCall(Double chapterId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chapterId' is set
        if (chapterId == null) {
            throw new ApiException("Missing the required parameter 'chapterId' when calling chapter_0(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling chapter_0(Async)");
        }

        return chapter_0Call(chapterId, videoId, _callback);

    }


    private ApiResponse<Chapter> chapter_0WithHttpInfo(Double chapterId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = chapter_0ValidateBeforeCall(chapterId, videoId, null);
        Type localVarReturnType = new TypeToken<Chapter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call chapter_0Async(Double chapterId, Double videoId, final ApiCallback<Chapter> _callback) throws ApiException {

        okhttp3.Call localVarCall = chapter_0ValidateBeforeCall(chapterId, videoId, _callback);
        Type localVarReturnType = new TypeToken<Chapter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Chapter0RequestBuilder {
        private final Double chapterId;
        private final Double videoId;

        private Chapter0RequestBuilder(double chapterId, double videoId) {
            this.chapterId = chapterId;
            this.videoId = videoId;
        }

        /**
         * Build call for chapter_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The chapter was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return chapter_0Call(chapterId, videoId, _callback);
        }


        /**
         * Execute chapter_0 request
         * @return Chapter
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The chapter was returned. </td><td>  -  </td></tr>
         </table>
         */
        public Chapter execute() throws ApiException {
            ApiResponse<Chapter> localVarResp = chapter_0WithHttpInfo(chapterId, videoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute chapter_0 request with HTTP info returned
         * @return ApiResponse&lt;Chapter&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The chapter was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Chapter> executeWithHttpInfo() throws ApiException {
            return chapter_0WithHttpInfo(chapterId, videoId);
        }

        /**
         * Execute chapter_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The chapter was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Chapter> _callback) throws ApiException {
            return chapter_0Async(chapterId, videoId, _callback);
        }
    }

    /**
     * Get a specific chapter
     * This method returns a single chapter of the specified video.
     * @param chapterId The ID of the chapter. (required)
     * @param videoId The ID of the video. (required)
     * @return Chapter0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The chapter was returned. </td><td>  -  </td></tr>
     </table>
     */
    public Chapter0RequestBuilder chapter_0(double chapterId, double videoId) throws IllegalArgumentException {
        
        
        return new Chapter0RequestBuilder(chapterId, videoId);
    }
    private okhttp3.Call chapter_1Call(Double chapterId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/chapters/{chapter_id}"
            .replace("{" + "chapter_id" + "}", localVarApiClient.escapeString(chapterId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video.chapter+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chapter_1ValidateBeforeCall(Double chapterId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chapterId' is set
        if (chapterId == null) {
            throw new ApiException("Missing the required parameter 'chapterId' when calling chapter_1(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling chapter_1(Async)");
        }

        return chapter_1Call(chapterId, videoId, _callback);

    }


    private ApiResponse<Void> chapter_1WithHttpInfo(Double chapterId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = chapter_1ValidateBeforeCall(chapterId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call chapter_1Async(Double chapterId, Double videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = chapter_1ValidateBeforeCall(chapterId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class Chapter1RequestBuilder {
        private final Double chapterId;
        private final Double videoId;

        private Chapter1RequestBuilder(double chapterId, double videoId) {
            this.chapterId = chapterId;
            this.videoId = videoId;
        }

        /**
         * Build call for chapter_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The chapter was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return chapter_1Call(chapterId, videoId, _callback);
        }


        /**
         * Execute chapter_1 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The chapter was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            chapter_1WithHttpInfo(chapterId, videoId);
        }

        /**
         * Execute chapter_1 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The chapter was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return chapter_1WithHttpInfo(chapterId, videoId);
        }

        /**
         * Execute chapter_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The chapter was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return chapter_1Async(chapterId, videoId, _callback);
        }
    }

    /**
     * Delete a chapter
     * This method deletes the specified chapter from a video. The authenticated user must be the owner of the video.
     * @param chapterId The ID of the chapter. (required)
     * @param videoId The ID of the video. (required)
     * @return Chapter1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The chapter was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public Chapter1RequestBuilder chapter_1(double chapterId, double videoId) throws IllegalArgumentException {
        
        
        return new Chapter1RequestBuilder(chapterId, videoId);
    }
    private okhttp3.Call chapter_2Call(Double chapterId, Double videoId, EditChapterRequest editChapterRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editChapterRequest;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/chapters/{chapter_id}"
            .replace("{" + "chapter_id" + "}", localVarApiClient.escapeString(chapterId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video.chapter+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.video.chapter+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chapter_2ValidateBeforeCall(Double chapterId, Double videoId, EditChapterRequest editChapterRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chapterId' is set
        if (chapterId == null) {
            throw new ApiException("Missing the required parameter 'chapterId' when calling chapter_2(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling chapter_2(Async)");
        }

        return chapter_2Call(chapterId, videoId, editChapterRequest, _callback);

    }


    private ApiResponse<Chapter> chapter_2WithHttpInfo(Double chapterId, Double videoId, EditChapterRequest editChapterRequest) throws ApiException {
        okhttp3.Call localVarCall = chapter_2ValidateBeforeCall(chapterId, videoId, editChapterRequest, null);
        Type localVarReturnType = new TypeToken<Chapter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call chapter_2Async(Double chapterId, Double videoId, EditChapterRequest editChapterRequest, final ApiCallback<Chapter> _callback) throws ApiException {

        okhttp3.Call localVarCall = chapter_2ValidateBeforeCall(chapterId, videoId, editChapterRequest, _callback);
        Type localVarReturnType = new TypeToken<Chapter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Chapter2RequestBuilder {
        private final Double chapterId;
        private final Double videoId;
        private String title;
        private String activeThumbnailUri;
        private Double timecode;

        private Chapter2RequestBuilder(double chapterId, double videoId) {
            this.chapterId = chapterId;
            this.videoId = videoId;
        }

        /**
         * Set title
         * @param title The title of the chapter. (optional)
         * @return Chapter2RequestBuilder
         */
        public Chapter2RequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set activeThumbnailUri
         * @param activeThumbnailUri The URI of the chapter&#39;s active thumbnail. (optional)
         * @return Chapter2RequestBuilder
         */
        public Chapter2RequestBuilder activeThumbnailUri(String activeThumbnailUri) {
            this.activeThumbnailUri = activeThumbnailUri;
            return this;
        }
        
        /**
         * Set timecode
         * @param timecode The timecode of the chapter in seconds from the start of the video. (optional)
         * @return Chapter2RequestBuilder
         */
        public Chapter2RequestBuilder timecode(Double timecode) {
            this.timecode = timecode;
            return this;
        }
        

        /**
         * Set timecode
         * @param timecode The timecode of the chapter in seconds from the start of the video. (optional)
         * @return Chapter2RequestBuilder
         */
        public Chapter2RequestBuilder timecode(Integer timecode) {
            this.timecode = timecode.doubleValue();
            return this;
        }
        
        /**
         * Build call for chapter_2
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The chapter was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EditChapterRequest editChapterRequest = buildBodyParams();
            return chapter_2Call(chapterId, videoId, editChapterRequest, _callback);
        }

        private EditChapterRequest buildBodyParams() {
            EditChapterRequest editChapterRequest = new EditChapterRequest();
            editChapterRequest.title(this.title);
            editChapterRequest.activeThumbnailUri(this.activeThumbnailUri);
            editChapterRequest.timecode(this.timecode);
            return editChapterRequest;
        }

        /**
         * Execute chapter_2 request
         * @return Chapter
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The chapter was edited. </td><td>  -  </td></tr>
         </table>
         */
        public Chapter execute() throws ApiException {
            EditChapterRequest editChapterRequest = buildBodyParams();
            ApiResponse<Chapter> localVarResp = chapter_2WithHttpInfo(chapterId, videoId, editChapterRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute chapter_2 request with HTTP info returned
         * @return ApiResponse&lt;Chapter&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The chapter was edited. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Chapter> executeWithHttpInfo() throws ApiException {
            EditChapterRequest editChapterRequest = buildBodyParams();
            return chapter_2WithHttpInfo(chapterId, videoId, editChapterRequest);
        }

        /**
         * Execute chapter_2 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The chapter was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Chapter> _callback) throws ApiException {
            EditChapterRequest editChapterRequest = buildBodyParams();
            return chapter_2Async(chapterId, videoId, editChapterRequest, _callback);
        }
    }

    /**
     * Edit a chapter
     * This method edits the specified chapter of a video. The authenticated user must be the owner of the video.
     * @param chapterId The ID of the chapter. (required)
     * @param videoId The ID of the video. (required)
     * @return Chapter2RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The chapter was edited. </td><td>  -  </td></tr>
     </table>
     */
    public Chapter2RequestBuilder chapter_2(double chapterId, double videoId) throws IllegalArgumentException {
        
        
        return new Chapter2RequestBuilder(chapterId, videoId);
    }
    private okhttp3.Call chaptersCall(Double videoId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/chapters"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video.chapter+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chaptersValidateBeforeCall(Double videoId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling chapters(Async)");
        }

        return chaptersCall(videoId, page, perPage, _callback);

    }


    private ApiResponse<List<Chapter>> chaptersWithHttpInfo(Double videoId, Double page, Double perPage) throws ApiException {
        okhttp3.Call localVarCall = chaptersValidateBeforeCall(videoId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Chapter>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call chaptersAsync(Double videoId, Double page, Double perPage, final ApiCallback<List<Chapter>> _callback) throws ApiException {

        okhttp3.Call localVarCall = chaptersValidateBeforeCall(videoId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Chapter>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ChaptersRequestBuilder {
        private final Double videoId;
        private Double page;
        private Double perPage;

        private ChaptersRequestBuilder(double videoId) {
            this.videoId = videoId;
        }

        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return ChaptersRequestBuilder
         */
        public ChaptersRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return ChaptersRequestBuilder
         */
        public ChaptersRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for chapters
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The chapters were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return chaptersCall(videoId, page, perPage, _callback);
        }


        /**
         * Execute chapters request
         * @return List&lt;Chapter&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The chapters were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Chapter> execute() throws ApiException {
            ApiResponse<List<Chapter>> localVarResp = chaptersWithHttpInfo(videoId, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute chapters request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Chapter&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The chapters were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Chapter>> executeWithHttpInfo() throws ApiException {
            return chaptersWithHttpInfo(videoId, page, perPage);
        }

        /**
         * Execute chapters request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The chapters were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Chapter>> _callback) throws ApiException {
            return chaptersAsync(videoId, page, perPage, _callback);
        }
    }

    /**
     * Get all the chapters of a video
     * This method returns every chapter of the specified video.
     * @param videoId The ID of the video. (required)
     * @return ChaptersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The chapters were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ChaptersRequestBuilder chapters(double videoId) throws IllegalArgumentException {
        
        return new ChaptersRequestBuilder(videoId);
    }
    private okhttp3.Call deleteChapterThumbnailCall(Double chapterId, String uid, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/chapters/{chapter_id}/pictures/{uid}"
            .replace("{" + "chapter_id" + "}", localVarApiClient.escapeString(chapterId.toString()))
            .replace("{" + "uid" + "}", localVarApiClient.escapeString(uid.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteChapterThumbnailValidateBeforeCall(Double chapterId, String uid, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chapterId' is set
        if (chapterId == null) {
            throw new ApiException("Missing the required parameter 'chapterId' when calling deleteChapterThumbnail(Async)");
        }

        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling deleteChapterThumbnail(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling deleteChapterThumbnail(Async)");
        }

        return deleteChapterThumbnailCall(chapterId, uid, videoId, _callback);

    }


    private ApiResponse<Void> deleteChapterThumbnailWithHttpInfo(Double chapterId, String uid, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = deleteChapterThumbnailValidateBeforeCall(chapterId, uid, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteChapterThumbnailAsync(Double chapterId, String uid, Double videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteChapterThumbnailValidateBeforeCall(chapterId, uid, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteChapterThumbnailRequestBuilder {
        private final Double chapterId;
        private final String uid;
        private final Double videoId;

        private DeleteChapterThumbnailRequestBuilder(double chapterId, String uid, double videoId) {
            this.chapterId = chapterId;
            this.uid = uid;
            this.videoId = videoId;
        }

        /**
         * Build call for deleteChapterThumbnail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The chapter thumbnail was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteChapterThumbnailCall(chapterId, uid, videoId, _callback);
        }


        /**
         * Execute deleteChapterThumbnail request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The chapter thumbnail was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteChapterThumbnailWithHttpInfo(chapterId, uid, videoId);
        }

        /**
         * Execute deleteChapterThumbnail request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The chapter thumbnail was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteChapterThumbnailWithHttpInfo(chapterId, uid, videoId);
        }

        /**
         * Execute deleteChapterThumbnail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The chapter thumbnail was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteChapterThumbnailAsync(chapterId, uid, videoId, _callback);
        }
    }

    /**
     * Delete a chapter thumbnail
     * This method deletes the specified chapter thumbnail from a video.  The authenticated user must be the owner of the video that the chapter belongs to. This method deletes both timecode-generated and custom-uploaded thumbnails.
     * @param chapterId The ID of the chapter. (required)
     * @param uid The unique ID of the thumbnail. (required)
     * @param videoId The ID of the video. (required)
     * @return DeleteChapterThumbnailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The chapter thumbnail was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteChapterThumbnailRequestBuilder deleteChapterThumbnail(double chapterId, String uid, double videoId) throws IllegalArgumentException {
        
        if (uid == null) throw new IllegalArgumentException("\"uid\" is required but got null");
            

        
        return new DeleteChapterThumbnailRequestBuilder(chapterId, uid, videoId);
    }
    private okhttp3.Call generateChapterThumbnailCall(Double videoId, VideosChaptersGenerateChapterThumbnailRequest videosChaptersGenerateChapterThumbnailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = videosChaptersGenerateChapterThumbnailRequest;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/chapters/temporary/pictures"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateChapterThumbnailValidateBeforeCall(Double videoId, VideosChaptersGenerateChapterThumbnailRequest videosChaptersGenerateChapterThumbnailRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling generateChapterThumbnail(Async)");
        }

        return generateChapterThumbnailCall(videoId, videosChaptersGenerateChapterThumbnailRequest, _callback);

    }


    private ApiResponse<Picture> generateChapterThumbnailWithHttpInfo(Double videoId, VideosChaptersGenerateChapterThumbnailRequest videosChaptersGenerateChapterThumbnailRequest) throws ApiException {
        okhttp3.Call localVarCall = generateChapterThumbnailValidateBeforeCall(videoId, videosChaptersGenerateChapterThumbnailRequest, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateChapterThumbnailAsync(Double videoId, VideosChaptersGenerateChapterThumbnailRequest videosChaptersGenerateChapterThumbnailRequest, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateChapterThumbnailValidateBeforeCall(videoId, videosChaptersGenerateChapterThumbnailRequest, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateChapterThumbnailRequestBuilder {
        private final Double videoId;
        private Double timecode;

        private GenerateChapterThumbnailRequestBuilder(double videoId) {
            this.videoId = videoId;
        }

        /**
         * Set timecode
         * @param timecode The timecode, given in seconds from the start of the video, indicating when the thumbnail should be generated from the video. (optional)
         * @return GenerateChapterThumbnailRequestBuilder
         */
        public GenerateChapterThumbnailRequestBuilder timecode(Double timecode) {
            this.timecode = timecode;
            return this;
        }
        
        /**
         * Build call for generateChapterThumbnail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The upload link or chapter thumbnail was generated. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VideosChaptersGenerateChapterThumbnailRequest videosChaptersGenerateChapterThumbnailRequest = buildBodyParams();
            return generateChapterThumbnailCall(videoId, videosChaptersGenerateChapterThumbnailRequest, _callback);
        }

        private VideosChaptersGenerateChapterThumbnailRequest buildBodyParams() {
            VideosChaptersGenerateChapterThumbnailRequest videosChaptersGenerateChapterThumbnailRequest = new VideosChaptersGenerateChapterThumbnailRequest();
            videosChaptersGenerateChapterThumbnailRequest.timecode(this.timecode);
            return videosChaptersGenerateChapterThumbnailRequest;
        }

        /**
         * Execute generateChapterThumbnail request
         * @return Picture
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The upload link or chapter thumbnail was generated. </td><td>  -  </td></tr>
         </table>
         */
        public Picture execute() throws ApiException {
            VideosChaptersGenerateChapterThumbnailRequest videosChaptersGenerateChapterThumbnailRequest = buildBodyParams();
            ApiResponse<Picture> localVarResp = generateChapterThumbnailWithHttpInfo(videoId, videosChaptersGenerateChapterThumbnailRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateChapterThumbnail request with HTTP info returned
         * @return ApiResponse&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The upload link or chapter thumbnail was generated. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Picture> executeWithHttpInfo() throws ApiException {
            VideosChaptersGenerateChapterThumbnailRequest videosChaptersGenerateChapterThumbnailRequest = buildBodyParams();
            return generateChapterThumbnailWithHttpInfo(videoId, videosChaptersGenerateChapterThumbnailRequest);
        }

        /**
         * Execute generateChapterThumbnail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The upload link or chapter thumbnail was generated. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Picture> _callback) throws ApiException {
            VideosChaptersGenerateChapterThumbnailRequest videosChaptersGenerateChapterThumbnailRequest = buildBodyParams();
            return generateChapterThumbnailAsync(videoId, videosChaptersGenerateChapterThumbnailRequest, _callback);
        }
    }

    /**
     * Generate an upload link or timecode-based thumbnail for an unsaved video chapter
     * This method generates either an upload link or a timecode-based thumbnail for an unsaved video chapter. To generate the upload link, which enables the authenticated user to upload a chapter thumbnail image manually, leave the body of the request empty. To generate an automatic timecode-based thumbnail, specify the **timecode** parameter in the body of the request.
     * @param videoId The ID of the video. (required)
     * @return GenerateChapterThumbnailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The upload link or chapter thumbnail was generated. </td><td>  -  </td></tr>
     </table>
     */
    public GenerateChapterThumbnailRequestBuilder generateChapterThumbnail(double videoId) throws IllegalArgumentException {
        
        return new GenerateChapterThumbnailRequestBuilder(videoId);
    }
    private okhttp3.Call generateChapterThumbnailOrUploadLinkCall(Double chapterId, Double videoId, VideosChaptersGenerateChapterThumbnailOrUploadLinkRequest videosChaptersGenerateChapterThumbnailOrUploadLinkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = videosChaptersGenerateChapterThumbnailOrUploadLinkRequest;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/chapters/{chapter_id}/pictures"
            .replace("{" + "chapter_id" + "}", localVarApiClient.escapeString(chapterId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateChapterThumbnailOrUploadLinkValidateBeforeCall(Double chapterId, Double videoId, VideosChaptersGenerateChapterThumbnailOrUploadLinkRequest videosChaptersGenerateChapterThumbnailOrUploadLinkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chapterId' is set
        if (chapterId == null) {
            throw new ApiException("Missing the required parameter 'chapterId' when calling generateChapterThumbnailOrUploadLink(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling generateChapterThumbnailOrUploadLink(Async)");
        }

        return generateChapterThumbnailOrUploadLinkCall(chapterId, videoId, videosChaptersGenerateChapterThumbnailOrUploadLinkRequest, _callback);

    }


    private ApiResponse<Picture> generateChapterThumbnailOrUploadLinkWithHttpInfo(Double chapterId, Double videoId, VideosChaptersGenerateChapterThumbnailOrUploadLinkRequest videosChaptersGenerateChapterThumbnailOrUploadLinkRequest) throws ApiException {
        okhttp3.Call localVarCall = generateChapterThumbnailOrUploadLinkValidateBeforeCall(chapterId, videoId, videosChaptersGenerateChapterThumbnailOrUploadLinkRequest, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateChapterThumbnailOrUploadLinkAsync(Double chapterId, Double videoId, VideosChaptersGenerateChapterThumbnailOrUploadLinkRequest videosChaptersGenerateChapterThumbnailOrUploadLinkRequest, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateChapterThumbnailOrUploadLinkValidateBeforeCall(chapterId, videoId, videosChaptersGenerateChapterThumbnailOrUploadLinkRequest, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateChapterThumbnailOrUploadLinkRequestBuilder {
        private final Double chapterId;
        private final Double videoId;
        private Double timecode;

        private GenerateChapterThumbnailOrUploadLinkRequestBuilder(double chapterId, double videoId) {
            this.chapterId = chapterId;
            this.videoId = videoId;
        }

        /**
         * Set timecode
         * @param timecode The timecode, given in seconds from the start of the video, indicating when the thumbnail should be generated from the video. (optional)
         * @return GenerateChapterThumbnailOrUploadLinkRequestBuilder
         */
        public GenerateChapterThumbnailOrUploadLinkRequestBuilder timecode(Double timecode) {
            this.timecode = timecode;
            return this;
        }
        
        /**
         * Build call for generateChapterThumbnailOrUploadLink
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The chapter thumbnail or upload link was generated. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VideosChaptersGenerateChapterThumbnailOrUploadLinkRequest videosChaptersGenerateChapterThumbnailOrUploadLinkRequest = buildBodyParams();
            return generateChapterThumbnailOrUploadLinkCall(chapterId, videoId, videosChaptersGenerateChapterThumbnailOrUploadLinkRequest, _callback);
        }

        private VideosChaptersGenerateChapterThumbnailOrUploadLinkRequest buildBodyParams() {
            VideosChaptersGenerateChapterThumbnailOrUploadLinkRequest videosChaptersGenerateChapterThumbnailOrUploadLinkRequest = new VideosChaptersGenerateChapterThumbnailOrUploadLinkRequest();
            videosChaptersGenerateChapterThumbnailOrUploadLinkRequest.timecode(this.timecode);
            return videosChaptersGenerateChapterThumbnailOrUploadLinkRequest;
        }

        /**
         * Execute generateChapterThumbnailOrUploadLink request
         * @return Picture
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The chapter thumbnail or upload link was generated. </td><td>  -  </td></tr>
         </table>
         */
        public Picture execute() throws ApiException {
            VideosChaptersGenerateChapterThumbnailOrUploadLinkRequest videosChaptersGenerateChapterThumbnailOrUploadLinkRequest = buildBodyParams();
            ApiResponse<Picture> localVarResp = generateChapterThumbnailOrUploadLinkWithHttpInfo(chapterId, videoId, videosChaptersGenerateChapterThumbnailOrUploadLinkRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateChapterThumbnailOrUploadLink request with HTTP info returned
         * @return ApiResponse&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The chapter thumbnail or upload link was generated. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Picture> executeWithHttpInfo() throws ApiException {
            VideosChaptersGenerateChapterThumbnailOrUploadLinkRequest videosChaptersGenerateChapterThumbnailOrUploadLinkRequest = buildBodyParams();
            return generateChapterThumbnailOrUploadLinkWithHttpInfo(chapterId, videoId, videosChaptersGenerateChapterThumbnailOrUploadLinkRequest);
        }

        /**
         * Execute generateChapterThumbnailOrUploadLink request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The chapter thumbnail or upload link was generated. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Picture> _callback) throws ApiException {
            VideosChaptersGenerateChapterThumbnailOrUploadLinkRequest videosChaptersGenerateChapterThumbnailOrUploadLinkRequest = buildBodyParams();
            return generateChapterThumbnailOrUploadLinkAsync(chapterId, videoId, videosChaptersGenerateChapterThumbnailOrUploadLinkRequest, _callback);
        }
    }

    /**
     * Generate an upload link or timecode-based thumbnail for a saved video chapter
     * This method generates either an upload link or a timecode-based thumbnail for the specified saved video chapter. To generate the upload link, which enables the authenticated user to upload a chapter thumbnail image manually, leave the body of the request empty. To generate an automatic timecode-based thumbnail, include the **timecode** parameter in the body of the request.
     * @param chapterId The ID of the chapter. (required)
     * @param videoId The ID of the video. (required)
     * @return GenerateChapterThumbnailOrUploadLinkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The chapter thumbnail or upload link was generated. </td><td>  -  </td></tr>
     </table>
     */
    public GenerateChapterThumbnailOrUploadLinkRequestBuilder generateChapterThumbnailOrUploadLink(double chapterId, double videoId) throws IllegalArgumentException {
        
        
        return new GenerateChapterThumbnailOrUploadLinkRequestBuilder(chapterId, videoId);
    }
    private okhttp3.Call getChapterThumbnailsCall(Double chapterId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/chapters/{chapter_id}/pictures"
            .replace("{" + "chapter_id" + "}", localVarApiClient.escapeString(chapterId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChapterThumbnailsValidateBeforeCall(Double chapterId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chapterId' is set
        if (chapterId == null) {
            throw new ApiException("Missing the required parameter 'chapterId' when calling getChapterThumbnails(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getChapterThumbnails(Async)");
        }

        return getChapterThumbnailsCall(chapterId, videoId, _callback);

    }


    private ApiResponse<Picture> getChapterThumbnailsWithHttpInfo(Double chapterId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = getChapterThumbnailsValidateBeforeCall(chapterId, videoId, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getChapterThumbnailsAsync(Double chapterId, Double videoId, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChapterThumbnailsValidateBeforeCall(chapterId, videoId, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetChapterThumbnailsRequestBuilder {
        private final Double chapterId;
        private final Double videoId;

        private GetChapterThumbnailsRequestBuilder(double chapterId, double videoId) {
            this.chapterId = chapterId;
            this.videoId = videoId;
        }

        /**
         * Build call for getChapterThumbnails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The chapter thumbnails were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getChapterThumbnailsCall(chapterId, videoId, _callback);
        }


        /**
         * Execute getChapterThumbnails request
         * @return Picture
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The chapter thumbnails were returned. </td><td>  -  </td></tr>
         </table>
         */
        public Picture execute() throws ApiException {
            ApiResponse<Picture> localVarResp = getChapterThumbnailsWithHttpInfo(chapterId, videoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getChapterThumbnails request with HTTP info returned
         * @return ApiResponse&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The chapter thumbnails were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Picture> executeWithHttpInfo() throws ApiException {
            return getChapterThumbnailsWithHttpInfo(chapterId, videoId);
        }

        /**
         * Execute getChapterThumbnails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The chapter thumbnails were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Picture> _callback) throws ApiException {
            return getChapterThumbnailsAsync(chapterId, videoId, _callback);
        }
    }

    /**
     * Get all the thumbnails associated with a saved video chapter
     * This method returns every thumbnail associated with the specified saved video chapter.
     * @param chapterId The ID of the chapter. (required)
     * @param videoId The ID of the video. (required)
     * @return GetChapterThumbnailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The chapter thumbnails were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetChapterThumbnailsRequestBuilder getChapterThumbnails(double chapterId, double videoId) throws IllegalArgumentException {
        
        
        return new GetChapterThumbnailsRequestBuilder(chapterId, videoId);
    }
    private okhttp3.Call getSingleChapterThumbnailCall(Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/chapters/temporary/pictures/{uid}"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleChapterThumbnailValidateBeforeCall(Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getSingleChapterThumbnail(Async)");
        }

        return getSingleChapterThumbnailCall(videoId, _callback);

    }


    private ApiResponse<Picture> getSingleChapterThumbnailWithHttpInfo(Double videoId) throws ApiException {
        okhttp3.Call localVarCall = getSingleChapterThumbnailValidateBeforeCall(videoId, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleChapterThumbnailAsync(Double videoId, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleChapterThumbnailValidateBeforeCall(videoId, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleChapterThumbnailRequestBuilder {
        private final Double videoId;

        private GetSingleChapterThumbnailRequestBuilder(double videoId) {
            this.videoId = videoId;
        }

        /**
         * Build call for getSingleChapterThumbnail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The chapter thumbnail was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleChapterThumbnailCall(videoId, _callback);
        }


        /**
         * Execute getSingleChapterThumbnail request
         * @return Picture
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The chapter thumbnail was returned. </td><td>  -  </td></tr>
         </table>
         */
        public Picture execute() throws ApiException {
            ApiResponse<Picture> localVarResp = getSingleChapterThumbnailWithHttpInfo(videoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleChapterThumbnail request with HTTP info returned
         * @return ApiResponse&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The chapter thumbnail was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Picture> executeWithHttpInfo() throws ApiException {
            return getSingleChapterThumbnailWithHttpInfo(videoId);
        }

        /**
         * Execute getSingleChapterThumbnail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The chapter thumbnail was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Picture> _callback) throws ApiException {
            return getSingleChapterThumbnailAsync(videoId, _callback);
        }
    }

    /**
     * Get a single chapter thumbnail associated with an unsaved video chapter
     * This method returns the specified thumbnail associated with an unsaved video chapter.
     * @param videoId The ID of the video. (required)
     * @return GetSingleChapterThumbnailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The chapter thumbnail was returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleChapterThumbnailRequestBuilder getSingleChapterThumbnail(double videoId) throws IllegalArgumentException {
        
        return new GetSingleChapterThumbnailRequestBuilder(videoId);
    }
    private okhttp3.Call getSingleChapterThumbnail_0Call(Double chapterId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/chapters/{chapter_id}/pictures/{uid}"
            .replace("{" + "chapter_id" + "}", localVarApiClient.escapeString(chapterId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleChapterThumbnail_0ValidateBeforeCall(Double chapterId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chapterId' is set
        if (chapterId == null) {
            throw new ApiException("Missing the required parameter 'chapterId' when calling getSingleChapterThumbnail_0(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getSingleChapterThumbnail_0(Async)");
        }

        return getSingleChapterThumbnail_0Call(chapterId, videoId, _callback);

    }


    private ApiResponse<Picture> getSingleChapterThumbnail_0WithHttpInfo(Double chapterId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = getSingleChapterThumbnail_0ValidateBeforeCall(chapterId, videoId, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleChapterThumbnail_0Async(Double chapterId, Double videoId, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleChapterThumbnail_0ValidateBeforeCall(chapterId, videoId, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleChapterThumbnail0RequestBuilder {
        private final Double chapterId;
        private final Double videoId;

        private GetSingleChapterThumbnail0RequestBuilder(double chapterId, double videoId) {
            this.chapterId = chapterId;
            this.videoId = videoId;
        }

        /**
         * Build call for getSingleChapterThumbnail_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The chapter thumbnail was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleChapterThumbnail_0Call(chapterId, videoId, _callback);
        }


        /**
         * Execute getSingleChapterThumbnail_0 request
         * @return Picture
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The chapter thumbnail was returned. </td><td>  -  </td></tr>
         </table>
         */
        public Picture execute() throws ApiException {
            ApiResponse<Picture> localVarResp = getSingleChapterThumbnail_0WithHttpInfo(chapterId, videoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleChapterThumbnail_0 request with HTTP info returned
         * @return ApiResponse&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The chapter thumbnail was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Picture> executeWithHttpInfo() throws ApiException {
            return getSingleChapterThumbnail_0WithHttpInfo(chapterId, videoId);
        }

        /**
         * Execute getSingleChapterThumbnail_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The chapter thumbnail was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Picture> _callback) throws ApiException {
            return getSingleChapterThumbnail_0Async(chapterId, videoId, _callback);
        }
    }

    /**
     * Get a single chapter thumbnail associated with a saved video chapter
     * This method returns the specified thumbnail associated with a saved video chapter.
     * @param chapterId The ID of the chapter. (required)
     * @param videoId The ID of the video. (required)
     * @return GetSingleChapterThumbnail0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The chapter thumbnail was returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleChapterThumbnail0RequestBuilder getSingleChapterThumbnail_0(double chapterId, double videoId) throws IllegalArgumentException {
        
        
        return new GetSingleChapterThumbnail0RequestBuilder(chapterId, videoId);
    }
    private okhttp3.Call setChapterThumbnailActiveCall(Double chapterId, Double videoId, VideosChaptersSetChapterThumbnailActiveRequest videosChaptersSetChapterThumbnailActiveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = videosChaptersSetChapterThumbnailActiveRequest;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/chapters/{chapter_id}/pictures/{uid}"
            .replace("{" + "chapter_id" + "}", localVarApiClient.escapeString(chapterId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setChapterThumbnailActiveValidateBeforeCall(Double chapterId, Double videoId, VideosChaptersSetChapterThumbnailActiveRequest videosChaptersSetChapterThumbnailActiveRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chapterId' is set
        if (chapterId == null) {
            throw new ApiException("Missing the required parameter 'chapterId' when calling setChapterThumbnailActive(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling setChapterThumbnailActive(Async)");
        }

        return setChapterThumbnailActiveCall(chapterId, videoId, videosChaptersSetChapterThumbnailActiveRequest, _callback);

    }


    private ApiResponse<Picture> setChapterThumbnailActiveWithHttpInfo(Double chapterId, Double videoId, VideosChaptersSetChapterThumbnailActiveRequest videosChaptersSetChapterThumbnailActiveRequest) throws ApiException {
        okhttp3.Call localVarCall = setChapterThumbnailActiveValidateBeforeCall(chapterId, videoId, videosChaptersSetChapterThumbnailActiveRequest, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setChapterThumbnailActiveAsync(Double chapterId, Double videoId, VideosChaptersSetChapterThumbnailActiveRequest videosChaptersSetChapterThumbnailActiveRequest, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = setChapterThumbnailActiveValidateBeforeCall(chapterId, videoId, videosChaptersSetChapterThumbnailActiveRequest, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetChapterThumbnailActiveRequestBuilder {
        private final Double chapterId;
        private final Double videoId;
        private Boolean active;

        private SetChapterThumbnailActiveRequestBuilder(double chapterId, double videoId) {
            this.chapterId = chapterId;
            this.videoId = videoId;
        }

        /**
         * Set active
         * @param active Whether to set the chapter thumbnail as active. (optional)
         * @return SetChapterThumbnailActiveRequestBuilder
         */
        public SetChapterThumbnailActiveRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Build call for setChapterThumbnailActive
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The chapter thumbnail was set as active. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VideosChaptersSetChapterThumbnailActiveRequest videosChaptersSetChapterThumbnailActiveRequest = buildBodyParams();
            return setChapterThumbnailActiveCall(chapterId, videoId, videosChaptersSetChapterThumbnailActiveRequest, _callback);
        }

        private VideosChaptersSetChapterThumbnailActiveRequest buildBodyParams() {
            VideosChaptersSetChapterThumbnailActiveRequest videosChaptersSetChapterThumbnailActiveRequest = new VideosChaptersSetChapterThumbnailActiveRequest();
            videosChaptersSetChapterThumbnailActiveRequest.active(this.active);
            return videosChaptersSetChapterThumbnailActiveRequest;
        }

        /**
         * Execute setChapterThumbnailActive request
         * @return Picture
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The chapter thumbnail was set as active. </td><td>  -  </td></tr>
         </table>
         */
        public Picture execute() throws ApiException {
            VideosChaptersSetChapterThumbnailActiveRequest videosChaptersSetChapterThumbnailActiveRequest = buildBodyParams();
            ApiResponse<Picture> localVarResp = setChapterThumbnailActiveWithHttpInfo(chapterId, videoId, videosChaptersSetChapterThumbnailActiveRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setChapterThumbnailActive request with HTTP info returned
         * @return ApiResponse&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The chapter thumbnail was set as active. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Picture> executeWithHttpInfo() throws ApiException {
            VideosChaptersSetChapterThumbnailActiveRequest videosChaptersSetChapterThumbnailActiveRequest = buildBodyParams();
            return setChapterThumbnailActiveWithHttpInfo(chapterId, videoId, videosChaptersSetChapterThumbnailActiveRequest);
        }

        /**
         * Execute setChapterThumbnailActive request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The chapter thumbnail was set as active. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Picture> _callback) throws ApiException {
            VideosChaptersSetChapterThumbnailActiveRequest videosChaptersSetChapterThumbnailActiveRequest = buildBodyParams();
            return setChapterThumbnailActiveAsync(chapterId, videoId, videosChaptersSetChapterThumbnailActiveRequest, _callback);
        }
    }

    /**
     * Set a chapter thumbnail as active
     * This method sets the specified chapter thumbnail for a video as active.
     * @param chapterId The ID of the chapter. (required)
     * @param videoId The ID of the video. (required)
     * @return SetChapterThumbnailActiveRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The chapter thumbnail was set as active. </td><td>  -  </td></tr>
     </table>
     */
    public SetChapterThumbnailActiveRequestBuilder setChapterThumbnailActive(double chapterId, double videoId) throws IllegalArgumentException {
        
        
        return new SetChapterThumbnailActiveRequestBuilder(chapterId, videoId);
    }
}
