/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EditingSession
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EditingSession {
  public static final String SERIALIZED_NAME_HAS_WATERMARK = "has_watermark";
  @SerializedName(SERIALIZED_NAME_HAS_WATERMARK)
  private Boolean hasWatermark;

  public static final String SERIALIZED_NAME_IS_EDITED_BY_TVE = "is_edited_by_tve";
  @SerializedName(SERIALIZED_NAME_IS_EDITED_BY_TVE)
  private Boolean isEditedByTve;

  public static final String SERIALIZED_NAME_IS_MAX_RESOLUTION = "is_max_resolution";
  @SerializedName(SERIALIZED_NAME_IS_MAX_RESOLUTION)
  private Boolean isMaxResolution;

  public static final String SERIALIZED_NAME_IS_MUSIC_LICENSED = "is_music_licensed";
  @SerializedName(SERIALIZED_NAME_IS_MUSIC_LICENSED)
  private Boolean isMusicLicensed;

  public static final String SERIALIZED_NAME_IS_RATED = "is_rated";
  @SerializedName(SERIALIZED_NAME_IS_RATED)
  private Boolean isRated;

  public static final String SERIALIZED_NAME_MIN_TIER_FOR_MOVIE = "min_tier_for_movie";
  @SerializedName(SERIALIZED_NAME_MIN_TIER_FOR_MOVIE)
  private String minTierForMovie;

  public static final String SERIALIZED_NAME_RESULT_VIDEO_HASH = "result_video_hash";
  @SerializedName(SERIALIZED_NAME_RESULT_VIDEO_HASH)
  private String resultVideoHash;

  /**
   * The status of the video.  Option descriptions:  * &#x60;done&#x60; - The video is finished processing.  * &#x60;processing&#x60; - The video is still being processed. 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    DONE("done"),
    
    PROCESSING("processing");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_VERSION_URI = "version_uri";
  @SerializedName(SERIALIZED_NAME_VERSION_URI)
  private String versionUri;

  public static final String SERIALIZED_NAME_VSID = "vsid";
  @SerializedName(SERIALIZED_NAME_VSID)
  private Double vsid;

  public EditingSession() {
  }

  public EditingSession hasWatermark(Boolean hasWatermark) {
    
    
    
    
    this.hasWatermark = hasWatermark;
    return this;
  }

   /**
   * Whether the video has a watermark.
   * @return hasWatermark
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether the video has a watermark.")

  public Boolean getHasWatermark() {
    return hasWatermark;
  }


  public void setHasWatermark(Boolean hasWatermark) {
    
    
    
    this.hasWatermark = hasWatermark;
  }


  public EditingSession isEditedByTve(Boolean isEditedByTve) {
    
    
    
    
    this.isEditedByTve = isEditedByTve;
    return this;
  }

   /**
   * Whether the video has been edited by Transcript Video Editing.
   * @return isEditedByTve
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether the video has been edited by Transcript Video Editing.")

  public Boolean getIsEditedByTve() {
    return isEditedByTve;
  }


  public void setIsEditedByTve(Boolean isEditedByTve) {
    
    
    
    this.isEditedByTve = isEditedByTve;
  }


  public EditingSession isMaxResolution(Boolean isMaxResolution) {
    
    
    
    
    this.isMaxResolution = isMaxResolution;
    return this;
  }

   /**
   * Whether the current version of the video is at the maximum resolution.
   * @return isMaxResolution
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether the current version of the video is at the maximum resolution.")

  public Boolean getIsMaxResolution() {
    return isMaxResolution;
  }


  public void setIsMaxResolution(Boolean isMaxResolution) {
    
    
    
    this.isMaxResolution = isMaxResolution;
  }


  public EditingSession isMusicLicensed(Boolean isMusicLicensed) {
    
    
    
    
    this.isMusicLicensed = isMusicLicensed;
    return this;
  }

   /**
   * Whether the video has licensed music.
   * @return isMusicLicensed
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether the video has licensed music.")

  public Boolean getIsMusicLicensed() {
    return isMusicLicensed;
  }


  public void setIsMusicLicensed(Boolean isMusicLicensed) {
    
    
    
    this.isMusicLicensed = isMusicLicensed;
  }


  public EditingSession isRated(Boolean isRated) {
    
    
    
    
    this.isRated = isRated;
    return this;
  }

   /**
   * Whether the video has been rated.
   * @return isRated
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "Whether the video has been rated.")

  public Boolean getIsRated() {
    return isRated;
  }


  public void setIsRated(Boolean isRated) {
    
    
    
    this.isRated = isRated;
  }


  public EditingSession minTierForMovie(String minTierForMovie) {
    
    
    
    
    this.minTierForMovie = minTierForMovie;
    return this;
  }

   /**
   * The minimum required Vimeo membership for the user to be able to share the video.
   * @return minTierForMovie
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The minimum required Vimeo membership for the user to be able to share the video.")

  public String getMinTierForMovie() {
    return minTierForMovie;
  }


  public void setMinTierForMovie(String minTierForMovie) {
    
    
    
    this.minTierForMovie = minTierForMovie;
  }


  public EditingSession resultVideoHash(String resultVideoHash) {
    
    
    
    
    this.resultVideoHash = resultVideoHash;
    return this;
  }

   /**
   * The result video hash for the created video.
   * @return resultVideoHash
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The result video hash for the created video.")

  public String getResultVideoHash() {
    return resultVideoHash;
  }


  public void setResultVideoHash(String resultVideoHash) {
    
    
    
    this.resultVideoHash = resultVideoHash;
  }


  public EditingSession status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The status of the video.  Option descriptions:  * &#x60;done&#x60; - The video is finished processing.  * &#x60;processing&#x60; - The video is still being processed. 
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "DONE", required = true, value = "The status of the video.  Option descriptions:  * `done` - The video is finished processing.  * `processing` - The video is still being processed. ")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public EditingSession versionUri(String versionUri) {
    
    
    
    
    this.versionUri = versionUri;
    return this;
  }

   /**
   * The version&#39;s canonical relative URI.
   * @return versionUri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "/videos/258684937/versions/12345", value = "The version's canonical relative URI.")

  public String getVersionUri() {
    return versionUri;
  }


  public void setVersionUri(String versionUri) {
    
    
    
    this.versionUri = versionUri;
  }


  public EditingSession vsid(Double vsid) {
    
    
    
    
    this.vsid = vsid;
    return this;
  }

  public EditingSession vsid(Integer vsid) {
    
    
    
    
    this.vsid = vsid.doubleValue();
    return this;
  }

   /**
   * The ID of the video&#39;s editing session.
   * @return vsid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The ID of the video's editing session.")

  public Double getVsid() {
    return vsid;
  }


  public void setVsid(Double vsid) {
    
    
    
    this.vsid = vsid;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EditingSession instance itself
   */
  public EditingSession putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EditingSession editingSession = (EditingSession) o;
    return Objects.equals(this.hasWatermark, editingSession.hasWatermark) &&
        Objects.equals(this.isEditedByTve, editingSession.isEditedByTve) &&
        Objects.equals(this.isMaxResolution, editingSession.isMaxResolution) &&
        Objects.equals(this.isMusicLicensed, editingSession.isMusicLicensed) &&
        Objects.equals(this.isRated, editingSession.isRated) &&
        Objects.equals(this.minTierForMovie, editingSession.minTierForMovie) &&
        Objects.equals(this.resultVideoHash, editingSession.resultVideoHash) &&
        Objects.equals(this.status, editingSession.status) &&
        Objects.equals(this.versionUri, editingSession.versionUri) &&
        Objects.equals(this.vsid, editingSession.vsid)&&
        Objects.equals(this.additionalProperties, editingSession.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hasWatermark, isEditedByTve, isMaxResolution, isMusicLicensed, isRated, minTierForMovie, resultVideoHash, status, versionUri, vsid, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EditingSession {\n");
    sb.append("    hasWatermark: ").append(toIndentedString(hasWatermark)).append("\n");
    sb.append("    isEditedByTve: ").append(toIndentedString(isEditedByTve)).append("\n");
    sb.append("    isMaxResolution: ").append(toIndentedString(isMaxResolution)).append("\n");
    sb.append("    isMusicLicensed: ").append(toIndentedString(isMusicLicensed)).append("\n");
    sb.append("    isRated: ").append(toIndentedString(isRated)).append("\n");
    sb.append("    minTierForMovie: ").append(toIndentedString(minTierForMovie)).append("\n");
    sb.append("    resultVideoHash: ").append(toIndentedString(resultVideoHash)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    versionUri: ").append(toIndentedString(versionUri)).append("\n");
    sb.append("    vsid: ").append(toIndentedString(vsid)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("has_watermark");
    openapiFields.add("is_edited_by_tve");
    openapiFields.add("is_max_resolution");
    openapiFields.add("is_music_licensed");
    openapiFields.add("is_rated");
    openapiFields.add("min_tier_for_movie");
    openapiFields.add("result_video_hash");
    openapiFields.add("status");
    openapiFields.add("version_uri");
    openapiFields.add("vsid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("has_watermark");
    openapiRequiredFields.add("is_edited_by_tve");
    openapiRequiredFields.add("is_max_resolution");
    openapiRequiredFields.add("is_music_licensed");
    openapiRequiredFields.add("is_rated");
    openapiRequiredFields.add("min_tier_for_movie");
    openapiRequiredFields.add("result_video_hash");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("vsid");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EditingSession
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EditingSession.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EditingSession is not found in the empty JSON string", EditingSession.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EditingSession.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("min_tier_for_movie").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `min_tier_for_movie` to be a primitive type in the JSON string but got `%s`", jsonObj.get("min_tier_for_movie").toString()));
      }
      if (!jsonObj.get("result_video_hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result_video_hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result_video_hash").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("version_uri") != null && !jsonObj.get("version_uri").isJsonNull()) && !jsonObj.get("version_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version_uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EditingSession.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EditingSession' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EditingSession> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EditingSession.class));

       return (TypeAdapter<T>) new TypeAdapter<EditingSession>() {
           @Override
           public void write(JsonWriter out, EditingSession value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EditingSession read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EditingSession instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EditingSession given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EditingSession
  * @throws IOException if the JSON string is invalid with respect to EditingSession
  */
  public static EditingSession fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EditingSession.class);
  }

 /**
  * Convert an instance of EditingSession to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

