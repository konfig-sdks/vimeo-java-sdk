/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.OnDemandRegion;
import com.konfigthis.client.model.OnDemandRegionsAddMultipleRequest;
import com.konfigthis.client.model.OnDemandRegionsRemoveMultipleRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OnDemandRegionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OnDemandRegionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OnDemandRegionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addMultipleCall(Double ondemandId, OnDemandRegionsAddMultipleRequest onDemandRegionsAddMultipleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = onDemandRegionsAddMultipleRequest;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/regions"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.region+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.ondemand.region+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMultipleValidateBeforeCall(Double ondemandId, OnDemandRegionsAddMultipleRequest onDemandRegionsAddMultipleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling addMultiple(Async)");
        }

        // verify the required parameter 'onDemandRegionsAddMultipleRequest' is set
        if (onDemandRegionsAddMultipleRequest == null) {
            throw new ApiException("Missing the required parameter 'onDemandRegionsAddMultipleRequest' when calling addMultiple(Async)");
        }

        return addMultipleCall(ondemandId, onDemandRegionsAddMultipleRequest, _callback);

    }


    private ApiResponse<OnDemandRegion> addMultipleWithHttpInfo(Double ondemandId, OnDemandRegionsAddMultipleRequest onDemandRegionsAddMultipleRequest) throws ApiException {
        okhttp3.Call localVarCall = addMultipleValidateBeforeCall(ondemandId, onDemandRegionsAddMultipleRequest, null);
        Type localVarReturnType = new TypeToken<OnDemandRegion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addMultipleAsync(Double ondemandId, OnDemandRegionsAddMultipleRequest onDemandRegionsAddMultipleRequest, final ApiCallback<OnDemandRegion> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMultipleValidateBeforeCall(ondemandId, onDemandRegionsAddMultipleRequest, _callback);
        Type localVarReturnType = new TypeToken<OnDemandRegion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddMultipleRequestBuilder {
        private final List<String> countries;
        private final Double ondemandId;

        private AddMultipleRequestBuilder(List<String> countries, double ondemandId) {
            this.countries = countries;
            this.ondemandId = ondemandId;
        }

        /**
         * Build call for addMultiple
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of regions was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OnDemandRegionsAddMultipleRequest onDemandRegionsAddMultipleRequest = buildBodyParams();
            return addMultipleCall(ondemandId, onDemandRegionsAddMultipleRequest, _callback);
        }

        private OnDemandRegionsAddMultipleRequest buildBodyParams() {
            OnDemandRegionsAddMultipleRequest onDemandRegionsAddMultipleRequest = new OnDemandRegionsAddMultipleRequest();
            onDemandRegionsAddMultipleRequest.countries(this.countries);
            return onDemandRegionsAddMultipleRequest;
        }

        /**
         * Execute addMultiple request
         * @return OnDemandRegion
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of regions was added. </td><td>  -  </td></tr>
         </table>
         */
        public OnDemandRegion execute() throws ApiException {
            OnDemandRegionsAddMultipleRequest onDemandRegionsAddMultipleRequest = buildBodyParams();
            ApiResponse<OnDemandRegion> localVarResp = addMultipleWithHttpInfo(ondemandId, onDemandRegionsAddMultipleRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addMultiple request with HTTP info returned
         * @return ApiResponse&lt;OnDemandRegion&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of regions was added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OnDemandRegion> executeWithHttpInfo() throws ApiException {
            OnDemandRegionsAddMultipleRequest onDemandRegionsAddMultipleRequest = buildBodyParams();
            return addMultipleWithHttpInfo(ondemandId, onDemandRegionsAddMultipleRequest);
        }

        /**
         * Execute addMultiple request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of regions was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OnDemandRegion> _callback) throws ApiException {
            OnDemandRegionsAddMultipleRequest onDemandRegionsAddMultipleRequest = buildBodyParams();
            return addMultipleAsync(ondemandId, onDemandRegionsAddMultipleRequest, _callback);
        }
    }

    /**
     * Add a list of regions to an On Demand page
     * This method adds multiple regions to the specified On Demand page. The authenticated user must be the owner of the page.
     * @param ondemandId The ID of the On Demand page. (required)
     * @param onDemandRegionsAddMultipleRequest  (required)
     * @return AddMultipleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of regions was added. </td><td>  -  </td></tr>
     </table>
     */
    public AddMultipleRequestBuilder addMultiple(List<String> countries, double ondemandId) throws IllegalArgumentException {
        if (countries == null) throw new IllegalArgumentException("\"countries\" is required but got null");
        
        return new AddMultipleRequestBuilder(countries, ondemandId);
    }
    private okhttp3.Call addRegionToPageCall(String country, Double ondemandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/regions/{country}"
            .replace("{" + "country" + "}", localVarApiClient.escapeString(country.toString()))
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.region+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addRegionToPageValidateBeforeCall(String country, Double ondemandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling addRegionToPage(Async)");
        }

        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling addRegionToPage(Async)");
        }

        return addRegionToPageCall(country, ondemandId, _callback);

    }


    private ApiResponse<OnDemandRegion> addRegionToPageWithHttpInfo(String country, Double ondemandId) throws ApiException {
        okhttp3.Call localVarCall = addRegionToPageValidateBeforeCall(country, ondemandId, null);
        Type localVarReturnType = new TypeToken<OnDemandRegion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addRegionToPageAsync(String country, Double ondemandId, final ApiCallback<OnDemandRegion> _callback) throws ApiException {

        okhttp3.Call localVarCall = addRegionToPageValidateBeforeCall(country, ondemandId, _callback);
        Type localVarReturnType = new TypeToken<OnDemandRegion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddRegionToPageRequestBuilder {
        private final String country;
        private final Double ondemandId;

        private AddRegionToPageRequestBuilder(String country, double ondemandId) {
            this.country = country;
            this.ondemandId = ondemandId;
        }

        /**
         * Build call for addRegionToPage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The region was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addRegionToPageCall(country, ondemandId, _callback);
        }


        /**
         * Execute addRegionToPage request
         * @return OnDemandRegion
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The region was added. </td><td>  -  </td></tr>
         </table>
         */
        public OnDemandRegion execute() throws ApiException {
            ApiResponse<OnDemandRegion> localVarResp = addRegionToPageWithHttpInfo(country, ondemandId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addRegionToPage request with HTTP info returned
         * @return ApiResponse&lt;OnDemandRegion&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The region was added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OnDemandRegion> executeWithHttpInfo() throws ApiException {
            return addRegionToPageWithHttpInfo(country, ondemandId);
        }

        /**
         * Execute addRegionToPage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The region was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OnDemandRegion> _callback) throws ApiException {
            return addRegionToPageAsync(country, ondemandId, _callback);
        }
    }

    /**
     * Add a specific region to an On Demand page
     * This method adds a single region to the specified On Demand page. The authenticated user must be the owner of the page.
     * @param country The country code of the region to add. (required)
     * @param ondemandId The ID of the On Demand page. (required)
     * @return AddRegionToPageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The region was added. </td><td>  -  </td></tr>
     </table>
     */
    public AddRegionToPageRequestBuilder addRegionToPage(String country, double ondemandId) throws IllegalArgumentException {
        if (country == null) throw new IllegalArgumentException("\"country\" is required but got null");
            

        
        return new AddRegionToPageRequestBuilder(country, ondemandId);
    }
    private okhttp3.Call getAllCall(Double ondemandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/regions"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.region+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(Double ondemandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling getAll(Async)");
        }

        return getAllCall(ondemandId, _callback);

    }


    private ApiResponse<List<OnDemandRegion>> getAllWithHttpInfo(Double ondemandId) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(ondemandId, null);
        Type localVarReturnType = new TypeToken<List<OnDemandRegion>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(Double ondemandId, final ApiCallback<List<OnDemandRegion>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(ondemandId, _callback);
        Type localVarReturnType = new TypeToken<List<OnDemandRegion>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {
        private final Double ondemandId;

        private GetAllRequestBuilder(double ondemandId) {
            this.ondemandId = ondemandId;
        }

        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The regions were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(ondemandId, _callback);
        }


        /**
         * Execute getAll request
         * @return List&lt;OnDemandRegion&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The regions were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<OnDemandRegion> execute() throws ApiException {
            ApiResponse<List<OnDemandRegion>> localVarResp = getAllWithHttpInfo(ondemandId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;List&lt;OnDemandRegion&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The regions were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<OnDemandRegion>> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo(ondemandId);
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The regions were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<OnDemandRegion>> _callback) throws ApiException {
            return getAllAsync(ondemandId, _callback);
        }
    }

    /**
     * Get all the regions on an On Demand page
     * This method returns every region on the specified On Demand page. The authenticated user must be the owner of the page.
     * @param ondemandId The ID of the On Demand page. (required)
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The regions were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll(double ondemandId) throws IllegalArgumentException {
        
        return new GetAllRequestBuilder(ondemandId);
    }
    private okhttp3.Call getSpecificRegionCall(String country, Double ondemandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/regions/{country}"
            .replace("{" + "country" + "}", localVarApiClient.escapeString(country.toString()))
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.region+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificRegionValidateBeforeCall(String country, Double ondemandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling getSpecificRegion(Async)");
        }

        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling getSpecificRegion(Async)");
        }

        return getSpecificRegionCall(country, ondemandId, _callback);

    }


    private ApiResponse<OnDemandRegion> getSpecificRegionWithHttpInfo(String country, Double ondemandId) throws ApiException {
        okhttp3.Call localVarCall = getSpecificRegionValidateBeforeCall(country, ondemandId, null);
        Type localVarReturnType = new TypeToken<OnDemandRegion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificRegionAsync(String country, Double ondemandId, final ApiCallback<OnDemandRegion> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificRegionValidateBeforeCall(country, ondemandId, _callback);
        Type localVarReturnType = new TypeToken<OnDemandRegion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificRegionRequestBuilder {
        private final String country;
        private final Double ondemandId;

        private GetSpecificRegionRequestBuilder(String country, double ondemandId) {
            this.country = country;
            this.ondemandId = ondemandId;
        }

        /**
         * Build call for getSpecificRegion
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The region was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificRegionCall(country, ondemandId, _callback);
        }


        /**
         * Execute getSpecificRegion request
         * @return OnDemandRegion
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The region was returned. </td><td>  -  </td></tr>
         </table>
         */
        public OnDemandRegion execute() throws ApiException {
            ApiResponse<OnDemandRegion> localVarResp = getSpecificRegionWithHttpInfo(country, ondemandId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificRegion request with HTTP info returned
         * @return ApiResponse&lt;OnDemandRegion&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The region was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OnDemandRegion> executeWithHttpInfo() throws ApiException {
            return getSpecificRegionWithHttpInfo(country, ondemandId);
        }

        /**
         * Execute getSpecificRegion request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The region was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OnDemandRegion> _callback) throws ApiException {
            return getSpecificRegionAsync(country, ondemandId, _callback);
        }
    }

    /**
     * Get a specific region on an On Demand page
     * This method returns a single region on the specified On Demand page. The authenticated user must be the owner of the page.
     * @param country The country code of the region to return. (required)
     * @param ondemandId The ID of the On Demand page. (required)
     * @return GetSpecificRegionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The region was returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificRegionRequestBuilder getSpecificRegion(String country, double ondemandId) throws IllegalArgumentException {
        if (country == null) throw new IllegalArgumentException("\"country\" is required but got null");
            

        
        return new GetSpecificRegionRequestBuilder(country, ondemandId);
    }
    private okhttp3.Call regionCall(String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/regions/{country}"
            .replace("{" + "country" + "}", localVarApiClient.escapeString(country.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.region+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call regionValidateBeforeCall(String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling region(Async)");
        }

        return regionCall(country, _callback);

    }


    private ApiResponse<OnDemandRegion> regionWithHttpInfo(String country) throws ApiException {
        okhttp3.Call localVarCall = regionValidateBeforeCall(country, null);
        Type localVarReturnType = new TypeToken<OnDemandRegion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call regionAsync(String country, final ApiCallback<OnDemandRegion> _callback) throws ApiException {

        okhttp3.Call localVarCall = regionValidateBeforeCall(country, _callback);
        Type localVarReturnType = new TypeToken<OnDemandRegion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RegionRequestBuilder {
        private final String country;

        private RegionRequestBuilder(String country) {
            this.country = country;
        }

        /**
         * Build call for region
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The region was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return regionCall(country, _callback);
        }


        /**
         * Execute region request
         * @return OnDemandRegion
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The region was returned. </td><td>  -  </td></tr>
         </table>
         */
        public OnDemandRegion execute() throws ApiException {
            ApiResponse<OnDemandRegion> localVarResp = regionWithHttpInfo(country);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute region request with HTTP info returned
         * @return ApiResponse&lt;OnDemandRegion&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The region was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OnDemandRegion> executeWithHttpInfo() throws ApiException {
            return regionWithHttpInfo(country);
        }

        /**
         * Execute region request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The region was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OnDemandRegion> _callback) throws ApiException {
            return regionAsync(country, _callback);
        }
    }

    /**
     * Get a specific On Demand region
     * This method returns a single On Demand region.
     * @param country The country code of the region to return. (required)
     * @return RegionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The region was returned. </td><td>  -  </td></tr>
     </table>
     */
    public RegionRequestBuilder region(String country) throws IllegalArgumentException {
        if (country == null) throw new IllegalArgumentException("\"country\" is required but got null");
            

        return new RegionRequestBuilder(country);
    }
    private okhttp3.Call regionsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/regions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.region+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call regionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return regionsCall(_callback);

    }


    private ApiResponse<List<OnDemandRegion>> regionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = regionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<OnDemandRegion>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call regionsAsync(final ApiCallback<List<OnDemandRegion>> _callback) throws ApiException {

        okhttp3.Call localVarCall = regionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<OnDemandRegion>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RegionsRequestBuilder {

        private RegionsRequestBuilder() {
        }

        /**
         * Build call for regions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The regions were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return regionsCall(_callback);
        }


        /**
         * Execute regions request
         * @return List&lt;OnDemandRegion&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The regions were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<OnDemandRegion> execute() throws ApiException {
            ApiResponse<List<OnDemandRegion>> localVarResp = regionsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute regions request with HTTP info returned
         * @return ApiResponse&lt;List&lt;OnDemandRegion&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The regions were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<OnDemandRegion>> executeWithHttpInfo() throws ApiException {
            return regionsWithHttpInfo();
        }

        /**
         * Execute regions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The regions were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<OnDemandRegion>> _callback) throws ApiException {
            return regionsAsync(_callback);
        }
    }

    /**
     * Get all the On Demand regions
     * This method returns every existing On Demand region.
     * @return RegionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The regions were returned. </td><td>  -  </td></tr>
     </table>
     */
    public RegionsRequestBuilder regions() throws IllegalArgumentException {
        return new RegionsRequestBuilder();
    }
    private okhttp3.Call removeMultipleCall(Double ondemandId, OnDemandRegionsRemoveMultipleRequest onDemandRegionsRemoveMultipleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = onDemandRegionsRemoveMultipleRequest;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/regions"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.region+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.ondemand.region+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeMultipleValidateBeforeCall(Double ondemandId, OnDemandRegionsRemoveMultipleRequest onDemandRegionsRemoveMultipleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling removeMultiple(Async)");
        }

        return removeMultipleCall(ondemandId, onDemandRegionsRemoveMultipleRequest, _callback);

    }


    private ApiResponse<List<OnDemandRegion>> removeMultipleWithHttpInfo(Double ondemandId, OnDemandRegionsRemoveMultipleRequest onDemandRegionsRemoveMultipleRequest) throws ApiException {
        okhttp3.Call localVarCall = removeMultipleValidateBeforeCall(ondemandId, onDemandRegionsRemoveMultipleRequest, null);
        Type localVarReturnType = new TypeToken<List<OnDemandRegion>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeMultipleAsync(Double ondemandId, OnDemandRegionsRemoveMultipleRequest onDemandRegionsRemoveMultipleRequest, final ApiCallback<List<OnDemandRegion>> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeMultipleValidateBeforeCall(ondemandId, onDemandRegionsRemoveMultipleRequest, _callback);
        Type localVarReturnType = new TypeToken<List<OnDemandRegion>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveMultipleRequestBuilder {
        private final Double ondemandId;
        private List<String> countries;

        private RemoveMultipleRequestBuilder(double ondemandId) {
            this.ondemandId = ondemandId;
        }

        /**
         * Set countries
         * @param countries An array of country codes for the regions to remove. (optional)
         * @return RemoveMultipleRequestBuilder
         */
        public RemoveMultipleRequestBuilder countries(List<String> countries) {
            this.countries = countries;
            return this;
        }
        
        /**
         * Build call for removeMultiple
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The regions were removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OnDemandRegionsRemoveMultipleRequest onDemandRegionsRemoveMultipleRequest = buildBodyParams();
            return removeMultipleCall(ondemandId, onDemandRegionsRemoveMultipleRequest, _callback);
        }

        private OnDemandRegionsRemoveMultipleRequest buildBodyParams() {
            OnDemandRegionsRemoveMultipleRequest onDemandRegionsRemoveMultipleRequest = new OnDemandRegionsRemoveMultipleRequest();
            onDemandRegionsRemoveMultipleRequest.countries(this.countries);
            return onDemandRegionsRemoveMultipleRequest;
        }

        /**
         * Execute removeMultiple request
         * @return List&lt;OnDemandRegion&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The regions were removed. </td><td>  -  </td></tr>
         </table>
         */
        public List<OnDemandRegion> execute() throws ApiException {
            OnDemandRegionsRemoveMultipleRequest onDemandRegionsRemoveMultipleRequest = buildBodyParams();
            ApiResponse<List<OnDemandRegion>> localVarResp = removeMultipleWithHttpInfo(ondemandId, onDemandRegionsRemoveMultipleRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeMultiple request with HTTP info returned
         * @return ApiResponse&lt;List&lt;OnDemandRegion&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The regions were removed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<OnDemandRegion>> executeWithHttpInfo() throws ApiException {
            OnDemandRegionsRemoveMultipleRequest onDemandRegionsRemoveMultipleRequest = buildBodyParams();
            return removeMultipleWithHttpInfo(ondemandId, onDemandRegionsRemoveMultipleRequest);
        }

        /**
         * Execute removeMultiple request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The regions were removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<OnDemandRegion>> _callback) throws ApiException {
            OnDemandRegionsRemoveMultipleRequest onDemandRegionsRemoveMultipleRequest = buildBodyParams();
            return removeMultipleAsync(ondemandId, onDemandRegionsRemoveMultipleRequest, _callback);
        }
    }

    /**
     * Remove a list of regions from an On Demand page
     * This method removes multiple regions from the specified On Demand page. The authenticated user must be the owner of the page.
     * @param ondemandId The ID of the On Demand page. (required)
     * @return RemoveMultipleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The regions were removed. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveMultipleRequestBuilder removeMultiple(double ondemandId) throws IllegalArgumentException {
        
        return new RemoveMultipleRequestBuilder(ondemandId);
    }
    private okhttp3.Call removeSpecificRegionCall(String country, Double ondemandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/regions/{country}"
            .replace("{" + "country" + "}", localVarApiClient.escapeString(country.toString()))
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.region+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeSpecificRegionValidateBeforeCall(String country, Double ondemandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling removeSpecificRegion(Async)");
        }

        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling removeSpecificRegion(Async)");
        }

        return removeSpecificRegionCall(country, ondemandId, _callback);

    }


    private ApiResponse<Void> removeSpecificRegionWithHttpInfo(String country, Double ondemandId) throws ApiException {
        okhttp3.Call localVarCall = removeSpecificRegionValidateBeforeCall(country, ondemandId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeSpecificRegionAsync(String country, Double ondemandId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeSpecificRegionValidateBeforeCall(country, ondemandId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveSpecificRegionRequestBuilder {
        private final String country;
        private final Double ondemandId;

        private RemoveSpecificRegionRequestBuilder(String country, double ondemandId) {
            this.country = country;
            this.ondemandId = ondemandId;
        }

        /**
         * Build call for removeSpecificRegion
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The region was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeSpecificRegionCall(country, ondemandId, _callback);
        }


        /**
         * Execute removeSpecificRegion request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The region was removed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeSpecificRegionWithHttpInfo(country, ondemandId);
        }

        /**
         * Execute removeSpecificRegion request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The region was removed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeSpecificRegionWithHttpInfo(country, ondemandId);
        }

        /**
         * Execute removeSpecificRegion request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The region was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeSpecificRegionAsync(country, ondemandId, _callback);
        }
    }

    /**
     * Remove a specific region from an On Demand page
     * This method removes a single region from the specified On Demand page. The authenticated user must be the owner of the page.
     * @param country The country code of the region to remove. (required)
     * @param ondemandId The ID of the On Demand page. (required)
     * @return RemoveSpecificRegionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The region was removed. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveSpecificRegionRequestBuilder removeSpecificRegion(String country, double ondemandId) throws IllegalArgumentException {
        if (country == null) throw new IllegalArgumentException("\"country\" is required but got null");
            

        
        return new RemoveSpecificRegionRequestBuilder(country, ondemandId);
    }
}
