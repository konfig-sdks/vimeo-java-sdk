/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.LiveEventEmbedColors;
import com.konfigthis.client.model.LiveEventEmbedEmbedProperties;
import com.konfigthis.client.model.LiveEventEmbedLogos;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The event&#39;s embed data.
 */
@ApiModel(description = "The event's embed data.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LiveEventEmbed {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private Boolean title;

  public static final String SERIALIZED_NAME_AIRPLAY = "airplay";
  @SerializedName(SERIALIZED_NAME_AIRPLAY)
  private Boolean airplay;

  public static final String SERIALIZED_NAME_AUTOPLAY = "autoplay";
  @SerializedName(SERIALIZED_NAME_AUTOPLAY)
  private Boolean autoplay;

  public static final String SERIALIZED_NAME_AVAILABLE_PLAYER_LOGOS = "available_player_logos";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_PLAYER_LOGOS)
  private List<String> availablePlayerLogos = new ArrayList<>();

  public static final String SERIALIZED_NAME_BYLINE = "byline";
  @SerializedName(SERIALIZED_NAME_BYLINE)
  private Boolean byline;

  public static final String SERIALIZED_NAME_CHAT_EMBED_SOURCE = "chat_embed_source";
  @SerializedName(SERIALIZED_NAME_CHAT_EMBED_SOURCE)
  private String chatEmbedSource;

  public static final String SERIALIZED_NAME_CHROMECAST = "chromecast";
  @SerializedName(SERIALIZED_NAME_CHROMECAST)
  private Boolean chromecast;

  public static final String SERIALIZED_NAME_CLOSED_CAPTIONS = "closed_captions";
  @SerializedName(SERIALIZED_NAME_CLOSED_CAPTIONS)
  private Boolean closedCaptions;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_COLORS = "colors";
  @SerializedName(SERIALIZED_NAME_COLORS)
  private LiveEventEmbedColors colors;

  public static final String SERIALIZED_NAME_EMBED_CHAT = "embed_chat";
  @SerializedName(SERIALIZED_NAME_EMBED_CHAT)
  private String embedChat;

  public static final String SERIALIZED_NAME_EMBED_PROPERTIES = "embed_properties";
  @SerializedName(SERIALIZED_NAME_EMBED_PROPERTIES)
  private LiveEventEmbedEmbedProperties embedProperties;

  public static final String SERIALIZED_NAME_EVENT_SCHEDULE = "event_schedule";
  @SerializedName(SERIALIZED_NAME_EVENT_SCHEDULE)
  private Boolean eventSchedule;

  public static final String SERIALIZED_NAME_FULLSCREEN_BUTTON = "fullscreen_button";
  @SerializedName(SERIALIZED_NAME_FULLSCREEN_BUTTON)
  private Boolean fullscreenButton;

  public static final String SERIALIZED_NAME_HIDE_LIVE_LABEL = "hide_live_label";
  @SerializedName(SERIALIZED_NAME_HIDE_LIVE_LABEL)
  private Boolean hideLiveLabel;

  public static final String SERIALIZED_NAME_HIDE_VIEWER_COUNT = "hide_viewer_count";
  @SerializedName(SERIALIZED_NAME_HIDE_VIEWER_COUNT)
  private Boolean hideViewerCount;

  public static final String SERIALIZED_NAME_HTML = "html";
  @SerializedName(SERIALIZED_NAME_HTML)
  private String html;

  public static final String SERIALIZED_NAME_LIKE_BUTTON = "like_button";
  @SerializedName(SERIALIZED_NAME_LIKE_BUTTON)
  private Boolean likeButton;

  public static final String SERIALIZED_NAME_LOGOS = "logos";
  @SerializedName(SERIALIZED_NAME_LOGOS)
  private LiveEventEmbedLogos logos;

  public static final String SERIALIZED_NAME_LOOP = "loop";
  @SerializedName(SERIALIZED_NAME_LOOP)
  private Boolean loop;

  public static final String SERIALIZED_NAME_PIP = "pip";
  @SerializedName(SERIALIZED_NAME_PIP)
  private Boolean pip;

  /**
   * The position of the player&#39;s play button.  Option descriptions:  * &#x60;0&#x60; - The play button has the default position.  * &#x60;1&#x60; - The play button appears at the bottom of the interface.  * &#x60;2&#x60; - The play button appears in the center of the interface. 
   */
  @JsonAdapter(PlayButtonPositionEnum.Adapter.class)
 public enum PlayButtonPositionEnum {
    _0("0"),
    
    _1("1"),
    
    _2("2");

    private String value;

    PlayButtonPositionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlayButtonPositionEnum fromValue(String value) {
      for (PlayButtonPositionEnum b : PlayButtonPositionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlayButtonPositionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlayButtonPositionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlayButtonPositionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlayButtonPositionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PLAY_BUTTON_POSITION = "play_button_position";
  @SerializedName(SERIALIZED_NAME_PLAY_BUTTON_POSITION)
  private PlayButtonPositionEnum playButtonPosition;

  public static final String SERIALIZED_NAME_PLAYBAR = "playbar";
  @SerializedName(SERIALIZED_NAME_PLAYBAR)
  private Boolean playbar;

  public static final String SERIALIZED_NAME_PLAYLIST = "playlist";
  @SerializedName(SERIALIZED_NAME_PLAYLIST)
  private Boolean playlist;

  public static final String SERIALIZED_NAME_PORTRAIT = "portrait";
  @SerializedName(SERIALIZED_NAME_PORTRAIT)
  private Boolean portrait;

  public static final String SERIALIZED_NAME_RESPONSIVE_HTML = "responsive_html";
  @SerializedName(SERIALIZED_NAME_RESPONSIVE_HTML)
  private String responsiveHtml;

  public static final String SERIALIZED_NAME_SCHEDULE = "schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private Boolean schedule;

  public static final String SERIALIZED_NAME_SHOW_LATEST_ARCHIVED_CLIP = "show_latest_archived_clip";
  @SerializedName(SERIALIZED_NAME_SHOW_LATEST_ARCHIVED_CLIP)
  private Boolean showLatestArchivedClip;

  public static final String SERIALIZED_NAME_SHOW_TIMEZONE = "show_timezone";
  @SerializedName(SERIALIZED_NAME_SHOW_TIMEZONE)
  private Boolean showTimezone;

  public static final String SERIALIZED_NAME_USE_COLOR = "use_color";
  @SerializedName(SERIALIZED_NAME_USE_COLOR)
  private String useColor;

  public static final String SERIALIZED_NAME_VOLUME = "volume";
  @SerializedName(SERIALIZED_NAME_VOLUME)
  private Boolean volume;

  public LiveEventEmbed() {
  }

  public LiveEventEmbed title(Boolean title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Whether the embedded RLE player should display the video title.
   * @return title
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the embedded RLE player should display the video title.")

  public Boolean getTitle() {
    return title;
  }


  public void setTitle(Boolean title) {
    
    
    
    this.title = title;
  }


  public LiveEventEmbed airplay(Boolean airplay) {
    
    
    
    
    this.airplay = airplay;
    return this;
  }

   /**
   * Whether AirPlay is enabled in the embeddable player.
   * @return airplay
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether AirPlay is enabled in the embeddable player.")

  public Boolean getAirplay() {
    return airplay;
  }


  public void setAirplay(Boolean airplay) {
    
    
    
    this.airplay = airplay;
  }


  public LiveEventEmbed autoplay(Boolean autoplay) {
    
    
    
    
    this.autoplay = autoplay;
    return this;
  }

   /**
   * Whether the embedded RLE player should autoplay the RLE content.
   * @return autoplay
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the embedded RLE player should autoplay the RLE content.")

  public Boolean getAutoplay() {
    return autoplay;
  }


  public void setAutoplay(Boolean autoplay) {
    
    
    
    this.autoplay = autoplay;
  }


  public LiveEventEmbed availablePlayerLogos(List<String> availablePlayerLogos) {
    
    
    
    
    this.availablePlayerLogos = availablePlayerLogos;
    return this;
  }

  public LiveEventEmbed addAvailablePlayerLogosItem(String availablePlayerLogosItem) {
    this.availablePlayerLogos.add(availablePlayerLogosItem);
    return this;
  }

   /**
   * The list of user-uploaded logos for configuration of the embed player.
   * @return availablePlayerLogos
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The list of user-uploaded logos for configuration of the embed player.")

  public List<String> getAvailablePlayerLogos() {
    return availablePlayerLogos;
  }


  public void setAvailablePlayerLogos(List<String> availablePlayerLogos) {
    
    
    
    this.availablePlayerLogos = availablePlayerLogos;
  }


  public LiveEventEmbed byline(Boolean byline) {
    
    
    
    
    this.byline = byline;
    return this;
  }

   /**
   * Whether the embedded RLE player should display the author&#39;s name.
   * @return byline
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the embedded RLE player should display the author's name.")

  public Boolean getByline() {
    return byline;
  }


  public void setByline(Boolean byline) {
    
    
    
    this.byline = byline;
  }


  public LiveEventEmbed chatEmbedSource(String chatEmbedSource) {
    
    
    
    
    this.chatEmbedSource = chatEmbedSource;
    return this;
  }

   /**
   * The chat&#39;s iFrame source URL.
   * @return chatEmbedSource
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The chat's iFrame source URL.")

  public String getChatEmbedSource() {
    return chatEmbedSource;
  }


  public void setChatEmbedSource(String chatEmbedSource) {
    
    
    
    this.chatEmbedSource = chatEmbedSource;
  }


  public LiveEventEmbed chromecast(Boolean chromecast) {
    
    
    
    
    this.chromecast = chromecast;
    return this;
  }

   /**
   * Whether the Chromecast button appears in the embeddable player.
   * @return chromecast
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the Chromecast button appears in the embeddable player.")

  public Boolean getChromecast() {
    return chromecast;
  }


  public void setChromecast(Boolean chromecast) {
    
    
    
    this.chromecast = chromecast;
  }


  public LiveEventEmbed closedCaptions(Boolean closedCaptions) {
    
    
    
    
    this.closedCaptions = closedCaptions;
    return this;
  }

   /**
   * Whether closed captions are enabled in the embeddable player.
   * @return closedCaptions
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether closed captions are enabled in the embeddable player.")

  public Boolean getClosedCaptions() {
    return closedCaptions;
  }


  public void setClosedCaptions(Boolean closedCaptions) {
    
    
    
    this.closedCaptions = closedCaptions;
  }


  public LiveEventEmbed color(String color) {
    
    
    
    
    this.color = color;
    return this;
  }

   /**
   * The first player color, which controls the color of the progress bar, buttons, and more.
   * @return color
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "#0a0808", required = true, value = "The first player color, which controls the color of the progress bar, buttons, and more.")

  public String getColor() {
    return color;
  }


  public void setColor(String color) {
    
    
    
    this.color = color;
  }


  public LiveEventEmbed colors(LiveEventEmbedColors colors) {
    
    
    
    
    this.colors = colors;
    return this;
  }

   /**
   * Get colors
   * @return colors
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public LiveEventEmbedColors getColors() {
    return colors;
  }


  public void setColors(LiveEventEmbedColors colors) {
    
    
    
    this.colors = colors;
  }


  public LiveEventEmbed embedChat(String embedChat) {
    
    
    
    
    this.embedChat = embedChat;
    return this;
  }

   /**
   * The embed code for RLE chat.
   * @return embedChat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The embed code for RLE chat.")

  public String getEmbedChat() {
    return embedChat;
  }


  public void setEmbedChat(String embedChat) {
    
    
    
    this.embedChat = embedChat;
  }


  public LiveEventEmbed embedProperties(LiveEventEmbedEmbedProperties embedProperties) {
    
    
    
    
    this.embedProperties = embedProperties;
    return this;
  }

   /**
   * Get embedProperties
   * @return embedProperties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public LiveEventEmbedEmbedProperties getEmbedProperties() {
    return embedProperties;
  }


  public void setEmbedProperties(LiveEventEmbedEmbedProperties embedProperties) {
    
    
    
    this.embedProperties = embedProperties;
  }


  public LiveEventEmbed eventSchedule(Boolean eventSchedule) {
    
    
    
    
    this.eventSchedule = eventSchedule;
    return this;
  }

   /**
   * Whether the embedded RLE player should display the event schedule.
   * @return eventSchedule
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the embedded RLE player should display the event schedule.")

  public Boolean getEventSchedule() {
    return eventSchedule;
  }


  public void setEventSchedule(Boolean eventSchedule) {
    
    
    
    this.eventSchedule = eventSchedule;
  }


  public LiveEventEmbed fullscreenButton(Boolean fullscreenButton) {
    
    
    
    
    this.fullscreenButton = fullscreenButton;
    return this;
  }

   /**
   * Whether the embedded RLE player should include the fullscreen controls.
   * @return fullscreenButton
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the embedded RLE player should include the fullscreen controls.")

  public Boolean getFullscreenButton() {
    return fullscreenButton;
  }


  public void setFullscreenButton(Boolean fullscreenButton) {
    
    
    
    this.fullscreenButton = fullscreenButton;
  }


  public LiveEventEmbed hideLiveLabel(Boolean hideLiveLabel) {
    
    
    
    
    this.hideLiveLabel = hideLiveLabel;
    return this;
  }

   /**
   * Whether the Live label should be visible over the player.
   * @return hideLiveLabel
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "Whether the Live label should be visible over the player.")

  public Boolean getHideLiveLabel() {
    return hideLiveLabel;
  }


  public void setHideLiveLabel(Boolean hideLiveLabel) {
    
    
    
    this.hideLiveLabel = hideLiveLabel;
  }


  public LiveEventEmbed hideViewerCount(Boolean hideViewerCount) {
    
    
    
    
    this.hideViewerCount = hideViewerCount;
    return this;
  }

   /**
   * Whether the embedded RLE player should hide the viewer counter.
   * @return hideViewerCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the embedded RLE player should hide the viewer counter.")

  public Boolean getHideViewerCount() {
    return hideViewerCount;
  }


  public void setHideViewerCount(Boolean hideViewerCount) {
    
    
    
    this.hideViewerCount = hideViewerCount;
  }


  public LiveEventEmbed html(String html) {
    
    
    
    
    this.html = html;
    return this;
  }

   /**
   * The fixed HTML code to embed the event&#39;s playlist on a website.
   * @return html
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The fixed HTML code to embed the event's playlist on a website.")

  public String getHtml() {
    return html;
  }


  public void setHtml(String html) {
    
    
    
    this.html = html;
  }


  public LiveEventEmbed likeButton(Boolean likeButton) {
    
    
    
    
    this.likeButton = likeButton;
    return this;
  }

   /**
   * Whether the embedded RLE player should include the &#x60;like&#x60; button.
   * @return likeButton
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the embedded RLE player should include the `like` button.")

  public Boolean getLikeButton() {
    return likeButton;
  }


  public void setLikeButton(Boolean likeButton) {
    
    
    
    this.likeButton = likeButton;
  }


  public LiveEventEmbed logos(LiveEventEmbedLogos logos) {
    
    
    
    
    this.logos = logos;
    return this;
  }

   /**
   * Get logos
   * @return logos
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public LiveEventEmbedLogos getLogos() {
    return logos;
  }


  public void setLogos(LiveEventEmbedLogos logos) {
    
    
    
    this.logos = logos;
  }


  public LiveEventEmbed loop(Boolean loop) {
    
    
    
    
    this.loop = loop;
    return this;
  }

   /**
   * Whether the embedded RLE player should loop back to the first video once content is exhausted.
   * @return loop
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the embedded RLE player should loop back to the first video once content is exhausted.")

  public Boolean getLoop() {
    return loop;
  }


  public void setLoop(Boolean loop) {
    
    
    
    this.loop = loop;
  }


  public LiveEventEmbed pip(Boolean pip) {
    
    
    
    
    this.pip = pip;
    return this;
  }

   /**
   * Whether picture-in-picture is enabled and the button appears in the embeddable player.
   * @return pip
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether picture-in-picture is enabled and the button appears in the embeddable player.")

  public Boolean getPip() {
    return pip;
  }


  public void setPip(Boolean pip) {
    
    
    
    this.pip = pip;
  }


  public LiveEventEmbed playButtonPosition(PlayButtonPositionEnum playButtonPosition) {
    
    
    
    
    this.playButtonPosition = playButtonPosition;
    return this;
  }

   /**
   * The position of the player&#39;s play button.  Option descriptions:  * &#x60;0&#x60; - The play button has the default position.  * &#x60;1&#x60; - The play button appears at the bottom of the interface.  * &#x60;2&#x60; - The play button appears in the center of the interface. 
   * @return playButtonPosition
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The position of the player's play button.  Option descriptions:  * `0` - The play button has the default position.  * `1` - The play button appears at the bottom of the interface.  * `2` - The play button appears in the center of the interface. ")

  public PlayButtonPositionEnum getPlayButtonPosition() {
    return playButtonPosition;
  }


  public void setPlayButtonPosition(PlayButtonPositionEnum playButtonPosition) {
    
    
    
    this.playButtonPosition = playButtonPosition;
  }


  public LiveEventEmbed playbar(Boolean playbar) {
    
    
    
    
    this.playbar = playbar;
    return this;
  }

   /**
   * Whether the embedded RLE player should include the playbar.
   * @return playbar
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the embedded RLE player should include the playbar.")

  public Boolean getPlaybar() {
    return playbar;
  }


  public void setPlaybar(Boolean playbar) {
    
    
    
    this.playbar = playbar;
  }


  public LiveEventEmbed playlist(Boolean playlist) {
    
    
    
    
    this.playlist = playlist;
    return this;
  }

   /**
   * Whether the playlist component appears in the embeddable player for this RLE.
   * @return playlist
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the playlist component appears in the embeddable player for this RLE.")

  public Boolean getPlaylist() {
    return playlist;
  }


  public void setPlaylist(Boolean playlist) {
    
    
    
    this.playlist = playlist;
  }


  public LiveEventEmbed portrait(Boolean portrait) {
    
    
    
    
    this.portrait = portrait;
    return this;
  }

   /**
   * Whether the embedded RLE player should display the author&#39;s portrait.
   * @return portrait
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the embedded RLE player should display the author's portrait.")

  public Boolean getPortrait() {
    return portrait;
  }


  public void setPortrait(Boolean portrait) {
    
    
    
    this.portrait = portrait;
  }


  public LiveEventEmbed responsiveHtml(String responsiveHtml) {
    
    
    
    
    this.responsiveHtml = responsiveHtml;
    return this;
  }

   /**
   * The responsive HTML code to embed the event&#39;s playlist on a website.
   * @return responsiveHtml
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The responsive HTML code to embed the event's playlist on a website.")

  public String getResponsiveHtml() {
    return responsiveHtml;
  }


  public void setResponsiveHtml(String responsiveHtml) {
    
    
    
    this.responsiveHtml = responsiveHtml;
  }


  public LiveEventEmbed schedule(Boolean schedule) {
    
    
    
    
    this.schedule = schedule;
    return this;
  }

   /**
   * Whether the schedule component appears in the embeddable player for this RLE.
   * @return schedule
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the schedule component appears in the embeddable player for this RLE.")

  public Boolean getSchedule() {
    return schedule;
  }


  public void setSchedule(Boolean schedule) {
    
    
    
    this.schedule = schedule;
  }


  public LiveEventEmbed showLatestArchivedClip(Boolean showLatestArchivedClip) {
    
    
    
    
    this.showLatestArchivedClip = showLatestArchivedClip;
    return this;
  }

   /**
   * Whether the embedded RLE player should display the latest video placeholder.
   * @return showLatestArchivedClip
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the embedded RLE player should display the latest video placeholder.")

  public Boolean getShowLatestArchivedClip() {
    return showLatestArchivedClip;
  }


  public void setShowLatestArchivedClip(Boolean showLatestArchivedClip) {
    
    
    
    this.showLatestArchivedClip = showLatestArchivedClip;
  }


  public LiveEventEmbed showTimezone(Boolean showTimezone) {
    
    
    
    
    this.showTimezone = showTimezone;
    return this;
  }

   /**
   * Whether the embedded RLE player should display the schedule timezone.
   * @return showTimezone
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "Whether the embedded RLE player should display the schedule timezone.")

  public Boolean getShowTimezone() {
    return showTimezone;
  }


  public void setShowTimezone(Boolean showTimezone) {
    
    
    
    this.showTimezone = showTimezone;
  }


  public LiveEventEmbed useColor(String useColor) {
    
    
    
    
    this.useColor = useColor;
    return this;
  }

   /**
   * Whether the embedded RLE player should use a custom color or the default Vimeo blue.
   * @return useColor
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the embedded RLE player should use a custom color or the default Vimeo blue.")

  public String getUseColor() {
    return useColor;
  }


  public void setUseColor(String useColor) {
    
    
    
    this.useColor = useColor;
  }


  public LiveEventEmbed volume(Boolean volume) {
    
    
    
    
    this.volume = volume;
    return this;
  }

   /**
   * Whether the embedded RLE player should include the volume controls.
   * @return volume
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the embedded RLE player should include the volume controls.")

  public Boolean getVolume() {
    return volume;
  }


  public void setVolume(Boolean volume) {
    
    
    
    this.volume = volume;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LiveEventEmbed instance itself
   */
  public LiveEventEmbed putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveEventEmbed liveEventEmbed = (LiveEventEmbed) o;
    return Objects.equals(this.title, liveEventEmbed.title) &&
        Objects.equals(this.airplay, liveEventEmbed.airplay) &&
        Objects.equals(this.autoplay, liveEventEmbed.autoplay) &&
        Objects.equals(this.availablePlayerLogos, liveEventEmbed.availablePlayerLogos) &&
        Objects.equals(this.byline, liveEventEmbed.byline) &&
        Objects.equals(this.chatEmbedSource, liveEventEmbed.chatEmbedSource) &&
        Objects.equals(this.chromecast, liveEventEmbed.chromecast) &&
        Objects.equals(this.closedCaptions, liveEventEmbed.closedCaptions) &&
        Objects.equals(this.color, liveEventEmbed.color) &&
        Objects.equals(this.colors, liveEventEmbed.colors) &&
        Objects.equals(this.embedChat, liveEventEmbed.embedChat) &&
        Objects.equals(this.embedProperties, liveEventEmbed.embedProperties) &&
        Objects.equals(this.eventSchedule, liveEventEmbed.eventSchedule) &&
        Objects.equals(this.fullscreenButton, liveEventEmbed.fullscreenButton) &&
        Objects.equals(this.hideLiveLabel, liveEventEmbed.hideLiveLabel) &&
        Objects.equals(this.hideViewerCount, liveEventEmbed.hideViewerCount) &&
        Objects.equals(this.html, liveEventEmbed.html) &&
        Objects.equals(this.likeButton, liveEventEmbed.likeButton) &&
        Objects.equals(this.logos, liveEventEmbed.logos) &&
        Objects.equals(this.loop, liveEventEmbed.loop) &&
        Objects.equals(this.pip, liveEventEmbed.pip) &&
        Objects.equals(this.playButtonPosition, liveEventEmbed.playButtonPosition) &&
        Objects.equals(this.playbar, liveEventEmbed.playbar) &&
        Objects.equals(this.playlist, liveEventEmbed.playlist) &&
        Objects.equals(this.portrait, liveEventEmbed.portrait) &&
        Objects.equals(this.responsiveHtml, liveEventEmbed.responsiveHtml) &&
        Objects.equals(this.schedule, liveEventEmbed.schedule) &&
        Objects.equals(this.showLatestArchivedClip, liveEventEmbed.showLatestArchivedClip) &&
        Objects.equals(this.showTimezone, liveEventEmbed.showTimezone) &&
        Objects.equals(this.useColor, liveEventEmbed.useColor) &&
        Objects.equals(this.volume, liveEventEmbed.volume)&&
        Objects.equals(this.additionalProperties, liveEventEmbed.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, airplay, autoplay, availablePlayerLogos, byline, chatEmbedSource, chromecast, closedCaptions, color, colors, embedChat, embedProperties, eventSchedule, fullscreenButton, hideLiveLabel, hideViewerCount, html, likeButton, logos, loop, pip, playButtonPosition, playbar, playlist, portrait, responsiveHtml, schedule, showLatestArchivedClip, showTimezone, useColor, volume, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveEventEmbed {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    airplay: ").append(toIndentedString(airplay)).append("\n");
    sb.append("    autoplay: ").append(toIndentedString(autoplay)).append("\n");
    sb.append("    availablePlayerLogos: ").append(toIndentedString(availablePlayerLogos)).append("\n");
    sb.append("    byline: ").append(toIndentedString(byline)).append("\n");
    sb.append("    chatEmbedSource: ").append(toIndentedString(chatEmbedSource)).append("\n");
    sb.append("    chromecast: ").append(toIndentedString(chromecast)).append("\n");
    sb.append("    closedCaptions: ").append(toIndentedString(closedCaptions)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    colors: ").append(toIndentedString(colors)).append("\n");
    sb.append("    embedChat: ").append(toIndentedString(embedChat)).append("\n");
    sb.append("    embedProperties: ").append(toIndentedString(embedProperties)).append("\n");
    sb.append("    eventSchedule: ").append(toIndentedString(eventSchedule)).append("\n");
    sb.append("    fullscreenButton: ").append(toIndentedString(fullscreenButton)).append("\n");
    sb.append("    hideLiveLabel: ").append(toIndentedString(hideLiveLabel)).append("\n");
    sb.append("    hideViewerCount: ").append(toIndentedString(hideViewerCount)).append("\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("    likeButton: ").append(toIndentedString(likeButton)).append("\n");
    sb.append("    logos: ").append(toIndentedString(logos)).append("\n");
    sb.append("    loop: ").append(toIndentedString(loop)).append("\n");
    sb.append("    pip: ").append(toIndentedString(pip)).append("\n");
    sb.append("    playButtonPosition: ").append(toIndentedString(playButtonPosition)).append("\n");
    sb.append("    playbar: ").append(toIndentedString(playbar)).append("\n");
    sb.append("    playlist: ").append(toIndentedString(playlist)).append("\n");
    sb.append("    portrait: ").append(toIndentedString(portrait)).append("\n");
    sb.append("    responsiveHtml: ").append(toIndentedString(responsiveHtml)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    showLatestArchivedClip: ").append(toIndentedString(showLatestArchivedClip)).append("\n");
    sb.append("    showTimezone: ").append(toIndentedString(showTimezone)).append("\n");
    sb.append("    useColor: ").append(toIndentedString(useColor)).append("\n");
    sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("airplay");
    openapiFields.add("autoplay");
    openapiFields.add("available_player_logos");
    openapiFields.add("byline");
    openapiFields.add("chat_embed_source");
    openapiFields.add("chromecast");
    openapiFields.add("closed_captions");
    openapiFields.add("color");
    openapiFields.add("colors");
    openapiFields.add("embed_chat");
    openapiFields.add("embed_properties");
    openapiFields.add("event_schedule");
    openapiFields.add("fullscreen_button");
    openapiFields.add("hide_live_label");
    openapiFields.add("hide_viewer_count");
    openapiFields.add("html");
    openapiFields.add("like_button");
    openapiFields.add("logos");
    openapiFields.add("loop");
    openapiFields.add("pip");
    openapiFields.add("play_button_position");
    openapiFields.add("playbar");
    openapiFields.add("playlist");
    openapiFields.add("portrait");
    openapiFields.add("responsive_html");
    openapiFields.add("schedule");
    openapiFields.add("show_latest_archived_clip");
    openapiFields.add("show_timezone");
    openapiFields.add("use_color");
    openapiFields.add("volume");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("airplay");
    openapiRequiredFields.add("autoplay");
    openapiRequiredFields.add("available_player_logos");
    openapiRequiredFields.add("byline");
    openapiRequiredFields.add("chat_embed_source");
    openapiRequiredFields.add("chromecast");
    openapiRequiredFields.add("closed_captions");
    openapiRequiredFields.add("color");
    openapiRequiredFields.add("colors");
    openapiRequiredFields.add("embed_chat");
    openapiRequiredFields.add("embed_properties");
    openapiRequiredFields.add("event_schedule");
    openapiRequiredFields.add("fullscreen_button");
    openapiRequiredFields.add("hide_live_label");
    openapiRequiredFields.add("hide_viewer_count");
    openapiRequiredFields.add("html");
    openapiRequiredFields.add("like_button");
    openapiRequiredFields.add("logos");
    openapiRequiredFields.add("loop");
    openapiRequiredFields.add("pip");
    openapiRequiredFields.add("play_button_position");
    openapiRequiredFields.add("playbar");
    openapiRequiredFields.add("playlist");
    openapiRequiredFields.add("portrait");
    openapiRequiredFields.add("responsive_html");
    openapiRequiredFields.add("schedule");
    openapiRequiredFields.add("show_latest_archived_clip");
    openapiRequiredFields.add("show_timezone");
    openapiRequiredFields.add("use_color");
    openapiRequiredFields.add("volume");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LiveEventEmbed
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LiveEventEmbed.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiveEventEmbed is not found in the empty JSON string", LiveEventEmbed.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LiveEventEmbed.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("available_player_logos") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("available_player_logos").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `available_player_logos` to be an array in the JSON string but got `%s`", jsonObj.get("available_player_logos").toString()));
      }
      if (!jsonObj.get("chat_embed_source").isJsonNull() && !jsonObj.get("chat_embed_source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chat_embed_source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chat_embed_source").toString()));
      }
      if (!jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      // validate the required field `colors`
      LiveEventEmbedColors.validateJsonObject(jsonObj.getAsJsonObject("colors"));
      if (!jsonObj.get("embed_chat").isJsonNull() && !jsonObj.get("embed_chat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `embed_chat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("embed_chat").toString()));
      }
      // validate the required field `embed_properties`
      LiveEventEmbedEmbedProperties.validateJsonObject(jsonObj.getAsJsonObject("embed_properties"));
      if (!jsonObj.get("html").isJsonNull() && !jsonObj.get("html").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html").toString()));
      }
      // validate the required field `logos`
      LiveEventEmbedLogos.validateJsonObject(jsonObj.getAsJsonObject("logos"));
      if (!jsonObj.get("play_button_position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `play_button_position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("play_button_position").toString()));
      }
      if (!jsonObj.get("responsive_html").isJsonNull() && !jsonObj.get("responsive_html").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responsive_html` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responsive_html").toString()));
      }
      if (!jsonObj.get("use_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `use_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("use_color").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiveEventEmbed.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiveEventEmbed' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiveEventEmbed> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiveEventEmbed.class));

       return (TypeAdapter<T>) new TypeAdapter<LiveEventEmbed>() {
           @Override
           public void write(JsonWriter out, LiveEventEmbed value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LiveEventEmbed read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LiveEventEmbed instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LiveEventEmbed given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LiveEventEmbed
  * @throws IOException if the JSON string is invalid with respect to LiveEventEmbed
  */
  public static LiveEventEmbed fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiveEventEmbed.class);
  }

 /**
  * Convert an instance of LiveEventEmbed to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

