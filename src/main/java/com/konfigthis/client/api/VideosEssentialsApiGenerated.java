/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EditVideoRequest;
import com.konfigthis.client.model.EditVideoRequestEmbed;
import com.konfigthis.client.model.EditVideoRequestPrivacy;
import com.konfigthis.client.model.EditVideoRequestReviewPage;
import com.konfigthis.client.model.EditVideoRequestSpatial;
import com.konfigthis.client.model.Video;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class VideosEssentialsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VideosEssentialsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public VideosEssentialsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call appearancesCall(Double userId, String direction, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/appearances"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (filterEmbeddable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_embeddable", filterEmbeddable));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appearancesValidateBeforeCall(Double userId, String direction, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling appearances(Async)");
        }

        return appearancesCall(userId, direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);

    }


    private ApiResponse<List<Video>> appearancesWithHttpInfo(Double userId, String direction, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = appearancesValidateBeforeCall(userId, direction, filter, filterEmbeddable, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call appearancesAsync(Double userId, String direction, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = appearancesValidateBeforeCall(userId, direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AppearancesRequestBuilder {
        private final Double userId;
        private String direction;
        private String filter;
        private Boolean filterEmbeddable;
        private Double page;
        private Double perPage;
        private String query;
        private String sort;

        private AppearancesRequestBuilder(double userId) {
            this.userId = userId;
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return AppearancesRequestBuilder
         */
        public AppearancesRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)
         * @return AppearancesRequestBuilder
         */
        public AppearancesRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set filterEmbeddable
         * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)
         * @return AppearancesRequestBuilder
         */
        public AppearancesRequestBuilder filterEmbeddable(Boolean filterEmbeddable) {
            this.filterEmbeddable = filterEmbeddable;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return AppearancesRequestBuilder
         */
        public AppearancesRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return AppearancesRequestBuilder
         */
        public AppearancesRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set query
         * @param query The search query to use to filter the results. (optional)
         * @return AppearancesRequestBuilder
         */
        public AppearancesRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)
         * @return AppearancesRequestBuilder
         */
        public AppearancesRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for appearances
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return appearancesCall(userId, direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);
        }


        /**
         * Execute appearances request
         * @return List&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Video> execute() throws ApiException {
            ApiResponse<List<Video>> localVarResp = appearancesWithHttpInfo(userId, direction, filter, filterEmbeddable, page, perPage, query, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute appearances request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Video&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Video>> executeWithHttpInfo() throws ApiException {
            return appearancesWithHttpInfo(userId, direction, filter, filterEmbeddable, page, perPage, query, sort);
        }

        /**
         * Execute appearances request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Video>> _callback) throws ApiException {
            return appearancesAsync(userId, direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);
        }
    }

    /**
     * Get all the videos in which the user appears
     * This method returns all the videos in which the authenticated user has a credited appearance.
     * @param userId The ID of the user. (required)
     * @return AppearancesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public AppearancesRequestBuilder appearances(double userId) throws IllegalArgumentException {
        
        return new AppearancesRequestBuilder(userId);
    }
    private okhttp3.Call checkUserOwnershipCall(Double userId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/videos/{video_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkUserOwnershipValidateBeforeCall(Double userId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling checkUserOwnership(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling checkUserOwnership(Async)");
        }

        return checkUserOwnershipCall(userId, videoId, _callback);

    }


    private ApiResponse<Video> checkUserOwnershipWithHttpInfo(Double userId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = checkUserOwnershipValidateBeforeCall(userId, videoId, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkUserOwnershipAsync(Double userId, Double videoId, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkUserOwnershipValidateBeforeCall(userId, videoId, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckUserOwnershipRequestBuilder {
        private final Double userId;
        private final Double videoId;

        private CheckUserOwnershipRequestBuilder(double userId, double videoId) {
            this.userId = userId;
            this.videoId = videoId;
        }

        /**
         * Build call for checkUserOwnership
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The authenticated user owns the video. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkUserOwnershipCall(userId, videoId, _callback);
        }


        /**
         * Execute checkUserOwnership request
         * @return Video
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The authenticated user owns the video. </td><td>  -  </td></tr>
         </table>
         */
        public Video execute() throws ApiException {
            ApiResponse<Video> localVarResp = checkUserOwnershipWithHttpInfo(userId, videoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkUserOwnership request with HTTP info returned
         * @return ApiResponse&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The authenticated user owns the video. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Video> executeWithHttpInfo() throws ApiException {
            return checkUserOwnershipWithHttpInfo(userId, videoId);
        }

        /**
         * Execute checkUserOwnership request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The authenticated user owns the video. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Video> _callback) throws ApiException {
            return checkUserOwnershipAsync(userId, videoId, _callback);
        }
    }

    /**
     * Check if the user owns a video
     * This method determines whether the authenticated user is the owner of the specified video.
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @return CheckUserOwnershipRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The authenticated user owns the video. </td><td>  -  </td></tr>
     </table>
     */
    public CheckUserOwnershipRequestBuilder checkUserOwnership(double userId, double videoId) throws IllegalArgumentException {
        
        
        return new CheckUserOwnershipRequestBuilder(userId, videoId);
    }
    private okhttp3.Call checkUserOwnsVideoCall(Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/videos/{video_id}"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkUserOwnsVideoValidateBeforeCall(Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling checkUserOwnsVideo(Async)");
        }

        return checkUserOwnsVideoCall(videoId, _callback);

    }


    private ApiResponse<Video> checkUserOwnsVideoWithHttpInfo(Double videoId) throws ApiException {
        okhttp3.Call localVarCall = checkUserOwnsVideoValidateBeforeCall(videoId, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkUserOwnsVideoAsync(Double videoId, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkUserOwnsVideoValidateBeforeCall(videoId, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckUserOwnsVideoRequestBuilder {
        private final Double videoId;

        private CheckUserOwnsVideoRequestBuilder(double videoId) {
            this.videoId = videoId;
        }

        /**
         * Build call for checkUserOwnsVideo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The authenticated user owns the video. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkUserOwnsVideoCall(videoId, _callback);
        }


        /**
         * Execute checkUserOwnsVideo request
         * @return Video
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The authenticated user owns the video. </td><td>  -  </td></tr>
         </table>
         */
        public Video execute() throws ApiException {
            ApiResponse<Video> localVarResp = checkUserOwnsVideoWithHttpInfo(videoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkUserOwnsVideo request with HTTP info returned
         * @return ApiResponse&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The authenticated user owns the video. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Video> executeWithHttpInfo() throws ApiException {
            return checkUserOwnsVideoWithHttpInfo(videoId);
        }

        /**
         * Execute checkUserOwnsVideo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The authenticated user owns the video. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Video> _callback) throws ApiException {
            return checkUserOwnsVideoAsync(videoId, _callback);
        }
    }

    /**
     * Check if the user owns a video
     * This method determines whether the authenticated user is the owner of the specified video.
     * @param videoId The ID of the video. (required)
     * @return CheckUserOwnsVideoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The authenticated user owns the video. </td><td>  -  </td></tr>
     </table>
     */
    public CheckUserOwnsVideoRequestBuilder checkUserOwnsVideo(double videoId) throws IllegalArgumentException {
        
        return new CheckUserOwnsVideoRequestBuilder(videoId);
    }
    private okhttp3.Call deleteUserVideosCall(String uris, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/videos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uris != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uris", uris));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserVideosValidateBeforeCall(String uris, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uris' is set
        if (uris == null) {
            throw new ApiException("Missing the required parameter 'uris' when calling deleteUserVideos(Async)");
        }

        return deleteUserVideosCall(uris, _callback);

    }


    private ApiResponse<Void> deleteUserVideosWithHttpInfo(String uris) throws ApiException {
        okhttp3.Call localVarCall = deleteUserVideosValidateBeforeCall(uris, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteUserVideosAsync(String uris, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserVideosValidateBeforeCall(uris, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteUserVideosRequestBuilder {
        private final String uris;

        private DeleteUserVideosRequestBuilder(String uris) {
            this.uris = uris;
        }

        /**
         * Build call for deleteUserVideos
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteUserVideosCall(uris, _callback);
        }


        /**
         * Execute deleteUserVideos request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were deleted. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteUserVideosWithHttpInfo(uris);
        }

        /**
         * Execute deleteUserVideos request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteUserVideosWithHttpInfo(uris);
        }

        /**
         * Execute deleteUserVideos request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteUserVideosAsync(uris, _callback);
        }
    }

    /**
     * Delete a user&#39;s videos
     * This method deletes one or more videos belonging to the specified user. The authenticated user must have permission to delete the videos.  Specify the videos to delete in a comma-separated list by URI using the **uris** query parameter.
     * @param uris A comma-separated list of the video URIs to delete. (required)
     * @return DeleteUserVideosRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The videos were deleted. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteUserVideosRequestBuilder deleteUserVideos(String uris) throws IllegalArgumentException {
        if (uris == null) throw new IllegalArgumentException("\"uris\" is required but got null");
            

        return new DeleteUserVideosRequestBuilder(uris);
    }
    private okhttp3.Call getAllUserVideosCall(String containingUri, String direction, String filter, Boolean filterEmbeddable, Boolean filterPlayable, Boolean filterScreenRecorded, String filterTag, String filterTagAllOf, String filterTagExclude, String includeTeamContent, Double page, Double perPage, String query, List<String> queryFields, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/videos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (containingUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("containing_uri", containingUri));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (filterEmbeddable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_embeddable", filterEmbeddable));
        }

        if (filterPlayable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_playable", filterPlayable));
        }

        if (filterScreenRecorded != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_screen_recorded", filterScreenRecorded));
        }

        if (filterTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_tag", filterTag));
        }

        if (filterTagAllOf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_tag_all_of", filterTagAllOf));
        }

        if (filterTagExclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_tag_exclude", filterTagExclude));
        }

        if (includeTeamContent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_team_content", includeTeamContent));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (queryFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "query_fields", queryFields));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllUserVideosValidateBeforeCall(String containingUri, String direction, String filter, Boolean filterEmbeddable, Boolean filterPlayable, Boolean filterScreenRecorded, String filterTag, String filterTagAllOf, String filterTagExclude, String includeTeamContent, Double page, Double perPage, String query, List<String> queryFields, String sort, final ApiCallback _callback) throws ApiException {
        return getAllUserVideosCall(containingUri, direction, filter, filterEmbeddable, filterPlayable, filterScreenRecorded, filterTag, filterTagAllOf, filterTagExclude, includeTeamContent, page, perPage, query, queryFields, sort, _callback);

    }


    private ApiResponse<List<Video>> getAllUserVideosWithHttpInfo(String containingUri, String direction, String filter, Boolean filterEmbeddable, Boolean filterPlayable, Boolean filterScreenRecorded, String filterTag, String filterTagAllOf, String filterTagExclude, String includeTeamContent, Double page, Double perPage, String query, List<String> queryFields, String sort) throws ApiException {
        okhttp3.Call localVarCall = getAllUserVideosValidateBeforeCall(containingUri, direction, filter, filterEmbeddable, filterPlayable, filterScreenRecorded, filterTag, filterTagAllOf, filterTagExclude, includeTeamContent, page, perPage, query, queryFields, sort, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllUserVideosAsync(String containingUri, String direction, String filter, Boolean filterEmbeddable, Boolean filterPlayable, Boolean filterScreenRecorded, String filterTag, String filterTagAllOf, String filterTagExclude, String includeTeamContent, Double page, Double perPage, String query, List<String> queryFields, String sort, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllUserVideosValidateBeforeCall(containingUri, direction, filter, filterEmbeddable, filterPlayable, filterScreenRecorded, filterTag, filterTagAllOf, filterTagExclude, includeTeamContent, page, perPage, query, queryFields, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllUserVideosRequestBuilder {
        private String containingUri;
        private String direction;
        private String filter;
        private Boolean filterEmbeddable;
        private Boolean filterPlayable;
        private Boolean filterScreenRecorded;
        private String filterTag;
        private String filterTagAllOf;
        private String filterTagExclude;
        private String includeTeamContent;
        private Double page;
        private Double perPage;
        private String query;
        private List<String> queryFields;
        private String sort;

        private GetAllUserVideosRequestBuilder() {
        }

        /**
         * Set containingUri
         * @param containingUri The page that contains the video URI. The field is available only when not paired with **query**. (optional)
         * @return GetAllUserVideosRequestBuilder
         */
        public GetAllUserVideosRequestBuilder containingUri(String containingUri) {
            this.containingUri = containingUri;
            return this;
        }
        
        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return GetAllUserVideosRequestBuilder
         */
        public GetAllUserVideosRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The attribute by which to filter the results.  Option descriptions:  * &#x60;app_only&#x60; - Return app-only videos.  * &#x60;embeddable&#x60; - Return embeddable videos.  * &#x60;featured&#x60; - Return featured videos.  * &#x60;live&#x60; - Return only live videos.  * &#x60;no_placeholder&#x60; - Return no placeholder videos.  * &#x60;nolive&#x60; - Return no live videos.  * &#x60;playable&#x60; - Return playable videos.  * &#x60;screen_recorded&#x60; - Return screen-recorded videos.  (optional)
         * @return GetAllUserVideosRequestBuilder
         */
        public GetAllUserVideosRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set filterEmbeddable
         * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)
         * @return GetAllUserVideosRequestBuilder
         */
        public GetAllUserVideosRequestBuilder filterEmbeddable(Boolean filterEmbeddable) {
            this.filterEmbeddable = filterEmbeddable;
            return this;
        }
        
        /**
         * Set filterPlayable
         * @param filterPlayable Whether to filter the results by playable videos (&#x60;true&#x60;) or non-playable videos (&#x60;false&#x60;). (optional)
         * @return GetAllUserVideosRequestBuilder
         */
        public GetAllUserVideosRequestBuilder filterPlayable(Boolean filterPlayable) {
            this.filterPlayable = filterPlayable;
            return this;
        }
        
        /**
         * Set filterScreenRecorded
         * @param filterScreenRecorded Whether to filter the results by screen-recorded videos (&#x60;true&#x60;) or non-screen-recorded videos (&#x60;false&#x60;). (optional)
         * @return GetAllUserVideosRequestBuilder
         */
        public GetAllUserVideosRequestBuilder filterScreenRecorded(Boolean filterScreenRecorded) {
            this.filterScreenRecorded = filterScreenRecorded;
            return this;
        }
        
        /**
         * Set filterTag
         * @param filterTag A comma-separated list of tags to filter on. All results must include at least one of these tags. (optional)
         * @return GetAllUserVideosRequestBuilder
         */
        public GetAllUserVideosRequestBuilder filterTag(String filterTag) {
            this.filterTag = filterTag;
            return this;
        }
        
        /**
         * Set filterTagAllOf
         * @param filterTagAllOf A comma-separated list of tags to filter on. All results must include all of these tags. (optional)
         * @return GetAllUserVideosRequestBuilder
         */
        public GetAllUserVideosRequestBuilder filterTagAllOf(String filterTagAllOf) {
            this.filterTagAllOf = filterTagAllOf;
            return this;
        }
        
        /**
         * Set filterTagExclude
         * @param filterTagExclude A comma-separated list of tags to exclude. All results must exclude all of these tags. (optional)
         * @return GetAllUserVideosRequestBuilder
         */
        public GetAllUserVideosRequestBuilder filterTagExclude(String filterTagExclude) {
            this.filterTagExclude = filterTagExclude;
            return this;
        }
        
        /**
         * Set includeTeamContent
         * @param includeTeamContent Whether to include content from the user&#39;s teams when searching. _This field is deprecated._ (optional)
         * @return GetAllUserVideosRequestBuilder
         */
        public GetAllUserVideosRequestBuilder includeTeamContent(String includeTeamContent) {
            this.includeTeamContent = includeTeamContent;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetAllUserVideosRequestBuilder
         */
        public GetAllUserVideosRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetAllUserVideosRequestBuilder
         */
        public GetAllUserVideosRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set query
         * @param query The search query to use to filter the results. (optional)
         * @return GetAllUserVideosRequestBuilder
         */
        public GetAllUserVideosRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set queryFields
         * @param queryFields A comma-separated list of fields to query over. The default value is &#x60;title,description,chapters,tags&#x60;.  Option descriptions:  * &#x60;chapters&#x60; - Query by chapter titles that have been added to the video.  * &#x60;description&#x60; - Query by the description of the video.  * &#x60;tags&#x60; - Query by tag names that have been added to the video.  * &#x60;title&#x60; - Query by the title of the video.  (optional)
         * @return GetAllUserVideosRequestBuilder
         */
        public GetAllUserVideosRequestBuilder queryFields(List<String> queryFields) {
            this.queryFields = queryFields;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically by title.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sorting method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by last user interaction. If a result hasn&#39;t had an interaction, the upload date is used instead.  * &#x60;likes&#x60; - Sort the results by number of likes. To use this option, **direction** must be &#x60;desc&#x60;.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays. To use this option, **direction** must be &#x60;desc&#x60;.  (optional)
         * @return GetAllUserVideosRequestBuilder
         */
        public GetAllUserVideosRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getAllUserVideos
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> The authenticated user hasn&#39;t uploaded any videos since the given **If-Modified-Since** header. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllUserVideosCall(containingUri, direction, filter, filterEmbeddable, filterPlayable, filterScreenRecorded, filterTag, filterTagAllOf, filterTagExclude, includeTeamContent, page, perPage, query, queryFields, sort, _callback);
        }


        /**
         * Execute getAllUserVideos request
         * @return List&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> The authenticated user hasn&#39;t uploaded any videos since the given **If-Modified-Since** header. </td><td>  -  </td></tr>
         </table>
         */
        public List<Video> execute() throws ApiException {
            ApiResponse<List<Video>> localVarResp = getAllUserVideosWithHttpInfo(containingUri, direction, filter, filterEmbeddable, filterPlayable, filterScreenRecorded, filterTag, filterTagAllOf, filterTagExclude, includeTeamContent, page, perPage, query, queryFields, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllUserVideos request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Video&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> The authenticated user hasn&#39;t uploaded any videos since the given **If-Modified-Since** header. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Video>> executeWithHttpInfo() throws ApiException {
            return getAllUserVideosWithHttpInfo(containingUri, direction, filter, filterEmbeddable, filterPlayable, filterScreenRecorded, filterTag, filterTagAllOf, filterTagExclude, includeTeamContent, page, perPage, query, queryFields, sort);
        }

        /**
         * Execute getAllUserVideos request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> The authenticated user hasn&#39;t uploaded any videos since the given **If-Modified-Since** header. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Video>> _callback) throws ApiException {
            return getAllUserVideosAsync(containingUri, direction, filter, filterEmbeddable, filterPlayable, filterScreenRecorded, filterTag, filterTagAllOf, filterTagExclude, includeTeamContent, page, perPage, query, queryFields, sort, _callback);
        }
    }

    /**
     * Get all the videos that the user has uploaded
     * This method returns all the videos that the authenticated user has uploaded.
     * @return GetAllUserVideosRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The authenticated user hasn&#39;t uploaded any videos since the given **If-Modified-Since** header. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllUserVideosRequestBuilder getAllUserVideos() throws IllegalArgumentException {
        return new GetAllUserVideosRequestBuilder();
    }
    private okhttp3.Call getUserAppearancesCall(String direction, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/appearances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (filterEmbeddable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_embeddable", filterEmbeddable));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserAppearancesValidateBeforeCall(String direction, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        return getUserAppearancesCall(direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);

    }


    private ApiResponse<List<Video>> getUserAppearancesWithHttpInfo(String direction, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = getUserAppearancesValidateBeforeCall(direction, filter, filterEmbeddable, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserAppearancesAsync(String direction, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserAppearancesValidateBeforeCall(direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserAppearancesRequestBuilder {
        private String direction;
        private String filter;
        private Boolean filterEmbeddable;
        private Double page;
        private Double perPage;
        private String query;
        private String sort;

        private GetUserAppearancesRequestBuilder() {
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return GetUserAppearancesRequestBuilder
         */
        public GetUserAppearancesRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)
         * @return GetUserAppearancesRequestBuilder
         */
        public GetUserAppearancesRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set filterEmbeddable
         * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)
         * @return GetUserAppearancesRequestBuilder
         */
        public GetUserAppearancesRequestBuilder filterEmbeddable(Boolean filterEmbeddable) {
            this.filterEmbeddable = filterEmbeddable;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetUserAppearancesRequestBuilder
         */
        public GetUserAppearancesRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetUserAppearancesRequestBuilder
         */
        public GetUserAppearancesRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set query
         * @param query The search query to use to filter the results. (optional)
         * @return GetUserAppearancesRequestBuilder
         */
        public GetUserAppearancesRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)
         * @return GetUserAppearancesRequestBuilder
         */
        public GetUserAppearancesRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getUserAppearances
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserAppearancesCall(direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);
        }


        /**
         * Execute getUserAppearances request
         * @return List&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Video> execute() throws ApiException {
            ApiResponse<List<Video>> localVarResp = getUserAppearancesWithHttpInfo(direction, filter, filterEmbeddable, page, perPage, query, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserAppearances request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Video&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Video>> executeWithHttpInfo() throws ApiException {
            return getUserAppearancesWithHttpInfo(direction, filter, filterEmbeddable, page, perPage, query, sort);
        }

        /**
         * Execute getUserAppearances request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Video>> _callback) throws ApiException {
            return getUserAppearancesAsync(direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);
        }
    }

    /**
     * Get all the videos in which the user appears
     * This method returns all the videos in which the authenticated user has a credited appearance.
     * @return GetUserAppearancesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetUserAppearancesRequestBuilder getUserAppearances() throws IllegalArgumentException {
        return new GetUserAppearancesRequestBuilder();
    }
    private okhttp3.Call videoCall(Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call videoValidateBeforeCall(Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling video(Async)");
        }

        return videoCall(videoId, _callback);

    }


    private ApiResponse<Video> videoWithHttpInfo(Double videoId) throws ApiException {
        okhttp3.Call localVarCall = videoValidateBeforeCall(videoId, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call videoAsync(Double videoId, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = videoValidateBeforeCall(videoId, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VideoRequestBuilder {
        private final Double videoId;

        private VideoRequestBuilder(double videoId) {
            this.videoId = videoId;
        }

        /**
         * Build call for video
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return videoCall(videoId, _callback);
        }


        /**
         * Execute video request
         * @return Video
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public Video execute() throws ApiException {
            ApiResponse<Video> localVarResp = videoWithHttpInfo(videoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute video request with HTTP info returned
         * @return ApiResponse&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Video> executeWithHttpInfo() throws ApiException {
            return videoWithHttpInfo(videoId);
        }

        /**
         * Execute video request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Video> _callback) throws ApiException {
            return videoAsync(videoId, _callback);
        }
    }

    /**
     * Get a specific video
     * This method returns a single video.
     * @param videoId The ID of the video. (required)
     * @return VideoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
     </table>
     */
    public VideoRequestBuilder video(double videoId) throws IllegalArgumentException {
        
        return new VideoRequestBuilder(videoId);
    }
    private okhttp3.Call video_0Call(Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call video_0ValidateBeforeCall(Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling video_0(Async)");
        }

        return video_0Call(videoId, _callback);

    }


    private ApiResponse<Void> video_0WithHttpInfo(Double videoId) throws ApiException {
        okhttp3.Call localVarCall = video_0ValidateBeforeCall(videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call video_0Async(Double videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = video_0ValidateBeforeCall(videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class Video0RequestBuilder {
        private final Double videoId;

        private Video0RequestBuilder(double videoId) {
            this.videoId = videoId;
        }

        /**
         * Build call for video_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return video_0Call(videoId, _callback);
        }


        /**
         * Execute video_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            video_0WithHttpInfo(videoId);
        }

        /**
         * Execute video_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return video_0WithHttpInfo(videoId);
        }

        /**
         * Execute video_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return video_0Async(videoId, _callback);
        }
    }

    /**
     * Delete a video
     * This method deletes the specified video. The authenticated user must be the owner of the video.
     * @param videoId The ID of the video. (required)
     * @return Video0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public Video0RequestBuilder video_0(double videoId) throws IllegalArgumentException {
        
        return new Video0RequestBuilder(videoId);
    }
    private okhttp3.Call video_1Call(Double videoId, EditVideoRequest editVideoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editVideoRequest;

        // create path and map variables
        String localVarPath = "/videos/{video_id}"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call video_1ValidateBeforeCall(Double videoId, EditVideoRequest editVideoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling video_1(Async)");
        }

        // verify the required parameter 'editVideoRequest' is set
        if (editVideoRequest == null) {
            throw new ApiException("Missing the required parameter 'editVideoRequest' when calling video_1(Async)");
        }

        return video_1Call(videoId, editVideoRequest, _callback);

    }


    private ApiResponse<Video> video_1WithHttpInfo(Double videoId, EditVideoRequest editVideoRequest) throws ApiException {
        okhttp3.Call localVarCall = video_1ValidateBeforeCall(videoId, editVideoRequest, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call video_1Async(Double videoId, EditVideoRequest editVideoRequest, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = video_1ValidateBeforeCall(videoId, editVideoRequest, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Video1RequestBuilder {
        private final Double videoId;
        private String description;
        private List<String> contentRating;
        private String customUrl;
        private EditVideoRequestEmbed embed;
        private List<String> embedDomains;
        private List<String> embedDomainsAdd;
        private List<String> embedDomainsDelete;
        private Boolean hideFromVimeo;
        private String license;
        private String locale;
        private String name;
        private String password;
        private EditVideoRequestPrivacy privacy;
        private EditVideoRequestReviewPage reviewPage;
        private EditVideoRequestSpatial spatial;

        private Video1RequestBuilder(double videoId) {
            this.videoId = videoId;
        }

        /**
         * Set description
         * @param description The description of the video. This field can hold a maximum of 5000 characters. (optional)
         * @return Video1RequestBuilder
         */
        public Video1RequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set contentRating
         * @param contentRating A list of values describing the content in this video. For a full list of values, use the [&#x60;/contentratings&#x60;](https://developer.vimeo.com/api/reference/videos#get_content_ratings) endpoint. (optional)
         * @return Video1RequestBuilder
         */
        public Video1RequestBuilder contentRating(List<String> contentRating) {
            this.contentRating = contentRating;
            return this;
        }
        
        /**
         * Set customUrl
         * @param customUrl The custom link of the video. This link doesn&#39;t include the base URL and the username or user ID of the video&#39;s owner. (optional)
         * @return Video1RequestBuilder
         */
        public Video1RequestBuilder customUrl(String customUrl) {
            this.customUrl = customUrl;
            return this;
        }
        
        /**
         * Set embed
         * @param embed  (optional)
         * @return Video1RequestBuilder
         */
        public Video1RequestBuilder embed(EditVideoRequestEmbed embed) {
            this.embed = embed;
            return this;
        }
        
        /**
         * Set embedDomains
         * @param embedDomains The complete list of domains the video can be embedded on. This field overwrites existing domains and requires that **privacy_embed** have the value &#x60;whitelist&#x60;. (optional)
         * @return Video1RequestBuilder
         */
        public Video1RequestBuilder embedDomains(List<String> embedDomains) {
            this.embedDomains = embedDomains;
            return this;
        }
        
        /**
         * Set embedDomainsAdd
         * @param embedDomainsAdd A list of domains intended to be added to an existing set of domains. This field requires that **privacy_embed** have the value &#x60;whitelist&#x60;. (optional)
         * @return Video1RequestBuilder
         */
        public Video1RequestBuilder embedDomainsAdd(List<String> embedDomainsAdd) {
            this.embedDomainsAdd = embedDomainsAdd;
            return this;
        }
        
        /**
         * Set embedDomainsDelete
         * @param embedDomainsDelete A list of domains intended to be removed from an existing set of domains. This field requires that **privacy_embed** have the value &#x60;whitelist&#x60;. (optional)
         * @return Video1RequestBuilder
         */
        public Video1RequestBuilder embedDomainsDelete(List<String> embedDomainsDelete) {
            this.embedDomainsDelete = embedDomainsDelete;
            return this;
        }
        
        /**
         * Set hideFromVimeo
         * @param hideFromVimeo Whether to hide the video from everyone except the video&#39;s owner. When the value is &#x60;true&#x60;, unlisted video links work only for the video&#39;s owner. (optional)
         * @return Video1RequestBuilder
         */
        public Video1RequestBuilder hideFromVimeo(Boolean hideFromVimeo) {
            this.hideFromVimeo = hideFromVimeo;
            return this;
        }
        
        /**
         * Set license
         * @param license The Creative Commons license under which the video is offered.  Option descriptions:  * &#x60;by&#x60; - The video is offered under CC BY, or the attibution-only license.  * &#x60;by-nc&#x60; - The video is offered under CC BY-NC, or the Attribution-NonCommercial license.  * &#x60;by-nc-nd&#x60; - The video is offered under CC BY-NC-ND, or the Attribution-NonCommercian-NoDerivs license.  * &#x60;by-nc-sa&#x60; - The video is offered under CC BY-NC-SA, or the Attribution-NonCommercial-ShareAlike licence.  * &#x60;by-nd&#x60; - The video is offered under CC BY-ND, or the Attribution-NoDerivs license.  * &#x60;by-sa&#x60; - The video is offered under CC BY-SA, or the Attribution-ShareAlike license.  * &#x60;cc0&#x60; - The video is offered under CC0, or public domain, videos.  (optional)
         * @return Video1RequestBuilder
         */
        public Video1RequestBuilder license(String license) {
            this.license = license;
            return this;
        }
        
        /**
         * Set locale
         * @param locale The video&#39;s default language. For a full list of supported languages, use the [&#x60;/languages?filter&#x3D;texttracks&#x60;](https://developer.vimeo.com/api/reference/videos#get_languages) endpoint. (optional)
         * @return Video1RequestBuilder
         */
        public Video1RequestBuilder locale(String locale) {
            this.locale = locale;
            return this;
        }
        
        /**
         * Set name
         * @param name The title of the video. This field can hold a maximum of 128 characters. (optional)
         * @return Video1RequestBuilder
         */
        public Video1RequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set password
         * @param password The password. When you set **privacy.view** to &#x60;password&#x60;, you must provide the password as an additional parameter. This field can hold a maximum of 32 characters. (optional)
         * @return Video1RequestBuilder
         */
        public Video1RequestBuilder password(String password) {
            this.password = password;
            return this;
        }
        
        /**
         * Set privacy
         * @param privacy  (optional)
         * @return Video1RequestBuilder
         */
        public Video1RequestBuilder privacy(EditVideoRequestPrivacy privacy) {
            this.privacy = privacy;
            return this;
        }
        
        /**
         * Set reviewPage
         * @param reviewPage  (optional)
         * @return Video1RequestBuilder
         */
        public Video1RequestBuilder reviewPage(EditVideoRequestReviewPage reviewPage) {
            this.reviewPage = reviewPage;
            return this;
        }
        
        /**
         * Set spatial
         * @param spatial  (optional)
         * @return Video1RequestBuilder
         */
        public Video1RequestBuilder spatial(EditVideoRequestSpatial spatial) {
            this.spatial = spatial;
            return this;
        }
        
        /**
         * Build call for video_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EditVideoRequest editVideoRequest = buildBodyParams();
            return video_1Call(videoId, editVideoRequest, _callback);
        }

        private EditVideoRequest buildBodyParams() {
            EditVideoRequest editVideoRequest = new EditVideoRequest();
            editVideoRequest.description(this.description);
            editVideoRequest.contentRating(this.contentRating);
            editVideoRequest.customUrl(this.customUrl);
            editVideoRequest.embed(this.embed);
            editVideoRequest.embedDomains(this.embedDomains);
            editVideoRequest.embedDomainsAdd(this.embedDomainsAdd);
            editVideoRequest.embedDomainsDelete(this.embedDomainsDelete);
            editVideoRequest.hideFromVimeo(this.hideFromVimeo);
            if (this.license != null)
            editVideoRequest.license(EditVideoRequest.LicenseEnum.fromValue(this.license));
            editVideoRequest.locale(this.locale);
            editVideoRequest.name(this.name);
            editVideoRequest.password(this.password);
            editVideoRequest.privacy(this.privacy);
            editVideoRequest.reviewPage(this.reviewPage);
            editVideoRequest.spatial(this.spatial);
            return editVideoRequest;
        }

        /**
         * Execute video_1 request
         * @return Video
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was edited. </td><td>  -  </td></tr>
         </table>
         */
        public Video execute() throws ApiException {
            EditVideoRequest editVideoRequest = buildBodyParams();
            ApiResponse<Video> localVarResp = video_1WithHttpInfo(videoId, editVideoRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute video_1 request with HTTP info returned
         * @return ApiResponse&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was edited. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Video> executeWithHttpInfo() throws ApiException {
            EditVideoRequest editVideoRequest = buildBodyParams();
            return video_1WithHttpInfo(videoId, editVideoRequest);
        }

        /**
         * Execute video_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Video> _callback) throws ApiException {
            EditVideoRequest editVideoRequest = buildBodyParams();
            return video_1Async(videoId, editVideoRequest, _callback);
        }
    }

    /**
     * Edit a video
     * This method edits the specified video.
     * @param videoId The ID of the video. (required)
     * @param editVideoRequest  (required)
     * @return Video1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was edited. </td><td>  -  </td></tr>
     </table>
     */
    public Video1RequestBuilder video_1(double videoId) throws IllegalArgumentException {
        
        return new Video1RequestBuilder(videoId);
    }
    private okhttp3.Call videosCall(Double userId, String containingUri, String direction, String filter, Boolean filterEmbeddable, Boolean filterPlayable, Boolean filterScreenRecorded, String filterTag, String filterTagAllOf, String filterTagExclude, String includeTeamContent, Double page, Double perPage, String query, List<String> queryFields, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/videos"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (containingUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("containing_uri", containingUri));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (filterEmbeddable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_embeddable", filterEmbeddable));
        }

        if (filterPlayable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_playable", filterPlayable));
        }

        if (filterScreenRecorded != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_screen_recorded", filterScreenRecorded));
        }

        if (filterTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_tag", filterTag));
        }

        if (filterTagAllOf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_tag_all_of", filterTagAllOf));
        }

        if (filterTagExclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_tag_exclude", filterTagExclude));
        }

        if (includeTeamContent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_team_content", includeTeamContent));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (queryFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "query_fields", queryFields));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call videosValidateBeforeCall(Double userId, String containingUri, String direction, String filter, Boolean filterEmbeddable, Boolean filterPlayable, Boolean filterScreenRecorded, String filterTag, String filterTagAllOf, String filterTagExclude, String includeTeamContent, Double page, Double perPage, String query, List<String> queryFields, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling videos(Async)");
        }

        return videosCall(userId, containingUri, direction, filter, filterEmbeddable, filterPlayable, filterScreenRecorded, filterTag, filterTagAllOf, filterTagExclude, includeTeamContent, page, perPage, query, queryFields, sort, _callback);

    }


    private ApiResponse<List<Video>> videosWithHttpInfo(Double userId, String containingUri, String direction, String filter, Boolean filterEmbeddable, Boolean filterPlayable, Boolean filterScreenRecorded, String filterTag, String filterTagAllOf, String filterTagExclude, String includeTeamContent, Double page, Double perPage, String query, List<String> queryFields, String sort) throws ApiException {
        okhttp3.Call localVarCall = videosValidateBeforeCall(userId, containingUri, direction, filter, filterEmbeddable, filterPlayable, filterScreenRecorded, filterTag, filterTagAllOf, filterTagExclude, includeTeamContent, page, perPage, query, queryFields, sort, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call videosAsync(Double userId, String containingUri, String direction, String filter, Boolean filterEmbeddable, Boolean filterPlayable, Boolean filterScreenRecorded, String filterTag, String filterTagAllOf, String filterTagExclude, String includeTeamContent, Double page, Double perPage, String query, List<String> queryFields, String sort, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = videosValidateBeforeCall(userId, containingUri, direction, filter, filterEmbeddable, filterPlayable, filterScreenRecorded, filterTag, filterTagAllOf, filterTagExclude, includeTeamContent, page, perPage, query, queryFields, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VideosRequestBuilder {
        private final Double userId;
        private String containingUri;
        private String direction;
        private String filter;
        private Boolean filterEmbeddable;
        private Boolean filterPlayable;
        private Boolean filterScreenRecorded;
        private String filterTag;
        private String filterTagAllOf;
        private String filterTagExclude;
        private String includeTeamContent;
        private Double page;
        private Double perPage;
        private String query;
        private List<String> queryFields;
        private String sort;

        private VideosRequestBuilder(double userId) {
            this.userId = userId;
        }

        /**
         * Set containingUri
         * @param containingUri The page that contains the video URI. The field is available only when not paired with **query**. (optional)
         * @return VideosRequestBuilder
         */
        public VideosRequestBuilder containingUri(String containingUri) {
            this.containingUri = containingUri;
            return this;
        }
        
        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return VideosRequestBuilder
         */
        public VideosRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The attribute by which to filter the results.  Option descriptions:  * &#x60;app_only&#x60; - Return app-only videos.  * &#x60;embeddable&#x60; - Return embeddable videos.  * &#x60;featured&#x60; - Return featured videos.  * &#x60;live&#x60; - Return only live videos.  * &#x60;no_placeholder&#x60; - Return no placeholder videos.  * &#x60;nolive&#x60; - Return no live videos.  * &#x60;playable&#x60; - Return playable videos.  * &#x60;screen_recorded&#x60; - Return screen-recorded videos.  (optional)
         * @return VideosRequestBuilder
         */
        public VideosRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set filterEmbeddable
         * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)
         * @return VideosRequestBuilder
         */
        public VideosRequestBuilder filterEmbeddable(Boolean filterEmbeddable) {
            this.filterEmbeddable = filterEmbeddable;
            return this;
        }
        
        /**
         * Set filterPlayable
         * @param filterPlayable Whether to filter the results by playable videos (&#x60;true&#x60;) or non-playable videos (&#x60;false&#x60;). (optional)
         * @return VideosRequestBuilder
         */
        public VideosRequestBuilder filterPlayable(Boolean filterPlayable) {
            this.filterPlayable = filterPlayable;
            return this;
        }
        
        /**
         * Set filterScreenRecorded
         * @param filterScreenRecorded Whether to filter the results by screen-recorded videos (&#x60;true&#x60;) or non-screen-recorded videos (&#x60;false&#x60;). (optional)
         * @return VideosRequestBuilder
         */
        public VideosRequestBuilder filterScreenRecorded(Boolean filterScreenRecorded) {
            this.filterScreenRecorded = filterScreenRecorded;
            return this;
        }
        
        /**
         * Set filterTag
         * @param filterTag A comma-separated list of tags to filter on. All results must include at least one of these tags. (optional)
         * @return VideosRequestBuilder
         */
        public VideosRequestBuilder filterTag(String filterTag) {
            this.filterTag = filterTag;
            return this;
        }
        
        /**
         * Set filterTagAllOf
         * @param filterTagAllOf A comma-separated list of tags to filter on. All results must include all of these tags. (optional)
         * @return VideosRequestBuilder
         */
        public VideosRequestBuilder filterTagAllOf(String filterTagAllOf) {
            this.filterTagAllOf = filterTagAllOf;
            return this;
        }
        
        /**
         * Set filterTagExclude
         * @param filterTagExclude A comma-separated list of tags to exclude. All results must exclude all of these tags. (optional)
         * @return VideosRequestBuilder
         */
        public VideosRequestBuilder filterTagExclude(String filterTagExclude) {
            this.filterTagExclude = filterTagExclude;
            return this;
        }
        
        /**
         * Set includeTeamContent
         * @param includeTeamContent Whether to include content from the user&#39;s teams when searching. _This field is deprecated._ (optional)
         * @return VideosRequestBuilder
         */
        public VideosRequestBuilder includeTeamContent(String includeTeamContent) {
            this.includeTeamContent = includeTeamContent;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return VideosRequestBuilder
         */
        public VideosRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return VideosRequestBuilder
         */
        public VideosRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set query
         * @param query The search query to use to filter the results. (optional)
         * @return VideosRequestBuilder
         */
        public VideosRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set queryFields
         * @param queryFields A comma-separated list of fields to query over. The default value is &#x60;title,description,chapters,tags&#x60;.  Option descriptions:  * &#x60;chapters&#x60; - Query by chapter titles that have been added to the video.  * &#x60;description&#x60; - Query by the description of the video.  * &#x60;tags&#x60; - Query by tag names that have been added to the video.  * &#x60;title&#x60; - Query by the title of the video.  (optional)
         * @return VideosRequestBuilder
         */
        public VideosRequestBuilder queryFields(List<String> queryFields) {
            this.queryFields = queryFields;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically by title.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sorting method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by last user interaction. If a result hasn&#39;t had an interaction, the upload date is used instead.  * &#x60;likes&#x60; - Sort the results by number of likes. To use this option, **direction** must be &#x60;desc&#x60;.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays. To use this option, **direction** must be &#x60;desc&#x60;.  (optional)
         * @return VideosRequestBuilder
         */
        public VideosRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for videos
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> The authenticated user hasn&#39;t uploaded any videos since the given **If-Modified-Since** header. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return videosCall(userId, containingUri, direction, filter, filterEmbeddable, filterPlayable, filterScreenRecorded, filterTag, filterTagAllOf, filterTagExclude, includeTeamContent, page, perPage, query, queryFields, sort, _callback);
        }


        /**
         * Execute videos request
         * @return List&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> The authenticated user hasn&#39;t uploaded any videos since the given **If-Modified-Since** header. </td><td>  -  </td></tr>
         </table>
         */
        public List<Video> execute() throws ApiException {
            ApiResponse<List<Video>> localVarResp = videosWithHttpInfo(userId, containingUri, direction, filter, filterEmbeddable, filterPlayable, filterScreenRecorded, filterTag, filterTagAllOf, filterTagExclude, includeTeamContent, page, perPage, query, queryFields, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute videos request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Video&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> The authenticated user hasn&#39;t uploaded any videos since the given **If-Modified-Since** header. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Video>> executeWithHttpInfo() throws ApiException {
            return videosWithHttpInfo(userId, containingUri, direction, filter, filterEmbeddable, filterPlayable, filterScreenRecorded, filterTag, filterTagAllOf, filterTagExclude, includeTeamContent, page, perPage, query, queryFields, sort);
        }

        /**
         * Execute videos request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> The authenticated user hasn&#39;t uploaded any videos since the given **If-Modified-Since** header. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Video>> _callback) throws ApiException {
            return videosAsync(userId, containingUri, direction, filter, filterEmbeddable, filterPlayable, filterScreenRecorded, filterTag, filterTagAllOf, filterTagExclude, includeTeamContent, page, perPage, query, queryFields, sort, _callback);
        }
    }

    /**
     * Get all the videos that the user has uploaded
     * This method returns all the videos that the authenticated user has uploaded.
     * @param userId The ID of the user. (required)
     * @return VideosRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The authenticated user hasn&#39;t uploaded any videos since the given **If-Modified-Since** header. </td><td>  -  </td></tr>
     </table>
     */
    public VideosRequestBuilder videos(double userId) throws IllegalArgumentException {
        
        return new VideosRequestBuilder(userId);
    }
    private okhttp3.Call videos_0Call(Double userId, String uris, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/videos"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uris != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uris", uris));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call videos_0ValidateBeforeCall(Double userId, String uris, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling videos_0(Async)");
        }

        // verify the required parameter 'uris' is set
        if (uris == null) {
            throw new ApiException("Missing the required parameter 'uris' when calling videos_0(Async)");
        }

        return videos_0Call(userId, uris, _callback);

    }


    private ApiResponse<Void> videos_0WithHttpInfo(Double userId, String uris) throws ApiException {
        okhttp3.Call localVarCall = videos_0ValidateBeforeCall(userId, uris, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call videos_0Async(Double userId, String uris, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = videos_0ValidateBeforeCall(userId, uris, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class Videos0RequestBuilder {
        private final Double userId;
        private final String uris;

        private Videos0RequestBuilder(double userId, String uris) {
            this.userId = userId;
            this.uris = uris;
        }

        /**
         * Build call for videos_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return videos_0Call(userId, uris, _callback);
        }


        /**
         * Execute videos_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were deleted. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            videos_0WithHttpInfo(userId, uris);
        }

        /**
         * Execute videos_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return videos_0WithHttpInfo(userId, uris);
        }

        /**
         * Execute videos_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return videos_0Async(userId, uris, _callback);
        }
    }

    /**
     * Delete a user&#39;s videos
     * This method deletes one or more videos belonging to the specified user. The authenticated user must have permission to delete the videos.  Specify the videos to delete in a comma-separated list by URI using the **uris** query parameter.
     * @param userId The ID of the user. (required)
     * @param uris A comma-separated list of the video URIs to delete. (required)
     * @return Videos0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The videos were deleted. </td><td>  -  </td></tr>
     </table>
     */
    public Videos0RequestBuilder videos_0(double userId, String uris) throws IllegalArgumentException {
        
        if (uris == null) throw new IllegalArgumentException("\"uris\" is required but got null");
            

        return new Videos0RequestBuilder(userId, uris);
    }
    private okhttp3.Call videos_1Call(String query, String direction, String filter, String links, Double page, Double perPage, String sort, String uris, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (links != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("links", links));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (uris != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uris", uris));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call videos_1ValidateBeforeCall(String query, String direction, String filter, String links, Double page, Double perPage, String sort, String uris, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling videos_1(Async)");
        }

        return videos_1Call(query, direction, filter, links, page, perPage, sort, uris, _callback);

    }


    private ApiResponse<List<Video>> videos_1WithHttpInfo(String query, String direction, String filter, String links, Double page, Double perPage, String sort, String uris) throws ApiException {
        okhttp3.Call localVarCall = videos_1ValidateBeforeCall(query, direction, filter, links, page, perPage, sort, uris, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call videos_1Async(String query, String direction, String filter, String links, Double page, Double perPage, String sort, String uris, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = videos_1ValidateBeforeCall(query, direction, filter, links, page, perPage, sort, uris, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Videos1RequestBuilder {
        private final String query;
        private String direction;
        private String filter;
        private String links;
        private Double page;
        private Double perPage;
        private String sort;
        private String uris;

        private Videos1RequestBuilder(String query) {
            this.query = query;
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return Videos1RequestBuilder
         */
        public Videos1RequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The attribute by which to filter the results. &#x60;CC&#x60; and related filters target videos with the corresponding Creative Commons licenses. For more information, see our [Creative Commons](https://vimeo.com/creativecommons) page.  Option descriptions:  * &#x60;CC&#x60; - Return videos under any Creative Commons license.  * &#x60;CC-BY&#x60; - Return CC BY, or attribution-only, videos.  * &#x60;CC-BY-NC&#x60; - Return CC BY-NC, or Attribution-NonCommercial, videos.  * &#x60;CC-BY-NC-ND&#x60; - Return CC BY-NC-ND, or Attribution-NonCommercial-NoDerivs, videos.  * &#x60;CC-BY-NC-SA&#x60; - Return CC BY-NC-SA, or Attribution-NonCommercial-ShareAlike, videos.  * &#x60;CC-BY-ND&#x60; - Return CC BY-ND, or Attribution-NoDerivs, videos.  * &#x60;CC-BY-SA&#x60; - Return CC BY-SA, or Attribution-ShareAlike, videos.  * &#x60;CC0&#x60; - Return CC0, or public domain, videos.  * &#x60;categories&#x60; - Filter by categories.  * &#x60;duration&#x60; - Filter by duration.  * &#x60;in-progress&#x60; - Return in-progress videos.  * &#x60;minimum_likes&#x60; - Filter by minimum likes.  * &#x60;trending&#x60; - Return trending videos.  * &#x60;upload_date&#x60; - Filter by upload date.  (optional)
         * @return Videos1RequestBuilder
         */
        public Videos1RequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set links
         * @param links A comma-separated list of video URLs to find. Querying, filtering, and sorting aren&#39;t supported when using this field. (optional)
         * @return Videos1RequestBuilder
         */
        public Videos1RequestBuilder links(String links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return Videos1RequestBuilder
         */
        public Videos1RequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return Videos1RequestBuilder
         */
        public Videos1RequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  * &#x60;relevant&#x60; - Sort the results by relevance.  (optional)
         * @return Videos1RequestBuilder
         */
        public Videos1RequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set uris
         * @param uris A comma-separated list of video URIs to find. Querying, filtering, and sorting aren&#39;t supported when using this field. (optional)
         * @return Videos1RequestBuilder
         */
        public Videos1RequestBuilder uris(String uris) {
            this.uris = uris;
            return this;
        }
        
        /**
         * Build call for videos_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The search results were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return videos_1Call(query, direction, filter, links, page, perPage, sort, uris, _callback);
        }


        /**
         * Execute videos_1 request
         * @return List&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The search results were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Video> execute() throws ApiException {
            ApiResponse<List<Video>> localVarResp = videos_1WithHttpInfo(query, direction, filter, links, page, perPage, sort, uris);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute videos_1 request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Video&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The search results were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Video>> executeWithHttpInfo() throws ApiException {
            return videos_1WithHttpInfo(query, direction, filter, links, page, perPage, sort, uris);
        }

        /**
         * Execute videos_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The search results were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Video>> _callback) throws ApiException {
            return videos_1Async(query, direction, filter, links, page, perPage, sort, uris, _callback);
        }
    }

    /**
     * Search for videos
     * This method returns all the videos that match custom search criteria.
     * @param query The search query. (required)
     * @return Videos1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The search results were returned. </td><td>  -  </td></tr>
     </table>
     */
    public Videos1RequestBuilder videos_1(String query) throws IllegalArgumentException {
        if (query == null) throw new IllegalArgumentException("\"query\" is required but got null");
            

        return new Videos1RequestBuilder(query);
    }
}
