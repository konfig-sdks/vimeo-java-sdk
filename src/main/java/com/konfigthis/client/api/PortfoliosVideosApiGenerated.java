/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Video;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PortfoliosVideosApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PortfoliosVideosApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PortfoliosVideosApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addVideoToPortfolioCall(Double portfolioId, Double userId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}"
            .replace("{" + "portfolio_id" + "}", localVarApiClient.escapeString(portfolioId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVideoToPortfolioValidateBeforeCall(Double portfolioId, Double userId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling addVideoToPortfolio(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling addVideoToPortfolio(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addVideoToPortfolio(Async)");
        }

        return addVideoToPortfolioCall(portfolioId, userId, videoId, _callback);

    }


    private ApiResponse<Void> addVideoToPortfolioWithHttpInfo(Double portfolioId, Double userId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = addVideoToPortfolioValidateBeforeCall(portfolioId, userId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addVideoToPortfolioAsync(Double portfolioId, Double userId, Double videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVideoToPortfolioValidateBeforeCall(portfolioId, userId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddVideoToPortfolioRequestBuilder {
        private final Double portfolioId;
        private final Double userId;
        private final Double videoId;

        private AddVideoToPortfolioRequestBuilder(double portfolioId, double userId, double videoId) {
            this.portfolioId = portfolioId;
            this.userId = userId;
            this.videoId = videoId;
        }

        /**
         * Build call for addVideoToPortfolio
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addVideoToPortfolioCall(portfolioId, userId, videoId, _callback);
        }


        /**
         * Execute addVideoToPortfolio request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            addVideoToPortfolioWithHttpInfo(portfolioId, userId, videoId);
        }

        /**
         * Execute addVideoToPortfolio request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return addVideoToPortfolioWithHttpInfo(portfolioId, userId, videoId);
        }

        /**
         * Execute addVideoToPortfolio request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return addVideoToPortfolioAsync(portfolioId, userId, videoId, _callback);
        }
    }

    /**
     * Add a video to a portfolio
     * This method adds a video to the specified portfolio belonging to the authenticated user.
     * @param portfolioId The ID of the portfolio. (required)
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @return AddVideoToPortfolioRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
     </table>
     */
    public AddVideoToPortfolioRequestBuilder addVideoToPortfolio(double portfolioId, double userId, double videoId) throws IllegalArgumentException {
        
        
        
        return new AddVideoToPortfolioRequestBuilder(portfolioId, userId, videoId);
    }
    private okhttp3.Call getAllPortfolioVideosCall(Double portfolioId, String containingUri, String filter, Boolean filterEmbeddable, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/portfolios/{portfolio_id}/videos"
            .replace("{" + "portfolio_id" + "}", localVarApiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (containingUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("containing_uri", containingUri));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (filterEmbeddable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_embeddable", filterEmbeddable));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPortfolioVideosValidateBeforeCall(Double portfolioId, String containingUri, String filter, Boolean filterEmbeddable, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling getAllPortfolioVideos(Async)");
        }

        return getAllPortfolioVideosCall(portfolioId, containingUri, filter, filterEmbeddable, page, perPage, sort, _callback);

    }


    private ApiResponse<List<Video>> getAllPortfolioVideosWithHttpInfo(Double portfolioId, String containingUri, String filter, Boolean filterEmbeddable, Double page, Double perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = getAllPortfolioVideosValidateBeforeCall(portfolioId, containingUri, filter, filterEmbeddable, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllPortfolioVideosAsync(Double portfolioId, String containingUri, String filter, Boolean filterEmbeddable, Double page, Double perPage, String sort, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPortfolioVideosValidateBeforeCall(portfolioId, containingUri, filter, filterEmbeddable, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllPortfolioVideosRequestBuilder {
        private final Double portfolioId;
        private String containingUri;
        private String filter;
        private Boolean filterEmbeddable;
        private Double page;
        private Double perPage;
        private String sort;

        private GetAllPortfolioVideosRequestBuilder(double portfolioId) {
            this.portfolioId = portfolioId;
        }

        /**
         * Set containingUri
         * @param containingUri The page that contains the video URI. (optional)
         * @return GetAllPortfolioVideosRequestBuilder
         */
        public GetAllPortfolioVideosRequestBuilder containingUri(String containingUri) {
            this.containingUri = containingUri;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)
         * @return GetAllPortfolioVideosRequestBuilder
         */
        public GetAllPortfolioVideosRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set filterEmbeddable
         * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)
         * @return GetAllPortfolioVideosRequestBuilder
         */
        public GetAllPortfolioVideosRequestBuilder filterEmbeddable(Boolean filterEmbeddable) {
            this.filterEmbeddable = filterEmbeddable;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetAllPortfolioVideosRequestBuilder
         */
        public GetAllPortfolioVideosRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetAllPortfolioVideosRequestBuilder
         */
        public GetAllPortfolioVideosRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;default&#x60; - Use the default sorting method.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;manual&#x60; - Sort the results by their user-specified order.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)
         * @return GetAllPortfolioVideosRequestBuilder
         */
        public GetAllPortfolioVideosRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getAllPortfolioVideos
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllPortfolioVideosCall(portfolioId, containingUri, filter, filterEmbeddable, page, perPage, sort, _callback);
        }


        /**
         * Execute getAllPortfolioVideos request
         * @return List&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Video> execute() throws ApiException {
            ApiResponse<List<Video>> localVarResp = getAllPortfolioVideosWithHttpInfo(portfolioId, containingUri, filter, filterEmbeddable, page, perPage, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllPortfolioVideos request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Video&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Video>> executeWithHttpInfo() throws ApiException {
            return getAllPortfolioVideosWithHttpInfo(portfolioId, containingUri, filter, filterEmbeddable, page, perPage, sort);
        }

        /**
         * Execute getAllPortfolioVideos request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Video>> _callback) throws ApiException {
            return getAllPortfolioVideosAsync(portfolioId, containingUri, filter, filterEmbeddable, page, perPage, sort, _callback);
        }
    }

    /**
     * Get all the videos in a portfolio
     * This method returns every video from the specified portfolio belonging to the authenticated user.
     * @param portfolioId The ID of the portfolio. (required)
     * @return GetAllPortfolioVideosRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllPortfolioVideosRequestBuilder getAllPortfolioVideos(double portfolioId) throws IllegalArgumentException {
        
        return new GetAllPortfolioVideosRequestBuilder(portfolioId);
    }
    private okhttp3.Call getAllPortfolioVideos_0Call(Double portfolioId, Double userId, String containingUri, String filter, Boolean filterEmbeddable, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/portfolios/{portfolio_id}/videos"
            .replace("{" + "portfolio_id" + "}", localVarApiClient.escapeString(portfolioId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (containingUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("containing_uri", containingUri));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (filterEmbeddable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_embeddable", filterEmbeddable));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPortfolioVideos_0ValidateBeforeCall(Double portfolioId, Double userId, String containingUri, String filter, Boolean filterEmbeddable, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling getAllPortfolioVideos_0(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getAllPortfolioVideos_0(Async)");
        }

        return getAllPortfolioVideos_0Call(portfolioId, userId, containingUri, filter, filterEmbeddable, page, perPage, sort, _callback);

    }


    private ApiResponse<List<Video>> getAllPortfolioVideos_0WithHttpInfo(Double portfolioId, Double userId, String containingUri, String filter, Boolean filterEmbeddable, Double page, Double perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = getAllPortfolioVideos_0ValidateBeforeCall(portfolioId, userId, containingUri, filter, filterEmbeddable, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllPortfolioVideos_0Async(Double portfolioId, Double userId, String containingUri, String filter, Boolean filterEmbeddable, Double page, Double perPage, String sort, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPortfolioVideos_0ValidateBeforeCall(portfolioId, userId, containingUri, filter, filterEmbeddable, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllPortfolioVideos0RequestBuilder {
        private final Double portfolioId;
        private final Double userId;
        private String containingUri;
        private String filter;
        private Boolean filterEmbeddable;
        private Double page;
        private Double perPage;
        private String sort;

        private GetAllPortfolioVideos0RequestBuilder(double portfolioId, double userId) {
            this.portfolioId = portfolioId;
            this.userId = userId;
        }

        /**
         * Set containingUri
         * @param containingUri The page that contains the video URI. (optional)
         * @return GetAllPortfolioVideos0RequestBuilder
         */
        public GetAllPortfolioVideos0RequestBuilder containingUri(String containingUri) {
            this.containingUri = containingUri;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)
         * @return GetAllPortfolioVideos0RequestBuilder
         */
        public GetAllPortfolioVideos0RequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set filterEmbeddable
         * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)
         * @return GetAllPortfolioVideos0RequestBuilder
         */
        public GetAllPortfolioVideos0RequestBuilder filterEmbeddable(Boolean filterEmbeddable) {
            this.filterEmbeddable = filterEmbeddable;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetAllPortfolioVideos0RequestBuilder
         */
        public GetAllPortfolioVideos0RequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetAllPortfolioVideos0RequestBuilder
         */
        public GetAllPortfolioVideos0RequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;default&#x60; - Use the default sorting method.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;manual&#x60; - Sort the results by their user-specified order.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)
         * @return GetAllPortfolioVideos0RequestBuilder
         */
        public GetAllPortfolioVideos0RequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getAllPortfolioVideos_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllPortfolioVideos_0Call(portfolioId, userId, containingUri, filter, filterEmbeddable, page, perPage, sort, _callback);
        }


        /**
         * Execute getAllPortfolioVideos_0 request
         * @return List&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Video> execute() throws ApiException {
            ApiResponse<List<Video>> localVarResp = getAllPortfolioVideos_0WithHttpInfo(portfolioId, userId, containingUri, filter, filterEmbeddable, page, perPage, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllPortfolioVideos_0 request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Video&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Video>> executeWithHttpInfo() throws ApiException {
            return getAllPortfolioVideos_0WithHttpInfo(portfolioId, userId, containingUri, filter, filterEmbeddable, page, perPage, sort);
        }

        /**
         * Execute getAllPortfolioVideos_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Video>> _callback) throws ApiException {
            return getAllPortfolioVideos_0Async(portfolioId, userId, containingUri, filter, filterEmbeddable, page, perPage, sort, _callback);
        }
    }

    /**
     * Get all the videos in a portfolio
     * This method returns every video from the specified portfolio belonging to the authenticated user.
     * @param portfolioId The ID of the portfolio. (required)
     * @param userId The ID of the user. (required)
     * @return GetAllPortfolioVideos0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllPortfolioVideos0RequestBuilder getAllPortfolioVideos_0(double portfolioId, double userId) throws IllegalArgumentException {
        
        
        return new GetAllPortfolioVideos0RequestBuilder(portfolioId, userId);
    }
    private okhttp3.Call getSpecificVideoCall(Double portfolioId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/portfolios/{portfolio_id}/videos/{video_id}"
            .replace("{" + "portfolio_id" + "}", localVarApiClient.escapeString(portfolioId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificVideoValidateBeforeCall(Double portfolioId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling getSpecificVideo(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getSpecificVideo(Async)");
        }

        return getSpecificVideoCall(portfolioId, videoId, _callback);

    }


    private ApiResponse<Video> getSpecificVideoWithHttpInfo(Double portfolioId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = getSpecificVideoValidateBeforeCall(portfolioId, videoId, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificVideoAsync(Double portfolioId, Double videoId, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificVideoValidateBeforeCall(portfolioId, videoId, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificVideoRequestBuilder {
        private final Double portfolioId;
        private final Double videoId;

        private GetSpecificVideoRequestBuilder(double portfolioId, double videoId) {
            this.portfolioId = portfolioId;
            this.videoId = videoId;
        }

        /**
         * Build call for getSpecificVideo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificVideoCall(portfolioId, videoId, _callback);
        }


        /**
         * Execute getSpecificVideo request
         * @return Video
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public Video execute() throws ApiException {
            ApiResponse<Video> localVarResp = getSpecificVideoWithHttpInfo(portfolioId, videoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificVideo request with HTTP info returned
         * @return ApiResponse&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Video> executeWithHttpInfo() throws ApiException {
            return getSpecificVideoWithHttpInfo(portfolioId, videoId);
        }

        /**
         * Execute getSpecificVideo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Video> _callback) throws ApiException {
            return getSpecificVideoAsync(portfolioId, videoId, _callback);
        }
    }

    /**
     * Get a specific video in a portfolio
     * This method returns a single video from the specified portfolio belonging to the authenticated user.
     * @param portfolioId The ID of the portfolio. (required)
     * @param videoId The ID of the video. (required)
     * @return GetSpecificVideoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificVideoRequestBuilder getSpecificVideo(double portfolioId, double videoId) throws IllegalArgumentException {
        
        
        return new GetSpecificVideoRequestBuilder(portfolioId, videoId);
    }
    private okhttp3.Call getSpecificVideo_0Call(Double portfolioId, Double userId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}"
            .replace("{" + "portfolio_id" + "}", localVarApiClient.escapeString(portfolioId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificVideo_0ValidateBeforeCall(Double portfolioId, Double userId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling getSpecificVideo_0(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getSpecificVideo_0(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getSpecificVideo_0(Async)");
        }

        return getSpecificVideo_0Call(portfolioId, userId, videoId, _callback);

    }


    private ApiResponse<Video> getSpecificVideo_0WithHttpInfo(Double portfolioId, Double userId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = getSpecificVideo_0ValidateBeforeCall(portfolioId, userId, videoId, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificVideo_0Async(Double portfolioId, Double userId, Double videoId, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificVideo_0ValidateBeforeCall(portfolioId, userId, videoId, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificVideo0RequestBuilder {
        private final Double portfolioId;
        private final Double userId;
        private final Double videoId;

        private GetSpecificVideo0RequestBuilder(double portfolioId, double userId, double videoId) {
            this.portfolioId = portfolioId;
            this.userId = userId;
            this.videoId = videoId;
        }

        /**
         * Build call for getSpecificVideo_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificVideo_0Call(portfolioId, userId, videoId, _callback);
        }


        /**
         * Execute getSpecificVideo_0 request
         * @return Video
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public Video execute() throws ApiException {
            ApiResponse<Video> localVarResp = getSpecificVideo_0WithHttpInfo(portfolioId, userId, videoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificVideo_0 request with HTTP info returned
         * @return ApiResponse&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Video> executeWithHttpInfo() throws ApiException {
            return getSpecificVideo_0WithHttpInfo(portfolioId, userId, videoId);
        }

        /**
         * Execute getSpecificVideo_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Video> _callback) throws ApiException {
            return getSpecificVideo_0Async(portfolioId, userId, videoId, _callback);
        }
    }

    /**
     * Get a specific video in a portfolio
     * This method returns a single video from the specified portfolio belonging to the authenticated user.
     * @param portfolioId The ID of the portfolio. (required)
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @return GetSpecificVideo0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificVideo0RequestBuilder getSpecificVideo_0(double portfolioId, double userId, double videoId) throws IllegalArgumentException {
        
        
        
        return new GetSpecificVideo0RequestBuilder(portfolioId, userId, videoId);
    }
    private okhttp3.Call putVideoToPortfolioCall(Double portfolioId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/portfolios/{portfolio_id}/videos/{video_id}"
            .replace("{" + "portfolio_id" + "}", localVarApiClient.escapeString(portfolioId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putVideoToPortfolioValidateBeforeCall(Double portfolioId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling putVideoToPortfolio(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling putVideoToPortfolio(Async)");
        }

        return putVideoToPortfolioCall(portfolioId, videoId, _callback);

    }


    private ApiResponse<Void> putVideoToPortfolioWithHttpInfo(Double portfolioId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = putVideoToPortfolioValidateBeforeCall(portfolioId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call putVideoToPortfolioAsync(Double portfolioId, Double videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putVideoToPortfolioValidateBeforeCall(portfolioId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class PutVideoToPortfolioRequestBuilder {
        private final Double portfolioId;
        private final Double videoId;

        private PutVideoToPortfolioRequestBuilder(double portfolioId, double videoId) {
            this.portfolioId = portfolioId;
            this.videoId = videoId;
        }

        /**
         * Build call for putVideoToPortfolio
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putVideoToPortfolioCall(portfolioId, videoId, _callback);
        }


        /**
         * Execute putVideoToPortfolio request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            putVideoToPortfolioWithHttpInfo(portfolioId, videoId);
        }

        /**
         * Execute putVideoToPortfolio request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return putVideoToPortfolioWithHttpInfo(portfolioId, videoId);
        }

        /**
         * Execute putVideoToPortfolio request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return putVideoToPortfolioAsync(portfolioId, videoId, _callback);
        }
    }

    /**
     * Add a video to a portfolio
     * This method adds a video to the specified portfolio belonging to the authenticated user.
     * @param portfolioId The ID of the portfolio. (required)
     * @param videoId The ID of the video. (required)
     * @return PutVideoToPortfolioRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
     </table>
     */
    public PutVideoToPortfolioRequestBuilder putVideoToPortfolio(double portfolioId, double videoId) throws IllegalArgumentException {
        
        
        return new PutVideoToPortfolioRequestBuilder(portfolioId, videoId);
    }
    private okhttp3.Call removeFromPortfolioCall(Double portfolioId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/portfolios/{portfolio_id}/videos/{video_id}"
            .replace("{" + "portfolio_id" + "}", localVarApiClient.escapeString(portfolioId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFromPortfolioValidateBeforeCall(Double portfolioId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling removeFromPortfolio(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling removeFromPortfolio(Async)");
        }

        return removeFromPortfolioCall(portfolioId, videoId, _callback);

    }


    private ApiResponse<Void> removeFromPortfolioWithHttpInfo(Double portfolioId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = removeFromPortfolioValidateBeforeCall(portfolioId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeFromPortfolioAsync(Double portfolioId, Double videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFromPortfolioValidateBeforeCall(portfolioId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveFromPortfolioRequestBuilder {
        private final Double portfolioId;
        private final Double videoId;

        private RemoveFromPortfolioRequestBuilder(double portfolioId, double videoId) {
            this.portfolioId = portfolioId;
            this.videoId = videoId;
        }

        /**
         * Build call for removeFromPortfolio
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeFromPortfolioCall(portfolioId, videoId, _callback);
        }


        /**
         * Execute removeFromPortfolio request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeFromPortfolioWithHttpInfo(portfolioId, videoId);
        }

        /**
         * Execute removeFromPortfolio request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeFromPortfolioWithHttpInfo(portfolioId, videoId);
        }

        /**
         * Execute removeFromPortfolio request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeFromPortfolioAsync(portfolioId, videoId, _callback);
        }
    }

    /**
     * Remove a video from a portfolio
     * This method removes a video from the specified portfolio belonging to the authenticated user.
     * @param portfolioId The ID of the portfolio. (required)
     * @param videoId The ID of the video. (required)
     * @return RemoveFromPortfolioRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFromPortfolioRequestBuilder removeFromPortfolio(double portfolioId, double videoId) throws IllegalArgumentException {
        
        
        return new RemoveFromPortfolioRequestBuilder(portfolioId, videoId);
    }
    private okhttp3.Call removeFromPortfolioVideoCall(Double portfolioId, Double userId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}"
            .replace("{" + "portfolio_id" + "}", localVarApiClient.escapeString(portfolioId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFromPortfolioVideoValidateBeforeCall(Double portfolioId, Double userId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling removeFromPortfolioVideo(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling removeFromPortfolioVideo(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling removeFromPortfolioVideo(Async)");
        }

        return removeFromPortfolioVideoCall(portfolioId, userId, videoId, _callback);

    }


    private ApiResponse<Void> removeFromPortfolioVideoWithHttpInfo(Double portfolioId, Double userId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = removeFromPortfolioVideoValidateBeforeCall(portfolioId, userId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeFromPortfolioVideoAsync(Double portfolioId, Double userId, Double videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFromPortfolioVideoValidateBeforeCall(portfolioId, userId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveFromPortfolioVideoRequestBuilder {
        private final Double portfolioId;
        private final Double userId;
        private final Double videoId;

        private RemoveFromPortfolioVideoRequestBuilder(double portfolioId, double userId, double videoId) {
            this.portfolioId = portfolioId;
            this.userId = userId;
            this.videoId = videoId;
        }

        /**
         * Build call for removeFromPortfolioVideo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeFromPortfolioVideoCall(portfolioId, userId, videoId, _callback);
        }


        /**
         * Execute removeFromPortfolioVideo request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeFromPortfolioVideoWithHttpInfo(portfolioId, userId, videoId);
        }

        /**
         * Execute removeFromPortfolioVideo request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeFromPortfolioVideoWithHttpInfo(portfolioId, userId, videoId);
        }

        /**
         * Execute removeFromPortfolioVideo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeFromPortfolioVideoAsync(portfolioId, userId, videoId, _callback);
        }
    }

    /**
     * Remove a video from a portfolio
     * This method removes a video from the specified portfolio belonging to the authenticated user.
     * @param portfolioId The ID of the portfolio. (required)
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @return RemoveFromPortfolioVideoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFromPortfolioVideoRequestBuilder removeFromPortfolioVideo(double portfolioId, double userId, double videoId) throws IllegalArgumentException {
        
        
        
        return new RemoveFromPortfolioVideoRequestBuilder(portfolioId, userId, videoId);
    }
}
