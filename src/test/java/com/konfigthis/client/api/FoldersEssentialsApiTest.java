/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CreateProjectRequest;
import com.konfigthis.client.model.EditProjectRequest;
import com.konfigthis.client.model.FoldersEssentialsCreateFolderRequest;
import com.konfigthis.client.model.FoldersEssentialsEditFolderRequest;
import com.konfigthis.client.model.Project;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FoldersEssentialsApi
 */
@Disabled
public class FoldersEssentialsApiTest {

    private static FoldersEssentialsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new FoldersEssentialsApi(apiClient);
    }

    /**
     * Create a folder
     *
     * This method creates a new folder for the authenticated user. By default, this method creates a top-level folder. To create a subfolder — that is, to place the new folder inside an existing folder — specify the parent folder by URI with the **parent_folder_uri** parameter in the body of the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFolderTest() throws ApiException {
        String name = null;
        String parentFolderUri = null;
        Project response = api.createFolder(name)
                .parentFolderUri(parentFolderUri)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a folder
     *
     * This method deletes the specified folder and optionally also the videos that it contains. The authenticated user must be the owner of the folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFolderTest() throws ApiException {
        Double projectId = null;
        Boolean shouldDeleteClips = null;
        api.deleteFolder(projectId)
                .shouldDeleteClips(shouldDeleteClips)
                .execute();
        // TODO: test validations
    }

    /**
     * Edit a folder
     *
     * This method edits the specified folder. The authenticated user must be the owner of the folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void editFolderTest() throws ApiException {
        String name = null;
        Double projectId = null;
        Project response = api.editFolder(name, projectId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the folders that belong to the user
     *
     * This method returns all the folders belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllUserFoldersTest() throws ApiException {
        String direction = null;
        Double page = null;
        Double perPage = null;
        String query = null;
        String sort = null;
        List<Project> response = api.getAllUserFolders()
                .direction(direction)
                .page(page)
                .perPage(perPage)
                .query(query)
                .sort(sort)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a specific folder
     *
     * This method returns a single folder belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSpecificFolderTest() throws ApiException {
        Double projectId = null;
        Project response = api.getSpecificFolder(projectId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a user&#39;s private-to-me folder
     *
     * This method returns the specified private-to-me folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserPrivateToMeFolderTest() throws ApiException {
        Double ownerId = null;
        Project response = api.getUserPrivateToMeFolder(ownerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a folder
     *
     * This method creates a new folder for the authenticated user. By default, this method creates a top-level folder. To create a subfolder — that is, to place the new folder inside an existing folder — specify the parent folder by URI with the **parent_folder_uri** parameter in the body of the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectTest() throws ApiException {
        String name = null;
        Double userId = null;
        String parentFolderUri = null;
        Project response = api.project(name, userId)
                .parentFolderUri(parentFolderUri)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a specific folder
     *
     * This method returns a single folder belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void project_0Test() throws ApiException {
        Double projectId = null;
        Double userId = null;
        Project response = api.project_0(projectId, userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a folder
     *
     * This method deletes the specified folder and optionally also the videos that it contains. The authenticated user must be the owner of the folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void project_1Test() throws ApiException {
        Double projectId = null;
        Double userId = null;
        Boolean shouldDeleteClips = null;
        api.project_1(projectId, userId)
                .shouldDeleteClips(shouldDeleteClips)
                .execute();
        // TODO: test validations
    }

    /**
     * Edit a folder
     *
     * This method edits the specified folder. The authenticated user must be the owner of the folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void project_2Test() throws ApiException {
        String name = null;
        Double projectId = null;
        Double userId = null;
        Project response = api.project_2(name, projectId, userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the folders that belong to the user
     *
     * This method returns all the folders belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsTest() throws ApiException {
        Double userId = null;
        String direction = null;
        Double page = null;
        Double perPage = null;
        String query = null;
        String sort = null;
        List<Project> response = api.projects(userId)
                .direction(direction)
                .page(page)
                .perPage(perPage)
                .query(query)
                .sort(sort)
                .execute();
        // TODO: test validations
    }

}
