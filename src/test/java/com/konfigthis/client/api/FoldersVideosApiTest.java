/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Video;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FoldersVideosApi
 */
@Disabled
public class FoldersVideosApiTest {

    private static FoldersVideosApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new FoldersVideosApi(apiClient);
    }

    /**
     * Add a list of videos to a folder
     *
     * This method adds multiple videos to the specified folder. The authenticated user must be the owner of the folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMultipleToFolderTest() throws ApiException {
        Double projectId = null;
        String uris = null;
        api.addMultipleToFolder(projectId, uris)
                .execute();
        // TODO: test validations
    }

    /**
     * Add a video to a folder
     *
     * This method adds a single video to the specified folder. The authenticated user must be the owner of the folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addSingleFolderVideoTest() throws ApiException {
        Double projectId = null;
        Double userId = null;
        Double videoId = null;
        api.addSingleFolderVideo(projectId, userId, videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Add a video to a folder
     *
     * This method adds a single video to the specified folder. The authenticated user must be the owner of the folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addToFolderTest() throws ApiException {
        Double projectId = null;
        Double videoId = null;
        api.addToFolder(projectId, videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Add a list of videos to a folder
     *
     * This method adds multiple videos to the specified folder. The authenticated user must be the owner of the folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addToFolderVideosTest() throws ApiException {
        Double projectId = null;
        Double userId = null;
        String uris = null;
        api.addToFolderVideos(projectId, userId, uris)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the videos in a folder
     *
     * This method returns all the videos that belong to the specified folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllFolderVideosTest() throws ApiException {
        Double projectId = null;
        Double userId = null;
        String direction = null;
        String filterTag = null;
        String filterTagAllOf = null;
        String filterTagExclude = null;
        Boolean includeSubfolders = null;
        Double page = null;
        Double perPage = null;
        String query = null;
        String queryFields = null;
        String sort = null;
        List<Video> response = api.getAllFolderVideos(projectId, userId)
                .direction(direction)
                .filterTag(filterTag)
                .filterTagAllOf(filterTagAllOf)
                .filterTagExclude(filterTagExclude)
                .includeSubfolders(includeSubfolders)
                .page(page)
                .perPage(perPage)
                .query(query)
                .queryFields(queryFields)
                .sort(sort)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the videos in a folder
     *
     * This method returns all the videos that belong to the specified folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVideosInFolderTest() throws ApiException {
        Double projectId = null;
        String direction = null;
        String filterTag = null;
        String filterTagAllOf = null;
        String filterTagExclude = null;
        Boolean includeSubfolders = null;
        Double page = null;
        Double perPage = null;
        String query = null;
        String queryFields = null;
        String sort = null;
        List<Video> response = api.getVideosInFolder(projectId)
                .direction(direction)
                .filterTag(filterTag)
                .filterTagAllOf(filterTagAllOf)
                .filterTagExclude(filterTagExclude)
                .includeSubfolders(includeSubfolders)
                .page(page)
                .perPage(perPage)
                .query(query)
                .queryFields(queryFields)
                .sort(sort)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove a video from a folder
     *
     * This method removes a single video from the specified folder. Please note that this doesn&#39;t delete the video itself.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeFromFolderVideoTest() throws ApiException {
        Double projectId = null;
        Double userId = null;
        Double videoId = null;
        api.removeFromFolderVideo(projectId, userId, videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove a list of videos from a folder
     *
     * This method removes multiple videos from the specified folder. The authenticated user must be the owner of the folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeMultipleFromFolderTest() throws ApiException {
        Double projectId = null;
        String uris = null;
        Boolean shouldDeleteClips = null;
        api.removeMultipleFromFolder(projectId, uris)
                .shouldDeleteClips(shouldDeleteClips)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove a list of videos from a folder
     *
     * This method removes multiple videos from the specified folder. The authenticated user must be the owner of the folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeMultipleVideosFromFolderTest() throws ApiException {
        Double projectId = null;
        Double userId = null;
        String uris = null;
        Boolean shouldDeleteClips = null;
        api.removeMultipleVideosFromFolder(projectId, userId, uris)
                .shouldDeleteClips(shouldDeleteClips)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove a video from a folder
     *
     * This method removes a single video from the specified folder. Please note that this doesn&#39;t delete the video itself.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeSingleVideoTest() throws ApiException {
        Double projectId = null;
        Double videoId = null;
        api.removeSingleVideo(projectId, videoId)
                .execute();
        // TODO: test validations
    }

}
