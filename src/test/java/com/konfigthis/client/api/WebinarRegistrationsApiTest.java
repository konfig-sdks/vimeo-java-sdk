/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.WebinarRegistrant;
import com.konfigthis.client.model.WebinarRegistrationsCaptureUserRegistrationListRequest;
import com.konfigthis.client.model.WebinarRegistrationsCaptureUserRegistrationListRequest1;
import com.konfigthis.client.model.WebinarRegistrationsCaptureUserRegistrationListRequest1RegistrantsInner;
import com.konfigthis.client.model.WebinarRegistrationsCaptureUserRegistrationListRequestRegistrantsInner;
import com.konfigthis.client.model.WebinarRegistrationsUpdateUserRegistrationDataRequest;
import com.konfigthis.client.model.WebinarRegistrationsUpdateUserRegistrationDataRequest1;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebinarRegistrationsApi
 */
@Disabled
public class WebinarRegistrationsApiTest {

    private static WebinarRegistrationsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new WebinarRegistrationsApi(apiClient);
    }

    /**
     * Capture the user registration list associated with a webinar
     *
     * This method captures the user registration list associated with the specified webinar. A maximum of 50 registrants are permitted as part of the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void captureUserRegistrationListTest() throws ApiException {
        String webinarId = null;
        List<WebinarRegistrationsCaptureUserRegistrationListRequestRegistrantsInner> registrants = null;
        api.captureUserRegistrationList(webinarId)
                .registrants(registrants)
                .execute();
        // TODO: test validations
    }

    /**
     * Capture the user registration list associated with a webinar
     *
     * This method captures the user registration list associated with the specified webinar. A maximum of 50 registrants are permitted as part of the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void captureUserRegistrationList_0Test() throws ApiException {
        Double userId = null;
        String webinarId = null;
        List<WebinarRegistrationsCaptureUserRegistrationListRequest1RegistrantsInner> registrants = null;
        api.captureUserRegistrationList_0(userId, webinarId)
                .registrants(registrants)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a registrant record associated with a webinar
     *
     * This method deletes the specified registrant associated with a webinar and originally submitted through a webinar form.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRegistrantRecordTest() throws ApiException {
        String registrantId = null;
        String webinarId = null;
        api.deleteRegistrantRecord(registrantId, webinarId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a registrant record associated with a webinar
     *
     * This method deletes the specified registrant associated with a webinar and originally submitted through a webinar form.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRegistrantRecord_0Test() throws ApiException {
        String registrantId = null;
        Double userId = null;
        String webinarId = null;
        api.deleteRegistrantRecord_0(registrantId, userId, webinarId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get user registration data associated with a webinar
     *
     * This method returns the list of user registrations that is associated with the specified webinar and was originally submitted through a webinar form.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserRegistrationsByWebinarIdTest() throws ApiException {
        String webinarId = null;
        String direction = null;
        Double page = null;
        Double perPage = null;
        String sort = null;
        WebinarRegistrant response = api.getUserRegistrationsByWebinarId(webinarId)
                .direction(direction)
                .page(page)
                .perPage(perPage)
                .sort(sort)
                .execute();
        // TODO: test validations
    }

    /**
     * Get user registration data associated with a webinar
     *
     * This method returns the list of user registrations that is associated with the specified webinar and was originally submitted through a webinar form.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserRegistrationsByWebinarId_0Test() throws ApiException {
        Double userId = null;
        String webinarId = null;
        String direction = null;
        Double page = null;
        Double perPage = null;
        String sort = null;
        WebinarRegistrant response = api.getUserRegistrationsByWebinarId_0(userId, webinarId)
                .direction(direction)
                .page(page)
                .perPage(perPage)
                .sort(sort)
                .execute();
        // TODO: test validations
    }

    /**
     * Update user registration data associated with a webinar
     *
     * This method updates the specified user registration data associated with a webinar and originally submitted through a webinar form.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserRegistrationDataTest() throws ApiException {
        String registrantId = null;
        String webinarId = null;
        Boolean isBlocked = null;
        WebinarRegistrant response = api.updateUserRegistrationData(registrantId, webinarId)
                .isBlocked(isBlocked)
                .execute();
        // TODO: test validations
    }

    /**
     * Update user registration data associated with a webinar
     *
     * This method updates the specified user registration data associated with a webinar and originally submitted through a webinar form.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserRegistrationData_0Test() throws ApiException {
        String registrantId = null;
        Double userId = null;
        String webinarId = null;
        Boolean isBlocked = null;
        WebinarRegistrant response = api.updateUserRegistrationData_0(registrantId, userId, webinarId)
                .isBlocked(isBlocked)
                .execute();
        // TODO: test validations
    }

}
