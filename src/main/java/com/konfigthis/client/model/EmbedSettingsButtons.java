/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A collection of information about the buttons that appear on the interface of the embeddable player.
 */
@ApiModel(description = "A collection of information about the buttons that appear on the interface of the embeddable player.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmbedSettingsButtons {
  public static final String SERIALIZED_NAME_EMBED = "embed";
  @SerializedName(SERIALIZED_NAME_EMBED)
  private Boolean embed;

  public static final String SERIALIZED_NAME_FULLSCREEN = "fullscreen";
  @SerializedName(SERIALIZED_NAME_FULLSCREEN)
  private Boolean fullscreen;

  public static final String SERIALIZED_NAME_HD = "hd";
  @SerializedName(SERIALIZED_NAME_HD)
  private Boolean hd;

  public static final String SERIALIZED_NAME_LIKE = "like";
  @SerializedName(SERIALIZED_NAME_LIKE)
  private Boolean like;

  public static final String SERIALIZED_NAME_REACTION = "reaction";
  @SerializedName(SERIALIZED_NAME_REACTION)
  private Boolean reaction;

  public static final String SERIALIZED_NAME_SCALING = "scaling";
  @SerializedName(SERIALIZED_NAME_SCALING)
  private Boolean scaling;

  public static final String SERIALIZED_NAME_SHARE = "share";
  @SerializedName(SERIALIZED_NAME_SHARE)
  private Boolean share;

  public static final String SERIALIZED_NAME_WATCHLATER = "watchlater";
  @SerializedName(SERIALIZED_NAME_WATCHLATER)
  private Boolean watchlater;

  public EmbedSettingsButtons() {
  }

  public EmbedSettingsButtons embed(Boolean embed) {
    
    
    
    
    this.embed = embed;
    return this;
  }

   /**
   * Whether the &#x60;embed&#x60; button appears in the embeddable player.
   * @return embed
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the `embed` button appears in the embeddable player.")

  public Boolean getEmbed() {
    return embed;
  }


  public void setEmbed(Boolean embed) {
    
    
    
    this.embed = embed;
  }


  public EmbedSettingsButtons fullscreen(Boolean fullscreen) {
    
    
    
    
    this.fullscreen = fullscreen;
    return this;
  }

   /**
   * Whether the &#x60;fullscreen&#x60; button appears in the embeddable player.
   * @return fullscreen
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the `fullscreen` button appears in the embeddable player.")

  public Boolean getFullscreen() {
    return fullscreen;
  }


  public void setFullscreen(Boolean fullscreen) {
    
    
    
    this.fullscreen = fullscreen;
  }


  public EmbedSettingsButtons hd(Boolean hd) {
    
    
    
    
    this.hd = hd;
    return this;
  }

   /**
   * Whether the &#x60;HD&#x60; button appears in the embeddable player.
   * @return hd
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the `HD` button appears in the embeddable player.")

  public Boolean getHd() {
    return hd;
  }


  public void setHd(Boolean hd) {
    
    
    
    this.hd = hd;
  }


  public EmbedSettingsButtons like(Boolean like) {
    
    
    
    
    this.like = like;
    return this;
  }

   /**
   * Whether the &#x60;like&#x60; button appears in the embeddable player.
   * @return like
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the `like` button appears in the embeddable player.")

  public Boolean getLike() {
    return like;
  }


  public void setLike(Boolean like) {
    
    
    
    this.like = like;
  }


  public EmbedSettingsButtons reaction(Boolean reaction) {
    
    
    
    
    this.reaction = reaction;
    return this;
  }

   /**
   * Whether the reaction button appears in the embeddable player.
   * @return reaction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", required = true, value = "Whether the reaction button appears in the embeddable player.")

  public Boolean getReaction() {
    return reaction;
  }


  public void setReaction(Boolean reaction) {
    
    
    
    this.reaction = reaction;
  }


  public EmbedSettingsButtons scaling(Boolean scaling) {
    
    
    
    
    this.scaling = scaling;
    return this;
  }

   /**
   * Whether the &#x60;scaling&#x60; button appears in the embeddable player.
   * @return scaling
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the `scaling` button appears in the embeddable player.")

  public Boolean getScaling() {
    return scaling;
  }


  public void setScaling(Boolean scaling) {
    
    
    
    this.scaling = scaling;
  }


  public EmbedSettingsButtons share(Boolean share) {
    
    
    
    
    this.share = share;
    return this;
  }

   /**
   * Whether the &#x60;share&#x60; button appears in the embeddable player.
   * @return share
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the `share` button appears in the embeddable player.")

  public Boolean getShare() {
    return share;
  }


  public void setShare(Boolean share) {
    
    
    
    this.share = share;
  }


  public EmbedSettingsButtons watchlater(Boolean watchlater) {
    
    
    
    
    this.watchlater = watchlater;
    return this;
  }

   /**
   * Whether the &#x60;watch later&#x60; button appears in the embeddable player.
   * @return watchlater
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the `watch later` button appears in the embeddable player.")

  public Boolean getWatchlater() {
    return watchlater;
  }


  public void setWatchlater(Boolean watchlater) {
    
    
    
    this.watchlater = watchlater;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmbedSettingsButtons instance itself
   */
  public EmbedSettingsButtons putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmbedSettingsButtons embedSettingsButtons = (EmbedSettingsButtons) o;
    return Objects.equals(this.embed, embedSettingsButtons.embed) &&
        Objects.equals(this.fullscreen, embedSettingsButtons.fullscreen) &&
        Objects.equals(this.hd, embedSettingsButtons.hd) &&
        Objects.equals(this.like, embedSettingsButtons.like) &&
        Objects.equals(this.reaction, embedSettingsButtons.reaction) &&
        Objects.equals(this.scaling, embedSettingsButtons.scaling) &&
        Objects.equals(this.share, embedSettingsButtons.share) &&
        Objects.equals(this.watchlater, embedSettingsButtons.watchlater)&&
        Objects.equals(this.additionalProperties, embedSettingsButtons.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(embed, fullscreen, hd, like, reaction, scaling, share, watchlater, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmbedSettingsButtons {\n");
    sb.append("    embed: ").append(toIndentedString(embed)).append("\n");
    sb.append("    fullscreen: ").append(toIndentedString(fullscreen)).append("\n");
    sb.append("    hd: ").append(toIndentedString(hd)).append("\n");
    sb.append("    like: ").append(toIndentedString(like)).append("\n");
    sb.append("    reaction: ").append(toIndentedString(reaction)).append("\n");
    sb.append("    scaling: ").append(toIndentedString(scaling)).append("\n");
    sb.append("    share: ").append(toIndentedString(share)).append("\n");
    sb.append("    watchlater: ").append(toIndentedString(watchlater)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("embed");
    openapiFields.add("fullscreen");
    openapiFields.add("hd");
    openapiFields.add("like");
    openapiFields.add("reaction");
    openapiFields.add("scaling");
    openapiFields.add("share");
    openapiFields.add("watchlater");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("embed");
    openapiRequiredFields.add("fullscreen");
    openapiRequiredFields.add("hd");
    openapiRequiredFields.add("like");
    openapiRequiredFields.add("reaction");
    openapiRequiredFields.add("scaling");
    openapiRequiredFields.add("share");
    openapiRequiredFields.add("watchlater");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmbedSettingsButtons
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmbedSettingsButtons.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmbedSettingsButtons is not found in the empty JSON string", EmbedSettingsButtons.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EmbedSettingsButtons.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmbedSettingsButtons.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmbedSettingsButtons' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmbedSettingsButtons> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmbedSettingsButtons.class));

       return (TypeAdapter<T>) new TypeAdapter<EmbedSettingsButtons>() {
           @Override
           public void write(JsonWriter out, EmbedSettingsButtons value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmbedSettingsButtons read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmbedSettingsButtons instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmbedSettingsButtons given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmbedSettingsButtons
  * @throws IOException if the JSON string is invalid with respect to EmbedSettingsButtons
  */
  public static EmbedSettingsButtons fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmbedSettingsButtons.class);
  }

 /**
  * Convert an instance of EmbedSettingsButtons to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

