/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Credit;
import com.konfigthis.client.model.User;
import com.konfigthis.client.model.VideosCreditsAddUserCreditInVideoRequest;
import com.konfigthis.client.model.VideosCreditsAddUserCreditRequest;
import com.konfigthis.client.model.VideosCreditsEditUserCreditInVideoRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VideosCreditsApi
 */
@Disabled
public class VideosCreditsApiTest {

    private static VideosCreditsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new VideosCreditsApi(apiClient);
    }

    /**
     * Credit a user in a video
     *
     * This method adds a user credit to the specified video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addUserCreditTest() throws ApiException {
        String email = null;
        String name = null;
        String role = null;
        String userUri = null;
        Double videoId = null;
        Credit response = api.addUserCredit(email, name, role, userUri, videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Credit a user in a video
     *
     * This method adds a user credit to the specified video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addUserCreditInVideoTest() throws ApiException {
        String email = null;
        String name = null;
        String role = null;
        String userUri = null;
        Double channelId = null;
        Double videoId = null;
        Credit response = api.addUserCreditInVideo(email, name, role, userUri, channelId, videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete the credit for a user in a video
     *
     * This method deletes the specified user credit from a video. The authenticated user must be the creator of the credit or the credited user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserCreditTest() throws ApiException {
        Double creditId = null;
        Double videoId = null;
        api.deleteUserCredit(creditId, videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Edit the credit for a user in a video
     *
     * This method edits the specified user credit in a video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void editUserCreditInVideoTest() throws ApiException {
        Double creditId = null;
        Double videoId = null;
        String name = null;
        String role = null;
        Credit response = api.editUserCreditInVideo(creditId, videoId)
                .name(name)
                .role(role)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the credited users in a video
     *
     * This method returns every credited user in a video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllCreditedUsersInVideoTest() throws ApiException {
        Double channelId = null;
        Double videoId = null;
        String direction = null;
        Double page = null;
        Double perPage = null;
        String query = null;
        String sort = null;
        List<Credit> response = api.getAllCreditedUsersInVideo(channelId, videoId)
                .direction(direction)
                .page(page)
                .perPage(perPage)
                .query(query)
                .sort(sort)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the credited users in a video
     *
     * This method returns every credited user in a video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllCreditedUsersInVideo_0Test() throws ApiException {
        Double videoId = null;
        String direction = null;
        Double page = null;
        Double perPage = null;
        String query = null;
        String sort = null;
        List<Credit> response = api.getAllCreditedUsersInVideo_0(videoId)
                .direction(direction)
                .page(page)
                .perPage(perPage)
                .query(query)
                .sort(sort)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a specific credited user in a video
     *
     * This method returns a single credited user in a video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSpecificCreditedUserTest() throws ApiException {
        Double creditId = null;
        Double videoId = null;
        Credit response = api.getSpecificCreditedUser(creditId, videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get users who can be credited on a video
     *
     * This method returns the users who can be credited on the specified video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersTest() throws ApiException {
        Double videoId = null;
        String direction = null;
        Double page = null;
        Double perPage = null;
        String query = null;
        String sort = null;
        List<User> response = api.users(videoId)
                .direction(direction)
                .page(page)
                .perPage(perPage)
                .query(query)
                .sort(sort)
                .execute();
        // TODO: test validations
    }

}
