/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Channel;
import com.konfigthis.client.model.ChannelsVideosAddMultipleToChannelRequest;
import com.konfigthis.client.model.ChannelsVideosRemoveMultipleFromChannelRequest;
import com.konfigthis.client.model.Video;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ChannelsVideosApi
 */
@Disabled
public class ChannelsVideosApiTest {

    private static ChannelsVideosApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ChannelsVideosApi(apiClient);
    }

    /**
     * Add a list of videos to a channel
     *
     * This method adds multiple videos to the specified channel. The authenticated user must be a moderator of the channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMultipleToChannelTest() throws ApiException {
        String videoUri = null;
        Double channelId = null;
        api.addMultipleToChannel(videoUri, channelId)
                .execute();
        // TODO: test validations
    }

    /**
     * Add a specific video to a channel
     *
     * This method adds a single video to the specified channel. The authenticated user must be a moderator of the channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addVideoToChannelTest() throws ApiException {
        Double channelId = null;
        Double videoId = null;
        api.addVideoToChannel(channelId, videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the channels to which the user can add or remove a specific video
     *
     * This method returns every channel to which the authenticated user can add or remove the specified video. The authenticated user must be a moderator of the channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccessibleChannelsTest() throws ApiException {
        Double videoId = null;
        List<Channel> response = api.getAccessibleChannels(videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a specific video in a channel
     *
     * This method returns a single video in the specified channel. You can use it to determine whether the video is in the channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSpecificVideoInChannelTest() throws ApiException {
        Double channelId = null;
        Double videoId = null;
        Video response = api.getSpecificVideoInChannel(channelId, videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the videos in a channel
     *
     * This method returns every video in the specified channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInChannelTest() throws ApiException {
        Double channelId = null;
        String containingUri = null;
        String direction = null;
        String filter = null;
        Boolean filterEmbeddable = null;
        Double page = null;
        Double perPage = null;
        String query = null;
        String sort = null;
        List<Video> response = api.listInChannel(channelId)
                .containingUri(containingUri)
                .direction(direction)
                .filter(filter)
                .filterEmbeddable(filterEmbeddable)
                .page(page)
                .perPage(perPage)
                .query(query)
                .sort(sort)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove a list of videos from a channel
     *
     * This method removes multiple videos from the specified channel. Include the videos by their URI as a JSON block in the body of the request using the **video_uri** field, like this: &#x60;[{ \&quot;video_uri\&quot;: \&quot;/videos/1234\&quot; }, { \&quot;video_uri\&quot;: \&quot;/videos/1235\&quot; }]&#x60;. The authenticated user must be a moderator of the channel. For more information on batch requests like this one, see [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeMultipleFromChannelTest() throws ApiException {
        String videoUri = null;
        Double channelId = null;
        api.removeMultipleFromChannel(videoUri, channelId)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove a specific video from a channel
     *
     * This method removes a single video from the specified channel. The authenticated user must be a moderator of the channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeSpecificVideoTest() throws ApiException {
        Double channelId = null;
        Double videoId = null;
        api.removeSpecificVideo(channelId, videoId)
                .execute();
        // TODO: test validations
    }

}
