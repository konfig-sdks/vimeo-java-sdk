/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.WebinarEmailSettings;
import com.konfigthis.client.model.WebinarEmailsCustomizePreferencesRequest;
import com.konfigthis.client.model.WebinarEmailsCustomizePreferencesRequest1;
import com.konfigthis.client.model.WebinarEmailsCustomizePreferencesRequestEmailPreferences;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WebinarEmailsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebinarEmailsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WebinarEmailsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call customizePreferencesCall(String webinarId, WebinarEmailsCustomizePreferencesRequest webinarEmailsCustomizePreferencesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webinarEmailsCustomizePreferencesRequest;

        // create path and map variables
        String localVarPath = "/me/webinars/{webinar_id}/email_settings"
            .replace("{" + "webinar_id" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.webinar.email.settings+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.webinar.email.settings+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call customizePreferencesValidateBeforeCall(String webinarId, WebinarEmailsCustomizePreferencesRequest webinarEmailsCustomizePreferencesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling customizePreferences(Async)");
        }

        return customizePreferencesCall(webinarId, webinarEmailsCustomizePreferencesRequest, _callback);

    }


    private ApiResponse<WebinarEmailSettings> customizePreferencesWithHttpInfo(String webinarId, WebinarEmailsCustomizePreferencesRequest webinarEmailsCustomizePreferencesRequest) throws ApiException {
        okhttp3.Call localVarCall = customizePreferencesValidateBeforeCall(webinarId, webinarEmailsCustomizePreferencesRequest, null);
        Type localVarReturnType = new TypeToken<WebinarEmailSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call customizePreferencesAsync(String webinarId, WebinarEmailsCustomizePreferencesRequest webinarEmailsCustomizePreferencesRequest, final ApiCallback<WebinarEmailSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = customizePreferencesValidateBeforeCall(webinarId, webinarEmailsCustomizePreferencesRequest, _callback);
        Type localVarReturnType = new TypeToken<WebinarEmailSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CustomizePreferencesRequestBuilder {
        private final String webinarId;
        private String accentColor;
        private String customLink;
        private Object emailEventReminder24Hrs;
        private Object emailPostEventThankYou;
        private WebinarEmailsCustomizePreferencesRequestEmailPreferences emailPreferences;
        private Object emailRegistrationConfirmation;
        private String from;
        private String logoUri;
        private String replyEmail;
        private String senderAddress;
        private String senderPolicyUrl;
        private Boolean useCustomLink;
        private Boolean useReplyEmail;
        private Boolean useSenderAddress;
        private Boolean useSenderPolicyUrl;

        private CustomizePreferencesRequestBuilder(String webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Set accentColor
         * @param accentColor The accent color scheme for emails that are sent about the webinar. (optional)
         * @return CustomizePreferencesRequestBuilder
         */
        public CustomizePreferencesRequestBuilder accentColor(String accentColor) {
            this.accentColor = accentColor;
            return this;
        }
        
        /**
         * Set customLink
         * @param customLink The custom link for emails that are sent about the webinar. (optional)
         * @return CustomizePreferencesRequestBuilder
         */
        public CustomizePreferencesRequestBuilder customLink(String customLink) {
            this.customLink = customLink;
            return this;
        }
        
        /**
         * Set emailEventReminder24Hrs
         * @param emailEventReminder24Hrs The email customization details for the webinar reminder email, which goes out 24 hours before the event. (optional)
         * @return CustomizePreferencesRequestBuilder
         */
        public CustomizePreferencesRequestBuilder emailEventReminder24Hrs(Object emailEventReminder24Hrs) {
            this.emailEventReminder24Hrs = emailEventReminder24Hrs;
            return this;
        }
        
        /**
         * Set emailPostEventThankYou
         * @param emailPostEventThankYou The email customization details for the webinar post-event thank-you email. (optional)
         * @return CustomizePreferencesRequestBuilder
         */
        public CustomizePreferencesRequestBuilder emailPostEventThankYou(Object emailPostEventThankYou) {
            this.emailPostEventThankYou = emailPostEventThankYou;
            return this;
        }
        
        /**
         * Set emailPreferences
         * @param emailPreferences  (optional)
         * @return CustomizePreferencesRequestBuilder
         */
        public CustomizePreferencesRequestBuilder emailPreferences(WebinarEmailsCustomizePreferencesRequestEmailPreferences emailPreferences) {
            this.emailPreferences = emailPreferences;
            return this;
        }
        
        /**
         * Set emailRegistrationConfirmation
         * @param emailRegistrationConfirmation The email customization details for the webinar registration confirmation email. (optional)
         * @return CustomizePreferencesRequestBuilder
         */
        public CustomizePreferencesRequestBuilder emailRegistrationConfirmation(Object emailRegistrationConfirmation) {
            this.emailRegistrationConfirmation = emailRegistrationConfirmation;
            return this;
        }
        
        /**
         * Set from
         * @param from The name of the sender for emails that are sent about the webinar. (optional)
         * @return CustomizePreferencesRequestBuilder
         */
        public CustomizePreferencesRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set logoUri
         * @param logoUri The URI of the logo image to include in emails that are sent about the webinar. (optional)
         * @return CustomizePreferencesRequestBuilder
         */
        public CustomizePreferencesRequestBuilder logoUri(String logoUri) {
            this.logoUri = logoUri;
            return this;
        }
        
        /**
         * Set replyEmail
         * @param replyEmail The sender&#39;s reply email address. (optional)
         * @return CustomizePreferencesRequestBuilder
         */
        public CustomizePreferencesRequestBuilder replyEmail(String replyEmail) {
            this.replyEmail = replyEmail;
            return this;
        }
        
        /**
         * Set senderAddress
         * @param senderAddress The sender&#39;s physical address. (optional)
         * @return CustomizePreferencesRequestBuilder
         */
        public CustomizePreferencesRequestBuilder senderAddress(String senderAddress) {
            this.senderAddress = senderAddress;
            return this;
        }
        
        /**
         * Set senderPolicyUrl
         * @param senderPolicyUrl The URL of the sender&#39;s privacy policy. (optional)
         * @return CustomizePreferencesRequestBuilder
         */
        public CustomizePreferencesRequestBuilder senderPolicyUrl(String senderPolicyUrl) {
            this.senderPolicyUrl = senderPolicyUrl;
            return this;
        }
        
        /**
         * Set useCustomLink
         * @param useCustomLink Whether to include a custom link in emails that are sent about the webinar. (optional)
         * @return CustomizePreferencesRequestBuilder
         */
        public CustomizePreferencesRequestBuilder useCustomLink(Boolean useCustomLink) {
            this.useCustomLink = useCustomLink;
            return this;
        }
        
        /**
         * Set useReplyEmail
         * @param useReplyEmail Whether to include a reply link in the footer of emails that are sent about the webinar. (optional)
         * @return CustomizePreferencesRequestBuilder
         */
        public CustomizePreferencesRequestBuilder useReplyEmail(Boolean useReplyEmail) {
            this.useReplyEmail = useReplyEmail;
            return this;
        }
        
        /**
         * Set useSenderAddress
         * @param useSenderAddress Whether to include the sender&#39;s physical address in the footer of emails that are sent about the webinar. (optional)
         * @return CustomizePreferencesRequestBuilder
         */
        public CustomizePreferencesRequestBuilder useSenderAddress(Boolean useSenderAddress) {
            this.useSenderAddress = useSenderAddress;
            return this;
        }
        
        /**
         * Set useSenderPolicyUrl
         * @param useSenderPolicyUrl Whether to include the URL of the sender&#39;s privacy policy in the footer of emails that are sent about the webinar. (optional)
         * @return CustomizePreferencesRequestBuilder
         */
        public CustomizePreferencesRequestBuilder useSenderPolicyUrl(Boolean useSenderPolicyUrl) {
            this.useSenderPolicyUrl = useSenderPolicyUrl;
            return this;
        }
        
        /**
         * Build call for customizePreferences
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The email preferences were customized for the webinar. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebinarEmailsCustomizePreferencesRequest webinarEmailsCustomizePreferencesRequest = buildBodyParams();
            return customizePreferencesCall(webinarId, webinarEmailsCustomizePreferencesRequest, _callback);
        }

        private WebinarEmailsCustomizePreferencesRequest buildBodyParams() {
            WebinarEmailsCustomizePreferencesRequest webinarEmailsCustomizePreferencesRequest = new WebinarEmailsCustomizePreferencesRequest();
            webinarEmailsCustomizePreferencesRequest.accentColor(this.accentColor);
            webinarEmailsCustomizePreferencesRequest.customLink(this.customLink);
            webinarEmailsCustomizePreferencesRequest.emailEventReminder24Hrs(this.emailEventReminder24Hrs);
            webinarEmailsCustomizePreferencesRequest.emailPostEventThankYou(this.emailPostEventThankYou);
            webinarEmailsCustomizePreferencesRequest.emailPreferences(this.emailPreferences);
            webinarEmailsCustomizePreferencesRequest.emailRegistrationConfirmation(this.emailRegistrationConfirmation);
            webinarEmailsCustomizePreferencesRequest.from(this.from);
            webinarEmailsCustomizePreferencesRequest.logoUri(this.logoUri);
            webinarEmailsCustomizePreferencesRequest.replyEmail(this.replyEmail);
            webinarEmailsCustomizePreferencesRequest.senderAddress(this.senderAddress);
            webinarEmailsCustomizePreferencesRequest.senderPolicyUrl(this.senderPolicyUrl);
            webinarEmailsCustomizePreferencesRequest.useCustomLink(this.useCustomLink);
            webinarEmailsCustomizePreferencesRequest.useReplyEmail(this.useReplyEmail);
            webinarEmailsCustomizePreferencesRequest.useSenderAddress(this.useSenderAddress);
            webinarEmailsCustomizePreferencesRequest.useSenderPolicyUrl(this.useSenderPolicyUrl);
            return webinarEmailsCustomizePreferencesRequest;
        }

        /**
         * Execute customizePreferences request
         * @return WebinarEmailSettings
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The email preferences were customized for the webinar. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public WebinarEmailSettings execute() throws ApiException {
            WebinarEmailsCustomizePreferencesRequest webinarEmailsCustomizePreferencesRequest = buildBodyParams();
            ApiResponse<WebinarEmailSettings> localVarResp = customizePreferencesWithHttpInfo(webinarId, webinarEmailsCustomizePreferencesRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute customizePreferences request with HTTP info returned
         * @return ApiResponse&lt;WebinarEmailSettings&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The email preferences were customized for the webinar. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<WebinarEmailSettings> executeWithHttpInfo() throws ApiException {
            WebinarEmailsCustomizePreferencesRequest webinarEmailsCustomizePreferencesRequest = buildBodyParams();
            return customizePreferencesWithHttpInfo(webinarId, webinarEmailsCustomizePreferencesRequest);
        }

        /**
         * Execute customizePreferences request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The email preferences were customized for the webinar. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<WebinarEmailSettings> _callback) throws ApiException {
            WebinarEmailsCustomizePreferencesRequest webinarEmailsCustomizePreferencesRequest = buildBodyParams();
            return customizePreferencesAsync(webinarId, webinarEmailsCustomizePreferencesRequest, _callback);
        }
    }

    /**
     * Customize the email preferences of a webinar
     * This method causes the authenticated user to customize the email preferences of the specified webinar. The user must have administrative access to the webinar.
     * @param webinarId The ID of the webinar. (required)
     * @return CustomizePreferencesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The email preferences were customized for the webinar. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CustomizePreferencesRequestBuilder customizePreferences(String webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
            

        return new CustomizePreferencesRequestBuilder(webinarId);
    }
    private okhttp3.Call customizePreferences_0Call(Double userId, String webinarId, WebinarEmailsCustomizePreferencesRequest1 webinarEmailsCustomizePreferencesRequest1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webinarEmailsCustomizePreferencesRequest1;

        // create path and map variables
        String localVarPath = "/users/{user_id}/webinars/{webinar_id}/email_settings"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "webinar_id" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.webinar.email.settings+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.webinar.email.settings+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call customizePreferences_0ValidateBeforeCall(Double userId, String webinarId, WebinarEmailsCustomizePreferencesRequest1 webinarEmailsCustomizePreferencesRequest1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling customizePreferences_0(Async)");
        }

        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling customizePreferences_0(Async)");
        }

        return customizePreferences_0Call(userId, webinarId, webinarEmailsCustomizePreferencesRequest1, _callback);

    }


    private ApiResponse<WebinarEmailSettings> customizePreferences_0WithHttpInfo(Double userId, String webinarId, WebinarEmailsCustomizePreferencesRequest1 webinarEmailsCustomizePreferencesRequest1) throws ApiException {
        okhttp3.Call localVarCall = customizePreferences_0ValidateBeforeCall(userId, webinarId, webinarEmailsCustomizePreferencesRequest1, null);
        Type localVarReturnType = new TypeToken<WebinarEmailSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call customizePreferences_0Async(Double userId, String webinarId, WebinarEmailsCustomizePreferencesRequest1 webinarEmailsCustomizePreferencesRequest1, final ApiCallback<WebinarEmailSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = customizePreferences_0ValidateBeforeCall(userId, webinarId, webinarEmailsCustomizePreferencesRequest1, _callback);
        Type localVarReturnType = new TypeToken<WebinarEmailSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CustomizePreferences0RequestBuilder {
        private final Double userId;
        private final String webinarId;
        private String accentColor;
        private String customLink;
        private Object emailEventReminder24Hrs;
        private Object emailPostEventThankYou;
        private WebinarEmailsCustomizePreferencesRequestEmailPreferences emailPreferences;
        private Object emailRegistrationConfirmation;
        private String from;
        private String logoUri;
        private String replyEmail;
        private String senderAddress;
        private String senderPolicyUrl;
        private Boolean useCustomLink;
        private Boolean useReplyEmail;
        private Boolean useSenderAddress;
        private Boolean useSenderPolicyUrl;

        private CustomizePreferences0RequestBuilder(double userId, String webinarId) {
            this.userId = userId;
            this.webinarId = webinarId;
        }

        /**
         * Set accentColor
         * @param accentColor The accent color scheme for emails that are sent about the webinar. (optional)
         * @return CustomizePreferences0RequestBuilder
         */
        public CustomizePreferences0RequestBuilder accentColor(String accentColor) {
            this.accentColor = accentColor;
            return this;
        }
        
        /**
         * Set customLink
         * @param customLink The custom link for emails that are sent about the webinar. (optional)
         * @return CustomizePreferences0RequestBuilder
         */
        public CustomizePreferences0RequestBuilder customLink(String customLink) {
            this.customLink = customLink;
            return this;
        }
        
        /**
         * Set emailEventReminder24Hrs
         * @param emailEventReminder24Hrs The email customization details for the webinar reminder email, which goes out 24 hours before the event. (optional)
         * @return CustomizePreferences0RequestBuilder
         */
        public CustomizePreferences0RequestBuilder emailEventReminder24Hrs(Object emailEventReminder24Hrs) {
            this.emailEventReminder24Hrs = emailEventReminder24Hrs;
            return this;
        }
        
        /**
         * Set emailPostEventThankYou
         * @param emailPostEventThankYou The email customization details for the webinar post-event thank-you email. (optional)
         * @return CustomizePreferences0RequestBuilder
         */
        public CustomizePreferences0RequestBuilder emailPostEventThankYou(Object emailPostEventThankYou) {
            this.emailPostEventThankYou = emailPostEventThankYou;
            return this;
        }
        
        /**
         * Set emailPreferences
         * @param emailPreferences  (optional)
         * @return CustomizePreferences0RequestBuilder
         */
        public CustomizePreferences0RequestBuilder emailPreferences(WebinarEmailsCustomizePreferencesRequestEmailPreferences emailPreferences) {
            this.emailPreferences = emailPreferences;
            return this;
        }
        
        /**
         * Set emailRegistrationConfirmation
         * @param emailRegistrationConfirmation The email customization details for the webinar registration confirmation email. (optional)
         * @return CustomizePreferences0RequestBuilder
         */
        public CustomizePreferences0RequestBuilder emailRegistrationConfirmation(Object emailRegistrationConfirmation) {
            this.emailRegistrationConfirmation = emailRegistrationConfirmation;
            return this;
        }
        
        /**
         * Set from
         * @param from The name of the sender for emails that are sent about the webinar. (optional)
         * @return CustomizePreferences0RequestBuilder
         */
        public CustomizePreferences0RequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set logoUri
         * @param logoUri The URI of the logo image to include in emails that are sent about the webinar. (optional)
         * @return CustomizePreferences0RequestBuilder
         */
        public CustomizePreferences0RequestBuilder logoUri(String logoUri) {
            this.logoUri = logoUri;
            return this;
        }
        
        /**
         * Set replyEmail
         * @param replyEmail The sender&#39;s reply email address. (optional)
         * @return CustomizePreferences0RequestBuilder
         */
        public CustomizePreferences0RequestBuilder replyEmail(String replyEmail) {
            this.replyEmail = replyEmail;
            return this;
        }
        
        /**
         * Set senderAddress
         * @param senderAddress The sender&#39;s physical address. (optional)
         * @return CustomizePreferences0RequestBuilder
         */
        public CustomizePreferences0RequestBuilder senderAddress(String senderAddress) {
            this.senderAddress = senderAddress;
            return this;
        }
        
        /**
         * Set senderPolicyUrl
         * @param senderPolicyUrl The URL of the sender&#39;s privacy policy. (optional)
         * @return CustomizePreferences0RequestBuilder
         */
        public CustomizePreferences0RequestBuilder senderPolicyUrl(String senderPolicyUrl) {
            this.senderPolicyUrl = senderPolicyUrl;
            return this;
        }
        
        /**
         * Set useCustomLink
         * @param useCustomLink Whether to include a custom link in emails that are sent about the webinar. (optional)
         * @return CustomizePreferences0RequestBuilder
         */
        public CustomizePreferences0RequestBuilder useCustomLink(Boolean useCustomLink) {
            this.useCustomLink = useCustomLink;
            return this;
        }
        
        /**
         * Set useReplyEmail
         * @param useReplyEmail Whether to include a reply link in the footer of emails that are sent about the webinar. (optional)
         * @return CustomizePreferences0RequestBuilder
         */
        public CustomizePreferences0RequestBuilder useReplyEmail(Boolean useReplyEmail) {
            this.useReplyEmail = useReplyEmail;
            return this;
        }
        
        /**
         * Set useSenderAddress
         * @param useSenderAddress Whether to include the sender&#39;s physical address in the footer of emails that are sent about the webinar. (optional)
         * @return CustomizePreferences0RequestBuilder
         */
        public CustomizePreferences0RequestBuilder useSenderAddress(Boolean useSenderAddress) {
            this.useSenderAddress = useSenderAddress;
            return this;
        }
        
        /**
         * Set useSenderPolicyUrl
         * @param useSenderPolicyUrl Whether to include the URL of the sender&#39;s privacy policy in the footer of emails that are sent about the webinar. (optional)
         * @return CustomizePreferences0RequestBuilder
         */
        public CustomizePreferences0RequestBuilder useSenderPolicyUrl(Boolean useSenderPolicyUrl) {
            this.useSenderPolicyUrl = useSenderPolicyUrl;
            return this;
        }
        
        /**
         * Build call for customizePreferences_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The email preferences were customized for the webinar. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebinarEmailsCustomizePreferencesRequest1 webinarEmailsCustomizePreferencesRequest1 = buildBodyParams();
            return customizePreferences_0Call(userId, webinarId, webinarEmailsCustomizePreferencesRequest1, _callback);
        }

        private WebinarEmailsCustomizePreferencesRequest1 buildBodyParams() {
            WebinarEmailsCustomizePreferencesRequest1 webinarEmailsCustomizePreferencesRequest1 = new WebinarEmailsCustomizePreferencesRequest1();
            webinarEmailsCustomizePreferencesRequest1.accentColor(this.accentColor);
            webinarEmailsCustomizePreferencesRequest1.customLink(this.customLink);
            webinarEmailsCustomizePreferencesRequest1.emailEventReminder24Hrs(this.emailEventReminder24Hrs);
            webinarEmailsCustomizePreferencesRequest1.emailPostEventThankYou(this.emailPostEventThankYou);
            webinarEmailsCustomizePreferencesRequest1.emailPreferences(this.emailPreferences);
            webinarEmailsCustomizePreferencesRequest1.emailRegistrationConfirmation(this.emailRegistrationConfirmation);
            webinarEmailsCustomizePreferencesRequest1.from(this.from);
            webinarEmailsCustomizePreferencesRequest1.logoUri(this.logoUri);
            webinarEmailsCustomizePreferencesRequest1.replyEmail(this.replyEmail);
            webinarEmailsCustomizePreferencesRequest1.senderAddress(this.senderAddress);
            webinarEmailsCustomizePreferencesRequest1.senderPolicyUrl(this.senderPolicyUrl);
            webinarEmailsCustomizePreferencesRequest1.useCustomLink(this.useCustomLink);
            webinarEmailsCustomizePreferencesRequest1.useReplyEmail(this.useReplyEmail);
            webinarEmailsCustomizePreferencesRequest1.useSenderAddress(this.useSenderAddress);
            webinarEmailsCustomizePreferencesRequest1.useSenderPolicyUrl(this.useSenderPolicyUrl);
            return webinarEmailsCustomizePreferencesRequest1;
        }

        /**
         * Execute customizePreferences_0 request
         * @return WebinarEmailSettings
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The email preferences were customized for the webinar. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public WebinarEmailSettings execute() throws ApiException {
            WebinarEmailsCustomizePreferencesRequest1 webinarEmailsCustomizePreferencesRequest1 = buildBodyParams();
            ApiResponse<WebinarEmailSettings> localVarResp = customizePreferences_0WithHttpInfo(userId, webinarId, webinarEmailsCustomizePreferencesRequest1);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute customizePreferences_0 request with HTTP info returned
         * @return ApiResponse&lt;WebinarEmailSettings&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The email preferences were customized for the webinar. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<WebinarEmailSettings> executeWithHttpInfo() throws ApiException {
            WebinarEmailsCustomizePreferencesRequest1 webinarEmailsCustomizePreferencesRequest1 = buildBodyParams();
            return customizePreferences_0WithHttpInfo(userId, webinarId, webinarEmailsCustomizePreferencesRequest1);
        }

        /**
         * Execute customizePreferences_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The email preferences were customized for the webinar. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<WebinarEmailSettings> _callback) throws ApiException {
            WebinarEmailsCustomizePreferencesRequest1 webinarEmailsCustomizePreferencesRequest1 = buildBodyParams();
            return customizePreferences_0Async(userId, webinarId, webinarEmailsCustomizePreferencesRequest1, _callback);
        }
    }

    /**
     * Customize the email preferences of a webinar
     * This method causes the authenticated user to customize the email preferences of the specified webinar. The user must have administrative access to the webinar.
     * @param userId The ID of the user. (required)
     * @param webinarId The ID of the webinar. (required)
     * @return CustomizePreferences0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The email preferences were customized for the webinar. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CustomizePreferences0RequestBuilder customizePreferences_0(double userId, String webinarId) throws IllegalArgumentException {
        
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
            

        return new CustomizePreferences0RequestBuilder(userId, webinarId);
    }
    private okhttp3.Call getCustomizationDataCall(String webinarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/webinars/{webinar_id}/email_settings"
            .replace("{" + "webinar_id" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.webinar.email.settings+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomizationDataValidateBeforeCall(String webinarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling getCustomizationData(Async)");
        }

        return getCustomizationDataCall(webinarId, _callback);

    }


    private ApiResponse<WebinarEmailSettings> getCustomizationDataWithHttpInfo(String webinarId) throws ApiException {
        okhttp3.Call localVarCall = getCustomizationDataValidateBeforeCall(webinarId, null);
        Type localVarReturnType = new TypeToken<WebinarEmailSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCustomizationDataAsync(String webinarId, final ApiCallback<WebinarEmailSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomizationDataValidateBeforeCall(webinarId, _callback);
        Type localVarReturnType = new TypeToken<WebinarEmailSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCustomizationDataRequestBuilder {
        private final String webinarId;

        private GetCustomizationDataRequestBuilder(String webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Build call for getCustomizationData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar email data was returned. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomizationDataCall(webinarId, _callback);
        }


        /**
         * Execute getCustomizationData request
         * @return WebinarEmailSettings
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar email data was returned. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public WebinarEmailSettings execute() throws ApiException {
            ApiResponse<WebinarEmailSettings> localVarResp = getCustomizationDataWithHttpInfo(webinarId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCustomizationData request with HTTP info returned
         * @return ApiResponse&lt;WebinarEmailSettings&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar email data was returned. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<WebinarEmailSettings> executeWithHttpInfo() throws ApiException {
            return getCustomizationDataWithHttpInfo(webinarId);
        }

        /**
         * Execute getCustomizationData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar email data was returned. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<WebinarEmailSettings> _callback) throws ApiException {
            return getCustomizationDataAsync(webinarId, _callback);
        }
    }

    /**
     * Get customization email data for a webinar
     * This method returns customized email data for the specified webinar. The authenticated user must have administrative access to the webinar.
     * @param webinarId The ID of the webinar. (required)
     * @return GetCustomizationDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The webinar email data was returned. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetCustomizationDataRequestBuilder getCustomizationData(String webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
            

        return new GetCustomizationDataRequestBuilder(webinarId);
    }
    private okhttp3.Call getCustomizationData_0Call(Double userId, String webinarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/webinars/{webinar_id}/email_settings"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "webinar_id" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.webinar.email.settings+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomizationData_0ValidateBeforeCall(Double userId, String webinarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getCustomizationData_0(Async)");
        }

        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling getCustomizationData_0(Async)");
        }

        return getCustomizationData_0Call(userId, webinarId, _callback);

    }


    private ApiResponse<WebinarEmailSettings> getCustomizationData_0WithHttpInfo(Double userId, String webinarId) throws ApiException {
        okhttp3.Call localVarCall = getCustomizationData_0ValidateBeforeCall(userId, webinarId, null);
        Type localVarReturnType = new TypeToken<WebinarEmailSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCustomizationData_0Async(Double userId, String webinarId, final ApiCallback<WebinarEmailSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomizationData_0ValidateBeforeCall(userId, webinarId, _callback);
        Type localVarReturnType = new TypeToken<WebinarEmailSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCustomizationData0RequestBuilder {
        private final Double userId;
        private final String webinarId;

        private GetCustomizationData0RequestBuilder(double userId, String webinarId) {
            this.userId = userId;
            this.webinarId = webinarId;
        }

        /**
         * Build call for getCustomizationData_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar email data was returned. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomizationData_0Call(userId, webinarId, _callback);
        }


        /**
         * Execute getCustomizationData_0 request
         * @return WebinarEmailSettings
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar email data was returned. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public WebinarEmailSettings execute() throws ApiException {
            ApiResponse<WebinarEmailSettings> localVarResp = getCustomizationData_0WithHttpInfo(userId, webinarId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCustomizationData_0 request with HTTP info returned
         * @return ApiResponse&lt;WebinarEmailSettings&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar email data was returned. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<WebinarEmailSettings> executeWithHttpInfo() throws ApiException {
            return getCustomizationData_0WithHttpInfo(userId, webinarId);
        }

        /**
         * Execute getCustomizationData_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar email data was returned. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<WebinarEmailSettings> _callback) throws ApiException {
            return getCustomizationData_0Async(userId, webinarId, _callback);
        }
    }

    /**
     * Get customization email data for a webinar
     * This method returns customized email data for the specified webinar. The authenticated user must have administrative access to the webinar.
     * @param userId The ID of the user. (required)
     * @param webinarId The ID of the webinar. (required)
     * @return GetCustomizationData0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The webinar email data was returned. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetCustomizationData0RequestBuilder getCustomizationData_0(double userId, String webinarId) throws IllegalArgumentException {
        
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
            

        return new GetCustomizationData0RequestBuilder(userId, webinarId);
    }
}
