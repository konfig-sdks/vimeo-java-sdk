/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.WebinarRegistrant;
import com.konfigthis.client.model.WebinarRegistrationsCaptureUserRegistrationListRequest;
import com.konfigthis.client.model.WebinarRegistrationsCaptureUserRegistrationListRequest1;
import com.konfigthis.client.model.WebinarRegistrationsCaptureUserRegistrationListRequest1RegistrantsInner;
import com.konfigthis.client.model.WebinarRegistrationsCaptureUserRegistrationListRequestRegistrantsInner;
import com.konfigthis.client.model.WebinarRegistrationsUpdateUserRegistrationDataRequest;
import com.konfigthis.client.model.WebinarRegistrationsUpdateUserRegistrationDataRequest1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WebinarRegistrationsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebinarRegistrationsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WebinarRegistrationsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call captureUserRegistrationListCall(String webinarId, WebinarRegistrationsCaptureUserRegistrationListRequest webinarRegistrationsCaptureUserRegistrationListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webinarRegistrationsCaptureUserRegistrationListRequest;

        // create path and map variables
        String localVarPath = "/me/webinars/{webinar_id}/registrants"
            .replace("{" + "webinar_id" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call captureUserRegistrationListValidateBeforeCall(String webinarId, WebinarRegistrationsCaptureUserRegistrationListRequest webinarRegistrationsCaptureUserRegistrationListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling captureUserRegistrationList(Async)");
        }

        return captureUserRegistrationListCall(webinarId, webinarRegistrationsCaptureUserRegistrationListRequest, _callback);

    }


    private ApiResponse<Void> captureUserRegistrationListWithHttpInfo(String webinarId, WebinarRegistrationsCaptureUserRegistrationListRequest webinarRegistrationsCaptureUserRegistrationListRequest) throws ApiException {
        okhttp3.Call localVarCall = captureUserRegistrationListValidateBeforeCall(webinarId, webinarRegistrationsCaptureUserRegistrationListRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call captureUserRegistrationListAsync(String webinarId, WebinarRegistrationsCaptureUserRegistrationListRequest webinarRegistrationsCaptureUserRegistrationListRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = captureUserRegistrationListValidateBeforeCall(webinarId, webinarRegistrationsCaptureUserRegistrationListRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CaptureUserRegistrationListRequestBuilder {
        private final String webinarId;
        private List<WebinarRegistrationsCaptureUserRegistrationListRequestRegistrantsInner> registrants;

        private CaptureUserRegistrationListRequestBuilder(String webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Set registrants
         * @param registrants An array of registration data for the webinar. (optional)
         * @return CaptureUserRegistrationListRequestBuilder
         */
        public CaptureUserRegistrationListRequestBuilder registrants(List<WebinarRegistrationsCaptureUserRegistrationListRequestRegistrantsInner> registrants) {
            this.registrants = registrants;
            return this;
        }
        
        /**
         * Build call for captureUserRegistrationList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar data was captured. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebinarRegistrationsCaptureUserRegistrationListRequest webinarRegistrationsCaptureUserRegistrationListRequest = buildBodyParams();
            return captureUserRegistrationListCall(webinarId, webinarRegistrationsCaptureUserRegistrationListRequest, _callback);
        }

        private WebinarRegistrationsCaptureUserRegistrationListRequest buildBodyParams() {
            WebinarRegistrationsCaptureUserRegistrationListRequest webinarRegistrationsCaptureUserRegistrationListRequest = new WebinarRegistrationsCaptureUserRegistrationListRequest();
            webinarRegistrationsCaptureUserRegistrationListRequest.registrants(this.registrants);
            return webinarRegistrationsCaptureUserRegistrationListRequest;
        }

        /**
         * Execute captureUserRegistrationList request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar data was captured. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public void execute() throws ApiException {
            WebinarRegistrationsCaptureUserRegistrationListRequest webinarRegistrationsCaptureUserRegistrationListRequest = buildBodyParams();
            captureUserRegistrationListWithHttpInfo(webinarId, webinarRegistrationsCaptureUserRegistrationListRequest);
        }

        /**
         * Execute captureUserRegistrationList request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar data was captured. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            WebinarRegistrationsCaptureUserRegistrationListRequest webinarRegistrationsCaptureUserRegistrationListRequest = buildBodyParams();
            return captureUserRegistrationListWithHttpInfo(webinarId, webinarRegistrationsCaptureUserRegistrationListRequest);
        }

        /**
         * Execute captureUserRegistrationList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar data was captured. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            WebinarRegistrationsCaptureUserRegistrationListRequest webinarRegistrationsCaptureUserRegistrationListRequest = buildBodyParams();
            return captureUserRegistrationListAsync(webinarId, webinarRegistrationsCaptureUserRegistrationListRequest, _callback);
        }
    }

    /**
     * Capture the user registration list associated with a webinar
     * This method captures the user registration list associated with the specified webinar. A maximum of 50 registrants are permitted as part of the request.
     * @param webinarId The ID of the webinar. (required)
     * @return CaptureUserRegistrationListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The webinar data was captured. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CaptureUserRegistrationListRequestBuilder captureUserRegistrationList(String webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
            

        return new CaptureUserRegistrationListRequestBuilder(webinarId);
    }
    private okhttp3.Call captureUserRegistrationList_0Call(Double userId, String webinarId, WebinarRegistrationsCaptureUserRegistrationListRequest1 webinarRegistrationsCaptureUserRegistrationListRequest1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webinarRegistrationsCaptureUserRegistrationListRequest1;

        // create path and map variables
        String localVarPath = "/users/{user_id}/webinars/{webinar_id}/registrants"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "webinar_id" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call captureUserRegistrationList_0ValidateBeforeCall(Double userId, String webinarId, WebinarRegistrationsCaptureUserRegistrationListRequest1 webinarRegistrationsCaptureUserRegistrationListRequest1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling captureUserRegistrationList_0(Async)");
        }

        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling captureUserRegistrationList_0(Async)");
        }

        return captureUserRegistrationList_0Call(userId, webinarId, webinarRegistrationsCaptureUserRegistrationListRequest1, _callback);

    }


    private ApiResponse<Void> captureUserRegistrationList_0WithHttpInfo(Double userId, String webinarId, WebinarRegistrationsCaptureUserRegistrationListRequest1 webinarRegistrationsCaptureUserRegistrationListRequest1) throws ApiException {
        okhttp3.Call localVarCall = captureUserRegistrationList_0ValidateBeforeCall(userId, webinarId, webinarRegistrationsCaptureUserRegistrationListRequest1, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call captureUserRegistrationList_0Async(Double userId, String webinarId, WebinarRegistrationsCaptureUserRegistrationListRequest1 webinarRegistrationsCaptureUserRegistrationListRequest1, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = captureUserRegistrationList_0ValidateBeforeCall(userId, webinarId, webinarRegistrationsCaptureUserRegistrationListRequest1, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CaptureUserRegistrationList0RequestBuilder {
        private final Double userId;
        private final String webinarId;
        private List<WebinarRegistrationsCaptureUserRegistrationListRequest1RegistrantsInner> registrants;

        private CaptureUserRegistrationList0RequestBuilder(double userId, String webinarId) {
            this.userId = userId;
            this.webinarId = webinarId;
        }

        /**
         * Set registrants
         * @param registrants An array of registration data for the webinar. (optional)
         * @return CaptureUserRegistrationList0RequestBuilder
         */
        public CaptureUserRegistrationList0RequestBuilder registrants(List<WebinarRegistrationsCaptureUserRegistrationListRequest1RegistrantsInner> registrants) {
            this.registrants = registrants;
            return this;
        }
        
        /**
         * Build call for captureUserRegistrationList_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar data was captured. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebinarRegistrationsCaptureUserRegistrationListRequest1 webinarRegistrationsCaptureUserRegistrationListRequest1 = buildBodyParams();
            return captureUserRegistrationList_0Call(userId, webinarId, webinarRegistrationsCaptureUserRegistrationListRequest1, _callback);
        }

        private WebinarRegistrationsCaptureUserRegistrationListRequest1 buildBodyParams() {
            WebinarRegistrationsCaptureUserRegistrationListRequest1 webinarRegistrationsCaptureUserRegistrationListRequest1 = new WebinarRegistrationsCaptureUserRegistrationListRequest1();
            webinarRegistrationsCaptureUserRegistrationListRequest1.registrants(this.registrants);
            return webinarRegistrationsCaptureUserRegistrationListRequest1;
        }

        /**
         * Execute captureUserRegistrationList_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar data was captured. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public void execute() throws ApiException {
            WebinarRegistrationsCaptureUserRegistrationListRequest1 webinarRegistrationsCaptureUserRegistrationListRequest1 = buildBodyParams();
            captureUserRegistrationList_0WithHttpInfo(userId, webinarId, webinarRegistrationsCaptureUserRegistrationListRequest1);
        }

        /**
         * Execute captureUserRegistrationList_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar data was captured. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            WebinarRegistrationsCaptureUserRegistrationListRequest1 webinarRegistrationsCaptureUserRegistrationListRequest1 = buildBodyParams();
            return captureUserRegistrationList_0WithHttpInfo(userId, webinarId, webinarRegistrationsCaptureUserRegistrationListRequest1);
        }

        /**
         * Execute captureUserRegistrationList_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar data was captured. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            WebinarRegistrationsCaptureUserRegistrationListRequest1 webinarRegistrationsCaptureUserRegistrationListRequest1 = buildBodyParams();
            return captureUserRegistrationList_0Async(userId, webinarId, webinarRegistrationsCaptureUserRegistrationListRequest1, _callback);
        }
    }

    /**
     * Capture the user registration list associated with a webinar
     * This method captures the user registration list associated with the specified webinar. A maximum of 50 registrants are permitted as part of the request.
     * @param userId The ID of the user. (required)
     * @param webinarId The ID of the webinar. (required)
     * @return CaptureUserRegistrationList0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The webinar data was captured. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CaptureUserRegistrationList0RequestBuilder captureUserRegistrationList_0(double userId, String webinarId) throws IllegalArgumentException {
        
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
            

        return new CaptureUserRegistrationList0RequestBuilder(userId, webinarId);
    }
    private okhttp3.Call deleteRegistrantRecordCall(String registrantId, String webinarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/webinars/{webinar_id}/registrants/{registrant_id}"
            .replace("{" + "registrant_id" + "}", localVarApiClient.escapeString(registrantId.toString()))
            .replace("{" + "webinar_id" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRegistrantRecordValidateBeforeCall(String registrantId, String webinarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrantId' is set
        if (registrantId == null) {
            throw new ApiException("Missing the required parameter 'registrantId' when calling deleteRegistrantRecord(Async)");
        }

        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling deleteRegistrantRecord(Async)");
        }

        return deleteRegistrantRecordCall(registrantId, webinarId, _callback);

    }


    private ApiResponse<Void> deleteRegistrantRecordWithHttpInfo(String registrantId, String webinarId) throws ApiException {
        okhttp3.Call localVarCall = deleteRegistrantRecordValidateBeforeCall(registrantId, webinarId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteRegistrantRecordAsync(String registrantId, String webinarId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRegistrantRecordValidateBeforeCall(registrantId, webinarId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteRegistrantRecordRequestBuilder {
        private final String registrantId;
        private final String webinarId;

        private DeleteRegistrantRecordRequestBuilder(String registrantId, String webinarId) {
            this.registrantId = registrantId;
            this.webinarId = webinarId;
        }

        /**
         * Build call for deleteRegistrantRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The webinar registrant was deleted. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteRegistrantRecordCall(registrantId, webinarId, _callback);
        }


        /**
         * Execute deleteRegistrantRecord request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The webinar registrant was deleted. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public void execute() throws ApiException {
            deleteRegistrantRecordWithHttpInfo(registrantId, webinarId);
        }

        /**
         * Execute deleteRegistrantRecord request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The webinar registrant was deleted. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteRegistrantRecordWithHttpInfo(registrantId, webinarId);
        }

        /**
         * Execute deleteRegistrantRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The webinar registrant was deleted. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteRegistrantRecordAsync(registrantId, webinarId, _callback);
        }
    }

    /**
     * Delete a registrant record associated with a webinar
     * This method deletes the specified registrant associated with a webinar and originally submitted through a webinar form.
     * @param registrantId The ID of the webinar registrant. (required)
     * @param webinarId The ID of the webinar. (required)
     * @return DeleteRegistrantRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The webinar registrant was deleted. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public DeleteRegistrantRecordRequestBuilder deleteRegistrantRecord(String registrantId, String webinarId) throws IllegalArgumentException {
        if (registrantId == null) throw new IllegalArgumentException("\"registrantId\" is required but got null");
            

        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
            

        return new DeleteRegistrantRecordRequestBuilder(registrantId, webinarId);
    }
    private okhttp3.Call deleteRegistrantRecord_0Call(String registrantId, Double userId, String webinarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/webinars/{webinar_id}/registrants/{registrant_id}"
            .replace("{" + "registrant_id" + "}", localVarApiClient.escapeString(registrantId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "webinar_id" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRegistrantRecord_0ValidateBeforeCall(String registrantId, Double userId, String webinarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrantId' is set
        if (registrantId == null) {
            throw new ApiException("Missing the required parameter 'registrantId' when calling deleteRegistrantRecord_0(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteRegistrantRecord_0(Async)");
        }

        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling deleteRegistrantRecord_0(Async)");
        }

        return deleteRegistrantRecord_0Call(registrantId, userId, webinarId, _callback);

    }


    private ApiResponse<Void> deleteRegistrantRecord_0WithHttpInfo(String registrantId, Double userId, String webinarId) throws ApiException {
        okhttp3.Call localVarCall = deleteRegistrantRecord_0ValidateBeforeCall(registrantId, userId, webinarId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteRegistrantRecord_0Async(String registrantId, Double userId, String webinarId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRegistrantRecord_0ValidateBeforeCall(registrantId, userId, webinarId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteRegistrantRecord0RequestBuilder {
        private final String registrantId;
        private final Double userId;
        private final String webinarId;

        private DeleteRegistrantRecord0RequestBuilder(String registrantId, double userId, String webinarId) {
            this.registrantId = registrantId;
            this.userId = userId;
            this.webinarId = webinarId;
        }

        /**
         * Build call for deleteRegistrantRecord_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The webinar registrant was deleted. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteRegistrantRecord_0Call(registrantId, userId, webinarId, _callback);
        }


        /**
         * Execute deleteRegistrantRecord_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The webinar registrant was deleted. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public void execute() throws ApiException {
            deleteRegistrantRecord_0WithHttpInfo(registrantId, userId, webinarId);
        }

        /**
         * Execute deleteRegistrantRecord_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The webinar registrant was deleted. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteRegistrantRecord_0WithHttpInfo(registrantId, userId, webinarId);
        }

        /**
         * Execute deleteRegistrantRecord_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The webinar registrant was deleted. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteRegistrantRecord_0Async(registrantId, userId, webinarId, _callback);
        }
    }

    /**
     * Delete a registrant record associated with a webinar
     * This method deletes the specified registrant associated with a webinar and originally submitted through a webinar form.
     * @param registrantId The ID of the webinar registrant. (required)
     * @param userId The ID of the user. (required)
     * @param webinarId The ID of the webinar. (required)
     * @return DeleteRegistrantRecord0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The webinar registrant was deleted. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public DeleteRegistrantRecord0RequestBuilder deleteRegistrantRecord_0(String registrantId, double userId, String webinarId) throws IllegalArgumentException {
        if (registrantId == null) throw new IllegalArgumentException("\"registrantId\" is required but got null");
            

        
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
            

        return new DeleteRegistrantRecord0RequestBuilder(registrantId, userId, webinarId);
    }
    private okhttp3.Call getUserRegistrationsByWebinarIdCall(String webinarId, String direction, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/webinars/{webinar_id}/registrants"
            .replace("{" + "webinar_id" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserRegistrationsByWebinarIdValidateBeforeCall(String webinarId, String direction, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling getUserRegistrationsByWebinarId(Async)");
        }

        return getUserRegistrationsByWebinarIdCall(webinarId, direction, page, perPage, sort, _callback);

    }


    private ApiResponse<WebinarRegistrant> getUserRegistrationsByWebinarIdWithHttpInfo(String webinarId, String direction, Double page, Double perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = getUserRegistrationsByWebinarIdValidateBeforeCall(webinarId, direction, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<WebinarRegistrant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserRegistrationsByWebinarIdAsync(String webinarId, String direction, Double page, Double perPage, String sort, final ApiCallback<WebinarRegistrant> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserRegistrationsByWebinarIdValidateBeforeCall(webinarId, direction, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<WebinarRegistrant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserRegistrationsByWebinarIdRequestBuilder {
        private final String webinarId;
        private String direction;
        private Double page;
        private Double perPage;
        private String sort;

        private GetUserRegistrationsByWebinarIdRequestBuilder(String webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return GetUserRegistrationsByWebinarIdRequestBuilder
         */
        public GetUserRegistrationsByWebinarIdRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetUserRegistrationsByWebinarIdRequestBuilder
         */
        public GetUserRegistrationsByWebinarIdRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetUserRegistrationsByWebinarIdRequestBuilder
         */
        public GetUserRegistrationsByWebinarIdRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;registration_date&#x60; - Sort the results by registration date.  (optional)
         * @return GetUserRegistrationsByWebinarIdRequestBuilder
         */
        public GetUserRegistrationsByWebinarIdRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getUserRegistrationsByWebinarId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The user registration data was returned. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserRegistrationsByWebinarIdCall(webinarId, direction, page, perPage, sort, _callback);
        }


        /**
         * Execute getUserRegistrationsByWebinarId request
         * @return WebinarRegistrant
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The user registration data was returned. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public WebinarRegistrant execute() throws ApiException {
            ApiResponse<WebinarRegistrant> localVarResp = getUserRegistrationsByWebinarIdWithHttpInfo(webinarId, direction, page, perPage, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserRegistrationsByWebinarId request with HTTP info returned
         * @return ApiResponse&lt;WebinarRegistrant&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The user registration data was returned. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<WebinarRegistrant> executeWithHttpInfo() throws ApiException {
            return getUserRegistrationsByWebinarIdWithHttpInfo(webinarId, direction, page, perPage, sort);
        }

        /**
         * Execute getUserRegistrationsByWebinarId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The user registration data was returned. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<WebinarRegistrant> _callback) throws ApiException {
            return getUserRegistrationsByWebinarIdAsync(webinarId, direction, page, perPage, sort, _callback);
        }
    }

    /**
     * Get user registration data associated with a webinar
     * This method returns the list of user registrations that is associated with the specified webinar and was originally submitted through a webinar form.
     * @param webinarId The ID of the webinar. (required)
     * @return GetUserRegistrationsByWebinarIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user registration data was returned. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetUserRegistrationsByWebinarIdRequestBuilder getUserRegistrationsByWebinarId(String webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
            

        return new GetUserRegistrationsByWebinarIdRequestBuilder(webinarId);
    }
    private okhttp3.Call getUserRegistrationsByWebinarId_0Call(Double userId, String webinarId, String direction, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/webinars/{webinar_id}/registrants"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "webinar_id" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserRegistrationsByWebinarId_0ValidateBeforeCall(Double userId, String webinarId, String direction, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserRegistrationsByWebinarId_0(Async)");
        }

        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling getUserRegistrationsByWebinarId_0(Async)");
        }

        return getUserRegistrationsByWebinarId_0Call(userId, webinarId, direction, page, perPage, sort, _callback);

    }


    private ApiResponse<WebinarRegistrant> getUserRegistrationsByWebinarId_0WithHttpInfo(Double userId, String webinarId, String direction, Double page, Double perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = getUserRegistrationsByWebinarId_0ValidateBeforeCall(userId, webinarId, direction, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<WebinarRegistrant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserRegistrationsByWebinarId_0Async(Double userId, String webinarId, String direction, Double page, Double perPage, String sort, final ApiCallback<WebinarRegistrant> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserRegistrationsByWebinarId_0ValidateBeforeCall(userId, webinarId, direction, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<WebinarRegistrant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserRegistrationsByWebinarId0RequestBuilder {
        private final Double userId;
        private final String webinarId;
        private String direction;
        private Double page;
        private Double perPage;
        private String sort;

        private GetUserRegistrationsByWebinarId0RequestBuilder(double userId, String webinarId) {
            this.userId = userId;
            this.webinarId = webinarId;
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return GetUserRegistrationsByWebinarId0RequestBuilder
         */
        public GetUserRegistrationsByWebinarId0RequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetUserRegistrationsByWebinarId0RequestBuilder
         */
        public GetUserRegistrationsByWebinarId0RequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetUserRegistrationsByWebinarId0RequestBuilder
         */
        public GetUserRegistrationsByWebinarId0RequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;registration_date&#x60; - Sort the results by registration date.  (optional)
         * @return GetUserRegistrationsByWebinarId0RequestBuilder
         */
        public GetUserRegistrationsByWebinarId0RequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getUserRegistrationsByWebinarId_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The user registration data was returned. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserRegistrationsByWebinarId_0Call(userId, webinarId, direction, page, perPage, sort, _callback);
        }


        /**
         * Execute getUserRegistrationsByWebinarId_0 request
         * @return WebinarRegistrant
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The user registration data was returned. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public WebinarRegistrant execute() throws ApiException {
            ApiResponse<WebinarRegistrant> localVarResp = getUserRegistrationsByWebinarId_0WithHttpInfo(userId, webinarId, direction, page, perPage, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserRegistrationsByWebinarId_0 request with HTTP info returned
         * @return ApiResponse&lt;WebinarRegistrant&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The user registration data was returned. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<WebinarRegistrant> executeWithHttpInfo() throws ApiException {
            return getUserRegistrationsByWebinarId_0WithHttpInfo(userId, webinarId, direction, page, perPage, sort);
        }

        /**
         * Execute getUserRegistrationsByWebinarId_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The user registration data was returned. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<WebinarRegistrant> _callback) throws ApiException {
            return getUserRegistrationsByWebinarId_0Async(userId, webinarId, direction, page, perPage, sort, _callback);
        }
    }

    /**
     * Get user registration data associated with a webinar
     * This method returns the list of user registrations that is associated with the specified webinar and was originally submitted through a webinar form.
     * @param userId The ID of the user. (required)
     * @param webinarId The ID of the webinar. (required)
     * @return GetUserRegistrationsByWebinarId0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user registration data was returned. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetUserRegistrationsByWebinarId0RequestBuilder getUserRegistrationsByWebinarId_0(double userId, String webinarId) throws IllegalArgumentException {
        
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
            

        return new GetUserRegistrationsByWebinarId0RequestBuilder(userId, webinarId);
    }
    private okhttp3.Call updateUserRegistrationDataCall(String registrantId, String webinarId, WebinarRegistrationsUpdateUserRegistrationDataRequest webinarRegistrationsUpdateUserRegistrationDataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webinarRegistrationsUpdateUserRegistrationDataRequest;

        // create path and map variables
        String localVarPath = "/me/webinars/{webinar_id}/registrants/{registrant_id}"
            .replace("{" + "registrant_id" + "}", localVarApiClient.escapeString(registrantId.toString()))
            .replace("{" + "webinar_id" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserRegistrationDataValidateBeforeCall(String registrantId, String webinarId, WebinarRegistrationsUpdateUserRegistrationDataRequest webinarRegistrationsUpdateUserRegistrationDataRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrantId' is set
        if (registrantId == null) {
            throw new ApiException("Missing the required parameter 'registrantId' when calling updateUserRegistrationData(Async)");
        }

        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling updateUserRegistrationData(Async)");
        }

        return updateUserRegistrationDataCall(registrantId, webinarId, webinarRegistrationsUpdateUserRegistrationDataRequest, _callback);

    }


    private ApiResponse<WebinarRegistrant> updateUserRegistrationDataWithHttpInfo(String registrantId, String webinarId, WebinarRegistrationsUpdateUserRegistrationDataRequest webinarRegistrationsUpdateUserRegistrationDataRequest) throws ApiException {
        okhttp3.Call localVarCall = updateUserRegistrationDataValidateBeforeCall(registrantId, webinarId, webinarRegistrationsUpdateUserRegistrationDataRequest, null);
        Type localVarReturnType = new TypeToken<WebinarRegistrant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateUserRegistrationDataAsync(String registrantId, String webinarId, WebinarRegistrationsUpdateUserRegistrationDataRequest webinarRegistrationsUpdateUserRegistrationDataRequest, final ApiCallback<WebinarRegistrant> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserRegistrationDataValidateBeforeCall(registrantId, webinarId, webinarRegistrationsUpdateUserRegistrationDataRequest, _callback);
        Type localVarReturnType = new TypeToken<WebinarRegistrant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateUserRegistrationDataRequestBuilder {
        private final String registrantId;
        private final String webinarId;
        private Boolean isBlocked;

        private UpdateUserRegistrationDataRequestBuilder(String registrantId, String webinarId) {
            this.registrantId = registrantId;
            this.webinarId = webinarId;
        }

        /**
         * Set isBlocked
         * @param isBlocked Whether to block the webinar registrant. (optional)
         * @return UpdateUserRegistrationDataRequestBuilder
         */
        public UpdateUserRegistrationDataRequestBuilder isBlocked(Boolean isBlocked) {
            this.isBlocked = isBlocked;
            return this;
        }
        
        /**
         * Build call for updateUserRegistrationData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar registrant data was updated. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebinarRegistrationsUpdateUserRegistrationDataRequest webinarRegistrationsUpdateUserRegistrationDataRequest = buildBodyParams();
            return updateUserRegistrationDataCall(registrantId, webinarId, webinarRegistrationsUpdateUserRegistrationDataRequest, _callback);
        }

        private WebinarRegistrationsUpdateUserRegistrationDataRequest buildBodyParams() {
            WebinarRegistrationsUpdateUserRegistrationDataRequest webinarRegistrationsUpdateUserRegistrationDataRequest = new WebinarRegistrationsUpdateUserRegistrationDataRequest();
            webinarRegistrationsUpdateUserRegistrationDataRequest.isBlocked(this.isBlocked);
            return webinarRegistrationsUpdateUserRegistrationDataRequest;
        }

        /**
         * Execute updateUserRegistrationData request
         * @return WebinarRegistrant
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar registrant data was updated. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public WebinarRegistrant execute() throws ApiException {
            WebinarRegistrationsUpdateUserRegistrationDataRequest webinarRegistrationsUpdateUserRegistrationDataRequest = buildBodyParams();
            ApiResponse<WebinarRegistrant> localVarResp = updateUserRegistrationDataWithHttpInfo(registrantId, webinarId, webinarRegistrationsUpdateUserRegistrationDataRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateUserRegistrationData request with HTTP info returned
         * @return ApiResponse&lt;WebinarRegistrant&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar registrant data was updated. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<WebinarRegistrant> executeWithHttpInfo() throws ApiException {
            WebinarRegistrationsUpdateUserRegistrationDataRequest webinarRegistrationsUpdateUserRegistrationDataRequest = buildBodyParams();
            return updateUserRegistrationDataWithHttpInfo(registrantId, webinarId, webinarRegistrationsUpdateUserRegistrationDataRequest);
        }

        /**
         * Execute updateUserRegistrationData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar registrant data was updated. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<WebinarRegistrant> _callback) throws ApiException {
            WebinarRegistrationsUpdateUserRegistrationDataRequest webinarRegistrationsUpdateUserRegistrationDataRequest = buildBodyParams();
            return updateUserRegistrationDataAsync(registrantId, webinarId, webinarRegistrationsUpdateUserRegistrationDataRequest, _callback);
        }
    }

    /**
     * Update user registration data associated with a webinar
     * This method updates the specified user registration data associated with a webinar and originally submitted through a webinar form.
     * @param registrantId The ID of the webinar registrant. (required)
     * @param webinarId The ID of the webinar. (required)
     * @return UpdateUserRegistrationDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The webinar registrant data was updated. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public UpdateUserRegistrationDataRequestBuilder updateUserRegistrationData(String registrantId, String webinarId) throws IllegalArgumentException {
        if (registrantId == null) throw new IllegalArgumentException("\"registrantId\" is required but got null");
            

        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
            

        return new UpdateUserRegistrationDataRequestBuilder(registrantId, webinarId);
    }
    private okhttp3.Call updateUserRegistrationData_0Call(String registrantId, Double userId, String webinarId, WebinarRegistrationsUpdateUserRegistrationDataRequest1 webinarRegistrationsUpdateUserRegistrationDataRequest1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webinarRegistrationsUpdateUserRegistrationDataRequest1;

        // create path and map variables
        String localVarPath = "/users/{user_id}/webinars/{webinar_id}/registrants/{registrant_id}"
            .replace("{" + "registrant_id" + "}", localVarApiClient.escapeString(registrantId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "webinar_id" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserRegistrationData_0ValidateBeforeCall(String registrantId, Double userId, String webinarId, WebinarRegistrationsUpdateUserRegistrationDataRequest1 webinarRegistrationsUpdateUserRegistrationDataRequest1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrantId' is set
        if (registrantId == null) {
            throw new ApiException("Missing the required parameter 'registrantId' when calling updateUserRegistrationData_0(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateUserRegistrationData_0(Async)");
        }

        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling updateUserRegistrationData_0(Async)");
        }

        return updateUserRegistrationData_0Call(registrantId, userId, webinarId, webinarRegistrationsUpdateUserRegistrationDataRequest1, _callback);

    }


    private ApiResponse<WebinarRegistrant> updateUserRegistrationData_0WithHttpInfo(String registrantId, Double userId, String webinarId, WebinarRegistrationsUpdateUserRegistrationDataRequest1 webinarRegistrationsUpdateUserRegistrationDataRequest1) throws ApiException {
        okhttp3.Call localVarCall = updateUserRegistrationData_0ValidateBeforeCall(registrantId, userId, webinarId, webinarRegistrationsUpdateUserRegistrationDataRequest1, null);
        Type localVarReturnType = new TypeToken<WebinarRegistrant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateUserRegistrationData_0Async(String registrantId, Double userId, String webinarId, WebinarRegistrationsUpdateUserRegistrationDataRequest1 webinarRegistrationsUpdateUserRegistrationDataRequest1, final ApiCallback<WebinarRegistrant> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserRegistrationData_0ValidateBeforeCall(registrantId, userId, webinarId, webinarRegistrationsUpdateUserRegistrationDataRequest1, _callback);
        Type localVarReturnType = new TypeToken<WebinarRegistrant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateUserRegistrationData0RequestBuilder {
        private final String registrantId;
        private final Double userId;
        private final String webinarId;
        private Boolean isBlocked;

        private UpdateUserRegistrationData0RequestBuilder(String registrantId, double userId, String webinarId) {
            this.registrantId = registrantId;
            this.userId = userId;
            this.webinarId = webinarId;
        }

        /**
         * Set isBlocked
         * @param isBlocked Whether to block the webinar registrant. (optional)
         * @return UpdateUserRegistrationData0RequestBuilder
         */
        public UpdateUserRegistrationData0RequestBuilder isBlocked(Boolean isBlocked) {
            this.isBlocked = isBlocked;
            return this;
        }
        
        /**
         * Build call for updateUserRegistrationData_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar registrant data was updated. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebinarRegistrationsUpdateUserRegistrationDataRequest1 webinarRegistrationsUpdateUserRegistrationDataRequest1 = buildBodyParams();
            return updateUserRegistrationData_0Call(registrantId, userId, webinarId, webinarRegistrationsUpdateUserRegistrationDataRequest1, _callback);
        }

        private WebinarRegistrationsUpdateUserRegistrationDataRequest1 buildBodyParams() {
            WebinarRegistrationsUpdateUserRegistrationDataRequest1 webinarRegistrationsUpdateUserRegistrationDataRequest1 = new WebinarRegistrationsUpdateUserRegistrationDataRequest1();
            webinarRegistrationsUpdateUserRegistrationDataRequest1.isBlocked(this.isBlocked);
            return webinarRegistrationsUpdateUserRegistrationDataRequest1;
        }

        /**
         * Execute updateUserRegistrationData_0 request
         * @return WebinarRegistrant
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar registrant data was updated. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public WebinarRegistrant execute() throws ApiException {
            WebinarRegistrationsUpdateUserRegistrationDataRequest1 webinarRegistrationsUpdateUserRegistrationDataRequest1 = buildBodyParams();
            ApiResponse<WebinarRegistrant> localVarResp = updateUserRegistrationData_0WithHttpInfo(registrantId, userId, webinarId, webinarRegistrationsUpdateUserRegistrationDataRequest1);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateUserRegistrationData_0 request with HTTP info returned
         * @return ApiResponse&lt;WebinarRegistrant&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar registrant data was updated. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<WebinarRegistrant> executeWithHttpInfo() throws ApiException {
            WebinarRegistrationsUpdateUserRegistrationDataRequest1 webinarRegistrationsUpdateUserRegistrationDataRequest1 = buildBodyParams();
            return updateUserRegistrationData_0WithHttpInfo(registrantId, userId, webinarId, webinarRegistrationsUpdateUserRegistrationDataRequest1);
        }

        /**
         * Execute updateUserRegistrationData_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar registrant data was updated. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<WebinarRegistrant> _callback) throws ApiException {
            WebinarRegistrationsUpdateUserRegistrationDataRequest1 webinarRegistrationsUpdateUserRegistrationDataRequest1 = buildBodyParams();
            return updateUserRegistrationData_0Async(registrantId, userId, webinarId, webinarRegistrationsUpdateUserRegistrationDataRequest1, _callback);
        }
    }

    /**
     * Update user registration data associated with a webinar
     * This method updates the specified user registration data associated with a webinar and originally submitted through a webinar form.
     * @param registrantId The ID of the webinar registrant. (required)
     * @param userId The ID of the user. (required)
     * @param webinarId The ID of the webinar. (required)
     * @return UpdateUserRegistrationData0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The webinar registrant data was updated. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public UpdateUserRegistrationData0RequestBuilder updateUserRegistrationData_0(String registrantId, double userId, String webinarId) throws IllegalArgumentException {
        if (registrantId == null) throw new IllegalArgumentException("\"registrantId\" is required but got null");
            

        
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
            

        return new UpdateUserRegistrationData0RequestBuilder(registrantId, userId, webinarId);
    }
}
