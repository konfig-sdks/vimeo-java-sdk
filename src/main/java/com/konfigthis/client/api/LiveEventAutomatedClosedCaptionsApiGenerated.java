/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.LiveEventAutomatedClosedCaptions;
import com.konfigthis.client.model.LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest;
import com.konfigthis.client.model.LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1;
import com.konfigthis.client.model.LiveEventAutomatedClosedCaptionsEditPreferenceRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LiveEventAutomatedClosedCaptionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LiveEventAutomatedClosedCaptionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LiveEventAutomatedClosedCaptionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call editPreferenceCall(Double liveEventId, LiveEventAutomatedClosedCaptionsEditPreferenceRequest liveEventAutomatedClosedCaptionsEditPreferenceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = liveEventAutomatedClosedCaptionsEditPreferenceRequest;

        // create path and map variables
        String localVarPath = "/live_events/{live_event_id}/auto_cc"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/application/vnd.vimeo.live.auto_cc+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/application/vnd.vimeo.live.auto_cc+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editPreferenceValidateBeforeCall(Double liveEventId, LiveEventAutomatedClosedCaptionsEditPreferenceRequest liveEventAutomatedClosedCaptionsEditPreferenceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling editPreference(Async)");
        }

        // verify the required parameter 'liveEventAutomatedClosedCaptionsEditPreferenceRequest' is set
        if (liveEventAutomatedClosedCaptionsEditPreferenceRequest == null) {
            throw new ApiException("Missing the required parameter 'liveEventAutomatedClosedCaptionsEditPreferenceRequest' when calling editPreference(Async)");
        }

        return editPreferenceCall(liveEventId, liveEventAutomatedClosedCaptionsEditPreferenceRequest, _callback);

    }


    private ApiResponse<LiveEventAutomatedClosedCaptions> editPreferenceWithHttpInfo(Double liveEventId, LiveEventAutomatedClosedCaptionsEditPreferenceRequest liveEventAutomatedClosedCaptionsEditPreferenceRequest) throws ApiException {
        okhttp3.Call localVarCall = editPreferenceValidateBeforeCall(liveEventId, liveEventAutomatedClosedCaptionsEditPreferenceRequest, null);
        Type localVarReturnType = new TypeToken<LiveEventAutomatedClosedCaptions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call editPreferenceAsync(Double liveEventId, LiveEventAutomatedClosedCaptionsEditPreferenceRequest liveEventAutomatedClosedCaptionsEditPreferenceRequest, final ApiCallback<LiveEventAutomatedClosedCaptions> _callback) throws ApiException {

        okhttp3.Call localVarCall = editPreferenceValidateBeforeCall(liveEventId, liveEventAutomatedClosedCaptionsEditPreferenceRequest, _callback);
        Type localVarReturnType = new TypeToken<LiveEventAutomatedClosedCaptions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EditPreferenceRequestBuilder {
        private final Boolean autoCcEnabled;
        private final Double liveEventId;
        private String autoCcKeywords;
        private String autoCcLang;

        private EditPreferenceRequestBuilder(Boolean autoCcEnabled, double liveEventId) {
            this.autoCcEnabled = autoCcEnabled;
            this.liveEventId = liveEventId;
        }

        /**
         * Set autoCcKeywords
         * @param autoCcKeywords A comma-separated list of keywords that improve the quality of the automated closed captions. (optional)
         * @return EditPreferenceRequestBuilder
         */
        public EditPreferenceRequestBuilder autoCcKeywords(String autoCcKeywords) {
            this.autoCcKeywords = autoCcKeywords;
            return this;
        }
        
        /**
         * Set autoCcLang
         * @param autoCcLang The language in which the automated closed captions appear.  Option descriptions:  * &#x60;de-DE&#x60; - The language is German.  * &#x60;en-US&#x60; - The language is English.  * &#x60;es-ES&#x60; - The language is Spanish.  * &#x60;fr-FR&#x60; - The language is French.  * &#x60;pt-BR&#x60; - The language is Portuguese.  (optional)
         * @return EditPreferenceRequestBuilder
         */
        public EditPreferenceRequestBuilder autoCcLang(String autoCcLang) {
            this.autoCcLang = autoCcLang;
            return this;
        }
        
        /**
         * Build call for editPreference
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The automated closed captions preference was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LiveEventAutomatedClosedCaptionsEditPreferenceRequest liveEventAutomatedClosedCaptionsEditPreferenceRequest = buildBodyParams();
            return editPreferenceCall(liveEventId, liveEventAutomatedClosedCaptionsEditPreferenceRequest, _callback);
        }

        private LiveEventAutomatedClosedCaptionsEditPreferenceRequest buildBodyParams() {
            LiveEventAutomatedClosedCaptionsEditPreferenceRequest liveEventAutomatedClosedCaptionsEditPreferenceRequest = new LiveEventAutomatedClosedCaptionsEditPreferenceRequest();
            liveEventAutomatedClosedCaptionsEditPreferenceRequest.autoCcEnabled(this.autoCcEnabled);
            liveEventAutomatedClosedCaptionsEditPreferenceRequest.autoCcKeywords(this.autoCcKeywords);
            if (this.autoCcLang != null)
            liveEventAutomatedClosedCaptionsEditPreferenceRequest.autoCcLang(LiveEventAutomatedClosedCaptionsEditPreferenceRequest.AutoCcLangEnum.fromValue(this.autoCcLang));
            return liveEventAutomatedClosedCaptionsEditPreferenceRequest;
        }

        /**
         * Execute editPreference request
         * @return LiveEventAutomatedClosedCaptions
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The automated closed captions preference was edited. </td><td>  -  </td></tr>
         </table>
         */
        public LiveEventAutomatedClosedCaptions execute() throws ApiException {
            LiveEventAutomatedClosedCaptionsEditPreferenceRequest liveEventAutomatedClosedCaptionsEditPreferenceRequest = buildBodyParams();
            ApiResponse<LiveEventAutomatedClosedCaptions> localVarResp = editPreferenceWithHttpInfo(liveEventId, liveEventAutomatedClosedCaptionsEditPreferenceRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute editPreference request with HTTP info returned
         * @return ApiResponse&lt;LiveEventAutomatedClosedCaptions&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The automated closed captions preference was edited. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LiveEventAutomatedClosedCaptions> executeWithHttpInfo() throws ApiException {
            LiveEventAutomatedClosedCaptionsEditPreferenceRequest liveEventAutomatedClosedCaptionsEditPreferenceRequest = buildBodyParams();
            return editPreferenceWithHttpInfo(liveEventId, liveEventAutomatedClosedCaptionsEditPreferenceRequest);
        }

        /**
         * Execute editPreference request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The automated closed captions preference was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LiveEventAutomatedClosedCaptions> _callback) throws ApiException {
            LiveEventAutomatedClosedCaptionsEditPreferenceRequest liveEventAutomatedClosedCaptionsEditPreferenceRequest = buildBodyParams();
            return editPreferenceAsync(liveEventId, liveEventAutomatedClosedCaptionsEditPreferenceRequest, _callback);
        }
    }

    /**
     * Edit the automated closed captions preference of a live event
     * This method edits the automated closed captions preference for the specified event.
     * @param liveEventId The ID of the event. (required)
     * @param liveEventAutomatedClosedCaptionsEditPreferenceRequest  (required)
     * @return EditPreferenceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The automated closed captions preference was edited. </td><td>  -  </td></tr>
     </table>
     */
    public EditPreferenceRequestBuilder editPreference(Boolean autoCcEnabled, double liveEventId) throws IllegalArgumentException {
        if (autoCcEnabled == null) throw new IllegalArgumentException("\"autoCcEnabled\" is required but got null");
        
        return new EditPreferenceRequestBuilder(autoCcEnabled, liveEventId);
    }
    private okhttp3.Call editPreferenceForEventCall(Double liveEventId, LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest;

        // create path and map variables
        String localVarPath = "/me/live_events/{live_event_id}/auto_cc"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/application/vnd.vimeo.live.auto_cc+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/application/vnd.vimeo.live.auto_cc+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editPreferenceForEventValidateBeforeCall(Double liveEventId, LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling editPreferenceForEvent(Async)");
        }

        // verify the required parameter 'liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest' is set
        if (liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest == null) {
            throw new ApiException("Missing the required parameter 'liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest' when calling editPreferenceForEvent(Async)");
        }

        return editPreferenceForEventCall(liveEventId, liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest, _callback);

    }


    private ApiResponse<LiveEventAutomatedClosedCaptions> editPreferenceForEventWithHttpInfo(Double liveEventId, LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest) throws ApiException {
        okhttp3.Call localVarCall = editPreferenceForEventValidateBeforeCall(liveEventId, liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest, null);
        Type localVarReturnType = new TypeToken<LiveEventAutomatedClosedCaptions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call editPreferenceForEventAsync(Double liveEventId, LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest, final ApiCallback<LiveEventAutomatedClosedCaptions> _callback) throws ApiException {

        okhttp3.Call localVarCall = editPreferenceForEventValidateBeforeCall(liveEventId, liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest, _callback);
        Type localVarReturnType = new TypeToken<LiveEventAutomatedClosedCaptions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EditPreferenceForEventRequestBuilder {
        private final Boolean autoCcEnabled;
        private final Double liveEventId;
        private String autoCcKeywords;
        private String autoCcLang;

        private EditPreferenceForEventRequestBuilder(Boolean autoCcEnabled, double liveEventId) {
            this.autoCcEnabled = autoCcEnabled;
            this.liveEventId = liveEventId;
        }

        /**
         * Set autoCcKeywords
         * @param autoCcKeywords A comma-separated list of keywords that improve the quality of the automated closed captions. (optional)
         * @return EditPreferenceForEventRequestBuilder
         */
        public EditPreferenceForEventRequestBuilder autoCcKeywords(String autoCcKeywords) {
            this.autoCcKeywords = autoCcKeywords;
            return this;
        }
        
        /**
         * Set autoCcLang
         * @param autoCcLang The language in which the automated closed captions appear.  Option descriptions:  * &#x60;de-DE&#x60; - The language is German.  * &#x60;en-US&#x60; - The language is English.  * &#x60;es-ES&#x60; - The language is Spanish.  * &#x60;fr-FR&#x60; - The language is French.  * &#x60;pt-BR&#x60; - The language is Portuguese.  (optional)
         * @return EditPreferenceForEventRequestBuilder
         */
        public EditPreferenceForEventRequestBuilder autoCcLang(String autoCcLang) {
            this.autoCcLang = autoCcLang;
            return this;
        }
        
        /**
         * Build call for editPreferenceForEvent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The automated closed captions preference was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest = buildBodyParams();
            return editPreferenceForEventCall(liveEventId, liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest, _callback);
        }

        private LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest buildBodyParams() {
            LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest = new LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest();
            liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest.autoCcEnabled(this.autoCcEnabled);
            liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest.autoCcKeywords(this.autoCcKeywords);
            if (this.autoCcLang != null)
            liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest.autoCcLang(LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest.AutoCcLangEnum.fromValue(this.autoCcLang));
            return liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest;
        }

        /**
         * Execute editPreferenceForEvent request
         * @return LiveEventAutomatedClosedCaptions
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The automated closed captions preference was edited. </td><td>  -  </td></tr>
         </table>
         */
        public LiveEventAutomatedClosedCaptions execute() throws ApiException {
            LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest = buildBodyParams();
            ApiResponse<LiveEventAutomatedClosedCaptions> localVarResp = editPreferenceForEventWithHttpInfo(liveEventId, liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute editPreferenceForEvent request with HTTP info returned
         * @return ApiResponse&lt;LiveEventAutomatedClosedCaptions&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The automated closed captions preference was edited. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LiveEventAutomatedClosedCaptions> executeWithHttpInfo() throws ApiException {
            LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest = buildBodyParams();
            return editPreferenceForEventWithHttpInfo(liveEventId, liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest);
        }

        /**
         * Execute editPreferenceForEvent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The automated closed captions preference was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LiveEventAutomatedClosedCaptions> _callback) throws ApiException {
            LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest = buildBodyParams();
            return editPreferenceForEventAsync(liveEventId, liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest, _callback);
        }
    }

    /**
     * Edit the automated closed captions preference of a live event
     * This method edits the automated closed captions preference for the specified event.
     * @param liveEventId The ID of the event. (required)
     * @param liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest  (required)
     * @return EditPreferenceForEventRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The automated closed captions preference was edited. </td><td>  -  </td></tr>
     </table>
     */
    public EditPreferenceForEventRequestBuilder editPreferenceForEvent(Boolean autoCcEnabled, double liveEventId) throws IllegalArgumentException {
        if (autoCcEnabled == null) throw new IllegalArgumentException("\"autoCcEnabled\" is required but got null");
        
        return new EditPreferenceForEventRequestBuilder(autoCcEnabled, liveEventId);
    }
    private okhttp3.Call editPreferenceForEvent_0Call(Double liveEventId, Double userId, LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1 liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1;

        // create path and map variables
        String localVarPath = "/users/{user_id}/live_events/{live_event_id}/auto_cc"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/application/vnd.vimeo.live.auto_cc+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/application/vnd.vimeo.live.auto_cc+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editPreferenceForEvent_0ValidateBeforeCall(Double liveEventId, Double userId, LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1 liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling editPreferenceForEvent_0(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling editPreferenceForEvent_0(Async)");
        }

        // verify the required parameter 'liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1' is set
        if (liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1 == null) {
            throw new ApiException("Missing the required parameter 'liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1' when calling editPreferenceForEvent_0(Async)");
        }

        return editPreferenceForEvent_0Call(liveEventId, userId, liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1, _callback);

    }


    private ApiResponse<LiveEventAutomatedClosedCaptions> editPreferenceForEvent_0WithHttpInfo(Double liveEventId, Double userId, LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1 liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1) throws ApiException {
        okhttp3.Call localVarCall = editPreferenceForEvent_0ValidateBeforeCall(liveEventId, userId, liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1, null);
        Type localVarReturnType = new TypeToken<LiveEventAutomatedClosedCaptions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call editPreferenceForEvent_0Async(Double liveEventId, Double userId, LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1 liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1, final ApiCallback<LiveEventAutomatedClosedCaptions> _callback) throws ApiException {

        okhttp3.Call localVarCall = editPreferenceForEvent_0ValidateBeforeCall(liveEventId, userId, liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1, _callback);
        Type localVarReturnType = new TypeToken<LiveEventAutomatedClosedCaptions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EditPreferenceForEvent0RequestBuilder {
        private final Boolean autoCcEnabled;
        private final Double liveEventId;
        private final Double userId;
        private String autoCcKeywords;
        private String autoCcLang;

        private EditPreferenceForEvent0RequestBuilder(Boolean autoCcEnabled, double liveEventId, double userId) {
            this.autoCcEnabled = autoCcEnabled;
            this.liveEventId = liveEventId;
            this.userId = userId;
        }

        /**
         * Set autoCcKeywords
         * @param autoCcKeywords A comma-separated list of keywords that improve the quality of the automated closed captions. (optional)
         * @return EditPreferenceForEvent0RequestBuilder
         */
        public EditPreferenceForEvent0RequestBuilder autoCcKeywords(String autoCcKeywords) {
            this.autoCcKeywords = autoCcKeywords;
            return this;
        }
        
        /**
         * Set autoCcLang
         * @param autoCcLang The language in which the automated closed captions appear.  Option descriptions:  * &#x60;de-DE&#x60; - The language is German.  * &#x60;en-US&#x60; - The language is English.  * &#x60;es-ES&#x60; - The language is Spanish.  * &#x60;fr-FR&#x60; - The language is French.  * &#x60;pt-BR&#x60; - The language is Portuguese.  (optional)
         * @return EditPreferenceForEvent0RequestBuilder
         */
        public EditPreferenceForEvent0RequestBuilder autoCcLang(String autoCcLang) {
            this.autoCcLang = autoCcLang;
            return this;
        }
        
        /**
         * Build call for editPreferenceForEvent_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The automated closed captions preference was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1 liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1 = buildBodyParams();
            return editPreferenceForEvent_0Call(liveEventId, userId, liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1, _callback);
        }

        private LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1 buildBodyParams() {
            LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1 liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1 = new LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1();
            liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1.autoCcEnabled(this.autoCcEnabled);
            liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1.autoCcKeywords(this.autoCcKeywords);
            if (this.autoCcLang != null)
            liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1.autoCcLang(LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1.AutoCcLangEnum.fromValue(this.autoCcLang));
            return liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1;
        }

        /**
         * Execute editPreferenceForEvent_0 request
         * @return LiveEventAutomatedClosedCaptions
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The automated closed captions preference was edited. </td><td>  -  </td></tr>
         </table>
         */
        public LiveEventAutomatedClosedCaptions execute() throws ApiException {
            LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1 liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1 = buildBodyParams();
            ApiResponse<LiveEventAutomatedClosedCaptions> localVarResp = editPreferenceForEvent_0WithHttpInfo(liveEventId, userId, liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute editPreferenceForEvent_0 request with HTTP info returned
         * @return ApiResponse&lt;LiveEventAutomatedClosedCaptions&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The automated closed captions preference was edited. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LiveEventAutomatedClosedCaptions> executeWithHttpInfo() throws ApiException {
            LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1 liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1 = buildBodyParams();
            return editPreferenceForEvent_0WithHttpInfo(liveEventId, userId, liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1);
        }

        /**
         * Execute editPreferenceForEvent_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The automated closed captions preference was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LiveEventAutomatedClosedCaptions> _callback) throws ApiException {
            LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1 liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1 = buildBodyParams();
            return editPreferenceForEvent_0Async(liveEventId, userId, liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1, _callback);
        }
    }

    /**
     * Edit the automated closed captions preference of a live event
     * This method edits the automated closed captions preference for the specified event.
     * @param liveEventId The ID of the event. (required)
     * @param userId The ID of the user. (required)
     * @param liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1  (required)
     * @return EditPreferenceForEvent0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The automated closed captions preference was edited. </td><td>  -  </td></tr>
     </table>
     */
    public EditPreferenceForEvent0RequestBuilder editPreferenceForEvent_0(Boolean autoCcEnabled, double liveEventId, double userId) throws IllegalArgumentException {
        if (autoCcEnabled == null) throw new IllegalArgumentException("\"autoCcEnabled\" is required but got null");
        
        
        return new EditPreferenceForEvent0RequestBuilder(autoCcEnabled, liveEventId, userId);
    }
}
