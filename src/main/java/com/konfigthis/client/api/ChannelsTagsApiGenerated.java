/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ChannelsTagsAddMultipleTagsToChannelRequest;
import com.konfigthis.client.model.Tag;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ChannelsTagsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChannelsTagsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ChannelsTagsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addMultipleTagsToChannelCall(Double channelId, ChannelsTagsAddMultipleTagsToChannelRequest channelsTagsAddMultipleTagsToChannelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = channelsTagsAddMultipleTagsToChannelRequest;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/tags"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.tag+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.tag+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMultipleTagsToChannelValidateBeforeCall(Double channelId, ChannelsTagsAddMultipleTagsToChannelRequest channelsTagsAddMultipleTagsToChannelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling addMultipleTagsToChannel(Async)");
        }

        // verify the required parameter 'channelsTagsAddMultipleTagsToChannelRequest' is set
        if (channelsTagsAddMultipleTagsToChannelRequest == null) {
            throw new ApiException("Missing the required parameter 'channelsTagsAddMultipleTagsToChannelRequest' when calling addMultipleTagsToChannel(Async)");
        }

        return addMultipleTagsToChannelCall(channelId, channelsTagsAddMultipleTagsToChannelRequest, _callback);

    }


    private ApiResponse<List<Tag>> addMultipleTagsToChannelWithHttpInfo(Double channelId, ChannelsTagsAddMultipleTagsToChannelRequest channelsTagsAddMultipleTagsToChannelRequest) throws ApiException {
        okhttp3.Call localVarCall = addMultipleTagsToChannelValidateBeforeCall(channelId, channelsTagsAddMultipleTagsToChannelRequest, null);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addMultipleTagsToChannelAsync(Double channelId, ChannelsTagsAddMultipleTagsToChannelRequest channelsTagsAddMultipleTagsToChannelRequest, final ApiCallback<List<Tag>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMultipleTagsToChannelValidateBeforeCall(channelId, channelsTagsAddMultipleTagsToChannelRequest, _callback);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddMultipleTagsToChannelRequestBuilder {
        private final List<String> tag;
        private final Double channelId;

        private AddMultipleTagsToChannelRequestBuilder(List<String> tag, double channelId) {
            this.tag = tag;
            this.channelId = channelId;
        }

        /**
         * Build call for addMultipleTagsToChannel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The tags were added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ChannelsTagsAddMultipleTagsToChannelRequest channelsTagsAddMultipleTagsToChannelRequest = buildBodyParams();
            return addMultipleTagsToChannelCall(channelId, channelsTagsAddMultipleTagsToChannelRequest, _callback);
        }

        private ChannelsTagsAddMultipleTagsToChannelRequest buildBodyParams() {
            ChannelsTagsAddMultipleTagsToChannelRequest channelsTagsAddMultipleTagsToChannelRequest = new ChannelsTagsAddMultipleTagsToChannelRequest();
            channelsTagsAddMultipleTagsToChannelRequest.tag(this.tag);
            return channelsTagsAddMultipleTagsToChannelRequest;
        }

        /**
         * Execute addMultipleTagsToChannel request
         * @return List&lt;Tag&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The tags were added. </td><td>  -  </td></tr>
         </table>
         */
        public List<Tag> execute() throws ApiException {
            ChannelsTagsAddMultipleTagsToChannelRequest channelsTagsAddMultipleTagsToChannelRequest = buildBodyParams();
            ApiResponse<List<Tag>> localVarResp = addMultipleTagsToChannelWithHttpInfo(channelId, channelsTagsAddMultipleTagsToChannelRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addMultipleTagsToChannel request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Tag&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The tags were added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Tag>> executeWithHttpInfo() throws ApiException {
            ChannelsTagsAddMultipleTagsToChannelRequest channelsTagsAddMultipleTagsToChannelRequest = buildBodyParams();
            return addMultipleTagsToChannelWithHttpInfo(channelId, channelsTagsAddMultipleTagsToChannelRequest);
        }

        /**
         * Execute addMultipleTagsToChannel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The tags were added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Tag>> _callback) throws ApiException {
            ChannelsTagsAddMultipleTagsToChannelRequest channelsTagsAddMultipleTagsToChannelRequest = buildBodyParams();
            return addMultipleTagsToChannelAsync(channelId, channelsTagsAddMultipleTagsToChannelRequest, _callback);
        }
    }

    /**
     * Add a list of tags to a channel
     * This method adds multiple tags to the specified channel. Include the tags as a JSON array in the body of the request using the **tag** field, like this: &#x60;[{ \&quot;tag\&quot;: \&quot;funny\&quot; }, { \&quot;tag\&quot;: \&quot;concert\&quot; }]&#x60;. The authenticated user must be the owner of the channel. For more information on batch requests like this one, see [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).
     * @param channelId The ID of the channel. (required)
     * @param channelsTagsAddMultipleTagsToChannelRequest  (required)
     * @return AddMultipleTagsToChannelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tags were added. </td><td>  -  </td></tr>
     </table>
     */
    public AddMultipleTagsToChannelRequestBuilder addMultipleTagsToChannel(List<String> tag, double channelId) throws IllegalArgumentException {
        if (tag == null) throw new IllegalArgumentException("\"tag\" is required but got null");
        
        return new AddMultipleTagsToChannelRequestBuilder(tag, channelId);
    }
    private okhttp3.Call addTagToChannelCall(Double channelId, String word, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/tags/{word}"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "word" + "}", localVarApiClient.escapeString(word.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.tag+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTagToChannelValidateBeforeCall(Double channelId, String word, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling addTagToChannel(Async)");
        }

        // verify the required parameter 'word' is set
        if (word == null) {
            throw new ApiException("Missing the required parameter 'word' when calling addTagToChannel(Async)");
        }

        return addTagToChannelCall(channelId, word, _callback);

    }


    private ApiResponse<Void> addTagToChannelWithHttpInfo(Double channelId, String word) throws ApiException {
        okhttp3.Call localVarCall = addTagToChannelValidateBeforeCall(channelId, word, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addTagToChannelAsync(Double channelId, String word, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTagToChannelValidateBeforeCall(channelId, word, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddTagToChannelRequestBuilder {
        private final Double channelId;
        private final String word;

        private AddTagToChannelRequestBuilder(double channelId, String word) {
            this.channelId = channelId;
            this.word = word;
        }

        /**
         * Build call for addTagToChannel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The tag was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addTagToChannelCall(channelId, word, _callback);
        }


        /**
         * Execute addTagToChannel request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The tag was added. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            addTagToChannelWithHttpInfo(channelId, word);
        }

        /**
         * Execute addTagToChannel request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The tag was added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return addTagToChannelWithHttpInfo(channelId, word);
        }

        /**
         * Execute addTagToChannel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The tag was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return addTagToChannelAsync(channelId, word, _callback);
        }
    }

    /**
     * Add a specific tag to a channel
     * This method adds a single tag to the specified channel. The authenticated user must be the owner of the channel.
     * @param channelId The ID of the channel. (required)
     * @param word The word to use as the tag. (required)
     * @return AddTagToChannelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The tag was added. </td><td>  -  </td></tr>
     </table>
     */
    public AddTagToChannelRequestBuilder addTagToChannel(double channelId, String word) throws IllegalArgumentException {
        
        if (word == null) throw new IllegalArgumentException("\"word\" is required but got null");
            

        return new AddTagToChannelRequestBuilder(channelId, word);
    }
    private okhttp3.Call checkIfTagAddedToChannelCall(Double channelId, String word, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/tags/{word}"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "word" + "}", localVarApiClient.escapeString(word.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.tag+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkIfTagAddedToChannelValidateBeforeCall(Double channelId, String word, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling checkIfTagAddedToChannel(Async)");
        }

        // verify the required parameter 'word' is set
        if (word == null) {
            throw new ApiException("Missing the required parameter 'word' when calling checkIfTagAddedToChannel(Async)");
        }

        return checkIfTagAddedToChannelCall(channelId, word, _callback);

    }


    private ApiResponse<Void> checkIfTagAddedToChannelWithHttpInfo(Double channelId, String word) throws ApiException {
        okhttp3.Call localVarCall = checkIfTagAddedToChannelValidateBeforeCall(channelId, word, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call checkIfTagAddedToChannelAsync(Double channelId, String word, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkIfTagAddedToChannelValidateBeforeCall(channelId, word, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CheckIfTagAddedToChannelRequestBuilder {
        private final Double channelId;
        private final String word;

        private CheckIfTagAddedToChannelRequestBuilder(double channelId, String word) {
            this.channelId = channelId;
            this.word = word;
        }

        /**
         * Build call for checkIfTagAddedToChannel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The tag has been added to the channel. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkIfTagAddedToChannelCall(channelId, word, _callback);
        }


        /**
         * Execute checkIfTagAddedToChannel request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The tag has been added to the channel. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            checkIfTagAddedToChannelWithHttpInfo(channelId, word);
        }

        /**
         * Execute checkIfTagAddedToChannel request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The tag has been added to the channel. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return checkIfTagAddedToChannelWithHttpInfo(channelId, word);
        }

        /**
         * Execute checkIfTagAddedToChannel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The tag has been added to the channel. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return checkIfTagAddedToChannelAsync(channelId, word, _callback);
        }
    }

    /**
     * Check if a tag has been added to a channel
     * This method determines whether a tag has been added to the specified channel.
     * @param channelId The ID of the channel. (required)
     * @param word The word to use as the tag. (required)
     * @return CheckIfTagAddedToChannelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The tag has been added to the channel. </td><td>  -  </td></tr>
     </table>
     */
    public CheckIfTagAddedToChannelRequestBuilder checkIfTagAddedToChannel(double channelId, String word) throws IllegalArgumentException {
        
        if (word == null) throw new IllegalArgumentException("\"word\" is required but got null");
            

        return new CheckIfTagAddedToChannelRequestBuilder(channelId, word);
    }
    private okhttp3.Call getAllChannelTagsCall(Double channelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/tags"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.tag+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllChannelTagsValidateBeforeCall(Double channelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getAllChannelTags(Async)");
        }

        return getAllChannelTagsCall(channelId, _callback);

    }


    private ApiResponse<List<Tag>> getAllChannelTagsWithHttpInfo(Double channelId) throws ApiException {
        okhttp3.Call localVarCall = getAllChannelTagsValidateBeforeCall(channelId, null);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllChannelTagsAsync(Double channelId, final ApiCallback<List<Tag>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllChannelTagsValidateBeforeCall(channelId, _callback);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllChannelTagsRequestBuilder {
        private final Double channelId;

        private GetAllChannelTagsRequestBuilder(double channelId) {
            this.channelId = channelId;
        }

        /**
         * Build call for getAllChannelTags
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The tags were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllChannelTagsCall(channelId, _callback);
        }


        /**
         * Execute getAllChannelTags request
         * @return List&lt;Tag&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The tags were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Tag> execute() throws ApiException {
            ApiResponse<List<Tag>> localVarResp = getAllChannelTagsWithHttpInfo(channelId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllChannelTags request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Tag&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The tags were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Tag>> executeWithHttpInfo() throws ApiException {
            return getAllChannelTagsWithHttpInfo(channelId);
        }

        /**
         * Execute getAllChannelTags request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The tags were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Tag>> _callback) throws ApiException {
            return getAllChannelTagsAsync(channelId, _callback);
        }
    }

    /**
     * Get all the tags that have been added to a channel
     * This method returns every tag that has been added to the specified channel.
     * @param channelId The ID of the channel. (required)
     * @return GetAllChannelTagsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tags were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllChannelTagsRequestBuilder getAllChannelTags(double channelId) throws IllegalArgumentException {
        
        return new GetAllChannelTagsRequestBuilder(channelId);
    }
    private okhttp3.Call removeTagFromChannelCall(Double channelId, String word, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/tags/{word}"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "word" + "}", localVarApiClient.escapeString(word.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.tag+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeTagFromChannelValidateBeforeCall(Double channelId, String word, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling removeTagFromChannel(Async)");
        }

        // verify the required parameter 'word' is set
        if (word == null) {
            throw new ApiException("Missing the required parameter 'word' when calling removeTagFromChannel(Async)");
        }

        return removeTagFromChannelCall(channelId, word, _callback);

    }


    private ApiResponse<Void> removeTagFromChannelWithHttpInfo(Double channelId, String word) throws ApiException {
        okhttp3.Call localVarCall = removeTagFromChannelValidateBeforeCall(channelId, word, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeTagFromChannelAsync(Double channelId, String word, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeTagFromChannelValidateBeforeCall(channelId, word, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveTagFromChannelRequestBuilder {
        private final Double channelId;
        private final String word;

        private RemoveTagFromChannelRequestBuilder(double channelId, String word) {
            this.channelId = channelId;
            this.word = word;
        }

        /**
         * Build call for removeTagFromChannel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The tag was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeTagFromChannelCall(channelId, word, _callback);
        }


        /**
         * Execute removeTagFromChannel request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The tag was removed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeTagFromChannelWithHttpInfo(channelId, word);
        }

        /**
         * Execute removeTagFromChannel request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The tag was removed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeTagFromChannelWithHttpInfo(channelId, word);
        }

        /**
         * Execute removeTagFromChannel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The tag was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeTagFromChannelAsync(channelId, word, _callback);
        }
    }

    /**
     * Remove a tag from a channel
     * This method removes a single tag from the specified channel. The authenticated user must be the owner of the channel.
     * @param channelId The ID of the channel. (required)
     * @param word The word to use as the tag. (required)
     * @return RemoveTagFromChannelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The tag was removed. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveTagFromChannelRequestBuilder removeTagFromChannel(double channelId, String word) throws IllegalArgumentException {
        
        if (word == null) throw new IllegalArgumentException("\"word\" is required but got null");
            

        return new RemoveTagFromChannelRequestBuilder(channelId, word);
    }
}
