/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1 {
  public static final String SERIALIZED_NAME_AUTO_CC_ENABLED = "auto_cc_enabled";
  @SerializedName(SERIALIZED_NAME_AUTO_CC_ENABLED)
  private Boolean autoCcEnabled;

  public static final String SERIALIZED_NAME_AUTO_CC_KEYWORDS = "auto_cc_keywords";
  @SerializedName(SERIALIZED_NAME_AUTO_CC_KEYWORDS)
  private String autoCcKeywords;

  /**
   * The language in which the automated closed captions appear.  Option descriptions:  * &#x60;de-DE&#x60; - The language is German.  * &#x60;en-US&#x60; - The language is English.  * &#x60;es-ES&#x60; - The language is Spanish.  * &#x60;fr-FR&#x60; - The language is French.  * &#x60;pt-BR&#x60; - The language is Portuguese. 
   */
  @JsonAdapter(AutoCcLangEnum.Adapter.class)
 public enum AutoCcLangEnum {
    DE_DE("de-DE"),
    
    EN_US("en-US"),
    
    ES_ES("es-ES"),
    
    FR_FR("fr-FR"),
    
    PT_BR("pt-BR");

    private String value;

    AutoCcLangEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AutoCcLangEnum fromValue(String value) {
      for (AutoCcLangEnum b : AutoCcLangEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AutoCcLangEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AutoCcLangEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AutoCcLangEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AutoCcLangEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AUTO_CC_LANG = "auto_cc_lang";
  @SerializedName(SERIALIZED_NAME_AUTO_CC_LANG)
  private AutoCcLangEnum autoCcLang;

  public LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1() {
  }

  public LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1 autoCcEnabled(Boolean autoCcEnabled) {
    
    
    
    
    this.autoCcEnabled = autoCcEnabled;
    return this;
  }

   /**
   * Whether automated closed captions are enabled for the event.
   * @return autoCcEnabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether automated closed captions are enabled for the event.")

  public Boolean getAutoCcEnabled() {
    return autoCcEnabled;
  }


  public void setAutoCcEnabled(Boolean autoCcEnabled) {
    
    
    
    this.autoCcEnabled = autoCcEnabled;
  }


  public LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1 autoCcKeywords(String autoCcKeywords) {
    
    
    
    
    this.autoCcKeywords = autoCcKeywords;
    return this;
  }

   /**
   * A comma-separated list of keywords that improve the quality of the automated closed captions.
   * @return autoCcKeywords
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "commonly-used words,phrases,technical terms", value = "A comma-separated list of keywords that improve the quality of the automated closed captions.")

  public String getAutoCcKeywords() {
    return autoCcKeywords;
  }


  public void setAutoCcKeywords(String autoCcKeywords) {
    
    
    
    this.autoCcKeywords = autoCcKeywords;
  }


  public LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1 autoCcLang(AutoCcLangEnum autoCcLang) {
    
    
    
    
    this.autoCcLang = autoCcLang;
    return this;
  }

   /**
   * The language in which the automated closed captions appear.  Option descriptions:  * &#x60;de-DE&#x60; - The language is German.  * &#x60;en-US&#x60; - The language is English.  * &#x60;es-ES&#x60; - The language is Spanish.  * &#x60;fr-FR&#x60; - The language is French.  * &#x60;pt-BR&#x60; - The language is Portuguese. 
   * @return autoCcLang
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "EN_US", value = "The language in which the automated closed captions appear.  Option descriptions:  * `de-DE` - The language is German.  * `en-US` - The language is English.  * `es-ES` - The language is Spanish.  * `fr-FR` - The language is French.  * `pt-BR` - The language is Portuguese. ")

  public AutoCcLangEnum getAutoCcLang() {
    return autoCcLang;
  }


  public void setAutoCcLang(AutoCcLangEnum autoCcLang) {
    
    
    
    this.autoCcLang = autoCcLang;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1 instance itself
   */
  public LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1 liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1 = (LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1) o;
    return Objects.equals(this.autoCcEnabled, liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1.autoCcEnabled) &&
        Objects.equals(this.autoCcKeywords, liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1.autoCcKeywords) &&
        Objects.equals(this.autoCcLang, liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1.autoCcLang)&&
        Objects.equals(this.additionalProperties, liveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoCcEnabled, autoCcKeywords, autoCcLang, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1 {\n");
    sb.append("    autoCcEnabled: ").append(toIndentedString(autoCcEnabled)).append("\n");
    sb.append("    autoCcKeywords: ").append(toIndentedString(autoCcKeywords)).append("\n");
    sb.append("    autoCcLang: ").append(toIndentedString(autoCcLang)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auto_cc_enabled");
    openapiFields.add("auto_cc_keywords");
    openapiFields.add("auto_cc_lang");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("auto_cc_enabled");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1 is not found in the empty JSON string", LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("auto_cc_keywords") != null && !jsonObj.get("auto_cc_keywords").isJsonNull()) && !jsonObj.get("auto_cc_keywords").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auto_cc_keywords` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auto_cc_keywords").toString()));
      }
      if ((jsonObj.get("auto_cc_lang") != null && !jsonObj.get("auto_cc_lang").isJsonNull()) && !jsonObj.get("auto_cc_lang").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auto_cc_lang` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auto_cc_lang").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1.class));

       return (TypeAdapter<T>) new TypeAdapter<LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1>() {
           @Override
           public void write(JsonWriter out, LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1
  * @throws IOException if the JSON string is invalid with respect to LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1
  */
  public static LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1.class);
  }

 /**
  * Convert an instance of LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

