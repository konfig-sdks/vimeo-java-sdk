/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PaymentMethod;
import com.konfigthis.client.model.PaymentsEssentialsListPaymentMethodsRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PaymentsEssentialsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PaymentsEssentialsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentsEssentialsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getPaymentMethodInfoCall(String paymentMethodId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/payment_methods/{payment_method_id}"
            .replace("{" + "payment_method_id" + "}", localVarApiClient.escapeString(paymentMethodId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentMethodInfoValidateBeforeCall(String paymentMethodId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentMethodId' is set
        if (paymentMethodId == null) {
            throw new ApiException("Missing the required parameter 'paymentMethodId' when calling getPaymentMethodInfo(Async)");
        }

        return getPaymentMethodInfoCall(paymentMethodId, _callback);

    }


    private ApiResponse<PaymentMethod> getPaymentMethodInfoWithHttpInfo(String paymentMethodId) throws ApiException {
        okhttp3.Call localVarCall = getPaymentMethodInfoValidateBeforeCall(paymentMethodId, null);
        Type localVarReturnType = new TypeToken<PaymentMethod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPaymentMethodInfoAsync(String paymentMethodId, final ApiCallback<PaymentMethod> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentMethodInfoValidateBeforeCall(paymentMethodId, _callback);
        Type localVarReturnType = new TypeToken<PaymentMethod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPaymentMethodInfoRequestBuilder {
        private final String paymentMethodId;

        private GetPaymentMethodInfoRequestBuilder(String paymentMethodId) {
            this.paymentMethodId = paymentMethodId;
        }

        /**
         * Build call for getPaymentMethodInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The payments service payment method information was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPaymentMethodInfoCall(paymentMethodId, _callback);
        }


        /**
         * Execute getPaymentMethodInfo request
         * @return PaymentMethod
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The payments service payment method information was returned. </td><td>  -  </td></tr>
         </table>
         */
        public PaymentMethod execute() throws ApiException {
            ApiResponse<PaymentMethod> localVarResp = getPaymentMethodInfoWithHttpInfo(paymentMethodId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPaymentMethodInfo request with HTTP info returned
         * @return ApiResponse&lt;PaymentMethod&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The payments service payment method information was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentMethod> executeWithHttpInfo() throws ApiException {
            return getPaymentMethodInfoWithHttpInfo(paymentMethodId);
        }

        /**
         * Execute getPaymentMethodInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The payments service payment method information was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentMethod> _callback) throws ApiException {
            return getPaymentMethodInfoAsync(paymentMethodId, _callback);
        }
    }

    /**
     * Get information about a payments service payment method
     * This method returns information about the specified Vimeo payments service payment method.
     * @param paymentMethodId The ID of the payment method. (required)
     * @return GetPaymentMethodInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The payments service payment method information was returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetPaymentMethodInfoRequestBuilder getPaymentMethodInfo(String paymentMethodId) throws IllegalArgumentException {
        if (paymentMethodId == null) throw new IllegalArgumentException("\"paymentMethodId\" is required but got null");
            

        return new GetPaymentMethodInfoRequestBuilder(paymentMethodId);
    }
    private okhttp3.Call listPaymentMethodsCall(Double userId, String cardmemberName, Double page, Double perPage, Boolean showDisabled, PaymentsEssentialsListPaymentMethodsRequest paymentsEssentialsListPaymentMethodsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentsEssentialsListPaymentMethodsRequest;

        // create path and map variables
        String localVarPath = "/me/payment_methods";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cardmemberName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cardmember_name", cardmemberName));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (showDisabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_disabled", showDisabled));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPaymentMethodsValidateBeforeCall(Double userId, String cardmemberName, Double page, Double perPage, Boolean showDisabled, PaymentsEssentialsListPaymentMethodsRequest paymentsEssentialsListPaymentMethodsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listPaymentMethods(Async)");
        }

        return listPaymentMethodsCall(userId, cardmemberName, page, perPage, showDisabled, paymentsEssentialsListPaymentMethodsRequest, _callback);

    }


    private ApiResponse<List<PaymentMethod>> listPaymentMethodsWithHttpInfo(Double userId, String cardmemberName, Double page, Double perPage, Boolean showDisabled, PaymentsEssentialsListPaymentMethodsRequest paymentsEssentialsListPaymentMethodsRequest) throws ApiException {
        okhttp3.Call localVarCall = listPaymentMethodsValidateBeforeCall(userId, cardmemberName, page, perPage, showDisabled, paymentsEssentialsListPaymentMethodsRequest, null);
        Type localVarReturnType = new TypeToken<List<PaymentMethod>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPaymentMethodsAsync(Double userId, String cardmemberName, Double page, Double perPage, Boolean showDisabled, PaymentsEssentialsListPaymentMethodsRequest paymentsEssentialsListPaymentMethodsRequest, final ApiCallback<List<PaymentMethod>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPaymentMethodsValidateBeforeCall(userId, cardmemberName, page, perPage, showDisabled, paymentsEssentialsListPaymentMethodsRequest, _callback);
        Type localVarReturnType = new TypeToken<List<PaymentMethod>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPaymentMethodsRequestBuilder {
        private final Double userId;
        private String type;
        private String cardmemberName;
        private Double page;
        private Double perPage;
        private Boolean showDisabled;

        private ListPaymentMethodsRequestBuilder(double userId) {
            this.userId = userId;
        }

        /**
         * Set type
         * @param type The type of payment method.  Option descriptions:  * &#x60;applepay&#x60; - The payment method is Apple Pay.  * &#x60;bank_account&#x60; - The payment method is a bank account.  * &#x60;card&#x60; - The payment method is a credit or debit card.  * &#x60;googlepay&#x60; - The payment method is Google Pay.  * &#x60;paypal&#x60; - The payment method is a PayPal account.  (optional)
         * @return ListPaymentMethodsRequestBuilder
         */
        public ListPaymentMethodsRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set cardmemberName
         * @param cardmemberName The name of the card member. (optional)
         * @return ListPaymentMethodsRequestBuilder
         */
        public ListPaymentMethodsRequestBuilder cardmemberName(String cardmemberName) {
            this.cardmemberName = cardmemberName;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return ListPaymentMethodsRequestBuilder
         */
        public ListPaymentMethodsRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return ListPaymentMethodsRequestBuilder
         */
        public ListPaymentMethodsRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set showDisabled
         * @param showDisabled Whether to return disabled payment methods. (optional)
         * @return ListPaymentMethodsRequestBuilder
         */
        public ListPaymentMethodsRequestBuilder showDisabled(Boolean showDisabled) {
            this.showDisabled = showDisabled;
            return this;
        }
        
        /**
         * Build call for listPaymentMethods
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of payments service payment methods was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PaymentsEssentialsListPaymentMethodsRequest paymentsEssentialsListPaymentMethodsRequest = buildBodyParams();
            return listPaymentMethodsCall(userId, cardmemberName, page, perPage, showDisabled, paymentsEssentialsListPaymentMethodsRequest, _callback);
        }

        private PaymentsEssentialsListPaymentMethodsRequest buildBodyParams() {
            PaymentsEssentialsListPaymentMethodsRequest paymentsEssentialsListPaymentMethodsRequest = new PaymentsEssentialsListPaymentMethodsRequest();
            if (this.type != null)
            paymentsEssentialsListPaymentMethodsRequest.type(PaymentsEssentialsListPaymentMethodsRequest.TypeEnum.fromValue(this.type));
            return paymentsEssentialsListPaymentMethodsRequest;
        }

        /**
         * Execute listPaymentMethods request
         * @return List&lt;PaymentMethod&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of payments service payment methods was returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<PaymentMethod> execute() throws ApiException {
            PaymentsEssentialsListPaymentMethodsRequest paymentsEssentialsListPaymentMethodsRequest = buildBodyParams();
            ApiResponse<List<PaymentMethod>> localVarResp = listPaymentMethodsWithHttpInfo(userId, cardmemberName, page, perPage, showDisabled, paymentsEssentialsListPaymentMethodsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPaymentMethods request with HTTP info returned
         * @return ApiResponse&lt;List&lt;PaymentMethod&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of payments service payment methods was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PaymentMethod>> executeWithHttpInfo() throws ApiException {
            PaymentsEssentialsListPaymentMethodsRequest paymentsEssentialsListPaymentMethodsRequest = buildBodyParams();
            return listPaymentMethodsWithHttpInfo(userId, cardmemberName, page, perPage, showDisabled, paymentsEssentialsListPaymentMethodsRequest);
        }

        /**
         * Execute listPaymentMethods request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of payments service payment methods was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PaymentMethod>> _callback) throws ApiException {
            PaymentsEssentialsListPaymentMethodsRequest paymentsEssentialsListPaymentMethodsRequest = buildBodyParams();
            return listPaymentMethodsAsync(userId, cardmemberName, page, perPage, showDisabled, paymentsEssentialsListPaymentMethodsRequest, _callback);
        }
    }

    /**
     * Get a list of all payments service payment methods
     * This method returns a list of all Vimeo payments service payment methods that are available to the authenticated user.
     * @param userId The ID of the user. (required)
     * @return ListPaymentMethodsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of payments service payment methods was returned. </td><td>  -  </td></tr>
     </table>
     */
    public ListPaymentMethodsRequestBuilder listPaymentMethods(double userId) throws IllegalArgumentException {
        
        return new ListPaymentMethodsRequestBuilder(userId);
    }
}
