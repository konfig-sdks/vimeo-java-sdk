/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Auth;
import com.konfigthis.client.model.ClientAuthRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AuthenticationExtrasAuthenticateApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthenticationExtrasAuthenticateApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationExtrasAuthenticateApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call authCall(ClientAuthRequest clientAuthRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = clientAuthRequest;

        // create path and map variables
        String localVarPath = "/oauth/authorize/client";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.auth+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.auth+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authValidateBeforeCall(ClientAuthRequest clientAuthRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientAuthRequest' is set
        if (clientAuthRequest == null) {
            throw new ApiException("Missing the required parameter 'clientAuthRequest' when calling auth(Async)");
        }

        return authCall(clientAuthRequest, _callback);

    }


    private ApiResponse<Auth> authWithHttpInfo(ClientAuthRequest clientAuthRequest) throws ApiException {
        okhttp3.Call localVarCall = authValidateBeforeCall(clientAuthRequest, null);
        Type localVarReturnType = new TypeToken<Auth>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call authAsync(ClientAuthRequest clientAuthRequest, final ApiCallback<Auth> _callback) throws ApiException {

        okhttp3.Call localVarCall = authValidateBeforeCall(clientAuthRequest, _callback);
        Type localVarReturnType = new TypeToken<Auth>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AuthRequestBuilder {
        private final String grantType;
        private final String scope;

        private AuthRequestBuilder(String grantType, String scope) {
            this.grantType = grantType;
            this.scope = scope;
        }

        /**
         * Build call for auth
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The authorization was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ClientAuthRequest clientAuthRequest = buildBodyParams();
            return authCall(clientAuthRequest, _callback);
        }

        private ClientAuthRequest buildBodyParams() {
            ClientAuthRequest clientAuthRequest = new ClientAuthRequest();
            if (this.grantType != null)
            clientAuthRequest.grantType(ClientAuthRequest.GrantTypeEnum.fromValue(this.grantType));
            clientAuthRequest.scope(this.scope);
            return clientAuthRequest;
        }

        /**
         * Execute auth request
         * @return Auth
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The authorization was successful. </td><td>  -  </td></tr>
         </table>
         */
        public Auth execute() throws ApiException {
            ClientAuthRequest clientAuthRequest = buildBodyParams();
            ApiResponse<Auth> localVarResp = authWithHttpInfo(clientAuthRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute auth request with HTTP info returned
         * @return ApiResponse&lt;Auth&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The authorization was successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Auth> executeWithHttpInfo() throws ApiException {
            ClientAuthRequest clientAuthRequest = buildBodyParams();
            return authWithHttpInfo(clientAuthRequest);
        }

        /**
         * Execute auth request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The authorization was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Auth> _callback) throws ApiException {
            ClientAuthRequest clientAuthRequest = buildBodyParams();
            return authAsync(clientAuthRequest, _callback);
        }
    }

    /**
     * Authorize a client with OAuth
     * This method uses the OAuth protocol to authorize a client. For details on OAuth client authorization, see our [Working with Authentication](/api/authentication) guide or the [OAuth spec](https://tools.ietf.org/html/draft-ietf-oauth-v2-31#section-4.4).
     * @param clientAuthRequest  (required)
     * @return AuthRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The authorization was successful. </td><td>  -  </td></tr>
     </table>
     */
    public AuthRequestBuilder auth(String grantType, String scope) throws IllegalArgumentException {
        if (grantType == null) throw new IllegalArgumentException("\"grantType\" is required but got null");
            

        if (scope == null) throw new IllegalArgumentException("\"scope\" is required but got null");
            

        return new AuthRequestBuilder(grantType, scope);
    }
}
