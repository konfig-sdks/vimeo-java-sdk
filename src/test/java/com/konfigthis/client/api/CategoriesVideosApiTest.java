/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CategoriesVideosSetVideoCategoriesRequest;
import com.konfigthis.client.model.Category;
import com.konfigthis.client.model.Video;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CategoriesVideosApi
 */
@Disabled
public class CategoriesVideosApiTest {

    private static CategoriesVideosApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CategoriesVideosApi(apiClient);
    }

    /**
     * Get all the categories to which a video belongs
     *
     * This method returns every category that contains the specified video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllVideoCategoriesTest() throws ApiException {
        Double videoId = null;
        Double page = null;
        Double perPage = null;
        List<Category> response = api.getAllVideoCategories(videoId)
                .page(page)
                .perPage(perPage)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a specific video in a category
     *
     * This method returns a single video in the specified category. You can use this method to determine whether the video belongs to the category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVideoInCategoryTest() throws ApiException {
        String category = null;
        Double videoId = null;
        Video response = api.getVideoInCategory(category, videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the videos in a category
     *
     * This method returns every video that belongs to the specified category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listVideosInCategoryTest() throws ApiException {
        String category = null;
        String direction = null;
        String filter = null;
        Boolean filterEmbeddable = null;
        Double page = null;
        Double perPage = null;
        String query = null;
        String sort = null;
        List<Video> response = api.listVideosInCategory(category)
                .direction(direction)
                .filter(filter)
                .filterEmbeddable(filterEmbeddable)
                .page(page)
                .perPage(perPage)
                .query(query)
                .sort(sort)
                .execute();
        // TODO: test validations
    }

    /**
     * Suggest categories for a video
     *
     * This method sets multiple categories and subcategories for the specified video. Include the categories as a JSON block in the body of the request using the **category** field, like this: &#x60;[{ \&quot;category\&quot;: \&quot;Tech\&quot; }, { \&quot;category\&quot;: \&quot;Music\&quot; }]&#x60;. The authenticated user must have edit access to the video. For more information on batch requests like this one, see [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setVideoCategoriesTest() throws ApiException {
        List<String> category = null;
        Double videoId = null;
        Category response = api.setVideoCategories(category, videoId)
                .execute();
        // TODO: test validations
    }

}
