/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EmailCaptureFormEmailListsInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmailCaptureFormEmailListsInner {
  public static final String SERIALIZED_NAME_FORM_ID = "form_id";
  @SerializedName(SERIALIZED_NAME_FORM_ID)
  private Double formId;

  public static final String SERIALIZED_NAME_LIST_ID = "list_id";
  @SerializedName(SERIALIZED_NAME_LIST_ID)
  private String listId;

  public static final String SERIALIZED_NAME_LIST_NAME = "list_name";
  @SerializedName(SERIALIZED_NAME_LIST_NAME)
  private String listName;

  /**
   * A third-party email service provider.  Option descriptions:  * &#x60;1&#x60; - The provider is Mailchimp.  * &#x60;2&#x60; - The provider is Campaign Monitor.  * &#x60;3&#x60; - The provider is Constant Contact.  * &#x60;4&#x60; - The provider is Infusionsoft.  * &#x60;5&#x60; - The provider is HubSpot.  * &#x60;6&#x60; - The provider is Constant Contact V3.  * &#x60;7&#x60; - The provider is Marketo. 
   */
  @JsonAdapter(ProviderIdEnum.Adapter.class)
 public enum ProviderIdEnum {
    _1("1"),
    
    _2("2"),
    
    _3("3"),
    
    _4("4"),
    
    _5("5"),
    
    _6("6"),
    
    _7("7");

    private String value;

    ProviderIdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProviderIdEnum fromValue(String value) {
      for (ProviderIdEnum b : ProviderIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProviderIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProviderIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProviderIdEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProviderIdEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PROVIDER_ID = "provider_id";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ID)
  private ProviderIdEnum providerId;

  public EmailCaptureFormEmailListsInner() {
  }

  public EmailCaptureFormEmailListsInner formId(Double formId) {
    
    
    
    
    this.formId = formId;
    return this;
  }

  public EmailCaptureFormEmailListsInner formId(Integer formId) {
    
    
    
    
    this.formId = formId.doubleValue();
    return this;
  }

   /**
   * The ID of the email capture form.
   * @return formId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The ID of the email capture form.")

  public Double getFormId() {
    return formId;
  }


  public void setFormId(Double formId) {
    
    
    
    this.formId = formId;
  }


  public EmailCaptureFormEmailListsInner listId(String listId) {
    
    
    
    
    this.listId = listId;
    return this;
  }

   /**
   * The ID of the mailing list in the third-party email service provider&#39;s system.
   * @return listId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The ID of the mailing list in the third-party email service provider's system.")

  public String getListId() {
    return listId;
  }


  public void setListId(String listId) {
    
    
    
    this.listId = listId;
  }


  public EmailCaptureFormEmailListsInner listName(String listName) {
    
    
    
    
    this.listName = listName;
    return this;
  }

   /**
   * The name of the mailing list in the third-party email service provider&#39;s system.
   * @return listName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the mailing list in the third-party email service provider's system.")

  public String getListName() {
    return listName;
  }


  public void setListName(String listName) {
    
    
    
    this.listName = listName;
  }


  public EmailCaptureFormEmailListsInner providerId(ProviderIdEnum providerId) {
    
    
    
    
    this.providerId = providerId;
    return this;
  }

   /**
   * A third-party email service provider.  Option descriptions:  * &#x60;1&#x60; - The provider is Mailchimp.  * &#x60;2&#x60; - The provider is Campaign Monitor.  * &#x60;3&#x60; - The provider is Constant Contact.  * &#x60;4&#x60; - The provider is Infusionsoft.  * &#x60;5&#x60; - The provider is HubSpot.  * &#x60;6&#x60; - The provider is Constant Contact V3.  * &#x60;7&#x60; - The provider is Marketo. 
   * @return providerId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "_1", required = true, value = "A third-party email service provider.  Option descriptions:  * `1` - The provider is Mailchimp.  * `2` - The provider is Campaign Monitor.  * `3` - The provider is Constant Contact.  * `4` - The provider is Infusionsoft.  * `5` - The provider is HubSpot.  * `6` - The provider is Constant Contact V3.  * `7` - The provider is Marketo. ")

  public ProviderIdEnum getProviderId() {
    return providerId;
  }


  public void setProviderId(ProviderIdEnum providerId) {
    
    
    
    this.providerId = providerId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmailCaptureFormEmailListsInner instance itself
   */
  public EmailCaptureFormEmailListsInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailCaptureFormEmailListsInner emailCaptureFormEmailListsInner = (EmailCaptureFormEmailListsInner) o;
    return Objects.equals(this.formId, emailCaptureFormEmailListsInner.formId) &&
        Objects.equals(this.listId, emailCaptureFormEmailListsInner.listId) &&
        Objects.equals(this.listName, emailCaptureFormEmailListsInner.listName) &&
        Objects.equals(this.providerId, emailCaptureFormEmailListsInner.providerId)&&
        Objects.equals(this.additionalProperties, emailCaptureFormEmailListsInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(formId, listId, listName, providerId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailCaptureFormEmailListsInner {\n");
    sb.append("    formId: ").append(toIndentedString(formId)).append("\n");
    sb.append("    listId: ").append(toIndentedString(listId)).append("\n");
    sb.append("    listName: ").append(toIndentedString(listName)).append("\n");
    sb.append("    providerId: ").append(toIndentedString(providerId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("form_id");
    openapiFields.add("list_id");
    openapiFields.add("list_name");
    openapiFields.add("provider_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("form_id");
    openapiRequiredFields.add("list_id");
    openapiRequiredFields.add("provider_id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmailCaptureFormEmailListsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmailCaptureFormEmailListsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmailCaptureFormEmailListsInner is not found in the empty JSON string", EmailCaptureFormEmailListsInner.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EmailCaptureFormEmailListsInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("list_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `list_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("list_id").toString()));
      }
      if ((jsonObj.get("list_name") != null && !jsonObj.get("list_name").isJsonNull()) && !jsonObj.get("list_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `list_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("list_name").toString()));
      }
      if (!jsonObj.get("provider_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmailCaptureFormEmailListsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmailCaptureFormEmailListsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmailCaptureFormEmailListsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmailCaptureFormEmailListsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<EmailCaptureFormEmailListsInner>() {
           @Override
           public void write(JsonWriter out, EmailCaptureFormEmailListsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmailCaptureFormEmailListsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmailCaptureFormEmailListsInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmailCaptureFormEmailListsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmailCaptureFormEmailListsInner
  * @throws IOException if the JSON string is invalid with respect to EmailCaptureFormEmailListsInner
  */
  public static EmailCaptureFormEmailListsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmailCaptureFormEmailListsInner.class);
  }

 /**
  * Convert an instance of EmailCaptureFormEmailListsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

