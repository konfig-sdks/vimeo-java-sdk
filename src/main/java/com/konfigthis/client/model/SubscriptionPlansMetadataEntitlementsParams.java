/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The list of entitlement parameters corresponding to the tier.
 */
@ApiModel(description = "The list of entitlement parameters corresponding to the tier.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SubscriptionPlansMetadataEntitlementsParams {
  public static final String SERIALIZED_NAME_TEAM_SEATS = "team_seats";
  @SerializedName(SERIALIZED_NAME_TEAM_SEATS)
  private String teamSeats;

  public static final String SERIALIZED_NAME_VIDEO_STORAGE_PERIODIC_QUOTA = "video_storage_periodic_quota";
  @SerializedName(SERIALIZED_NAME_VIDEO_STORAGE_PERIODIC_QUOTA)
  private String videoStoragePeriodicQuota;

  public static final String SERIALIZED_NAME_VIDEO_STORAGE_QUOTA_CAP = "video_storage_quota_cap";
  @SerializedName(SERIALIZED_NAME_VIDEO_STORAGE_QUOTA_CAP)
  private String videoStorageQuotaCap;

  /**
   * The video storage quota period.  Option descriptions:  * &#x60;lifetime&#x60; - The product has a lifetime video storage quota period.  * &#x60;month&#x60; - The product has a monthly video storage quota period.  * &#x60;week&#x60; - The product has a weekly video storage quota period.  * &#x60;year&#x60; - The product has a yearly video storage quota period. 
   */
  @JsonAdapter(VideoStorageQuotaPeriodEnum.Adapter.class)
 public enum VideoStorageQuotaPeriodEnum {
    LIFETIME("lifetime"),
    
    MONTH("month"),
    
    WEEK("week"),
    
    YEAR("year");

    private String value;

    VideoStorageQuotaPeriodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VideoStorageQuotaPeriodEnum fromValue(String value) {
      for (VideoStorageQuotaPeriodEnum b : VideoStorageQuotaPeriodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VideoStorageQuotaPeriodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VideoStorageQuotaPeriodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VideoStorageQuotaPeriodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VideoStorageQuotaPeriodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VIDEO_STORAGE_QUOTA_PERIOD = "video_storage_quota_period";
  @SerializedName(SERIALIZED_NAME_VIDEO_STORAGE_QUOTA_PERIOD)
  private VideoStorageQuotaPeriodEnum videoStorageQuotaPeriod;

  /**
   * The unit of the video storage for the user&#39;s periodic quota.  Option descriptions:  * &#x60;video_count&#x60; - The product has video storage based on video count.  * &#x60;video_size&#x60; - The product has video storage based on video size. 
   */
  @JsonAdapter(VideoStorageQuotaUnitEnum.Adapter.class)
 public enum VideoStorageQuotaUnitEnum {
    COUNT("video_count"),
    
    SIZE("video_size");

    private String value;

    VideoStorageQuotaUnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VideoStorageQuotaUnitEnum fromValue(String value) {
      for (VideoStorageQuotaUnitEnum b : VideoStorageQuotaUnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VideoStorageQuotaUnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VideoStorageQuotaUnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VideoStorageQuotaUnitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VideoStorageQuotaUnitEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VIDEO_STORAGE_QUOTA_UNIT = "video_storage_quota_unit";
  @SerializedName(SERIALIZED_NAME_VIDEO_STORAGE_QUOTA_UNIT)
  private VideoStorageQuotaUnitEnum videoStorageQuotaUnit;

  public SubscriptionPlansMetadataEntitlementsParams() {
  }

  public SubscriptionPlansMetadataEntitlementsParams teamSeats(String teamSeats) {
    
    
    
    
    this.teamSeats = teamSeats;
    return this;
  }

   /**
   * The number of team seats included with the tier.
   * @return teamSeats
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The number of team seats included with the tier.")

  public String getTeamSeats() {
    return teamSeats;
  }


  public void setTeamSeats(String teamSeats) {
    
    
    
    this.teamSeats = teamSeats;
  }


  public SubscriptionPlansMetadataEntitlementsParams videoStoragePeriodicQuota(String videoStoragePeriodicQuota) {
    
    
    
    
    this.videoStoragePeriodicQuota = videoStoragePeriodicQuota;
    return this;
  }

   /**
   * The amount of video storage for the user&#39;s periodic quota.
   * @return videoStoragePeriodicQuota
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The amount of video storage for the user's periodic quota.")

  public String getVideoStoragePeriodicQuota() {
    return videoStoragePeriodicQuota;
  }


  public void setVideoStoragePeriodicQuota(String videoStoragePeriodicQuota) {
    
    
    
    this.videoStoragePeriodicQuota = videoStoragePeriodicQuota;
  }


  public SubscriptionPlansMetadataEntitlementsParams videoStorageQuotaCap(String videoStorageQuotaCap) {
    
    
    
    
    this.videoStorageQuotaCap = videoStorageQuotaCap;
    return this;
  }

   /**
   * The video storage total lifetime cap.
   * @return videoStorageQuotaCap
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The video storage total lifetime cap.")

  public String getVideoStorageQuotaCap() {
    return videoStorageQuotaCap;
  }


  public void setVideoStorageQuotaCap(String videoStorageQuotaCap) {
    
    
    
    this.videoStorageQuotaCap = videoStorageQuotaCap;
  }


  public SubscriptionPlansMetadataEntitlementsParams videoStorageQuotaPeriod(VideoStorageQuotaPeriodEnum videoStorageQuotaPeriod) {
    
    
    
    
    this.videoStorageQuotaPeriod = videoStorageQuotaPeriod;
    return this;
  }

   /**
   * The video storage quota period.  Option descriptions:  * &#x60;lifetime&#x60; - The product has a lifetime video storage quota period.  * &#x60;month&#x60; - The product has a monthly video storage quota period.  * &#x60;week&#x60; - The product has a weekly video storage quota period.  * &#x60;year&#x60; - The product has a yearly video storage quota period. 
   * @return videoStorageQuotaPeriod
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "LIFETIME", required = true, value = "The video storage quota period.  Option descriptions:  * `lifetime` - The product has a lifetime video storage quota period.  * `month` - The product has a monthly video storage quota period.  * `week` - The product has a weekly video storage quota period.  * `year` - The product has a yearly video storage quota period. ")

  public VideoStorageQuotaPeriodEnum getVideoStorageQuotaPeriod() {
    return videoStorageQuotaPeriod;
  }


  public void setVideoStorageQuotaPeriod(VideoStorageQuotaPeriodEnum videoStorageQuotaPeriod) {
    
    
    
    this.videoStorageQuotaPeriod = videoStorageQuotaPeriod;
  }


  public SubscriptionPlansMetadataEntitlementsParams videoStorageQuotaUnit(VideoStorageQuotaUnitEnum videoStorageQuotaUnit) {
    
    
    
    
    this.videoStorageQuotaUnit = videoStorageQuotaUnit;
    return this;
  }

   /**
   * The unit of the video storage for the user&#39;s periodic quota.  Option descriptions:  * &#x60;video_count&#x60; - The product has video storage based on video count.  * &#x60;video_size&#x60; - The product has video storage based on video size. 
   * @return videoStorageQuotaUnit
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "VIDEO_COUNT", required = true, value = "The unit of the video storage for the user's periodic quota.  Option descriptions:  * `video_count` - The product has video storage based on video count.  * `video_size` - The product has video storage based on video size. ")

  public VideoStorageQuotaUnitEnum getVideoStorageQuotaUnit() {
    return videoStorageQuotaUnit;
  }


  public void setVideoStorageQuotaUnit(VideoStorageQuotaUnitEnum videoStorageQuotaUnit) {
    
    
    
    this.videoStorageQuotaUnit = videoStorageQuotaUnit;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SubscriptionPlansMetadataEntitlementsParams instance itself
   */
  public SubscriptionPlansMetadataEntitlementsParams putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionPlansMetadataEntitlementsParams subscriptionPlansMetadataEntitlementsParams = (SubscriptionPlansMetadataEntitlementsParams) o;
    return Objects.equals(this.teamSeats, subscriptionPlansMetadataEntitlementsParams.teamSeats) &&
        Objects.equals(this.videoStoragePeriodicQuota, subscriptionPlansMetadataEntitlementsParams.videoStoragePeriodicQuota) &&
        Objects.equals(this.videoStorageQuotaCap, subscriptionPlansMetadataEntitlementsParams.videoStorageQuotaCap) &&
        Objects.equals(this.videoStorageQuotaPeriod, subscriptionPlansMetadataEntitlementsParams.videoStorageQuotaPeriod) &&
        Objects.equals(this.videoStorageQuotaUnit, subscriptionPlansMetadataEntitlementsParams.videoStorageQuotaUnit)&&
        Objects.equals(this.additionalProperties, subscriptionPlansMetadataEntitlementsParams.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(teamSeats, videoStoragePeriodicQuota, videoStorageQuotaCap, videoStorageQuotaPeriod, videoStorageQuotaUnit, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionPlansMetadataEntitlementsParams {\n");
    sb.append("    teamSeats: ").append(toIndentedString(teamSeats)).append("\n");
    sb.append("    videoStoragePeriodicQuota: ").append(toIndentedString(videoStoragePeriodicQuota)).append("\n");
    sb.append("    videoStorageQuotaCap: ").append(toIndentedString(videoStorageQuotaCap)).append("\n");
    sb.append("    videoStorageQuotaPeriod: ").append(toIndentedString(videoStorageQuotaPeriod)).append("\n");
    sb.append("    videoStorageQuotaUnit: ").append(toIndentedString(videoStorageQuotaUnit)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("team_seats");
    openapiFields.add("video_storage_periodic_quota");
    openapiFields.add("video_storage_quota_cap");
    openapiFields.add("video_storage_quota_period");
    openapiFields.add("video_storage_quota_unit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("team_seats");
    openapiRequiredFields.add("video_storage_periodic_quota");
    openapiRequiredFields.add("video_storage_quota_cap");
    openapiRequiredFields.add("video_storage_quota_period");
    openapiRequiredFields.add("video_storage_quota_unit");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SubscriptionPlansMetadataEntitlementsParams
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SubscriptionPlansMetadataEntitlementsParams.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubscriptionPlansMetadataEntitlementsParams is not found in the empty JSON string", SubscriptionPlansMetadataEntitlementsParams.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SubscriptionPlansMetadataEntitlementsParams.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("team_seats").isJsonNull() && !jsonObj.get("team_seats").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team_seats` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team_seats").toString()));
      }
      if (!jsonObj.get("video_storage_periodic_quota").isJsonNull() && !jsonObj.get("video_storage_periodic_quota").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `video_storage_periodic_quota` to be a primitive type in the JSON string but got `%s`", jsonObj.get("video_storage_periodic_quota").toString()));
      }
      if (!jsonObj.get("video_storage_quota_cap").isJsonNull() && !jsonObj.get("video_storage_quota_cap").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `video_storage_quota_cap` to be a primitive type in the JSON string but got `%s`", jsonObj.get("video_storage_quota_cap").toString()));
      }
      if (!jsonObj.get("video_storage_quota_period").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `video_storage_quota_period` to be a primitive type in the JSON string but got `%s`", jsonObj.get("video_storage_quota_period").toString()));
      }
      if (!jsonObj.get("video_storage_quota_unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `video_storage_quota_unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("video_storage_quota_unit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubscriptionPlansMetadataEntitlementsParams.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubscriptionPlansMetadataEntitlementsParams' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubscriptionPlansMetadataEntitlementsParams> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubscriptionPlansMetadataEntitlementsParams.class));

       return (TypeAdapter<T>) new TypeAdapter<SubscriptionPlansMetadataEntitlementsParams>() {
           @Override
           public void write(JsonWriter out, SubscriptionPlansMetadataEntitlementsParams value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SubscriptionPlansMetadataEntitlementsParams read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SubscriptionPlansMetadataEntitlementsParams instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SubscriptionPlansMetadataEntitlementsParams given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SubscriptionPlansMetadataEntitlementsParams
  * @throws IOException if the JSON string is invalid with respect to SubscriptionPlansMetadataEntitlementsParams
  */
  public static SubscriptionPlansMetadataEntitlementsParams fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubscriptionPlansMetadataEntitlementsParams.class);
  }

 /**
  * Convert an instance of SubscriptionPlansMetadataEntitlementsParams to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

