/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EditVideoRequestEmbedButtons;
import com.konfigthis.client.model.EditVideoRequestEmbedCardsInner;
import com.konfigthis.client.model.EditVideoRequestEmbedLogos;
import com.konfigthis.client.model.EmbedPresetsEssentialsCreatePresetRequestEmbedPlayButton;
import com.konfigthis.client.model.EmbedPresetsEssentialsCreatePresetRequestEmbedTitle;
import com.konfigthis.client.model.VideosUploadsBeginVideoUploadProcessRequestEmbedEndScreen;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EditVideoRequestEmbed
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EditVideoRequestEmbed {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private EmbedPresetsEssentialsCreatePresetRequestEmbedTitle title;

  public static final String SERIALIZED_NAME_AIRPLAY = "airplay";
  @SerializedName(SERIALIZED_NAME_AIRPLAY)
  private Boolean airplay;

  public static final String SERIALIZED_NAME_AUDIO_TRACKS = "audio_tracks";
  @SerializedName(SERIALIZED_NAME_AUDIO_TRACKS)
  private Boolean audioTracks;

  public static final String SERIALIZED_NAME_BUTTONS = "buttons";
  @SerializedName(SERIALIZED_NAME_BUTTONS)
  private EditVideoRequestEmbedButtons buttons;

  public static final String SERIALIZED_NAME_CARDS = "cards";
  @SerializedName(SERIALIZED_NAME_CARDS)
  private List<EditVideoRequestEmbedCardsInner> cards = null;

  public static final String SERIALIZED_NAME_CHAPTERS = "chapters";
  @SerializedName(SERIALIZED_NAME_CHAPTERS)
  private Boolean chapters;

  public static final String SERIALIZED_NAME_CHROMECAST = "chromecast";
  @SerializedName(SERIALIZED_NAME_CHROMECAST)
  private Boolean chromecast;

  public static final String SERIALIZED_NAME_CLOSED_CAPTIONS = "closed_captions";
  @SerializedName(SERIALIZED_NAME_CLOSED_CAPTIONS)
  private Boolean closedCaptions;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_END_SCREEN = "end_screen";
  @SerializedName(SERIALIZED_NAME_END_SCREEN)
  private VideosUploadsBeginVideoUploadProcessRequestEmbedEndScreen endScreen;

  public static final String SERIALIZED_NAME_LOGOS = "logos";
  @SerializedName(SERIALIZED_NAME_LOGOS)
  private EditVideoRequestEmbedLogos logos;

  public static final String SERIALIZED_NAME_PLAY_BUTTON = "play_button";
  @SerializedName(SERIALIZED_NAME_PLAY_BUTTON)
  private EmbedPresetsEssentialsCreatePresetRequestEmbedPlayButton playButton;

  public static final String SERIALIZED_NAME_PLAYBAR = "playbar";
  @SerializedName(SERIALIZED_NAME_PLAYBAR)
  private Boolean playbar;

  public static final String SERIALIZED_NAME_QUALITY_SELECTOR = "quality_selector";
  @SerializedName(SERIALIZED_NAME_QUALITY_SELECTOR)
  private Boolean qualitySelector;

  public static final String SERIALIZED_NAME_TRANSCRIPT = "transcript";
  @SerializedName(SERIALIZED_NAME_TRANSCRIPT)
  private Boolean transcript;

  public static final String SERIALIZED_NAME_VOLUME = "volume";
  @SerializedName(SERIALIZED_NAME_VOLUME)
  private Boolean volume;

  public EditVideoRequestEmbed() {
  }

  public EditVideoRequestEmbed title(EmbedPresetsEssentialsCreatePresetRequestEmbedTitle title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmbedPresetsEssentialsCreatePresetRequestEmbedTitle getTitle() {
    return title;
  }


  public void setTitle(EmbedPresetsEssentialsCreatePresetRequestEmbedTitle title) {
    
    
    
    this.title = title;
  }


  public EditVideoRequestEmbed airplay(Boolean airplay) {
    
    
    
    
    this.airplay = airplay;
    return this;
  }

   /**
   * Whether AirPlay is enabled in the embeddable player.
   * @return airplay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether AirPlay is enabled in the embeddable player.")

  public Boolean getAirplay() {
    return airplay;
  }


  public void setAirplay(Boolean airplay) {
    
    
    
    this.airplay = airplay;
  }


  public EditVideoRequestEmbed audioTracks(Boolean audioTracks) {
    
    
    
    
    this.audioTracks = audioTracks;
    return this;
  }

   /**
   * Whether multiple audio tracks can appear in the embeddable player.
   * @return audioTracks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether multiple audio tracks can appear in the embeddable player.")

  public Boolean getAudioTracks() {
    return audioTracks;
  }


  public void setAudioTracks(Boolean audioTracks) {
    
    
    
    this.audioTracks = audioTracks;
  }


  public EditVideoRequestEmbed buttons(EditVideoRequestEmbedButtons buttons) {
    
    
    
    
    this.buttons = buttons;
    return this;
  }

   /**
   * Get buttons
   * @return buttons
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EditVideoRequestEmbedButtons getButtons() {
    return buttons;
  }


  public void setButtons(EditVideoRequestEmbedButtons buttons) {
    
    
    
    this.buttons = buttons;
  }


  public EditVideoRequestEmbed cards(List<EditVideoRequestEmbedCardsInner> cards) {
    
    
    
    
    this.cards = cards;
    return this;
  }

  public EditVideoRequestEmbed addCardsItem(EditVideoRequestEmbedCardsInner cardsItem) {
    if (this.cards == null) {
      this.cards = new ArrayList<>();
    }
    this.cards.add(cardsItem);
    return this;
  }

   /**
   * A collection of cards associated with the selected video.
   * @return cards
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A collection of cards associated with the selected video.")

  public List<EditVideoRequestEmbedCardsInner> getCards() {
    return cards;
  }


  public void setCards(List<EditVideoRequestEmbedCardsInner> cards) {
    
    
    
    this.cards = cards;
  }


  public EditVideoRequestEmbed chapters(Boolean chapters) {
    
    
    
    
    this.chapters = chapters;
    return this;
  }

   /**
   * Whether chapters are enabled in the embeddable player.
   * @return chapters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether chapters are enabled in the embeddable player.")

  public Boolean getChapters() {
    return chapters;
  }


  public void setChapters(Boolean chapters) {
    
    
    
    this.chapters = chapters;
  }


  public EditVideoRequestEmbed chromecast(Boolean chromecast) {
    
    
    
    
    this.chromecast = chromecast;
    return this;
  }

   /**
   * Whether the Chromecast button appears in the embeddable player.
   * @return chromecast
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the Chromecast button appears in the embeddable player.")

  public Boolean getChromecast() {
    return chromecast;
  }


  public void setChromecast(Boolean chromecast) {
    
    
    
    this.chromecast = chromecast;
  }


  public EditVideoRequestEmbed closedCaptions(Boolean closedCaptions) {
    
    
    
    
    this.closedCaptions = closedCaptions;
    return this;
  }

   /**
   * Whether closed captions are enabled in the embeddable player.
   * @return closedCaptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether closed captions are enabled in the embeddable player.")

  public Boolean getClosedCaptions() {
    return closedCaptions;
  }


  public void setClosedCaptions(Boolean closedCaptions) {
    
    
    
    this.closedCaptions = closedCaptions;
  }


  public EditVideoRequestEmbed color(String color) {
    
    
    
    
    this.color = color;
    return this;
  }

   /**
   * The main color of the embeddable player.
   * @return color
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "#1ab7ea", value = "The main color of the embeddable player.")

  public String getColor() {
    return color;
  }


  public void setColor(String color) {
    
    
    
    this.color = color;
  }


  public EditVideoRequestEmbed endScreen(VideosUploadsBeginVideoUploadProcessRequestEmbedEndScreen endScreen) {
    
    
    
    
    this.endScreen = endScreen;
    return this;
  }

   /**
   * Get endScreen
   * @return endScreen
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public VideosUploadsBeginVideoUploadProcessRequestEmbedEndScreen getEndScreen() {
    return endScreen;
  }


  public void setEndScreen(VideosUploadsBeginVideoUploadProcessRequestEmbedEndScreen endScreen) {
    
    
    
    this.endScreen = endScreen;
  }


  public EditVideoRequestEmbed logos(EditVideoRequestEmbedLogos logos) {
    
    
    
    
    this.logos = logos;
    return this;
  }

   /**
   * Get logos
   * @return logos
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EditVideoRequestEmbedLogos getLogos() {
    return logos;
  }


  public void setLogos(EditVideoRequestEmbedLogos logos) {
    
    
    
    this.logos = logos;
  }


  public EditVideoRequestEmbed playButton(EmbedPresetsEssentialsCreatePresetRequestEmbedPlayButton playButton) {
    
    
    
    
    this.playButton = playButton;
    return this;
  }

   /**
   * Get playButton
   * @return playButton
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmbedPresetsEssentialsCreatePresetRequestEmbedPlayButton getPlayButton() {
    return playButton;
  }


  public void setPlayButton(EmbedPresetsEssentialsCreatePresetRequestEmbedPlayButton playButton) {
    
    
    
    this.playButton = playButton;
  }


  public EditVideoRequestEmbed playbar(Boolean playbar) {
    
    
    
    
    this.playbar = playbar;
    return this;
  }

   /**
   * Whether to show the playbar on the embeddable player.
   * @return playbar
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether to show the playbar on the embeddable player.")

  public Boolean getPlaybar() {
    return playbar;
  }


  public void setPlaybar(Boolean playbar) {
    
    
    
    this.playbar = playbar;
  }


  public EditVideoRequestEmbed qualitySelector(Boolean qualitySelector) {
    
    
    
    
    this.qualitySelector = qualitySelector;
    return this;
  }

   /**
   * Whether to show the quality selector in the embeddable player.
   * @return qualitySelector
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether to show the quality selector in the embeddable player.")

  public Boolean getQualitySelector() {
    return qualitySelector;
  }


  public void setQualitySelector(Boolean qualitySelector) {
    
    
    
    this.qualitySelector = qualitySelector;
  }


  public EditVideoRequestEmbed transcript(Boolean transcript) {
    
    
    
    
    this.transcript = transcript;
    return this;
  }

   /**
   * Whether the transcript controls appear in the embeddable player.
   * @return transcript
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the transcript controls appear in the embeddable player.")

  public Boolean getTranscript() {
    return transcript;
  }


  public void setTranscript(Boolean transcript) {
    
    
    
    this.transcript = transcript;
  }


  public EditVideoRequestEmbed volume(Boolean volume) {
    
    
    
    
    this.volume = volume;
    return this;
  }

   /**
   * Whether to show the volume selector on the embeddable player.
   * @return volume
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether to show the volume selector on the embeddable player.")

  public Boolean getVolume() {
    return volume;
  }


  public void setVolume(Boolean volume) {
    
    
    
    this.volume = volume;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EditVideoRequestEmbed instance itself
   */
  public EditVideoRequestEmbed putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EditVideoRequestEmbed editVideoRequestEmbed = (EditVideoRequestEmbed) o;
    return Objects.equals(this.title, editVideoRequestEmbed.title) &&
        Objects.equals(this.airplay, editVideoRequestEmbed.airplay) &&
        Objects.equals(this.audioTracks, editVideoRequestEmbed.audioTracks) &&
        Objects.equals(this.buttons, editVideoRequestEmbed.buttons) &&
        Objects.equals(this.cards, editVideoRequestEmbed.cards) &&
        Objects.equals(this.chapters, editVideoRequestEmbed.chapters) &&
        Objects.equals(this.chromecast, editVideoRequestEmbed.chromecast) &&
        Objects.equals(this.closedCaptions, editVideoRequestEmbed.closedCaptions) &&
        Objects.equals(this.color, editVideoRequestEmbed.color) &&
        Objects.equals(this.endScreen, editVideoRequestEmbed.endScreen) &&
        Objects.equals(this.logos, editVideoRequestEmbed.logos) &&
        Objects.equals(this.playButton, editVideoRequestEmbed.playButton) &&
        Objects.equals(this.playbar, editVideoRequestEmbed.playbar) &&
        Objects.equals(this.qualitySelector, editVideoRequestEmbed.qualitySelector) &&
        Objects.equals(this.transcript, editVideoRequestEmbed.transcript) &&
        Objects.equals(this.volume, editVideoRequestEmbed.volume)&&
        Objects.equals(this.additionalProperties, editVideoRequestEmbed.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, airplay, audioTracks, buttons, cards, chapters, chromecast, closedCaptions, color, endScreen, logos, playButton, playbar, qualitySelector, transcript, volume, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EditVideoRequestEmbed {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    airplay: ").append(toIndentedString(airplay)).append("\n");
    sb.append("    audioTracks: ").append(toIndentedString(audioTracks)).append("\n");
    sb.append("    buttons: ").append(toIndentedString(buttons)).append("\n");
    sb.append("    cards: ").append(toIndentedString(cards)).append("\n");
    sb.append("    chapters: ").append(toIndentedString(chapters)).append("\n");
    sb.append("    chromecast: ").append(toIndentedString(chromecast)).append("\n");
    sb.append("    closedCaptions: ").append(toIndentedString(closedCaptions)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    endScreen: ").append(toIndentedString(endScreen)).append("\n");
    sb.append("    logos: ").append(toIndentedString(logos)).append("\n");
    sb.append("    playButton: ").append(toIndentedString(playButton)).append("\n");
    sb.append("    playbar: ").append(toIndentedString(playbar)).append("\n");
    sb.append("    qualitySelector: ").append(toIndentedString(qualitySelector)).append("\n");
    sb.append("    transcript: ").append(toIndentedString(transcript)).append("\n");
    sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("airplay");
    openapiFields.add("audio_tracks");
    openapiFields.add("buttons");
    openapiFields.add("cards");
    openapiFields.add("chapters");
    openapiFields.add("chromecast");
    openapiFields.add("closed_captions");
    openapiFields.add("color");
    openapiFields.add("end_screen");
    openapiFields.add("logos");
    openapiFields.add("play_button");
    openapiFields.add("playbar");
    openapiFields.add("quality_selector");
    openapiFields.add("transcript");
    openapiFields.add("volume");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EditVideoRequestEmbed
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EditVideoRequestEmbed.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EditVideoRequestEmbed is not found in the empty JSON string", EditVideoRequestEmbed.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `title`
      if (jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) {
        EmbedPresetsEssentialsCreatePresetRequestEmbedTitle.validateJsonObject(jsonObj.getAsJsonObject("title"));
      }
      // validate the optional field `buttons`
      if (jsonObj.get("buttons") != null && !jsonObj.get("buttons").isJsonNull()) {
        EditVideoRequestEmbedButtons.validateJsonObject(jsonObj.getAsJsonObject("buttons"));
      }
      if (jsonObj.get("cards") != null && !jsonObj.get("cards").isJsonNull()) {
        JsonArray jsonArraycards = jsonObj.getAsJsonArray("cards");
        if (jsonArraycards != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cards").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cards` to be an array in the JSON string but got `%s`", jsonObj.get("cards").toString()));
          }

          // validate the optional field `cards` (array)
          for (int i = 0; i < jsonArraycards.size(); i++) {
            EditVideoRequestEmbedCardsInner.validateJsonObject(jsonArraycards.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) && !jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      // validate the optional field `end_screen`
      if (jsonObj.get("end_screen") != null && !jsonObj.get("end_screen").isJsonNull()) {
        VideosUploadsBeginVideoUploadProcessRequestEmbedEndScreen.validateJsonObject(jsonObj.getAsJsonObject("end_screen"));
      }
      // validate the optional field `logos`
      if (jsonObj.get("logos") != null && !jsonObj.get("logos").isJsonNull()) {
        EditVideoRequestEmbedLogos.validateJsonObject(jsonObj.getAsJsonObject("logos"));
      }
      // validate the optional field `play_button`
      if (jsonObj.get("play_button") != null && !jsonObj.get("play_button").isJsonNull()) {
        EmbedPresetsEssentialsCreatePresetRequestEmbedPlayButton.validateJsonObject(jsonObj.getAsJsonObject("play_button"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EditVideoRequestEmbed.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EditVideoRequestEmbed' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EditVideoRequestEmbed> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EditVideoRequestEmbed.class));

       return (TypeAdapter<T>) new TypeAdapter<EditVideoRequestEmbed>() {
           @Override
           public void write(JsonWriter out, EditVideoRequestEmbed value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EditVideoRequestEmbed read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EditVideoRequestEmbed instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EditVideoRequestEmbed given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EditVideoRequestEmbed
  * @throws IOException if the JSON string is invalid with respect to EditVideoRequestEmbed
  */
  public static EditVideoRequestEmbed fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EditVideoRequestEmbed.class);
  }

 /**
  * Convert an instance of EditVideoRequestEmbed to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

