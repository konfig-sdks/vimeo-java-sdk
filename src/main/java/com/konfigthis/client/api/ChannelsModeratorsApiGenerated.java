/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ChannelsModeratorsRemoveMultipleFromChannelRequest;
import com.konfigthis.client.model.ChannelsModeratorsReplaceModeratorsRequest;
import com.konfigthis.client.model.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ChannelsModeratorsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChannelsModeratorsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ChannelsModeratorsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addModeratorToChannelCall(Double channelId, Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/moderators/{user_id}"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addModeratorToChannelValidateBeforeCall(Double channelId, Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling addModeratorToChannel(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling addModeratorToChannel(Async)");
        }

        return addModeratorToChannelCall(channelId, userId, _callback);

    }


    private ApiResponse<Void> addModeratorToChannelWithHttpInfo(Double channelId, Double userId) throws ApiException {
        okhttp3.Call localVarCall = addModeratorToChannelValidateBeforeCall(channelId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addModeratorToChannelAsync(Double channelId, Double userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addModeratorToChannelValidateBeforeCall(channelId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddModeratorToChannelRequestBuilder {
        private final Double channelId;
        private final Double userId;

        private AddModeratorToChannelRequestBuilder(double channelId, double userId) {
            this.channelId = channelId;
            this.userId = userId;
        }

        /**
         * Build call for addModeratorToChannel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addModeratorToChannelCall(channelId, userId, _callback);
        }


        /**
         * Execute addModeratorToChannel request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            addModeratorToChannelWithHttpInfo(channelId, userId);
        }

        /**
         * Execute addModeratorToChannel request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return addModeratorToChannelWithHttpInfo(channelId, userId);
        }

        /**
         * Execute addModeratorToChannel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return addModeratorToChannelAsync(channelId, userId, _callback);
        }
    }

    /**
     * Add a specific moderator to a channel
     * This method adds a single user as a moderator to the specified channel. The authenticated user must be a follower of the requested user to add them as a channel moderator.
     * @param channelId The ID of the channel. (required)
     * @param userId The ID of the user. (required)
     * @return AddModeratorToChannelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AddModeratorToChannelRequestBuilder addModeratorToChannel(double channelId, double userId) throws IllegalArgumentException {
        
        
        return new AddModeratorToChannelRequestBuilder(channelId, userId);
    }
    private okhttp3.Call bulkAddModeratorsCall(Double channelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/moderators"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkAddModeratorsValidateBeforeCall(Double channelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling bulkAddModerators(Async)");
        }

        return bulkAddModeratorsCall(channelId, _callback);

    }


    private ApiResponse<Void> bulkAddModeratorsWithHttpInfo(Double channelId) throws ApiException {
        okhttp3.Call localVarCall = bulkAddModeratorsValidateBeforeCall(channelId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call bulkAddModeratorsAsync(Double channelId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkAddModeratorsValidateBeforeCall(channelId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class BulkAddModeratorsRequestBuilder {
        private final Double channelId;

        private BulkAddModeratorsRequestBuilder(double channelId) {
            this.channelId = channelId;
        }

        /**
         * Build call for bulkAddModerators
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The moderators were added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return bulkAddModeratorsCall(channelId, _callback);
        }


        /**
         * Execute bulkAddModerators request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The moderators were added. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            bulkAddModeratorsWithHttpInfo(channelId);
        }

        /**
         * Execute bulkAddModerators request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The moderators were added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return bulkAddModeratorsWithHttpInfo(channelId);
        }

        /**
         * Execute bulkAddModerators request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The moderators were added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return bulkAddModeratorsAsync(channelId, _callback);
        }
    }

    /**
     * Add a list of moderators to a channel
     * This method adds multiple users as moderators to the specified channel. Include the users by their URI as a JSON array in the body of the request using the **user_uri** field, like this: &#x60;[{ \&quot;user_uri\&quot;: \&quot;/users/1234\&quot; }, { \&quot;user_uri\&quot;: \&quot;/users/1235\&quot; }]&#x60;. The authenticated user must be a follower of a requested user to add this person as a moderator. For more information on batch requests like this one, see [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).
     * @param channelId The ID of the channel. (required)
     * @return BulkAddModeratorsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The moderators were added. </td><td>  -  </td></tr>
     </table>
     */
    public BulkAddModeratorsRequestBuilder bulkAddModerators(double channelId) throws IllegalArgumentException {
        
        return new BulkAddModeratorsRequestBuilder(channelId);
    }
    private okhttp3.Call getSpecificModeratorCall(Double channelId, Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/moderators/{user_id}"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificModeratorValidateBeforeCall(Double channelId, Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getSpecificModerator(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getSpecificModerator(Async)");
        }

        return getSpecificModeratorCall(channelId, userId, _callback);

    }


    private ApiResponse<User> getSpecificModeratorWithHttpInfo(Double channelId, Double userId) throws ApiException {
        okhttp3.Call localVarCall = getSpecificModeratorValidateBeforeCall(channelId, userId, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificModeratorAsync(Double channelId, Double userId, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificModeratorValidateBeforeCall(channelId, userId, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificModeratorRequestBuilder {
        private final Double channelId;
        private final Double userId;

        private GetSpecificModeratorRequestBuilder(double channelId, double userId) {
            this.channelId = channelId;
            this.userId = userId;
        }

        /**
         * Build call for getSpecificModerator
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The moderator was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificModeratorCall(channelId, userId, _callback);
        }


        /**
         * Execute getSpecificModerator request
         * @return User
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The moderator was returned. </td><td>  -  </td></tr>
         </table>
         */
        public User execute() throws ApiException {
            ApiResponse<User> localVarResp = getSpecificModeratorWithHttpInfo(channelId, userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificModerator request with HTTP info returned
         * @return ApiResponse&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The moderator was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<User> executeWithHttpInfo() throws ApiException {
            return getSpecificModeratorWithHttpInfo(channelId, userId);
        }

        /**
         * Execute getSpecificModerator request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The moderator was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<User> _callback) throws ApiException {
            return getSpecificModeratorAsync(channelId, userId, _callback);
        }
    }

    /**
     * Get a specific moderator of a channel
     * This method returns a single moderator of the specified channel.
     * @param channelId The ID of the channel. (required)
     * @param userId The ID of the user. (required)
     * @return GetSpecificModeratorRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The moderator was returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificModeratorRequestBuilder getSpecificModerator(double channelId, double userId) throws IllegalArgumentException {
        
        
        return new GetSpecificModeratorRequestBuilder(channelId, userId);
    }
    private okhttp3.Call listByChannelCall(Double channelId, String direction, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/moderators"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByChannelValidateBeforeCall(Double channelId, String direction, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling listByChannel(Async)");
        }

        return listByChannelCall(channelId, direction, page, perPage, query, sort, _callback);

    }


    private ApiResponse<List<User>> listByChannelWithHttpInfo(Double channelId, String direction, Double page, Double perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = listByChannelValidateBeforeCall(channelId, direction, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listByChannelAsync(Double channelId, String direction, Double page, Double perPage, String query, String sort, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByChannelValidateBeforeCall(channelId, direction, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListByChannelRequestBuilder {
        private final Double channelId;
        private String direction;
        private Double page;
        private Double perPage;
        private String query;
        private String sort;

        private ListByChannelRequestBuilder(double channelId) {
            this.channelId = channelId;
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return ListByChannelRequestBuilder
         */
        public ListByChannelRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return ListByChannelRequestBuilder
         */
        public ListByChannelRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return ListByChannelRequestBuilder
         */
        public ListByChannelRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set query
         * @param query The search query to use to filter the results. (optional)
         * @return ListByChannelRequestBuilder
         */
        public ListByChannelRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date added.  (optional)
         * @return ListByChannelRequestBuilder
         */
        public ListByChannelRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for listByChannel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The moderators were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listByChannelCall(channelId, direction, page, perPage, query, sort, _callback);
        }


        /**
         * Execute listByChannel request
         * @return List&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The moderators were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<User> execute() throws ApiException {
            ApiResponse<List<User>> localVarResp = listByChannelWithHttpInfo(channelId, direction, page, perPage, query, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listByChannel request with HTTP info returned
         * @return ApiResponse&lt;List&lt;User&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The moderators were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<User>> executeWithHttpInfo() throws ApiException {
            return listByChannelWithHttpInfo(channelId, direction, page, perPage, query, sort);
        }

        /**
         * Execute listByChannel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The moderators were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<User>> _callback) throws ApiException {
            return listByChannelAsync(channelId, direction, page, perPage, query, sort, _callback);
        }
    }

    /**
     * Get all the moderators of a channel
     * This method returns every moderator of the specified channel.
     * @param channelId The ID of the channel. (required)
     * @return ListByChannelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The moderators were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ListByChannelRequestBuilder listByChannel(double channelId) throws IllegalArgumentException {
        
        return new ListByChannelRequestBuilder(channelId);
    }
    private okhttp3.Call removeModeratorCall(Double channelId, Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/moderators/{user_id}"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeModeratorValidateBeforeCall(Double channelId, Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling removeModerator(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling removeModerator(Async)");
        }

        return removeModeratorCall(channelId, userId, _callback);

    }


    private ApiResponse<Void> removeModeratorWithHttpInfo(Double channelId, Double userId) throws ApiException {
        okhttp3.Call localVarCall = removeModeratorValidateBeforeCall(channelId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeModeratorAsync(Double channelId, Double userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeModeratorValidateBeforeCall(channelId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveModeratorRequestBuilder {
        private final Double channelId;
        private final Double userId;

        private RemoveModeratorRequestBuilder(double channelId, double userId) {
            this.channelId = channelId;
            this.userId = userId;
        }

        /**
         * Build call for removeModerator
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The moderator was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeModeratorCall(channelId, userId, _callback);
        }


        /**
         * Execute removeModerator request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The moderator was removed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeModeratorWithHttpInfo(channelId, userId);
        }

        /**
         * Execute removeModerator request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The moderator was removed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeModeratorWithHttpInfo(channelId, userId);
        }

        /**
         * Execute removeModerator request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The moderator was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeModeratorAsync(channelId, userId, _callback);
        }
    }

    /**
     * Remove a specific moderator from a channel
     * This method removes a single moderator from the specified channel. The authenticated user must be the owner of the channel.
     * @param channelId The ID of the channel. (required)
     * @param userId The ID of the user. (required)
     * @return RemoveModeratorRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The moderator was removed. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveModeratorRequestBuilder removeModerator(double channelId, double userId) throws IllegalArgumentException {
        
        
        return new RemoveModeratorRequestBuilder(channelId, userId);
    }
    private okhttp3.Call removeMultipleFromChannelCall(Double channelId, ChannelsModeratorsRemoveMultipleFromChannelRequest channelsModeratorsRemoveMultipleFromChannelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = channelsModeratorsRemoveMultipleFromChannelRequest;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/moderators"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeMultipleFromChannelValidateBeforeCall(Double channelId, ChannelsModeratorsRemoveMultipleFromChannelRequest channelsModeratorsRemoveMultipleFromChannelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling removeMultipleFromChannel(Async)");
        }

        // verify the required parameter 'channelsModeratorsRemoveMultipleFromChannelRequest' is set
        if (channelsModeratorsRemoveMultipleFromChannelRequest == null) {
            throw new ApiException("Missing the required parameter 'channelsModeratorsRemoveMultipleFromChannelRequest' when calling removeMultipleFromChannel(Async)");
        }

        return removeMultipleFromChannelCall(channelId, channelsModeratorsRemoveMultipleFromChannelRequest, _callback);

    }


    private ApiResponse<Void> removeMultipleFromChannelWithHttpInfo(Double channelId, ChannelsModeratorsRemoveMultipleFromChannelRequest channelsModeratorsRemoveMultipleFromChannelRequest) throws ApiException {
        okhttp3.Call localVarCall = removeMultipleFromChannelValidateBeforeCall(channelId, channelsModeratorsRemoveMultipleFromChannelRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeMultipleFromChannelAsync(Double channelId, ChannelsModeratorsRemoveMultipleFromChannelRequest channelsModeratorsRemoveMultipleFromChannelRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeMultipleFromChannelValidateBeforeCall(channelId, channelsModeratorsRemoveMultipleFromChannelRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveMultipleFromChannelRequestBuilder {
        private final String userUri;
        private final Double channelId;

        private RemoveMultipleFromChannelRequestBuilder(String userUri, double channelId) {
            this.userUri = userUri;
            this.channelId = channelId;
        }

        /**
         * Build call for removeMultipleFromChannel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The moderators were removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ChannelsModeratorsRemoveMultipleFromChannelRequest channelsModeratorsRemoveMultipleFromChannelRequest = buildBodyParams();
            return removeMultipleFromChannelCall(channelId, channelsModeratorsRemoveMultipleFromChannelRequest, _callback);
        }

        private ChannelsModeratorsRemoveMultipleFromChannelRequest buildBodyParams() {
            ChannelsModeratorsRemoveMultipleFromChannelRequest channelsModeratorsRemoveMultipleFromChannelRequest = new ChannelsModeratorsRemoveMultipleFromChannelRequest();
            channelsModeratorsRemoveMultipleFromChannelRequest.userUri(this.userUri);
            return channelsModeratorsRemoveMultipleFromChannelRequest;
        }

        /**
         * Execute removeMultipleFromChannel request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The moderators were removed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ChannelsModeratorsRemoveMultipleFromChannelRequest channelsModeratorsRemoveMultipleFromChannelRequest = buildBodyParams();
            removeMultipleFromChannelWithHttpInfo(channelId, channelsModeratorsRemoveMultipleFromChannelRequest);
        }

        /**
         * Execute removeMultipleFromChannel request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The moderators were removed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ChannelsModeratorsRemoveMultipleFromChannelRequest channelsModeratorsRemoveMultipleFromChannelRequest = buildBodyParams();
            return removeMultipleFromChannelWithHttpInfo(channelId, channelsModeratorsRemoveMultipleFromChannelRequest);
        }

        /**
         * Execute removeMultipleFromChannel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The moderators were removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ChannelsModeratorsRemoveMultipleFromChannelRequest channelsModeratorsRemoveMultipleFromChannelRequest = buildBodyParams();
            return removeMultipleFromChannelAsync(channelId, channelsModeratorsRemoveMultipleFromChannelRequest, _callback);
        }
    }

    /**
     * Remove a list of moderators from a channel
     * This method removes multiple moderators from the specified channel. The authenticated user must be the owner of the channel.
     * @param channelId The ID of the channel. (required)
     * @param channelsModeratorsRemoveMultipleFromChannelRequest  (required)
     * @return RemoveMultipleFromChannelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The moderators were removed. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveMultipleFromChannelRequestBuilder removeMultipleFromChannel(String userUri, double channelId) throws IllegalArgumentException {
        if (userUri == null) throw new IllegalArgumentException("\"userUri\" is required but got null");
            

        
        return new RemoveMultipleFromChannelRequestBuilder(userUri, channelId);
    }
    private okhttp3.Call replaceModeratorsCall(Double channelId, ChannelsModeratorsReplaceModeratorsRequest channelsModeratorsReplaceModeratorsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = channelsModeratorsReplaceModeratorsRequest;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/moderators"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceModeratorsValidateBeforeCall(Double channelId, ChannelsModeratorsReplaceModeratorsRequest channelsModeratorsReplaceModeratorsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling replaceModerators(Async)");
        }

        // verify the required parameter 'channelsModeratorsReplaceModeratorsRequest' is set
        if (channelsModeratorsReplaceModeratorsRequest == null) {
            throw new ApiException("Missing the required parameter 'channelsModeratorsReplaceModeratorsRequest' when calling replaceModerators(Async)");
        }

        return replaceModeratorsCall(channelId, channelsModeratorsReplaceModeratorsRequest, _callback);

    }


    private ApiResponse<List<User>> replaceModeratorsWithHttpInfo(Double channelId, ChannelsModeratorsReplaceModeratorsRequest channelsModeratorsReplaceModeratorsRequest) throws ApiException {
        okhttp3.Call localVarCall = replaceModeratorsValidateBeforeCall(channelId, channelsModeratorsReplaceModeratorsRequest, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call replaceModeratorsAsync(Double channelId, ChannelsModeratorsReplaceModeratorsRequest channelsModeratorsReplaceModeratorsRequest, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceModeratorsValidateBeforeCall(channelId, channelsModeratorsReplaceModeratorsRequest, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReplaceModeratorsRequestBuilder {
        private final String userUri;
        private final Double channelId;

        private ReplaceModeratorsRequestBuilder(String userUri, double channelId) {
            this.userUri = userUri;
            this.channelId = channelId;
        }

        /**
         * Build call for replaceModerators
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The moderators were replaced. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ChannelsModeratorsReplaceModeratorsRequest channelsModeratorsReplaceModeratorsRequest = buildBodyParams();
            return replaceModeratorsCall(channelId, channelsModeratorsReplaceModeratorsRequest, _callback);
        }

        private ChannelsModeratorsReplaceModeratorsRequest buildBodyParams() {
            ChannelsModeratorsReplaceModeratorsRequest channelsModeratorsReplaceModeratorsRequest = new ChannelsModeratorsReplaceModeratorsRequest();
            channelsModeratorsReplaceModeratorsRequest.userUri(this.userUri);
            return channelsModeratorsReplaceModeratorsRequest;
        }

        /**
         * Execute replaceModerators request
         * @return List&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The moderators were replaced. </td><td>  -  </td></tr>
         </table>
         */
        public List<User> execute() throws ApiException {
            ChannelsModeratorsReplaceModeratorsRequest channelsModeratorsReplaceModeratorsRequest = buildBodyParams();
            ApiResponse<List<User>> localVarResp = replaceModeratorsWithHttpInfo(channelId, channelsModeratorsReplaceModeratorsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute replaceModerators request with HTTP info returned
         * @return ApiResponse&lt;List&lt;User&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The moderators were replaced. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<User>> executeWithHttpInfo() throws ApiException {
            ChannelsModeratorsReplaceModeratorsRequest channelsModeratorsReplaceModeratorsRequest = buildBodyParams();
            return replaceModeratorsWithHttpInfo(channelId, channelsModeratorsReplaceModeratorsRequest);
        }

        /**
         * Execute replaceModerators request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The moderators were replaced. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<User>> _callback) throws ApiException {
            ChannelsModeratorsReplaceModeratorsRequest channelsModeratorsReplaceModeratorsRequest = buildBodyParams();
            return replaceModeratorsAsync(channelId, channelsModeratorsReplaceModeratorsRequest, _callback);
        }
    }

    /**
     * Replace the moderators of a channel
     * This method replaces the current list of channel moderators with a new list. The authenticated user must be the owner of the channel and a follower of each requested user to add them as a channel moderator.
     * @param channelId The ID of the channel. (required)
     * @param channelsModeratorsReplaceModeratorsRequest  (required)
     * @return ReplaceModeratorsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The moderators were replaced. </td><td>  -  </td></tr>
     </table>
     */
    public ReplaceModeratorsRequestBuilder replaceModerators(String userUri, double channelId) throws IllegalArgumentException {
        if (userUri == null) throw new IllegalArgumentException("\"userUri\" is required but got null");
            

        
        return new ReplaceModeratorsRequestBuilder(userUri, channelId);
    }
}
