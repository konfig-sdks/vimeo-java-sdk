/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateVodRequest;
import com.konfigthis.client.model.CreateVodRequestBuy;
import com.konfigthis.client.model.CreateVodRequestEpisodes;
import com.konfigthis.client.model.CreateVodRequestRent;
import com.konfigthis.client.model.CreateVodRequestSubscription;
import com.konfigthis.client.model.EditVodRequest;
import com.konfigthis.client.model.EditVodRequestPreorder;
import com.konfigthis.client.model.EditVodRequestPublish;
import com.konfigthis.client.model.OnDemandEssentialsCreatePageRequest;
import com.konfigthis.client.model.OnDemandEssentialsCreatePageRequestBuy;
import com.konfigthis.client.model.OnDemandEssentialsCreatePageRequestEpisodes;
import com.konfigthis.client.model.OnDemandEssentialsCreatePageRequestRent;
import com.konfigthis.client.model.OnDemandEssentialsCreatePageRequestSubscription;
import com.konfigthis.client.model.OnDemandPage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OnDemandEssentialsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OnDemandEssentialsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OnDemandEssentialsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createPageCall(OnDemandEssentialsCreatePageRequest onDemandEssentialsCreatePageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = onDemandEssentialsCreatePageRequest;

        // create path and map variables
        String localVarPath = "/me/ondemand/pages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPageValidateBeforeCall(OnDemandEssentialsCreatePageRequest onDemandEssentialsCreatePageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'onDemandEssentialsCreatePageRequest' is set
        if (onDemandEssentialsCreatePageRequest == null) {
            throw new ApiException("Missing the required parameter 'onDemandEssentialsCreatePageRequest' when calling createPage(Async)");
        }

        return createPageCall(onDemandEssentialsCreatePageRequest, _callback);

    }


    private ApiResponse<OnDemandPage> createPageWithHttpInfo(OnDemandEssentialsCreatePageRequest onDemandEssentialsCreatePageRequest) throws ApiException {
        okhttp3.Call localVarCall = createPageValidateBeforeCall(onDemandEssentialsCreatePageRequest, null);
        Type localVarReturnType = new TypeToken<OnDemandPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPageAsync(OnDemandEssentialsCreatePageRequest onDemandEssentialsCreatePageRequest, final ApiCallback<OnDemandPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPageValidateBeforeCall(onDemandEssentialsCreatePageRequest, _callback);
        Type localVarReturnType = new TypeToken<OnDemandPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePageRequestBuilder {
        private final String description;
        private final String contentRating;
        private final String name;
        private final String type;
        private String acceptedCurrencies;
        private OnDemandEssentialsCreatePageRequestBuy buy;
        private String domainLink;
        private OnDemandEssentialsCreatePageRequestEpisodes episodes;
        private String link;
        private OnDemandEssentialsCreatePageRequestRent rent;
        private OnDemandEssentialsCreatePageRequestSubscription subscription;

        private CreatePageRequestBuilder(String description, String contentRating, String name, String type) {
            this.description = description;
            this.contentRating = contentRating;
            this.name = name;
            this.type = type;
        }

        /**
         * Set acceptedCurrencies
         * @param acceptedCurrencies An array of accepted currencies.  Option descriptions:  * &#x60;AUD&#x60; - The currency is in Australian dollars.  * &#x60;CAD&#x60; - The currency is in Canadian dollars.  * &#x60;CHF&#x60; - The currency is in Swiss francs.  * &#x60;DKK&#x60; - The currency is in Danish krone.  * &#x60;EUR&#x60; - The currency is in euros.  * &#x60;GBP&#x60; - The currency is in British pounds.  * &#x60;JPY&#x60; - The currency is in Japanese yen.  * &#x60;KRW&#x60; - The currency is in South Korean won.  * &#x60;NOK&#x60; - The currency is in Norwegian krone.  * &#x60;PLN&#x60; - The currency is in Polish zloty.  * &#x60;SEK&#x60; - The currency is in Swedish krona.  * &#x60;USD&#x60; - The currency is in United States dollars.  (optional)
         * @return CreatePageRequestBuilder
         */
        public CreatePageRequestBuilder acceptedCurrencies(String acceptedCurrencies) {
            this.acceptedCurrencies = acceptedCurrencies;
            return this;
        }
        
        /**
         * Set buy
         * @param buy  (optional)
         * @return CreatePageRequestBuilder
         */
        public CreatePageRequestBuilder buy(OnDemandEssentialsCreatePageRequestBuy buy) {
            this.buy = buy;
            return this;
        }
        
        /**
         * Set domainLink
         * @param domainLink The custom domain of the On Demand page. (optional)
         * @return CreatePageRequestBuilder
         */
        public CreatePageRequestBuilder domainLink(String domainLink) {
            this.domainLink = domainLink;
            return this;
        }
        
        /**
         * Set episodes
         * @param episodes  (optional)
         * @return CreatePageRequestBuilder
         */
        public CreatePageRequestBuilder episodes(OnDemandEssentialsCreatePageRequestEpisodes episodes) {
            this.episodes = episodes;
            return this;
        }
        
        /**
         * Set link
         * @param link The custom string to use in the Vimeo URL of the On Demand page. (optional)
         * @return CreatePageRequestBuilder
         */
        public CreatePageRequestBuilder link(String link) {
            this.link = link;
            return this;
        }
        
        /**
         * Set rent
         * @param rent  (optional)
         * @return CreatePageRequestBuilder
         */
        public CreatePageRequestBuilder rent(OnDemandEssentialsCreatePageRequestRent rent) {
            this.rent = rent;
            return this;
        }
        
        /**
         * Set subscription
         * @param subscription  (optional)
         * @return CreatePageRequestBuilder
         */
        public CreatePageRequestBuilder subscription(OnDemandEssentialsCreatePageRequestSubscription subscription) {
            this.subscription = subscription;
            return this;
        }
        
        /**
         * Build call for createPage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The On Demand page was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OnDemandEssentialsCreatePageRequest onDemandEssentialsCreatePageRequest = buildBodyParams();
            return createPageCall(onDemandEssentialsCreatePageRequest, _callback);
        }

        private OnDemandEssentialsCreatePageRequest buildBodyParams() {
            OnDemandEssentialsCreatePageRequest onDemandEssentialsCreatePageRequest = new OnDemandEssentialsCreatePageRequest();
            onDemandEssentialsCreatePageRequest.description(this.description);
            if (this.acceptedCurrencies != null)
            onDemandEssentialsCreatePageRequest.acceptedCurrencies(OnDemandEssentialsCreatePageRequest.AcceptedCurrenciesEnum.fromValue(this.acceptedCurrencies));
            onDemandEssentialsCreatePageRequest.buy(this.buy);
            if (this.contentRating != null)
            onDemandEssentialsCreatePageRequest.contentRating(OnDemandEssentialsCreatePageRequest.ContentRatingEnum.fromValue(this.contentRating));
            onDemandEssentialsCreatePageRequest.domainLink(this.domainLink);
            onDemandEssentialsCreatePageRequest.episodes(this.episodes);
            onDemandEssentialsCreatePageRequest.link(this.link);
            onDemandEssentialsCreatePageRequest.name(this.name);
            onDemandEssentialsCreatePageRequest.rent(this.rent);
            onDemandEssentialsCreatePageRequest.subscription(this.subscription);
            if (this.type != null)
            onDemandEssentialsCreatePageRequest.type(OnDemandEssentialsCreatePageRequest.TypeEnum.fromValue(this.type));
            return onDemandEssentialsCreatePageRequest;
        }

        /**
         * Execute createPage request
         * @return OnDemandPage
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The On Demand page was created. </td><td>  -  </td></tr>
         </table>
         */
        public OnDemandPage execute() throws ApiException {
            OnDemandEssentialsCreatePageRequest onDemandEssentialsCreatePageRequest = buildBodyParams();
            ApiResponse<OnDemandPage> localVarResp = createPageWithHttpInfo(onDemandEssentialsCreatePageRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPage request with HTTP info returned
         * @return ApiResponse&lt;OnDemandPage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The On Demand page was created. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OnDemandPage> executeWithHttpInfo() throws ApiException {
            OnDemandEssentialsCreatePageRequest onDemandEssentialsCreatePageRequest = buildBodyParams();
            return createPageWithHttpInfo(onDemandEssentialsCreatePageRequest);
        }

        /**
         * Execute createPage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The On Demand page was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OnDemandPage> _callback) throws ApiException {
            OnDemandEssentialsCreatePageRequest onDemandEssentialsCreatePageRequest = buildBodyParams();
            return createPageAsync(onDemandEssentialsCreatePageRequest, _callback);
        }
    }

    /**
     * Create an On Demand page
     * This method creates a new On Demand page for the specified user. To publish the page, use the [edit](https://developer.vimeo.com/api/reference/on-demand#edit_vod) method.
     * @param onDemandEssentialsCreatePageRequest  (required)
     * @return CreatePageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The On Demand page was created. </td><td>  -  </td></tr>
     </table>
     */
    public CreatePageRequestBuilder createPage(String description, String contentRating, String name, String type) throws IllegalArgumentException {
        if (description == null) throw new IllegalArgumentException("\"description\" is required but got null");
            

        if (contentRating == null) throw new IllegalArgumentException("\"contentRating\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new CreatePageRequestBuilder(description, contentRating, name, type);
    }
    private okhttp3.Call deleteOnDemandPageCall(Double ondemandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.page+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOnDemandPageValidateBeforeCall(Double ondemandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling deleteOnDemandPage(Async)");
        }

        return deleteOnDemandPageCall(ondemandId, _callback);

    }


    private ApiResponse<Void> deleteOnDemandPageWithHttpInfo(Double ondemandId) throws ApiException {
        okhttp3.Call localVarCall = deleteOnDemandPageValidateBeforeCall(ondemandId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteOnDemandPageAsync(Double ondemandId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOnDemandPageValidateBeforeCall(ondemandId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteOnDemandPageRequestBuilder {
        private final Double ondemandId;

        private DeleteOnDemandPageRequestBuilder(double ondemandId) {
            this.ondemandId = ondemandId;
        }

        /**
         * Build call for deleteOnDemandPage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The On Demand page was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteOnDemandPageCall(ondemandId, _callback);
        }


        /**
         * Execute deleteOnDemandPage request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The On Demand page was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteOnDemandPageWithHttpInfo(ondemandId);
        }

        /**
         * Execute deleteOnDemandPage request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The On Demand page was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteOnDemandPageWithHttpInfo(ondemandId);
        }

        /**
         * Execute deleteOnDemandPage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The On Demand page was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteOnDemandPageAsync(ondemandId, _callback);
        }
    }

    /**
     * Delete an On Demand page
     * This method deletes the specified On Demand page.
     * @param ondemandId The ID of the On Demand page. (required)
     * @return DeleteOnDemandPageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The On Demand page was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteOnDemandPageRequestBuilder deleteOnDemandPage(double ondemandId) throws IllegalArgumentException {
        
        return new DeleteOnDemandPageRequestBuilder(ondemandId);
    }
    private okhttp3.Call getAllUserPagesCall(String direction, String filter, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/ondemand/pages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.page+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllUserPagesValidateBeforeCall(String direction, String filter, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        return getAllUserPagesCall(direction, filter, page, perPage, sort, _callback);

    }


    private ApiResponse<List<OnDemandPage>> getAllUserPagesWithHttpInfo(String direction, String filter, Double page, Double perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = getAllUserPagesValidateBeforeCall(direction, filter, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<List<OnDemandPage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllUserPagesAsync(String direction, String filter, Double page, Double perPage, String sort, final ApiCallback<List<OnDemandPage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllUserPagesValidateBeforeCall(direction, filter, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<List<OnDemandPage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllUserPagesRequestBuilder {
        private String direction;
        private String filter;
        private Double page;
        private Double perPage;
        private String sort;

        private GetAllUserPagesRequestBuilder() {
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return GetAllUserPagesRequestBuilder
         */
        public GetAllUserPagesRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The type of the page to return.  Option descriptions:  * &#x60;film&#x60; - The page type is a film.  * &#x60;series&#x60; - The page type is a series.  (optional)
         * @return GetAllUserPagesRequestBuilder
         */
        public GetAllUserPagesRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetAllUserPagesRequestBuilder
         */
        public GetAllUserPagesRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetAllUserPagesRequestBuilder
         */
        public GetAllUserPagesRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;added&#x60; - Sort the results by most recently added page.  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;modified_time&#x60; - Sort the results by time of page modification.  * &#x60;name&#x60; - Sort the results by page name.  * &#x60;publish.time&#x60; - Sort the results by time of page publishing.  * &#x60;rating&#x60; - Sort the results by content rating.  (optional)
         * @return GetAllUserPagesRequestBuilder
         */
        public GetAllUserPagesRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getAllUserPages
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The On Demand pages were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllUserPagesCall(direction, filter, page, perPage, sort, _callback);
        }


        /**
         * Execute getAllUserPages request
         * @return List&lt;OnDemandPage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The On Demand pages were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<OnDemandPage> execute() throws ApiException {
            ApiResponse<List<OnDemandPage>> localVarResp = getAllUserPagesWithHttpInfo(direction, filter, page, perPage, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllUserPages request with HTTP info returned
         * @return ApiResponse&lt;List&lt;OnDemandPage&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The On Demand pages were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<OnDemandPage>> executeWithHttpInfo() throws ApiException {
            return getAllUserPagesWithHttpInfo(direction, filter, page, perPage, sort);
        }

        /**
         * Execute getAllUserPages request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The On Demand pages were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<OnDemandPage>> _callback) throws ApiException {
            return getAllUserPagesAsync(direction, filter, page, perPage, sort, _callback);
        }
    }

    /**
     * Get all the On Demand pages of the user
     * This method returns every On Demand page belonging to the authenticated user.
     * @return GetAllUserPagesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand pages were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllUserPagesRequestBuilder getAllUserPages() throws IllegalArgumentException {
        return new GetAllUserPagesRequestBuilder();
    }
    private okhttp3.Call getAllUserPages_0Call(Double userId, String direction, String filter, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/ondemand/pages"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.page+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllUserPages_0ValidateBeforeCall(Double userId, String direction, String filter, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getAllUserPages_0(Async)");
        }

        return getAllUserPages_0Call(userId, direction, filter, page, perPage, sort, _callback);

    }


    private ApiResponse<List<OnDemandPage>> getAllUserPages_0WithHttpInfo(Double userId, String direction, String filter, Double page, Double perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = getAllUserPages_0ValidateBeforeCall(userId, direction, filter, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<List<OnDemandPage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllUserPages_0Async(Double userId, String direction, String filter, Double page, Double perPage, String sort, final ApiCallback<List<OnDemandPage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllUserPages_0ValidateBeforeCall(userId, direction, filter, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<List<OnDemandPage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllUserPages0RequestBuilder {
        private final Double userId;
        private String direction;
        private String filter;
        private Double page;
        private Double perPage;
        private String sort;

        private GetAllUserPages0RequestBuilder(double userId) {
            this.userId = userId;
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return GetAllUserPages0RequestBuilder
         */
        public GetAllUserPages0RequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The type of the page to return.  Option descriptions:  * &#x60;film&#x60; - The page type is a film.  * &#x60;series&#x60; - The page type is a series.  (optional)
         * @return GetAllUserPages0RequestBuilder
         */
        public GetAllUserPages0RequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetAllUserPages0RequestBuilder
         */
        public GetAllUserPages0RequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetAllUserPages0RequestBuilder
         */
        public GetAllUserPages0RequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;added&#x60; - Sort the results by most recently added page.  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;modified_time&#x60; - Sort the results by time of page modification.  * &#x60;name&#x60; - Sort the results by page name.  * &#x60;publish.time&#x60; - Sort the results by time of page publishing.  * &#x60;rating&#x60; - Sort the results by content rating.  (optional)
         * @return GetAllUserPages0RequestBuilder
         */
        public GetAllUserPages0RequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getAllUserPages_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The On Demand pages were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllUserPages_0Call(userId, direction, filter, page, perPage, sort, _callback);
        }


        /**
         * Execute getAllUserPages_0 request
         * @return List&lt;OnDemandPage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The On Demand pages were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<OnDemandPage> execute() throws ApiException {
            ApiResponse<List<OnDemandPage>> localVarResp = getAllUserPages_0WithHttpInfo(userId, direction, filter, page, perPage, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllUserPages_0 request with HTTP info returned
         * @return ApiResponse&lt;List&lt;OnDemandPage&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The On Demand pages were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<OnDemandPage>> executeWithHttpInfo() throws ApiException {
            return getAllUserPages_0WithHttpInfo(userId, direction, filter, page, perPage, sort);
        }

        /**
         * Execute getAllUserPages_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The On Demand pages were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<OnDemandPage>> _callback) throws ApiException {
            return getAllUserPages_0Async(userId, direction, filter, page, perPage, sort, _callback);
        }
    }

    /**
     * Get all the On Demand pages of the user
     * This method returns every On Demand page belonging to the authenticated user.
     * @param userId The ID of the user. (required)
     * @return GetAllUserPages0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand pages were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllUserPages0RequestBuilder getAllUserPages_0(double userId) throws IllegalArgumentException {
        
        return new GetAllUserPages0RequestBuilder(userId);
    }
    private okhttp3.Call vodCall(Double ondemandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.page+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vodValidateBeforeCall(Double ondemandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling vod(Async)");
        }

        return vodCall(ondemandId, _callback);

    }


    private ApiResponse<OnDemandPage> vodWithHttpInfo(Double ondemandId) throws ApiException {
        okhttp3.Call localVarCall = vodValidateBeforeCall(ondemandId, null);
        Type localVarReturnType = new TypeToken<OnDemandPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call vodAsync(Double ondemandId, final ApiCallback<OnDemandPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = vodValidateBeforeCall(ondemandId, _callback);
        Type localVarReturnType = new TypeToken<OnDemandPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VodRequestBuilder {
        private final Double ondemandId;

        private VodRequestBuilder(double ondemandId) {
            this.ondemandId = ondemandId;
        }

        /**
         * Build call for vod
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The On Demand page was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return vodCall(ondemandId, _callback);
        }


        /**
         * Execute vod request
         * @return OnDemandPage
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The On Demand page was returned. </td><td>  -  </td></tr>
         </table>
         */
        public OnDemandPage execute() throws ApiException {
            ApiResponse<OnDemandPage> localVarResp = vodWithHttpInfo(ondemandId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute vod request with HTTP info returned
         * @return ApiResponse&lt;OnDemandPage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The On Demand page was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OnDemandPage> executeWithHttpInfo() throws ApiException {
            return vodWithHttpInfo(ondemandId);
        }

        /**
         * Execute vod request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The On Demand page was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OnDemandPage> _callback) throws ApiException {
            return vodAsync(ondemandId, _callback);
        }
    }

    /**
     * Get a specific On Demand page
     * This method returns the specified On Demand page.
     * @param ondemandId The ID of the On Demand page. (required)
     * @return VodRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand page was returned. </td><td>  -  </td></tr>
     </table>
     */
    public VodRequestBuilder vod(double ondemandId) throws IllegalArgumentException {
        
        return new VodRequestBuilder(ondemandId);
    }
    private okhttp3.Call vod_0Call(Double ondemandId, EditVodRequest editVodRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editVodRequest;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.page+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.ondemand.page+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vod_0ValidateBeforeCall(Double ondemandId, EditVodRequest editVodRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling vod_0(Async)");
        }

        return vod_0Call(ondemandId, editVodRequest, _callback);

    }


    private ApiResponse<OnDemandPage> vod_0WithHttpInfo(Double ondemandId, EditVodRequest editVodRequest) throws ApiException {
        okhttp3.Call localVarCall = vod_0ValidateBeforeCall(ondemandId, editVodRequest, null);
        Type localVarReturnType = new TypeToken<OnDemandPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call vod_0Async(Double ondemandId, EditVodRequest editVodRequest, final ApiCallback<OnDemandPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = vod_0ValidateBeforeCall(ondemandId, editVodRequest, _callback);
        Type localVarReturnType = new TypeToken<OnDemandPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Vod0RequestBuilder {
        private final Double ondemandId;
        private String link;
        private EditVodRequestPreorder preorder;
        private EditVodRequestPublish publish;
        private Boolean publishWhenReady;

        private Vod0RequestBuilder(double ondemandId) {
            this.ondemandId = ondemandId;
        }

        /**
         * Set link
         * @param link The custom string to use in the Vimeo URL of the On Demand page. (optional)
         * @return Vod0RequestBuilder
         */
        public Vod0RequestBuilder link(String link) {
            this.link = link;
            return this;
        }
        
        /**
         * Set preorder
         * @param preorder  (optional)
         * @return Vod0RequestBuilder
         */
        public Vod0RequestBuilder preorder(EditVodRequestPreorder preorder) {
            this.preorder = preorder;
            return this;
        }
        
        /**
         * Set publish
         * @param publish  (optional)
         * @return Vod0RequestBuilder
         */
        public Vod0RequestBuilder publish(EditVodRequestPublish publish) {
            this.publish = publish;
            return this;
        }
        
        /**
         * Set publishWhenReady
         * @param publishWhenReady Whether to publish the On Demand page automatically after all videos have finished transcoding. (optional)
         * @return Vod0RequestBuilder
         */
        public Vod0RequestBuilder publishWhenReady(Boolean publishWhenReady) {
            this.publishWhenReady = publishWhenReady;
            return this;
        }
        
        /**
         * Build call for vod_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The On Demand page was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EditVodRequest editVodRequest = buildBodyParams();
            return vod_0Call(ondemandId, editVodRequest, _callback);
        }

        private EditVodRequest buildBodyParams() {
            EditVodRequest editVodRequest = new EditVodRequest();
            editVodRequest.link(this.link);
            editVodRequest.preorder(this.preorder);
            editVodRequest.publish(this.publish);
            editVodRequest.publishWhenReady(this.publishWhenReady);
            return editVodRequest;
        }

        /**
         * Execute vod_0 request
         * @return OnDemandPage
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The On Demand page was edited. </td><td>  -  </td></tr>
         </table>
         */
        public OnDemandPage execute() throws ApiException {
            EditVodRequest editVodRequest = buildBodyParams();
            ApiResponse<OnDemandPage> localVarResp = vod_0WithHttpInfo(ondemandId, editVodRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute vod_0 request with HTTP info returned
         * @return ApiResponse&lt;OnDemandPage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The On Demand page was edited. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OnDemandPage> executeWithHttpInfo() throws ApiException {
            EditVodRequest editVodRequest = buildBodyParams();
            return vod_0WithHttpInfo(ondemandId, editVodRequest);
        }

        /**
         * Execute vod_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The On Demand page was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OnDemandPage> _callback) throws ApiException {
            EditVodRequest editVodRequest = buildBodyParams();
            return vod_0Async(ondemandId, editVodRequest, _callback);
        }
    }

    /**
     * Edit an On Demand page
     * This method edits the specified On Demand page. Use this method to enable preorders on the page or to publish the page.
     * @param ondemandId The ID of the On Demand page. (required)
     * @return Vod0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand page was edited. </td><td>  -  </td></tr>
     </table>
     */
    public Vod0RequestBuilder vod_0(double ondemandId) throws IllegalArgumentException {
        
        return new Vod0RequestBuilder(ondemandId);
    }
    private okhttp3.Call vod_1Call(Double userId, CreateVodRequest createVodRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createVodRequest;

        // create path and map variables
        String localVarPath = "/users/{user_id}/ondemand/pages"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vod_1ValidateBeforeCall(Double userId, CreateVodRequest createVodRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling vod_1(Async)");
        }

        // verify the required parameter 'createVodRequest' is set
        if (createVodRequest == null) {
            throw new ApiException("Missing the required parameter 'createVodRequest' when calling vod_1(Async)");
        }

        return vod_1Call(userId, createVodRequest, _callback);

    }


    private ApiResponse<OnDemandPage> vod_1WithHttpInfo(Double userId, CreateVodRequest createVodRequest) throws ApiException {
        okhttp3.Call localVarCall = vod_1ValidateBeforeCall(userId, createVodRequest, null);
        Type localVarReturnType = new TypeToken<OnDemandPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call vod_1Async(Double userId, CreateVodRequest createVodRequest, final ApiCallback<OnDemandPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = vod_1ValidateBeforeCall(userId, createVodRequest, _callback);
        Type localVarReturnType = new TypeToken<OnDemandPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Vod1RequestBuilder {
        private final String description;
        private final String contentRating;
        private final String name;
        private final String type;
        private final Double userId;
        private String acceptedCurrencies;
        private CreateVodRequestBuy buy;
        private String domainLink;
        private CreateVodRequestEpisodes episodes;
        private String link;
        private CreateVodRequestRent rent;
        private CreateVodRequestSubscription subscription;

        private Vod1RequestBuilder(String description, String contentRating, String name, String type, double userId) {
            this.description = description;
            this.contentRating = contentRating;
            this.name = name;
            this.type = type;
            this.userId = userId;
        }

        /**
         * Set acceptedCurrencies
         * @param acceptedCurrencies An array of accepted currencies.  Option descriptions:  * &#x60;AUD&#x60; - The currency is in Australian dollars.  * &#x60;CAD&#x60; - The currency is in Canadian dollars.  * &#x60;CHF&#x60; - The currency is in Swiss francs.  * &#x60;DKK&#x60; - The currency is in Danish krone.  * &#x60;EUR&#x60; - The currency is in euros.  * &#x60;GBP&#x60; - The currency is in British pounds.  * &#x60;JPY&#x60; - The currency is in Japanese yen.  * &#x60;KRW&#x60; - The currency is in South Korean won.  * &#x60;NOK&#x60; - The currency is in Norwegian krone.  * &#x60;PLN&#x60; - The currency is in Polish zloty.  * &#x60;SEK&#x60; - The currency is in Swedish krona.  * &#x60;USD&#x60; - The currency is in United States dollars.  (optional)
         * @return Vod1RequestBuilder
         */
        public Vod1RequestBuilder acceptedCurrencies(String acceptedCurrencies) {
            this.acceptedCurrencies = acceptedCurrencies;
            return this;
        }
        
        /**
         * Set buy
         * @param buy  (optional)
         * @return Vod1RequestBuilder
         */
        public Vod1RequestBuilder buy(CreateVodRequestBuy buy) {
            this.buy = buy;
            return this;
        }
        
        /**
         * Set domainLink
         * @param domainLink The custom domain of the On Demand page. (optional)
         * @return Vod1RequestBuilder
         */
        public Vod1RequestBuilder domainLink(String domainLink) {
            this.domainLink = domainLink;
            return this;
        }
        
        /**
         * Set episodes
         * @param episodes  (optional)
         * @return Vod1RequestBuilder
         */
        public Vod1RequestBuilder episodes(CreateVodRequestEpisodes episodes) {
            this.episodes = episodes;
            return this;
        }
        
        /**
         * Set link
         * @param link The custom string to use in the Vimeo URL of the On Demand page. (optional)
         * @return Vod1RequestBuilder
         */
        public Vod1RequestBuilder link(String link) {
            this.link = link;
            return this;
        }
        
        /**
         * Set rent
         * @param rent  (optional)
         * @return Vod1RequestBuilder
         */
        public Vod1RequestBuilder rent(CreateVodRequestRent rent) {
            this.rent = rent;
            return this;
        }
        
        /**
         * Set subscription
         * @param subscription  (optional)
         * @return Vod1RequestBuilder
         */
        public Vod1RequestBuilder subscription(CreateVodRequestSubscription subscription) {
            this.subscription = subscription;
            return this;
        }
        
        /**
         * Build call for vod_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The On Demand page was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateVodRequest createVodRequest = buildBodyParams();
            return vod_1Call(userId, createVodRequest, _callback);
        }

        private CreateVodRequest buildBodyParams() {
            CreateVodRequest createVodRequest = new CreateVodRequest();
            createVodRequest.description(this.description);
            if (this.acceptedCurrencies != null)
            createVodRequest.acceptedCurrencies(CreateVodRequest.AcceptedCurrenciesEnum.fromValue(this.acceptedCurrencies));
            createVodRequest.buy(this.buy);
            if (this.contentRating != null)
            createVodRequest.contentRating(CreateVodRequest.ContentRatingEnum.fromValue(this.contentRating));
            createVodRequest.domainLink(this.domainLink);
            createVodRequest.episodes(this.episodes);
            createVodRequest.link(this.link);
            createVodRequest.name(this.name);
            createVodRequest.rent(this.rent);
            createVodRequest.subscription(this.subscription);
            if (this.type != null)
            createVodRequest.type(CreateVodRequest.TypeEnum.fromValue(this.type));
            return createVodRequest;
        }

        /**
         * Execute vod_1 request
         * @return OnDemandPage
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The On Demand page was created. </td><td>  -  </td></tr>
         </table>
         */
        public OnDemandPage execute() throws ApiException {
            CreateVodRequest createVodRequest = buildBodyParams();
            ApiResponse<OnDemandPage> localVarResp = vod_1WithHttpInfo(userId, createVodRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute vod_1 request with HTTP info returned
         * @return ApiResponse&lt;OnDemandPage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The On Demand page was created. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OnDemandPage> executeWithHttpInfo() throws ApiException {
            CreateVodRequest createVodRequest = buildBodyParams();
            return vod_1WithHttpInfo(userId, createVodRequest);
        }

        /**
         * Execute vod_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The On Demand page was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OnDemandPage> _callback) throws ApiException {
            CreateVodRequest createVodRequest = buildBodyParams();
            return vod_1Async(userId, createVodRequest, _callback);
        }
    }

    /**
     * Create an On Demand page
     * This method creates a new On Demand page for the specified user. To publish the page, use the [edit](https://developer.vimeo.com/api/reference/on-demand#edit_vod) method.
     * @param userId The ID of the user. (required)
     * @param createVodRequest  (required)
     * @return Vod1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The On Demand page was created. </td><td>  -  </td></tr>
     </table>
     */
    public Vod1RequestBuilder vod_1(String description, String contentRating, String name, String type, double userId) throws IllegalArgumentException {
        if (description == null) throw new IllegalArgumentException("\"description\" is required but got null");
            

        if (contentRating == null) throw new IllegalArgumentException("\"contentRating\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        
        return new Vod1RequestBuilder(description, contentRating, name, type, userId);
    }
}
