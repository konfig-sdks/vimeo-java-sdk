/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.SegmentLine;
import com.konfigthis.client.model.SegmentWords;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Segment
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Segment {
  public static final String SERIALIZED_NAME_AUTOGENERATED = "autogenerated";
  @SerializedName(SERIALIZED_NAME_AUTOGENERATED)
  private Boolean autogenerated;

  public static final String SERIALIZED_NAME_CUE_END = "cue_end";
  @SerializedName(SERIALIZED_NAME_CUE_END)
  private Double cueEnd;

  public static final String SERIALIZED_NAME_CUE_START = "cue_start";
  @SerializedName(SERIALIZED_NAME_CUE_START)
  private Double cueStart;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * The type of caption that the segment originates from.  Option descriptions:  * &#x60;captions&#x60; - The segment originates from a captions file.  * &#x60;subtitles&#x60; - The segment originates from a captions and subtitles file. 
   */
  @JsonAdapter(KindEnum.Adapter.class)
 public enum KindEnum {
    CAPTIONS("captions"),
    
    SUBTITLES("subtitles");

    private String value;

    KindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KindEnum fromValue(String value) {
      for (KindEnum b : KindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KindEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KindEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private KindEnum kind;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_LINES = "lines";
  @SerializedName(SERIALIZED_NAME_LINES)
  private List<SegmentLine> lines = new ArrayList<>();

  public static final String SERIALIZED_NAME_SPEAKER = "speaker";
  @SerializedName(SERIALIZED_NAME_SPEAKER)
  private String speaker;

  public static final String SERIALIZED_NAME_TEXT_TRACK_URI = "text_track_uri";
  @SerializedName(SERIALIZED_NAME_TEXT_TRACK_URI)
  private String textTrackUri;

  public static final String SERIALIZED_NAME_VIDEO_URI = "video_uri";
  @SerializedName(SERIALIZED_NAME_VIDEO_URI)
  private String videoUri;

  public static final String SERIALIZED_NAME_WORDS = "words";
  @SerializedName(SERIALIZED_NAME_WORDS)
  private List<SegmentWords> words = new ArrayList<>();

  public Segment() {
  }

  public Segment autogenerated(Boolean autogenerated) {
    
    
    
    
    this.autogenerated = autogenerated;
    return this;
  }

   /**
   * Whether the segment is autogenerated.
   * @return autogenerated
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the segment is autogenerated.")

  public Boolean getAutogenerated() {
    return autogenerated;
  }


  public void setAutogenerated(Boolean autogenerated) {
    
    
    
    this.autogenerated = autogenerated;
  }


  public Segment cueEnd(Double cueEnd) {
    
    
    
    
    this.cueEnd = cueEnd;
    return this;
  }

  public Segment cueEnd(Integer cueEnd) {
    
    
    
    
    this.cueEnd = cueEnd.doubleValue();
    return this;
  }

   /**
   * The cue end timestamp in milliseconds from the start of the video.
   * @return cueEnd
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "103200", required = true, value = "The cue end timestamp in milliseconds from the start of the video.")

  public Double getCueEnd() {
    return cueEnd;
  }


  public void setCueEnd(Double cueEnd) {
    
    
    
    this.cueEnd = cueEnd;
  }


  public Segment cueStart(Double cueStart) {
    
    
    
    
    this.cueStart = cueStart;
    return this;
  }

  public Segment cueStart(Integer cueStart) {
    
    
    
    
    this.cueStart = cueStart.doubleValue();
    return this;
  }

   /**
   * The cue start timestamp in milliseconds from the start of the video.
   * @return cueStart
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "101800", required = true, value = "The cue start timestamp in milliseconds from the start of the video.")

  public Double getCueStart() {
    return cueStart;
  }


  public void setCueStart(Double cueStart) {
    
    
    
    this.cueStart = cueStart;
  }


  public Segment enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Whether the segment is enabled.
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "Whether the segment is enabled.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }


  public Segment id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The segment identifier.
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "9854acd6-9c48-4244-9851-162dd52e9d74#25409003#101800", required = true, value = "The segment identifier.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public Segment kind(KindEnum kind) {
    
    
    
    
    this.kind = kind;
    return this;
  }

   /**
   * The type of caption that the segment originates from.  Option descriptions:  * &#x60;captions&#x60; - The segment originates from a captions file.  * &#x60;subtitles&#x60; - The segment originates from a captions and subtitles file. 
   * @return kind
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "CAPTIONS", required = true, value = "The type of caption that the segment originates from.  Option descriptions:  * `captions` - The segment originates from a captions file.  * `subtitles` - The segment originates from a captions and subtitles file. ")

  public KindEnum getKind() {
    return kind;
  }


  public void setKind(KindEnum kind) {
    
    
    
    this.kind = kind;
  }


  public Segment language(String language) {
    
    
    
    
    this.language = language;
    return this;
  }

   /**
   * The language of the segment.
   * @return language
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "en-x-autogenerated", required = true, value = "The language of the segment.")

  public String getLanguage() {
    return language;
  }


  public void setLanguage(String language) {
    
    
    
    this.language = language;
  }


  public Segment lines(List<SegmentLine> lines) {
    
    
    
    
    this.lines = lines;
    return this;
  }

  public Segment addLinesItem(SegmentLine linesItem) {
    this.lines.add(linesItem);
    return this;
  }

   /**
   * The line data for the segment.
   * @return lines
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The line data for the segment.")

  public List<SegmentLine> getLines() {
    return lines;
  }


  public void setLines(List<SegmentLine> lines) {
    
    
    
    this.lines = lines;
  }


  public Segment speaker(String speaker) {
    
    
    
    
    this.speaker = speaker;
    return this;
  }

   /**
   * The speaker identifier.
   * @return speaker
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1", required = true, value = "The speaker identifier.")

  public String getSpeaker() {
    return speaker;
  }


  public void setSpeaker(String speaker) {
    
    
    
    this.speaker = speaker;
  }


  public Segment textTrackUri(String textTrackUri) {
    
    
    
    
    this.textTrackUri = textTrackUri;
    return this;
  }

   /**
   * The relative URI of the text track that the segment comes from.
   * @return textTrackUri
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "/videos/668723010/texttracks/12345", required = true, value = "The relative URI of the text track that the segment comes from.")

  public String getTextTrackUri() {
    return textTrackUri;
  }


  public void setTextTrackUri(String textTrackUri) {
    
    
    
    this.textTrackUri = textTrackUri;
  }


  public Segment videoUri(String videoUri) {
    
    
    
    
    this.videoUri = videoUri;
    return this;
  }

   /**
   * The canonical relative URI of the segment&#39;s video.
   * @return videoUri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "/videos/668723010", value = "The canonical relative URI of the segment's video.")

  public String getVideoUri() {
    return videoUri;
  }


  public void setVideoUri(String videoUri) {
    
    
    
    this.videoUri = videoUri;
  }


  public Segment words(List<SegmentWords> words) {
    
    
    
    
    this.words = words;
    return this;
  }

  public Segment addWordsItem(SegmentWords wordsItem) {
    this.words.add(wordsItem);
    return this;
  }

   /**
   * The word data for the segment.
   * @return words
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The word data for the segment.")

  public List<SegmentWords> getWords() {
    return words;
  }


  public void setWords(List<SegmentWords> words) {
    
    
    
    this.words = words;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Segment instance itself
   */
  public Segment putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Segment segment = (Segment) o;
    return Objects.equals(this.autogenerated, segment.autogenerated) &&
        Objects.equals(this.cueEnd, segment.cueEnd) &&
        Objects.equals(this.cueStart, segment.cueStart) &&
        Objects.equals(this.enabled, segment.enabled) &&
        Objects.equals(this.id, segment.id) &&
        Objects.equals(this.kind, segment.kind) &&
        Objects.equals(this.language, segment.language) &&
        Objects.equals(this.lines, segment.lines) &&
        Objects.equals(this.speaker, segment.speaker) &&
        Objects.equals(this.textTrackUri, segment.textTrackUri) &&
        Objects.equals(this.videoUri, segment.videoUri) &&
        Objects.equals(this.words, segment.words)&&
        Objects.equals(this.additionalProperties, segment.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autogenerated, cueEnd, cueStart, enabled, id, kind, language, lines, speaker, textTrackUri, videoUri, words, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Segment {\n");
    sb.append("    autogenerated: ").append(toIndentedString(autogenerated)).append("\n");
    sb.append("    cueEnd: ").append(toIndentedString(cueEnd)).append("\n");
    sb.append("    cueStart: ").append(toIndentedString(cueStart)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    lines: ").append(toIndentedString(lines)).append("\n");
    sb.append("    speaker: ").append(toIndentedString(speaker)).append("\n");
    sb.append("    textTrackUri: ").append(toIndentedString(textTrackUri)).append("\n");
    sb.append("    videoUri: ").append(toIndentedString(videoUri)).append("\n");
    sb.append("    words: ").append(toIndentedString(words)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autogenerated");
    openapiFields.add("cue_end");
    openapiFields.add("cue_start");
    openapiFields.add("enabled");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("language");
    openapiFields.add("lines");
    openapiFields.add("speaker");
    openapiFields.add("text_track_uri");
    openapiFields.add("video_uri");
    openapiFields.add("words");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("autogenerated");
    openapiRequiredFields.add("cue_end");
    openapiRequiredFields.add("cue_start");
    openapiRequiredFields.add("enabled");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("kind");
    openapiRequiredFields.add("language");
    openapiRequiredFields.add("lines");
    openapiRequiredFields.add("speaker");
    openapiRequiredFields.add("text_track_uri");
    openapiRequiredFields.add("words");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Segment
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Segment.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Segment is not found in the empty JSON string", Segment.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Segment.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if (!jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("lines").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `lines` to be an array in the JSON string but got `%s`", jsonObj.get("lines").toString()));
      }

      JsonArray jsonArraylines = jsonObj.getAsJsonArray("lines");
      // validate the required field `lines` (array)
      for (int i = 0; i < jsonArraylines.size(); i++) {
        SegmentLine.validateJsonObject(jsonArraylines.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("speaker").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `speaker` to be a primitive type in the JSON string but got `%s`", jsonObj.get("speaker").toString()));
      }
      if (!jsonObj.get("text_track_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text_track_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text_track_uri").toString()));
      }
      if ((jsonObj.get("video_uri") != null && !jsonObj.get("video_uri").isJsonNull()) && !jsonObj.get("video_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `video_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("video_uri").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("words").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `words` to be an array in the JSON string but got `%s`", jsonObj.get("words").toString()));
      }

      JsonArray jsonArraywords = jsonObj.getAsJsonArray("words");
      // validate the required field `words` (array)
      for (int i = 0; i < jsonArraywords.size(); i++) {
        SegmentWords.validateJsonObject(jsonArraywords.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Segment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Segment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Segment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Segment.class));

       return (TypeAdapter<T>) new TypeAdapter<Segment>() {
           @Override
           public void write(JsonWriter out, Segment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Segment read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Segment instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Segment given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Segment
  * @throws IOException if the JSON string is invalid with respect to Segment
  */
  public static Segment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Segment.class);
  }

 /**
  * Convert an instance of Segment to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

