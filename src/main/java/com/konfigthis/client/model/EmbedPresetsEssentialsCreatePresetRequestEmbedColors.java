/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EmbedPresetsEssentialsCreatePresetRequestEmbedColors
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmbedPresetsEssentialsCreatePresetRequestEmbedColors {
  public static final String SERIALIZED_NAME_COLOR_FOUR = "color_four";
  @SerializedName(SERIALIZED_NAME_COLOR_FOUR)
  private String colorFour;

  public static final String SERIALIZED_NAME_COLOR_ONE = "color_one";
  @SerializedName(SERIALIZED_NAME_COLOR_ONE)
  private String colorOne;

  public static final String SERIALIZED_NAME_COLOR_THREE = "color_three";
  @SerializedName(SERIALIZED_NAME_COLOR_THREE)
  private String colorThree;

  public static final String SERIALIZED_NAME_COLOR_TWO = "color_two";
  @SerializedName(SERIALIZED_NAME_COLOR_TWO)
  private String colorTwo;

  public EmbedPresetsEssentialsCreatePresetRequestEmbedColors() {
  }

  public EmbedPresetsEssentialsCreatePresetRequestEmbedColors colorFour(String colorFour) {
    
    
    
    
    this.colorFour = colorFour;
    return this;
  }

   /**
   * The hexadecimal color code of the fourth player color, which controls the player background color.
   * @return colorFour
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "#aabbcc", value = "The hexadecimal color code of the fourth player color, which controls the player background color.")

  public String getColorFour() {
    return colorFour;
  }


  public void setColorFour(String colorFour) {
    
    
    
    this.colorFour = colorFour;
  }


  public EmbedPresetsEssentialsCreatePresetRequestEmbedColors colorOne(String colorOne) {
    
    
    
    
    this.colorOne = colorOne;
    return this;
  }

   /**
   * The hexadecimal color code of the first player color, which controls the color of the progress bar, buttons, and more.
   * @return colorOne
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "#112233", value = "The hexadecimal color code of the first player color, which controls the color of the progress bar, buttons, and more.")

  public String getColorOne() {
    return colorOne;
  }


  public void setColorOne(String colorOne) {
    
    
    
    this.colorOne = colorOne;
  }


  public EmbedPresetsEssentialsCreatePresetRequestEmbedColors colorThree(String colorThree) {
    
    
    
    
    this.colorThree = colorThree;
    return this;
  }

   /**
   * The hexadecimal color code of the third player color, which controls the color of text and icons.
   * @return colorThree
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "#778899", value = "The hexadecimal color code of the third player color, which controls the color of text and icons.")

  public String getColorThree() {
    return colorThree;
  }


  public void setColorThree(String colorThree) {
    
    
    
    this.colorThree = colorThree;
  }


  public EmbedPresetsEssentialsCreatePresetRequestEmbedColors colorTwo(String colorTwo) {
    
    
    
    
    this.colorTwo = colorTwo;
    return this;
  }

   /**
   * The hexadecimal color code of the second player color, which controls the player accent color.
   * @return colorTwo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "#445566", value = "The hexadecimal color code of the second player color, which controls the player accent color.")

  public String getColorTwo() {
    return colorTwo;
  }


  public void setColorTwo(String colorTwo) {
    
    
    
    this.colorTwo = colorTwo;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmbedPresetsEssentialsCreatePresetRequestEmbedColors instance itself
   */
  public EmbedPresetsEssentialsCreatePresetRequestEmbedColors putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmbedPresetsEssentialsCreatePresetRequestEmbedColors embedPresetsEssentialsCreatePresetRequestEmbedColors = (EmbedPresetsEssentialsCreatePresetRequestEmbedColors) o;
    return Objects.equals(this.colorFour, embedPresetsEssentialsCreatePresetRequestEmbedColors.colorFour) &&
        Objects.equals(this.colorOne, embedPresetsEssentialsCreatePresetRequestEmbedColors.colorOne) &&
        Objects.equals(this.colorThree, embedPresetsEssentialsCreatePresetRequestEmbedColors.colorThree) &&
        Objects.equals(this.colorTwo, embedPresetsEssentialsCreatePresetRequestEmbedColors.colorTwo)&&
        Objects.equals(this.additionalProperties, embedPresetsEssentialsCreatePresetRequestEmbedColors.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(colorFour, colorOne, colorThree, colorTwo, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmbedPresetsEssentialsCreatePresetRequestEmbedColors {\n");
    sb.append("    colorFour: ").append(toIndentedString(colorFour)).append("\n");
    sb.append("    colorOne: ").append(toIndentedString(colorOne)).append("\n");
    sb.append("    colorThree: ").append(toIndentedString(colorThree)).append("\n");
    sb.append("    colorTwo: ").append(toIndentedString(colorTwo)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("color_four");
    openapiFields.add("color_one");
    openapiFields.add("color_three");
    openapiFields.add("color_two");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmbedPresetsEssentialsCreatePresetRequestEmbedColors
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmbedPresetsEssentialsCreatePresetRequestEmbedColors.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmbedPresetsEssentialsCreatePresetRequestEmbedColors is not found in the empty JSON string", EmbedPresetsEssentialsCreatePresetRequestEmbedColors.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("color_four") != null && !jsonObj.get("color_four").isJsonNull()) && !jsonObj.get("color_four").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color_four` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color_four").toString()));
      }
      if ((jsonObj.get("color_one") != null && !jsonObj.get("color_one").isJsonNull()) && !jsonObj.get("color_one").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color_one` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color_one").toString()));
      }
      if ((jsonObj.get("color_three") != null && !jsonObj.get("color_three").isJsonNull()) && !jsonObj.get("color_three").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color_three` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color_three").toString()));
      }
      if ((jsonObj.get("color_two") != null && !jsonObj.get("color_two").isJsonNull()) && !jsonObj.get("color_two").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color_two` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color_two").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmbedPresetsEssentialsCreatePresetRequestEmbedColors.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmbedPresetsEssentialsCreatePresetRequestEmbedColors' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmbedPresetsEssentialsCreatePresetRequestEmbedColors> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmbedPresetsEssentialsCreatePresetRequestEmbedColors.class));

       return (TypeAdapter<T>) new TypeAdapter<EmbedPresetsEssentialsCreatePresetRequestEmbedColors>() {
           @Override
           public void write(JsonWriter out, EmbedPresetsEssentialsCreatePresetRequestEmbedColors value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmbedPresetsEssentialsCreatePresetRequestEmbedColors read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmbedPresetsEssentialsCreatePresetRequestEmbedColors instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmbedPresetsEssentialsCreatePresetRequestEmbedColors given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmbedPresetsEssentialsCreatePresetRequestEmbedColors
  * @throws IOException if the JSON string is invalid with respect to EmbedPresetsEssentialsCreatePresetRequestEmbedColors
  */
  public static EmbedPresetsEssentialsCreatePresetRequestEmbedColors fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmbedPresetsEssentialsCreatePresetRequestEmbedColors.class);
  }

 /**
  * Convert an instance of EmbedPresetsEssentialsCreatePresetRequestEmbedColors to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

