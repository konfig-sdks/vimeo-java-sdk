/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2EmbedLogos;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The embed settings of the event and the videos generated by streaming to this event.
 */
@ApiModel(description = "The embed settings of the event and the videos generated by streaming to this event.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed {
  public static final String SERIALIZED_NAME_AUTOPLAY = "autoplay";
  @SerializedName(SERIALIZED_NAME_AUTOPLAY)
  private Boolean autoplay;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_LOGOS = "logos";
  @SerializedName(SERIALIZED_NAME_LOGOS)
  private LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2EmbedLogos logos;

  public static final String SERIALIZED_NAME_LOOP = "loop";
  @SerializedName(SERIALIZED_NAME_LOOP)
  private Boolean loop;

  public static final String SERIALIZED_NAME_PLAYLIST = "playlist";
  @SerializedName(SERIALIZED_NAME_PLAYLIST)
  private Boolean playlist;

  public static final String SERIALIZED_NAME_SCHEDULE = "schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private Boolean schedule;

  public static final String SERIALIZED_NAME_USE_COLOR = "use_color";
  @SerializedName(SERIALIZED_NAME_USE_COLOR)
  private Boolean useColor;

  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed() {
  }

  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed autoplay(Boolean autoplay) {
    
    
    
    
    this.autoplay = autoplay;
    return this;
  }

   /**
   * Whether playback starts automatically on load.
   * @return autoplay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether playback starts automatically on load.")

  public Boolean getAutoplay() {
    return autoplay;
  }


  public void setAutoplay(Boolean autoplay) {
    
    
    
    this.autoplay = autoplay;
  }


  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed color(String color) {
    
    
    
    
    this.color = color;
    return this;
  }

   /**
   * The hexadecimal color code for the main color of the embed player.
   * @return color
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "#00adef", value = "The hexadecimal color code for the main color of the embed player.")

  public String getColor() {
    return color;
  }


  public void setColor(String color) {
    
    
    
    this.color = color;
  }


  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed logos(LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2EmbedLogos logos) {
    
    
    
    
    this.logos = logos;
    return this;
  }

   /**
   * Get logos
   * @return logos
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2EmbedLogos getLogos() {
    return logos;
  }


  public void setLogos(LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2EmbedLogos logos) {
    
    
    
    this.logos = logos;
  }


  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed loop(Boolean loop) {
    
    
    
    
    this.loop = loop;
    return this;
  }

   /**
   * Whether the playlist should start from the beginning again after reaching the end of the last video.
   * @return loop
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the playlist should start from the beginning again after reaching the end of the last video.")

  public Boolean getLoop() {
    return loop;
  }


  public void setLoop(Boolean loop) {
    
    
    
    this.loop = loop;
  }


  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed playlist(Boolean playlist) {
    
    
    
    
    this.playlist = playlist;
    return this;
  }

   /**
   * Whether to show the playlist controls on the embed player.
   * @return playlist
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether to show the playlist controls on the embed player.")

  public Boolean getPlaylist() {
    return playlist;
  }


  public void setPlaylist(Boolean playlist) {
    
    
    
    this.playlist = playlist;
  }


  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed schedule(Boolean schedule) {
    
    
    
    
    this.schedule = schedule;
    return this;
  }

   /**
   * Whether to show the event schedule on the embed player.
   * @return schedule
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether to show the event schedule on the embed player.")

  public Boolean getSchedule() {
    return schedule;
  }


  public void setSchedule(Boolean schedule) {
    
    
    
    this.schedule = schedule;
  }


  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed useColor(Boolean useColor) {
    
    
    
    
    this.useColor = useColor;
    return this;
  }

   /**
   * Whether the embed player should use (&#x60;true&#x60;) or ignore (&#x60;false&#x60;) the **embed.color** value.
   * @return useColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the embed player should use (`true`) or ignore (`false`) the **embed.color** value.")

  public Boolean getUseColor() {
    return useColor;
  }


  public void setUseColor(Boolean useColor) {
    
    
    
    this.useColor = useColor;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed instance itself
   */
  public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed = (LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed) o;
    return Objects.equals(this.autoplay, liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed.autoplay) &&
        Objects.equals(this.color, liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed.color) &&
        Objects.equals(this.logos, liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed.logos) &&
        Objects.equals(this.loop, liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed.loop) &&
        Objects.equals(this.playlist, liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed.playlist) &&
        Objects.equals(this.schedule, liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed.schedule) &&
        Objects.equals(this.useColor, liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed.useColor)&&
        Objects.equals(this.additionalProperties, liveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoplay, color, logos, loop, playlist, schedule, useColor, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed {\n");
    sb.append("    autoplay: ").append(toIndentedString(autoplay)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    logos: ").append(toIndentedString(logos)).append("\n");
    sb.append("    loop: ").append(toIndentedString(loop)).append("\n");
    sb.append("    playlist: ").append(toIndentedString(playlist)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    useColor: ").append(toIndentedString(useColor)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoplay");
    openapiFields.add("color");
    openapiFields.add("logos");
    openapiFields.add("loop");
    openapiFields.add("playlist");
    openapiFields.add("schedule");
    openapiFields.add("use_color");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed is not found in the empty JSON string", LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) && !jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      // validate the optional field `logos`
      if (jsonObj.get("logos") != null && !jsonObj.get("logos").isJsonNull()) {
        LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2EmbedLogos.validateJsonObject(jsonObj.getAsJsonObject("logos"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed.class));

       return (TypeAdapter<T>) new TypeAdapter<LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed>() {
           @Override
           public void write(JsonWriter out, LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed
  * @throws IOException if the JSON string is invalid with respect to LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed
  */
  public static LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed.class);
  }

 /**
  * Convert an instance of LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

