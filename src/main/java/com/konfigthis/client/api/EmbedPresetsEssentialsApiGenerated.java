/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EmbedPresetsEssentialsCreateEmbedPresetRequest;
import com.konfigthis.client.model.EmbedPresetsEssentialsCreateEmbedPresetRequestEmbed;
import com.konfigthis.client.model.EmbedPresetsEssentialsCreatePresetRequest;
import com.konfigthis.client.model.EmbedPresetsEssentialsCreatePresetRequestEmbed;
import com.konfigthis.client.model.EmbedPresetsEssentialsEditPresetRequest;
import com.konfigthis.client.model.EmbedPresetsEssentialsEditPresetRequest1;
import com.konfigthis.client.model.Preset;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmbedPresetsEssentialsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmbedPresetsEssentialsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmbedPresetsEssentialsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createEmbedPresetCall(Double userId, EmbedPresetsEssentialsCreateEmbedPresetRequest embedPresetsEssentialsCreateEmbedPresetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = embedPresetsEssentialsCreateEmbedPresetRequest;

        // create path and map variables
        String localVarPath = "/users/{user_id}/presets"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.preset+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.preset+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEmbedPresetValidateBeforeCall(Double userId, EmbedPresetsEssentialsCreateEmbedPresetRequest embedPresetsEssentialsCreateEmbedPresetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createEmbedPreset(Async)");
        }

        return createEmbedPresetCall(userId, embedPresetsEssentialsCreateEmbedPresetRequest, _callback);

    }


    private ApiResponse<Preset> createEmbedPresetWithHttpInfo(Double userId, EmbedPresetsEssentialsCreateEmbedPresetRequest embedPresetsEssentialsCreateEmbedPresetRequest) throws ApiException {
        okhttp3.Call localVarCall = createEmbedPresetValidateBeforeCall(userId, embedPresetsEssentialsCreateEmbedPresetRequest, null);
        Type localVarReturnType = new TypeToken<Preset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createEmbedPresetAsync(Double userId, EmbedPresetsEssentialsCreateEmbedPresetRequest embedPresetsEssentialsCreateEmbedPresetRequest, final ApiCallback<Preset> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEmbedPresetValidateBeforeCall(userId, embedPresetsEssentialsCreateEmbedPresetRequest, _callback);
        Type localVarReturnType = new TypeToken<Preset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateEmbedPresetRequestBuilder {
        private final Double userId;
        private EmbedPresetsEssentialsCreateEmbedPresetRequestEmbed embed;
        private String name;

        private CreateEmbedPresetRequestBuilder(double userId) {
            this.userId = userId;
        }

        /**
         * Set embed
         * @param embed  (optional)
         * @return CreateEmbedPresetRequestBuilder
         */
        public CreateEmbedPresetRequestBuilder embed(EmbedPresetsEssentialsCreateEmbedPresetRequestEmbed embed) {
            this.embed = embed;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the embed preset. (optional)
         * @return CreateEmbedPresetRequestBuilder
         */
        public CreateEmbedPresetRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for createEmbedPreset
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The embed preset was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmbedPresetsEssentialsCreateEmbedPresetRequest embedPresetsEssentialsCreateEmbedPresetRequest = buildBodyParams();
            return createEmbedPresetCall(userId, embedPresetsEssentialsCreateEmbedPresetRequest, _callback);
        }

        private EmbedPresetsEssentialsCreateEmbedPresetRequest buildBodyParams() {
            EmbedPresetsEssentialsCreateEmbedPresetRequest embedPresetsEssentialsCreateEmbedPresetRequest = new EmbedPresetsEssentialsCreateEmbedPresetRequest();
            embedPresetsEssentialsCreateEmbedPresetRequest.embed(this.embed);
            embedPresetsEssentialsCreateEmbedPresetRequest.name(this.name);
            return embedPresetsEssentialsCreateEmbedPresetRequest;
        }

        /**
         * Execute createEmbedPreset request
         * @return Preset
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The embed preset was created. </td><td>  -  </td></tr>
         </table>
         */
        public Preset execute() throws ApiException {
            EmbedPresetsEssentialsCreateEmbedPresetRequest embedPresetsEssentialsCreateEmbedPresetRequest = buildBodyParams();
            ApiResponse<Preset> localVarResp = createEmbedPresetWithHttpInfo(userId, embedPresetsEssentialsCreateEmbedPresetRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createEmbedPreset request with HTTP info returned
         * @return ApiResponse&lt;Preset&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The embed preset was created. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Preset> executeWithHttpInfo() throws ApiException {
            EmbedPresetsEssentialsCreateEmbedPresetRequest embedPresetsEssentialsCreateEmbedPresetRequest = buildBodyParams();
            return createEmbedPresetWithHttpInfo(userId, embedPresetsEssentialsCreateEmbedPresetRequest);
        }

        /**
         * Execute createEmbedPreset request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The embed preset was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Preset> _callback) throws ApiException {
            EmbedPresetsEssentialsCreateEmbedPresetRequest embedPresetsEssentialsCreateEmbedPresetRequest = buildBodyParams();
            return createEmbedPresetAsync(userId, embedPresetsEssentialsCreateEmbedPresetRequest, _callback);
        }
    }

    /**
     * Create an embed preset
     * This method creates an embed preset.
     * @param userId The ID of the user. (required)
     * @return CreateEmbedPresetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The embed preset was created. </td><td>  -  </td></tr>
     </table>
     */
    public CreateEmbedPresetRequestBuilder createEmbedPreset(double userId) throws IllegalArgumentException {
        
        return new CreateEmbedPresetRequestBuilder(userId);
    }
    private okhttp3.Call createPresetCall(EmbedPresetsEssentialsCreatePresetRequest embedPresetsEssentialsCreatePresetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = embedPresetsEssentialsCreatePresetRequest;

        // create path and map variables
        String localVarPath = "/me/presets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.preset+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.preset+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPresetValidateBeforeCall(EmbedPresetsEssentialsCreatePresetRequest embedPresetsEssentialsCreatePresetRequest, final ApiCallback _callback) throws ApiException {
        return createPresetCall(embedPresetsEssentialsCreatePresetRequest, _callback);

    }


    private ApiResponse<Preset> createPresetWithHttpInfo(EmbedPresetsEssentialsCreatePresetRequest embedPresetsEssentialsCreatePresetRequest) throws ApiException {
        okhttp3.Call localVarCall = createPresetValidateBeforeCall(embedPresetsEssentialsCreatePresetRequest, null);
        Type localVarReturnType = new TypeToken<Preset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPresetAsync(EmbedPresetsEssentialsCreatePresetRequest embedPresetsEssentialsCreatePresetRequest, final ApiCallback<Preset> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPresetValidateBeforeCall(embedPresetsEssentialsCreatePresetRequest, _callback);
        Type localVarReturnType = new TypeToken<Preset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePresetRequestBuilder {
        private EmbedPresetsEssentialsCreatePresetRequestEmbed embed;
        private String name;

        private CreatePresetRequestBuilder() {
        }

        /**
         * Set embed
         * @param embed  (optional)
         * @return CreatePresetRequestBuilder
         */
        public CreatePresetRequestBuilder embed(EmbedPresetsEssentialsCreatePresetRequestEmbed embed) {
            this.embed = embed;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the embed preset. (optional)
         * @return CreatePresetRequestBuilder
         */
        public CreatePresetRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for createPreset
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The embed preset was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmbedPresetsEssentialsCreatePresetRequest embedPresetsEssentialsCreatePresetRequest = buildBodyParams();
            return createPresetCall(embedPresetsEssentialsCreatePresetRequest, _callback);
        }

        private EmbedPresetsEssentialsCreatePresetRequest buildBodyParams() {
            EmbedPresetsEssentialsCreatePresetRequest embedPresetsEssentialsCreatePresetRequest = new EmbedPresetsEssentialsCreatePresetRequest();
            embedPresetsEssentialsCreatePresetRequest.embed(this.embed);
            embedPresetsEssentialsCreatePresetRequest.name(this.name);
            return embedPresetsEssentialsCreatePresetRequest;
        }

        /**
         * Execute createPreset request
         * @return Preset
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The embed preset was created. </td><td>  -  </td></tr>
         </table>
         */
        public Preset execute() throws ApiException {
            EmbedPresetsEssentialsCreatePresetRequest embedPresetsEssentialsCreatePresetRequest = buildBodyParams();
            ApiResponse<Preset> localVarResp = createPresetWithHttpInfo(embedPresetsEssentialsCreatePresetRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPreset request with HTTP info returned
         * @return ApiResponse&lt;Preset&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The embed preset was created. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Preset> executeWithHttpInfo() throws ApiException {
            EmbedPresetsEssentialsCreatePresetRequest embedPresetsEssentialsCreatePresetRequest = buildBodyParams();
            return createPresetWithHttpInfo(embedPresetsEssentialsCreatePresetRequest);
        }

        /**
         * Execute createPreset request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The embed preset was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Preset> _callback) throws ApiException {
            EmbedPresetsEssentialsCreatePresetRequest embedPresetsEssentialsCreatePresetRequest = buildBodyParams();
            return createPresetAsync(embedPresetsEssentialsCreatePresetRequest, _callback);
        }
    }

    /**
     * Create an embed preset
     * This method creates an embed preset.
     * @return CreatePresetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The embed preset was created. </td><td>  -  </td></tr>
     </table>
     */
    public CreatePresetRequestBuilder createPreset() throws IllegalArgumentException {
        return new CreatePresetRequestBuilder();
    }
    private okhttp3.Call editPresetCall(Double presetId, EmbedPresetsEssentialsEditPresetRequest embedPresetsEssentialsEditPresetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = embedPresetsEssentialsEditPresetRequest;

        // create path and map variables
        String localVarPath = "/me/presets/{preset_id}"
            .replace("{" + "preset_id" + "}", localVarApiClient.escapeString(presetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.preset+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.preset+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editPresetValidateBeforeCall(Double presetId, EmbedPresetsEssentialsEditPresetRequest embedPresetsEssentialsEditPresetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'presetId' is set
        if (presetId == null) {
            throw new ApiException("Missing the required parameter 'presetId' when calling editPreset(Async)");
        }

        return editPresetCall(presetId, embedPresetsEssentialsEditPresetRequest, _callback);

    }


    private ApiResponse<Preset> editPresetWithHttpInfo(Double presetId, EmbedPresetsEssentialsEditPresetRequest embedPresetsEssentialsEditPresetRequest) throws ApiException {
        okhttp3.Call localVarCall = editPresetValidateBeforeCall(presetId, embedPresetsEssentialsEditPresetRequest, null);
        Type localVarReturnType = new TypeToken<Preset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call editPresetAsync(Double presetId, EmbedPresetsEssentialsEditPresetRequest embedPresetsEssentialsEditPresetRequest, final ApiCallback<Preset> _callback) throws ApiException {

        okhttp3.Call localVarCall = editPresetValidateBeforeCall(presetId, embedPresetsEssentialsEditPresetRequest, _callback);
        Type localVarReturnType = new TypeToken<Preset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EditPresetRequestBuilder {
        private final Double presetId;
        private String outro;

        private EditPresetRequestBuilder(double presetId) {
            this.presetId = presetId;
        }

        /**
         * Set outro
         * @param outro What to do with the outro.  Option descriptions:  * &#x60;nothing&#x60; - Disable the outro.  (optional)
         * @return EditPresetRequestBuilder
         */
        public EditPresetRequestBuilder outro(String outro) {
            this.outro = outro;
            return this;
        }
        
        /**
         * Build call for editPreset
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The embed preset was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmbedPresetsEssentialsEditPresetRequest embedPresetsEssentialsEditPresetRequest = buildBodyParams();
            return editPresetCall(presetId, embedPresetsEssentialsEditPresetRequest, _callback);
        }

        private EmbedPresetsEssentialsEditPresetRequest buildBodyParams() {
            EmbedPresetsEssentialsEditPresetRequest embedPresetsEssentialsEditPresetRequest = new EmbedPresetsEssentialsEditPresetRequest();
            if (this.outro != null)
            embedPresetsEssentialsEditPresetRequest.outro(EmbedPresetsEssentialsEditPresetRequest.OutroEnum.fromValue(this.outro));
            return embedPresetsEssentialsEditPresetRequest;
        }

        /**
         * Execute editPreset request
         * @return Preset
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The embed preset was edited. </td><td>  -  </td></tr>
         </table>
         */
        public Preset execute() throws ApiException {
            EmbedPresetsEssentialsEditPresetRequest embedPresetsEssentialsEditPresetRequest = buildBodyParams();
            ApiResponse<Preset> localVarResp = editPresetWithHttpInfo(presetId, embedPresetsEssentialsEditPresetRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute editPreset request with HTTP info returned
         * @return ApiResponse&lt;Preset&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The embed preset was edited. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Preset> executeWithHttpInfo() throws ApiException {
            EmbedPresetsEssentialsEditPresetRequest embedPresetsEssentialsEditPresetRequest = buildBodyParams();
            return editPresetWithHttpInfo(presetId, embedPresetsEssentialsEditPresetRequest);
        }

        /**
         * Execute editPreset request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The embed preset was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Preset> _callback) throws ApiException {
            EmbedPresetsEssentialsEditPresetRequest embedPresetsEssentialsEditPresetRequest = buildBodyParams();
            return editPresetAsync(presetId, embedPresetsEssentialsEditPresetRequest, _callback);
        }
    }

    /**
     * Edit an embed preset
     * This method edits the specified embed preset. The authenticated user must be the owner of the preset.
     * @param presetId The ID of the preset. (required)
     * @return EditPresetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The embed preset was edited. </td><td>  -  </td></tr>
     </table>
     */
    public EditPresetRequestBuilder editPreset(double presetId) throws IllegalArgumentException {
        
        return new EditPresetRequestBuilder(presetId);
    }
    private okhttp3.Call editPreset_0Call(Double presetId, Double userId, EmbedPresetsEssentialsEditPresetRequest1 embedPresetsEssentialsEditPresetRequest1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = embedPresetsEssentialsEditPresetRequest1;

        // create path and map variables
        String localVarPath = "/users/{user_id}/presets/{preset_id}"
            .replace("{" + "preset_id" + "}", localVarApiClient.escapeString(presetId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.preset+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.preset+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editPreset_0ValidateBeforeCall(Double presetId, Double userId, EmbedPresetsEssentialsEditPresetRequest1 embedPresetsEssentialsEditPresetRequest1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'presetId' is set
        if (presetId == null) {
            throw new ApiException("Missing the required parameter 'presetId' when calling editPreset_0(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling editPreset_0(Async)");
        }

        return editPreset_0Call(presetId, userId, embedPresetsEssentialsEditPresetRequest1, _callback);

    }


    private ApiResponse<Preset> editPreset_0WithHttpInfo(Double presetId, Double userId, EmbedPresetsEssentialsEditPresetRequest1 embedPresetsEssentialsEditPresetRequest1) throws ApiException {
        okhttp3.Call localVarCall = editPreset_0ValidateBeforeCall(presetId, userId, embedPresetsEssentialsEditPresetRequest1, null);
        Type localVarReturnType = new TypeToken<Preset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call editPreset_0Async(Double presetId, Double userId, EmbedPresetsEssentialsEditPresetRequest1 embedPresetsEssentialsEditPresetRequest1, final ApiCallback<Preset> _callback) throws ApiException {

        okhttp3.Call localVarCall = editPreset_0ValidateBeforeCall(presetId, userId, embedPresetsEssentialsEditPresetRequest1, _callback);
        Type localVarReturnType = new TypeToken<Preset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EditPreset0RequestBuilder {
        private final Double presetId;
        private final Double userId;
        private String outro;

        private EditPreset0RequestBuilder(double presetId, double userId) {
            this.presetId = presetId;
            this.userId = userId;
        }

        /**
         * Set outro
         * @param outro What to do with the outro.  Option descriptions:  * &#x60;nothing&#x60; - Disable the outro.  (optional)
         * @return EditPreset0RequestBuilder
         */
        public EditPreset0RequestBuilder outro(String outro) {
            this.outro = outro;
            return this;
        }
        
        /**
         * Build call for editPreset_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The embed preset was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmbedPresetsEssentialsEditPresetRequest1 embedPresetsEssentialsEditPresetRequest1 = buildBodyParams();
            return editPreset_0Call(presetId, userId, embedPresetsEssentialsEditPresetRequest1, _callback);
        }

        private EmbedPresetsEssentialsEditPresetRequest1 buildBodyParams() {
            EmbedPresetsEssentialsEditPresetRequest1 embedPresetsEssentialsEditPresetRequest1 = new EmbedPresetsEssentialsEditPresetRequest1();
            if (this.outro != null)
            embedPresetsEssentialsEditPresetRequest1.outro(EmbedPresetsEssentialsEditPresetRequest1.OutroEnum.fromValue(this.outro));
            return embedPresetsEssentialsEditPresetRequest1;
        }

        /**
         * Execute editPreset_0 request
         * @return Preset
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The embed preset was edited. </td><td>  -  </td></tr>
         </table>
         */
        public Preset execute() throws ApiException {
            EmbedPresetsEssentialsEditPresetRequest1 embedPresetsEssentialsEditPresetRequest1 = buildBodyParams();
            ApiResponse<Preset> localVarResp = editPreset_0WithHttpInfo(presetId, userId, embedPresetsEssentialsEditPresetRequest1);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute editPreset_0 request with HTTP info returned
         * @return ApiResponse&lt;Preset&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The embed preset was edited. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Preset> executeWithHttpInfo() throws ApiException {
            EmbedPresetsEssentialsEditPresetRequest1 embedPresetsEssentialsEditPresetRequest1 = buildBodyParams();
            return editPreset_0WithHttpInfo(presetId, userId, embedPresetsEssentialsEditPresetRequest1);
        }

        /**
         * Execute editPreset_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The embed preset was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Preset> _callback) throws ApiException {
            EmbedPresetsEssentialsEditPresetRequest1 embedPresetsEssentialsEditPresetRequest1 = buildBodyParams();
            return editPreset_0Async(presetId, userId, embedPresetsEssentialsEditPresetRequest1, _callback);
        }
    }

    /**
     * Edit an embed preset
     * This method edits the specified embed preset. The authenticated user must be the owner of the preset.
     * @param presetId The ID of the preset. (required)
     * @param userId The ID of the user. (required)
     * @return EditPreset0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The embed preset was edited. </td><td>  -  </td></tr>
     </table>
     */
    public EditPreset0RequestBuilder editPreset_0(double presetId, double userId) throws IllegalArgumentException {
        
        
        return new EditPreset0RequestBuilder(presetId, userId);
    }
    private okhttp3.Call getAllUserCreatedEmbedPresetsCall(Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/presets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.preset+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllUserCreatedEmbedPresetsValidateBeforeCall(Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        return getAllUserCreatedEmbedPresetsCall(page, perPage, _callback);

    }


    private ApiResponse<List<Preset>> getAllUserCreatedEmbedPresetsWithHttpInfo(Double page, Double perPage) throws ApiException {
        okhttp3.Call localVarCall = getAllUserCreatedEmbedPresetsValidateBeforeCall(page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Preset>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllUserCreatedEmbedPresetsAsync(Double page, Double perPage, final ApiCallback<List<Preset>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllUserCreatedEmbedPresetsValidateBeforeCall(page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Preset>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllUserCreatedEmbedPresetsRequestBuilder {
        private Double page;
        private Double perPage;

        private GetAllUserCreatedEmbedPresetsRequestBuilder() {
        }

        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetAllUserCreatedEmbedPresetsRequestBuilder
         */
        public GetAllUserCreatedEmbedPresetsRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetAllUserCreatedEmbedPresetsRequestBuilder
         */
        public GetAllUserCreatedEmbedPresetsRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getAllUserCreatedEmbedPresets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The embed presets were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllUserCreatedEmbedPresetsCall(page, perPage, _callback);
        }


        /**
         * Execute getAllUserCreatedEmbedPresets request
         * @return List&lt;Preset&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The embed presets were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Preset> execute() throws ApiException {
            ApiResponse<List<Preset>> localVarResp = getAllUserCreatedEmbedPresetsWithHttpInfo(page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllUserCreatedEmbedPresets request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Preset&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The embed presets were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Preset>> executeWithHttpInfo() throws ApiException {
            return getAllUserCreatedEmbedPresetsWithHttpInfo(page, perPage);
        }

        /**
         * Execute getAllUserCreatedEmbedPresets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The embed presets were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Preset>> _callback) throws ApiException {
            return getAllUserCreatedEmbedPresetsAsync(page, perPage, _callback);
        }
    }

    /**
     * Get all the embed presets that a user has created
     * This method returns every embed preset that belongs to the authenticated user.
     * @return GetAllUserCreatedEmbedPresetsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The embed presets were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllUserCreatedEmbedPresetsRequestBuilder getAllUserCreatedEmbedPresets() throws IllegalArgumentException {
        return new GetAllUserCreatedEmbedPresetsRequestBuilder();
    }
    private okhttp3.Call getSpecificEmbedPresetCall(Double presetId, Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/presets/{preset_id}"
            .replace("{" + "preset_id" + "}", localVarApiClient.escapeString(presetId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.preset+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificEmbedPresetValidateBeforeCall(Double presetId, Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'presetId' is set
        if (presetId == null) {
            throw new ApiException("Missing the required parameter 'presetId' when calling getSpecificEmbedPreset(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getSpecificEmbedPreset(Async)");
        }

        return getSpecificEmbedPresetCall(presetId, userId, _callback);

    }


    private ApiResponse<Preset> getSpecificEmbedPresetWithHttpInfo(Double presetId, Double userId) throws ApiException {
        okhttp3.Call localVarCall = getSpecificEmbedPresetValidateBeforeCall(presetId, userId, null);
        Type localVarReturnType = new TypeToken<Preset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificEmbedPresetAsync(Double presetId, Double userId, final ApiCallback<Preset> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificEmbedPresetValidateBeforeCall(presetId, userId, _callback);
        Type localVarReturnType = new TypeToken<Preset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificEmbedPresetRequestBuilder {
        private final Double presetId;
        private final Double userId;

        private GetSpecificEmbedPresetRequestBuilder(double presetId, double userId) {
            this.presetId = presetId;
            this.userId = userId;
        }

        /**
         * Build call for getSpecificEmbedPreset
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The embed preset was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificEmbedPresetCall(presetId, userId, _callback);
        }


        /**
         * Execute getSpecificEmbedPreset request
         * @return Preset
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The embed preset was returned. </td><td>  -  </td></tr>
         </table>
         */
        public Preset execute() throws ApiException {
            ApiResponse<Preset> localVarResp = getSpecificEmbedPresetWithHttpInfo(presetId, userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificEmbedPreset request with HTTP info returned
         * @return ApiResponse&lt;Preset&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The embed preset was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Preset> executeWithHttpInfo() throws ApiException {
            return getSpecificEmbedPresetWithHttpInfo(presetId, userId);
        }

        /**
         * Execute getSpecificEmbedPreset request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The embed preset was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Preset> _callback) throws ApiException {
            return getSpecificEmbedPresetAsync(presetId, userId, _callback);
        }
    }

    /**
     * Get a specific embed preset
     * This method returns a single embed preset. The authenticated user must be the owner of the preset.
     * @param presetId The ID of the preset. (required)
     * @param userId The ID of the user. (required)
     * @return GetSpecificEmbedPresetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The embed preset was returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificEmbedPresetRequestBuilder getSpecificEmbedPreset(double presetId, double userId) throws IllegalArgumentException {
        
        
        return new GetSpecificEmbedPresetRequestBuilder(presetId, userId);
    }
    private okhttp3.Call getSpecificPresetCall(Double presetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/presets/{preset_id}"
            .replace("{" + "preset_id" + "}", localVarApiClient.escapeString(presetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.preset+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificPresetValidateBeforeCall(Double presetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'presetId' is set
        if (presetId == null) {
            throw new ApiException("Missing the required parameter 'presetId' when calling getSpecificPreset(Async)");
        }

        return getSpecificPresetCall(presetId, _callback);

    }


    private ApiResponse<Preset> getSpecificPresetWithHttpInfo(Double presetId) throws ApiException {
        okhttp3.Call localVarCall = getSpecificPresetValidateBeforeCall(presetId, null);
        Type localVarReturnType = new TypeToken<Preset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificPresetAsync(Double presetId, final ApiCallback<Preset> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificPresetValidateBeforeCall(presetId, _callback);
        Type localVarReturnType = new TypeToken<Preset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificPresetRequestBuilder {
        private final Double presetId;

        private GetSpecificPresetRequestBuilder(double presetId) {
            this.presetId = presetId;
        }

        /**
         * Build call for getSpecificPreset
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The embed preset was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificPresetCall(presetId, _callback);
        }


        /**
         * Execute getSpecificPreset request
         * @return Preset
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The embed preset was returned. </td><td>  -  </td></tr>
         </table>
         */
        public Preset execute() throws ApiException {
            ApiResponse<Preset> localVarResp = getSpecificPresetWithHttpInfo(presetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificPreset request with HTTP info returned
         * @return ApiResponse&lt;Preset&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The embed preset was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Preset> executeWithHttpInfo() throws ApiException {
            return getSpecificPresetWithHttpInfo(presetId);
        }

        /**
         * Execute getSpecificPreset request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The embed preset was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Preset> _callback) throws ApiException {
            return getSpecificPresetAsync(presetId, _callback);
        }
    }

    /**
     * Get a specific embed preset
     * This method returns a single embed preset. The authenticated user must be the owner of the preset.
     * @param presetId The ID of the preset. (required)
     * @return GetSpecificPresetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The embed preset was returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificPresetRequestBuilder getSpecificPreset(double presetId) throws IllegalArgumentException {
        
        return new GetSpecificPresetRequestBuilder(presetId);
    }
    private okhttp3.Call getUserEmbedPresetsCall(Double userId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/presets"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.preset+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserEmbedPresetsValidateBeforeCall(Double userId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserEmbedPresets(Async)");
        }

        return getUserEmbedPresetsCall(userId, page, perPage, _callback);

    }


    private ApiResponse<List<Preset>> getUserEmbedPresetsWithHttpInfo(Double userId, Double page, Double perPage) throws ApiException {
        okhttp3.Call localVarCall = getUserEmbedPresetsValidateBeforeCall(userId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Preset>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserEmbedPresetsAsync(Double userId, Double page, Double perPage, final ApiCallback<List<Preset>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserEmbedPresetsValidateBeforeCall(userId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Preset>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserEmbedPresetsRequestBuilder {
        private final Double userId;
        private Double page;
        private Double perPage;

        private GetUserEmbedPresetsRequestBuilder(double userId) {
            this.userId = userId;
        }

        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetUserEmbedPresetsRequestBuilder
         */
        public GetUserEmbedPresetsRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetUserEmbedPresetsRequestBuilder
         */
        public GetUserEmbedPresetsRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getUserEmbedPresets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The embed presets were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserEmbedPresetsCall(userId, page, perPage, _callback);
        }


        /**
         * Execute getUserEmbedPresets request
         * @return List&lt;Preset&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The embed presets were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Preset> execute() throws ApiException {
            ApiResponse<List<Preset>> localVarResp = getUserEmbedPresetsWithHttpInfo(userId, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserEmbedPresets request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Preset&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The embed presets were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Preset>> executeWithHttpInfo() throws ApiException {
            return getUserEmbedPresetsWithHttpInfo(userId, page, perPage);
        }

        /**
         * Execute getUserEmbedPresets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The embed presets were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Preset>> _callback) throws ApiException {
            return getUserEmbedPresetsAsync(userId, page, perPage, _callback);
        }
    }

    /**
     * Get all the embed presets that a user has created
     * This method returns every embed preset that belongs to the authenticated user.
     * @param userId The ID of the user. (required)
     * @return GetUserEmbedPresetsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The embed presets were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetUserEmbedPresetsRequestBuilder getUserEmbedPresets(double userId) throws IllegalArgumentException {
        
        return new GetUserEmbedPresetsRequestBuilder(userId);
    }
}
