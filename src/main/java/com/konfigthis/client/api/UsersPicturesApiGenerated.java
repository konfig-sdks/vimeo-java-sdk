/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EditPictureRequest;
import com.konfigthis.client.model.Picture;
import com.konfigthis.client.model.UsersPicturesEditPortraitImageRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UsersPicturesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersPicturesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UsersPicturesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addPortraitImageCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/pictures";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPortraitImageValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return addPortraitImageCall(_callback);

    }


    private ApiResponse<Picture> addPortraitImageWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = addPortraitImageValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addPortraitImageAsync(final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPortraitImageValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddPortraitImageRequestBuilder {

        private AddPortraitImageRequestBuilder() {
        }

        /**
         * Build call for addPortraitImage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The portrait image was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addPortraitImageCall(_callback);
        }


        /**
         * Execute addPortraitImage request
         * @return Picture
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The portrait image was added. </td><td>  -  </td></tr>
         </table>
         */
        public Picture execute() throws ApiException {
            ApiResponse<Picture> localVarResp = addPortraitImageWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addPortraitImage request with HTTP info returned
         * @return ApiResponse&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The portrait image was added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Picture> executeWithHttpInfo() throws ApiException {
            return addPortraitImageWithHttpInfo();
        }

        /**
         * Execute addPortraitImage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The portrait image was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Picture> _callback) throws ApiException {
            return addPortraitImageAsync(_callback);
        }
    }

    /**
     * Add a picture to the user&#39;s account
     * This method adds a portrait image to the authenticated user&#39;s Vimeo account. Send the binary data of the image file to the location that you receive from the **link** field in the response. For step-by-step instructions, see [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).
     * @return AddPortraitImageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The portrait image was added. </td><td>  -  </td></tr>
     </table>
     */
    public AddPortraitImageRequestBuilder addPortraitImage() throws IllegalArgumentException {
        return new AddPortraitImageRequestBuilder();
    }
    private okhttp3.Call editPortraitImageCall(Double portraitsetId, UsersPicturesEditPortraitImageRequest usersPicturesEditPortraitImageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersPicturesEditPortraitImageRequest;

        // create path and map variables
        String localVarPath = "/me/pictures/{portraitset_id}"
            .replace("{" + "portraitset_id" + "}", localVarApiClient.escapeString(portraitsetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editPortraitImageValidateBeforeCall(Double portraitsetId, UsersPicturesEditPortraitImageRequest usersPicturesEditPortraitImageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portraitsetId' is set
        if (portraitsetId == null) {
            throw new ApiException("Missing the required parameter 'portraitsetId' when calling editPortraitImage(Async)");
        }

        return editPortraitImageCall(portraitsetId, usersPicturesEditPortraitImageRequest, _callback);

    }


    private ApiResponse<Picture> editPortraitImageWithHttpInfo(Double portraitsetId, UsersPicturesEditPortraitImageRequest usersPicturesEditPortraitImageRequest) throws ApiException {
        okhttp3.Call localVarCall = editPortraitImageValidateBeforeCall(portraitsetId, usersPicturesEditPortraitImageRequest, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call editPortraitImageAsync(Double portraitsetId, UsersPicturesEditPortraitImageRequest usersPicturesEditPortraitImageRequest, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = editPortraitImageValidateBeforeCall(portraitsetId, usersPicturesEditPortraitImageRequest, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EditPortraitImageRequestBuilder {
        private final Double portraitsetId;
        private Boolean active;

        private EditPortraitImageRequestBuilder(double portraitsetId) {
            this.portraitsetId = portraitsetId;
        }

        /**
         * Set active
         * @param active Whether the picture is the authenticated user&#39;s active portrait. (optional)
         * @return EditPortraitImageRequestBuilder
         */
        public EditPortraitImageRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Build call for editPortraitImage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The portrait image was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersPicturesEditPortraitImageRequest usersPicturesEditPortraitImageRequest = buildBodyParams();
            return editPortraitImageCall(portraitsetId, usersPicturesEditPortraitImageRequest, _callback);
        }

        private UsersPicturesEditPortraitImageRequest buildBodyParams() {
            UsersPicturesEditPortraitImageRequest usersPicturesEditPortraitImageRequest = new UsersPicturesEditPortraitImageRequest();
            usersPicturesEditPortraitImageRequest.active(this.active);
            return usersPicturesEditPortraitImageRequest;
        }

        /**
         * Execute editPortraitImage request
         * @return Picture
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The portrait image was edited. </td><td>  -  </td></tr>
         </table>
         */
        public Picture execute() throws ApiException {
            UsersPicturesEditPortraitImageRequest usersPicturesEditPortraitImageRequest = buildBodyParams();
            ApiResponse<Picture> localVarResp = editPortraitImageWithHttpInfo(portraitsetId, usersPicturesEditPortraitImageRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute editPortraitImage request with HTTP info returned
         * @return ApiResponse&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The portrait image was edited. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Picture> executeWithHttpInfo() throws ApiException {
            UsersPicturesEditPortraitImageRequest usersPicturesEditPortraitImageRequest = buildBodyParams();
            return editPortraitImageWithHttpInfo(portraitsetId, usersPicturesEditPortraitImageRequest);
        }

        /**
         * Execute editPortraitImage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The portrait image was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Picture> _callback) throws ApiException {
            UsersPicturesEditPortraitImageRequest usersPicturesEditPortraitImageRequest = buildBodyParams();
            return editPortraitImageAsync(portraitsetId, usersPicturesEditPortraitImageRequest, _callback);
        }
    }

    /**
     * Edit a picture in the user&#39;s account
     * This method edits the specified portrait image belonging to the authenticated user.
     * @param portraitsetId The ID of the picture. (required)
     * @return EditPortraitImageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The portrait image was edited. </td><td>  -  </td></tr>
     </table>
     */
    public EditPortraitImageRequestBuilder editPortraitImage(double portraitsetId) throws IllegalArgumentException {
        
        return new EditPortraitImageRequestBuilder(portraitsetId);
    }
    private okhttp3.Call getSpecificPictureBelongingToUserCall(Double portraitsetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/pictures/{portraitset_id}"
            .replace("{" + "portraitset_id" + "}", localVarApiClient.escapeString(portraitsetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificPictureBelongingToUserValidateBeforeCall(Double portraitsetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portraitsetId' is set
        if (portraitsetId == null) {
            throw new ApiException("Missing the required parameter 'portraitsetId' when calling getSpecificPictureBelongingToUser(Async)");
        }

        return getSpecificPictureBelongingToUserCall(portraitsetId, _callback);

    }


    private ApiResponse<Picture> getSpecificPictureBelongingToUserWithHttpInfo(Double portraitsetId) throws ApiException {
        okhttp3.Call localVarCall = getSpecificPictureBelongingToUserValidateBeforeCall(portraitsetId, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificPictureBelongingToUserAsync(Double portraitsetId, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificPictureBelongingToUserValidateBeforeCall(portraitsetId, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificPictureBelongingToUserRequestBuilder {
        private final Double portraitsetId;

        private GetSpecificPictureBelongingToUserRequestBuilder(double portraitsetId) {
            this.portraitsetId = portraitsetId;
        }

        /**
         * Build call for getSpecificPictureBelongingToUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The portrait image was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificPictureBelongingToUserCall(portraitsetId, _callback);
        }


        /**
         * Execute getSpecificPictureBelongingToUser request
         * @return Picture
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The portrait image was returned. </td><td>  -  </td></tr>
         </table>
         */
        public Picture execute() throws ApiException {
            ApiResponse<Picture> localVarResp = getSpecificPictureBelongingToUserWithHttpInfo(portraitsetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificPictureBelongingToUser request with HTTP info returned
         * @return ApiResponse&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The portrait image was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Picture> executeWithHttpInfo() throws ApiException {
            return getSpecificPictureBelongingToUserWithHttpInfo(portraitsetId);
        }

        /**
         * Execute getSpecificPictureBelongingToUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The portrait image was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Picture> _callback) throws ApiException {
            return getSpecificPictureBelongingToUserAsync(portraitsetId, _callback);
        }
    }

    /**
     * Get a specific picture that belongs to the user
     * This method returns a single portrait image belonging to the authenticated user.
     * @param portraitsetId The ID of the picture. (required)
     * @return GetSpecificPictureBelongingToUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The portrait image was returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificPictureBelongingToUserRequestBuilder getSpecificPictureBelongingToUser(double portraitsetId) throws IllegalArgumentException {
        
        return new GetSpecificPictureBelongingToUserRequestBuilder(portraitsetId);
    }
    private okhttp3.Call listCall(Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/pictures";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        return listCall(page, perPage, _callback);

    }


    private ApiResponse<List<Picture>> listWithHttpInfo(Double page, Double perPage) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(Double page, Double perPage, final ApiCallback<List<Picture>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private Double page;
        private Double perPage;

        private ListRequestBuilder() {
        }

        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The portrait images were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(page, perPage, _callback);
        }


        /**
         * Execute list request
         * @return List&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The portrait images were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Picture> execute() throws ApiException {
            ApiResponse<List<Picture>> localVarResp = listWithHttpInfo(page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Picture&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The portrait images were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Picture>> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(page, perPage);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The portrait images were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Picture>> _callback) throws ApiException {
            return listAsync(page, perPage, _callback);
        }
    }

    /**
     * Get all the pictures that belong to the user
     * This method returns every portrait image belonging to the authenticated user.
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The portrait images were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call pictureCall(Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/pictures"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pictureValidateBeforeCall(Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling picture(Async)");
        }

        return pictureCall(userId, _callback);

    }


    private ApiResponse<Picture> pictureWithHttpInfo(Double userId) throws ApiException {
        okhttp3.Call localVarCall = pictureValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call pictureAsync(Double userId, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = pictureValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PictureRequestBuilder {
        private final Double userId;

        private PictureRequestBuilder(double userId) {
            this.userId = userId;
        }

        /**
         * Build call for picture
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The portrait image was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return pictureCall(userId, _callback);
        }


        /**
         * Execute picture request
         * @return Picture
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The portrait image was added. </td><td>  -  </td></tr>
         </table>
         */
        public Picture execute() throws ApiException {
            ApiResponse<Picture> localVarResp = pictureWithHttpInfo(userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute picture request with HTTP info returned
         * @return ApiResponse&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The portrait image was added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Picture> executeWithHttpInfo() throws ApiException {
            return pictureWithHttpInfo(userId);
        }

        /**
         * Execute picture request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The portrait image was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Picture> _callback) throws ApiException {
            return pictureAsync(userId, _callback);
        }
    }

    /**
     * Add a picture to the user&#39;s account
     * This method adds a portrait image to the authenticated user&#39;s Vimeo account. Send the binary data of the image file to the location that you receive from the **link** field in the response. For step-by-step instructions, see [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).
     * @param userId The ID of the user. (required)
     * @return PictureRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The portrait image was added. </td><td>  -  </td></tr>
     </table>
     */
    public PictureRequestBuilder picture(double userId) throws IllegalArgumentException {
        
        return new PictureRequestBuilder(userId);
    }
    private okhttp3.Call picture_0Call(Double portraitsetId, Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/pictures/{portraitset_id}"
            .replace("{" + "portraitset_id" + "}", localVarApiClient.escapeString(portraitsetId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call picture_0ValidateBeforeCall(Double portraitsetId, Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portraitsetId' is set
        if (portraitsetId == null) {
            throw new ApiException("Missing the required parameter 'portraitsetId' when calling picture_0(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling picture_0(Async)");
        }

        return picture_0Call(portraitsetId, userId, _callback);

    }


    private ApiResponse<Picture> picture_0WithHttpInfo(Double portraitsetId, Double userId) throws ApiException {
        okhttp3.Call localVarCall = picture_0ValidateBeforeCall(portraitsetId, userId, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call picture_0Async(Double portraitsetId, Double userId, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = picture_0ValidateBeforeCall(portraitsetId, userId, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Picture0RequestBuilder {
        private final Double portraitsetId;
        private final Double userId;

        private Picture0RequestBuilder(double portraitsetId, double userId) {
            this.portraitsetId = portraitsetId;
            this.userId = userId;
        }

        /**
         * Build call for picture_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The portrait image was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return picture_0Call(portraitsetId, userId, _callback);
        }


        /**
         * Execute picture_0 request
         * @return Picture
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The portrait image was returned. </td><td>  -  </td></tr>
         </table>
         */
        public Picture execute() throws ApiException {
            ApiResponse<Picture> localVarResp = picture_0WithHttpInfo(portraitsetId, userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute picture_0 request with HTTP info returned
         * @return ApiResponse&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The portrait image was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Picture> executeWithHttpInfo() throws ApiException {
            return picture_0WithHttpInfo(portraitsetId, userId);
        }

        /**
         * Execute picture_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The portrait image was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Picture> _callback) throws ApiException {
            return picture_0Async(portraitsetId, userId, _callback);
        }
    }

    /**
     * Get a specific picture that belongs to the user
     * This method returns a single portrait image belonging to the authenticated user.
     * @param portraitsetId The ID of the picture. (required)
     * @param userId The ID of the user. (required)
     * @return Picture0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The portrait image was returned. </td><td>  -  </td></tr>
     </table>
     */
    public Picture0RequestBuilder picture_0(double portraitsetId, double userId) throws IllegalArgumentException {
        
        
        return new Picture0RequestBuilder(portraitsetId, userId);
    }
    private okhttp3.Call picture_1Call(Double portraitsetId, Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/pictures/{portraitset_id}"
            .replace("{" + "portraitset_id" + "}", localVarApiClient.escapeString(portraitsetId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call picture_1ValidateBeforeCall(Double portraitsetId, Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portraitsetId' is set
        if (portraitsetId == null) {
            throw new ApiException("Missing the required parameter 'portraitsetId' when calling picture_1(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling picture_1(Async)");
        }

        return picture_1Call(portraitsetId, userId, _callback);

    }


    private ApiResponse<Void> picture_1WithHttpInfo(Double portraitsetId, Double userId) throws ApiException {
        okhttp3.Call localVarCall = picture_1ValidateBeforeCall(portraitsetId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call picture_1Async(Double portraitsetId, Double userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = picture_1ValidateBeforeCall(portraitsetId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class Picture1RequestBuilder {
        private final Double portraitsetId;
        private final Double userId;

        private Picture1RequestBuilder(double portraitsetId, double userId) {
            this.portraitsetId = portraitsetId;
            this.userId = userId;
        }

        /**
         * Build call for picture_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The portrait image was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return picture_1Call(portraitsetId, userId, _callback);
        }


        /**
         * Execute picture_1 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The portrait image was removed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            picture_1WithHttpInfo(portraitsetId, userId);
        }

        /**
         * Execute picture_1 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The portrait image was removed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return picture_1WithHttpInfo(portraitsetId, userId);
        }

        /**
         * Execute picture_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The portrait image was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return picture_1Async(portraitsetId, userId, _callback);
        }
    }

    /**
     * Delete a picture from the user&#39;s account
     * This method removes the specified portrait image from the authenticated user&#39;s Vimeo account.
     * @param portraitsetId The ID of the picture. (required)
     * @param userId The ID of the user. (required)
     * @return Picture1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The portrait image was removed. </td><td>  -  </td></tr>
     </table>
     */
    public Picture1RequestBuilder picture_1(double portraitsetId, double userId) throws IllegalArgumentException {
        
        
        return new Picture1RequestBuilder(portraitsetId, userId);
    }
    private okhttp3.Call picture_2Call(Double portraitsetId, Double userId, EditPictureRequest editPictureRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editPictureRequest;

        // create path and map variables
        String localVarPath = "/users/{user_id}/pictures/{portraitset_id}"
            .replace("{" + "portraitset_id" + "}", localVarApiClient.escapeString(portraitsetId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call picture_2ValidateBeforeCall(Double portraitsetId, Double userId, EditPictureRequest editPictureRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portraitsetId' is set
        if (portraitsetId == null) {
            throw new ApiException("Missing the required parameter 'portraitsetId' when calling picture_2(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling picture_2(Async)");
        }

        return picture_2Call(portraitsetId, userId, editPictureRequest, _callback);

    }


    private ApiResponse<Picture> picture_2WithHttpInfo(Double portraitsetId, Double userId, EditPictureRequest editPictureRequest) throws ApiException {
        okhttp3.Call localVarCall = picture_2ValidateBeforeCall(portraitsetId, userId, editPictureRequest, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call picture_2Async(Double portraitsetId, Double userId, EditPictureRequest editPictureRequest, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = picture_2ValidateBeforeCall(portraitsetId, userId, editPictureRequest, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Picture2RequestBuilder {
        private final Double portraitsetId;
        private final Double userId;
        private Boolean active;

        private Picture2RequestBuilder(double portraitsetId, double userId) {
            this.portraitsetId = portraitsetId;
            this.userId = userId;
        }

        /**
         * Set active
         * @param active Whether the picture is the authenticated user&#39;s active portrait. (optional)
         * @return Picture2RequestBuilder
         */
        public Picture2RequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Build call for picture_2
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The portrait image was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EditPictureRequest editPictureRequest = buildBodyParams();
            return picture_2Call(portraitsetId, userId, editPictureRequest, _callback);
        }

        private EditPictureRequest buildBodyParams() {
            EditPictureRequest editPictureRequest = new EditPictureRequest();
            editPictureRequest.active(this.active);
            return editPictureRequest;
        }

        /**
         * Execute picture_2 request
         * @return Picture
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The portrait image was edited. </td><td>  -  </td></tr>
         </table>
         */
        public Picture execute() throws ApiException {
            EditPictureRequest editPictureRequest = buildBodyParams();
            ApiResponse<Picture> localVarResp = picture_2WithHttpInfo(portraitsetId, userId, editPictureRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute picture_2 request with HTTP info returned
         * @return ApiResponse&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The portrait image was edited. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Picture> executeWithHttpInfo() throws ApiException {
            EditPictureRequest editPictureRequest = buildBodyParams();
            return picture_2WithHttpInfo(portraitsetId, userId, editPictureRequest);
        }

        /**
         * Execute picture_2 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The portrait image was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Picture> _callback) throws ApiException {
            EditPictureRequest editPictureRequest = buildBodyParams();
            return picture_2Async(portraitsetId, userId, editPictureRequest, _callback);
        }
    }

    /**
     * Edit a picture in the user&#39;s account
     * This method edits the specified portrait image belonging to the authenticated user.
     * @param portraitsetId The ID of the picture. (required)
     * @param userId The ID of the user. (required)
     * @return Picture2RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The portrait image was edited. </td><td>  -  </td></tr>
     </table>
     */
    public Picture2RequestBuilder picture_2(double portraitsetId, double userId) throws IllegalArgumentException {
        
        
        return new Picture2RequestBuilder(portraitsetId, userId);
    }
    private okhttp3.Call picturesCall(Double userId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/pictures"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call picturesValidateBeforeCall(Double userId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling pictures(Async)");
        }

        return picturesCall(userId, page, perPage, _callback);

    }


    private ApiResponse<List<Picture>> picturesWithHttpInfo(Double userId, Double page, Double perPage) throws ApiException {
        okhttp3.Call localVarCall = picturesValidateBeforeCall(userId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call picturesAsync(Double userId, Double page, Double perPage, final ApiCallback<List<Picture>> _callback) throws ApiException {

        okhttp3.Call localVarCall = picturesValidateBeforeCall(userId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PicturesRequestBuilder {
        private final Double userId;
        private Double page;
        private Double perPage;

        private PicturesRequestBuilder(double userId) {
            this.userId = userId;
        }

        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return PicturesRequestBuilder
         */
        public PicturesRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return PicturesRequestBuilder
         */
        public PicturesRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for pictures
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The portrait images were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return picturesCall(userId, page, perPage, _callback);
        }


        /**
         * Execute pictures request
         * @return List&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The portrait images were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Picture> execute() throws ApiException {
            ApiResponse<List<Picture>> localVarResp = picturesWithHttpInfo(userId, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute pictures request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Picture&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The portrait images were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Picture>> executeWithHttpInfo() throws ApiException {
            return picturesWithHttpInfo(userId, page, perPage);
        }

        /**
         * Execute pictures request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The portrait images were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Picture>> _callback) throws ApiException {
            return picturesAsync(userId, page, perPage, _callback);
        }
    }

    /**
     * Get all the pictures that belong to the user
     * This method returns every portrait image belonging to the authenticated user.
     * @param userId The ID of the user. (required)
     * @return PicturesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The portrait images were returned. </td><td>  -  </td></tr>
     </table>
     */
    public PicturesRequestBuilder pictures(double userId) throws IllegalArgumentException {
        
        return new PicturesRequestBuilder(userId);
    }
    private okhttp3.Call removePortraitImageCall(Double portraitsetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/pictures/{portraitset_id}"
            .replace("{" + "portraitset_id" + "}", localVarApiClient.escapeString(portraitsetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removePortraitImageValidateBeforeCall(Double portraitsetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portraitsetId' is set
        if (portraitsetId == null) {
            throw new ApiException("Missing the required parameter 'portraitsetId' when calling removePortraitImage(Async)");
        }

        return removePortraitImageCall(portraitsetId, _callback);

    }


    private ApiResponse<Void> removePortraitImageWithHttpInfo(Double portraitsetId) throws ApiException {
        okhttp3.Call localVarCall = removePortraitImageValidateBeforeCall(portraitsetId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removePortraitImageAsync(Double portraitsetId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removePortraitImageValidateBeforeCall(portraitsetId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemovePortraitImageRequestBuilder {
        private final Double portraitsetId;

        private RemovePortraitImageRequestBuilder(double portraitsetId) {
            this.portraitsetId = portraitsetId;
        }

        /**
         * Build call for removePortraitImage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The portrait image was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removePortraitImageCall(portraitsetId, _callback);
        }


        /**
         * Execute removePortraitImage request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The portrait image was removed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removePortraitImageWithHttpInfo(portraitsetId);
        }

        /**
         * Execute removePortraitImage request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The portrait image was removed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removePortraitImageWithHttpInfo(portraitsetId);
        }

        /**
         * Execute removePortraitImage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The portrait image was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removePortraitImageAsync(portraitsetId, _callback);
        }
    }

    /**
     * Delete a picture from the user&#39;s account
     * This method removes the specified portrait image from the authenticated user&#39;s Vimeo account.
     * @param portraitsetId The ID of the picture. (required)
     * @return RemovePortraitImageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The portrait image was removed. </td><td>  -  </td></tr>
     </table>
     */
    public RemovePortraitImageRequestBuilder removePortraitImage(double portraitsetId) throws IllegalArgumentException {
        
        return new RemovePortraitImageRequestBuilder(portraitsetId);
    }
}
