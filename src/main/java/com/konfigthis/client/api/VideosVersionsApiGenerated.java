/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.VideoVersion;
import com.konfigthis.client.model.VideosVersionsAddVideoVersionRequest;
import com.konfigthis.client.model.VideosVersionsAddVideoVersionRequestUpload;
import com.konfigthis.client.model.VideosVersionsEditVideoVersionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class VideosVersionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VideosVersionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public VideosVersionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addVideoVersionCall(Double videoId, VideosVersionsAddVideoVersionRequest videosVersionsAddVideoVersionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = videosVersionsAddVideoVersionRequest;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/versions"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video.version+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.video.version+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVideoVersionValidateBeforeCall(Double videoId, VideosVersionsAddVideoVersionRequest videosVersionsAddVideoVersionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addVideoVersion(Async)");
        }

        // verify the required parameter 'videosVersionsAddVideoVersionRequest' is set
        if (videosVersionsAddVideoVersionRequest == null) {
            throw new ApiException("Missing the required parameter 'videosVersionsAddVideoVersionRequest' when calling addVideoVersion(Async)");
        }

        return addVideoVersionCall(videoId, videosVersionsAddVideoVersionRequest, _callback);

    }


    private ApiResponse<VideoVersion> addVideoVersionWithHttpInfo(Double videoId, VideosVersionsAddVideoVersionRequest videosVersionsAddVideoVersionRequest) throws ApiException {
        okhttp3.Call localVarCall = addVideoVersionValidateBeforeCall(videoId, videosVersionsAddVideoVersionRequest, null);
        Type localVarReturnType = new TypeToken<VideoVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addVideoVersionAsync(Double videoId, VideosVersionsAddVideoVersionRequest videosVersionsAddVideoVersionRequest, final ApiCallback<VideoVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVideoVersionValidateBeforeCall(videoId, videosVersionsAddVideoVersionRequest, _callback);
        Type localVarReturnType = new TypeToken<VideoVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddVideoVersionRequestBuilder {
        private final String fileName;
        private final VideosVersionsAddVideoVersionRequestUpload upload;
        private final Double videoId;

        private AddVideoVersionRequestBuilder(String fileName, VideosVersionsAddVideoVersionRequestUpload upload, double videoId) {
            this.fileName = fileName;
            this.upload = upload;
            this.videoId = videoId;
        }

        /**
         * Build call for addVideoVersion
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The version was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VideosVersionsAddVideoVersionRequest videosVersionsAddVideoVersionRequest = buildBodyParams();
            return addVideoVersionCall(videoId, videosVersionsAddVideoVersionRequest, _callback);
        }

        private VideosVersionsAddVideoVersionRequest buildBodyParams() {
            VideosVersionsAddVideoVersionRequest videosVersionsAddVideoVersionRequest = new VideosVersionsAddVideoVersionRequest();
            videosVersionsAddVideoVersionRequest.fileName(this.fileName);
            videosVersionsAddVideoVersionRequest.upload(this.upload);
            return videosVersionsAddVideoVersionRequest;
        }

        /**
         * Execute addVideoVersion request
         * @return VideoVersion
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The version was added. </td><td>  -  </td></tr>
         </table>
         */
        public VideoVersion execute() throws ApiException {
            VideosVersionsAddVideoVersionRequest videosVersionsAddVideoVersionRequest = buildBodyParams();
            ApiResponse<VideoVersion> localVarResp = addVideoVersionWithHttpInfo(videoId, videosVersionsAddVideoVersionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addVideoVersion request with HTTP info returned
         * @return ApiResponse&lt;VideoVersion&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The version was added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VideoVersion> executeWithHttpInfo() throws ApiException {
            VideosVersionsAddVideoVersionRequest videosVersionsAddVideoVersionRequest = buildBodyParams();
            return addVideoVersionWithHttpInfo(videoId, videosVersionsAddVideoVersionRequest);
        }

        /**
         * Execute addVideoVersion request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The version was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VideoVersion> _callback) throws ApiException {
            VideosVersionsAddVideoVersionRequest videosVersionsAddVideoVersionRequest = buildBodyParams();
            return addVideoVersionAsync(videoId, videosVersionsAddVideoVersionRequest, _callback);
        }
    }

    /**
     * Add a version to a video
     * This method adds a version to the specified video. The authenticated user must be the owner of the video.
     * @param videoId The ID of the video. (required)
     * @param videosVersionsAddVideoVersionRequest  (required)
     * @return AddVideoVersionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The version was added. </td><td>  -  </td></tr>
     </table>
     */
    public AddVideoVersionRequestBuilder addVideoVersion(String fileName, VideosVersionsAddVideoVersionRequestUpload upload, double videoId) throws IllegalArgumentException {
        if (fileName == null) throw new IllegalArgumentException("\"fileName\" is required but got null");
            

        if (upload == null) throw new IllegalArgumentException("\"upload\" is required but got null");
        
        return new AddVideoVersionRequestBuilder(fileName, upload, videoId);
    }
    private okhttp3.Call deleteVideoVersionCall(Double versionId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/versions/{version_id}"
            .replace("{" + "version_id" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video.version+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVideoVersionValidateBeforeCall(Double versionId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling deleteVideoVersion(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling deleteVideoVersion(Async)");
        }

        return deleteVideoVersionCall(versionId, videoId, _callback);

    }


    private ApiResponse<Void> deleteVideoVersionWithHttpInfo(Double versionId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = deleteVideoVersionValidateBeforeCall(versionId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteVideoVersionAsync(Double versionId, Double videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVideoVersionValidateBeforeCall(versionId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteVideoVersionRequestBuilder {
        private final Double versionId;
        private final Double videoId;

        private DeleteVideoVersionRequestBuilder(double versionId, double videoId) {
            this.versionId = versionId;
            this.videoId = videoId;
        }

        /**
         * Build call for deleteVideoVersion
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video version was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteVideoVersionCall(versionId, videoId, _callback);
        }


        /**
         * Execute deleteVideoVersion request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video version was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteVideoVersionWithHttpInfo(versionId, videoId);
        }

        /**
         * Execute deleteVideoVersion request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video version was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteVideoVersionWithHttpInfo(versionId, videoId);
        }

        /**
         * Execute deleteVideoVersion request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video version was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteVideoVersionAsync(versionId, videoId, _callback);
        }
    }

    /**
     * Delete a video version
     * This method deletes the specified version from a video. The authenticated user must be the owner of the video.
     * @param versionId The ID of the video version. (required)
     * @param videoId The ID of the video. (required)
     * @return DeleteVideoVersionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video version was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteVideoVersionRequestBuilder deleteVideoVersion(double versionId, double videoId) throws IllegalArgumentException {
        
        
        return new DeleteVideoVersionRequestBuilder(versionId, videoId);
    }
    private okhttp3.Call editVideoVersionCall(Double versionId, Double videoId, VideosVersionsEditVideoVersionRequest videosVersionsEditVideoVersionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = videosVersionsEditVideoVersionRequest;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/versions/{version_id}"
            .replace("{" + "version_id" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video.version+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.video.version+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editVideoVersionValidateBeforeCall(Double versionId, Double videoId, VideosVersionsEditVideoVersionRequest videosVersionsEditVideoVersionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling editVideoVersion(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling editVideoVersion(Async)");
        }

        return editVideoVersionCall(versionId, videoId, videosVersionsEditVideoVersionRequest, _callback);

    }


    private ApiResponse<VideoVersion> editVideoVersionWithHttpInfo(Double versionId, Double videoId, VideosVersionsEditVideoVersionRequest videosVersionsEditVideoVersionRequest) throws ApiException {
        okhttp3.Call localVarCall = editVideoVersionValidateBeforeCall(versionId, videoId, videosVersionsEditVideoVersionRequest, null);
        Type localVarReturnType = new TypeToken<VideoVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call editVideoVersionAsync(Double versionId, Double videoId, VideosVersionsEditVideoVersionRequest videosVersionsEditVideoVersionRequest, final ApiCallback<VideoVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = editVideoVersionValidateBeforeCall(versionId, videoId, videosVersionsEditVideoVersionRequest, _callback);
        Type localVarReturnType = new TypeToken<VideoVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EditVideoVersionRequestBuilder {
        private final Double versionId;
        private final Double videoId;
        private String description;
        private Boolean isCurrent;

        private EditVideoVersionRequestBuilder(double versionId, double videoId) {
            this.versionId = versionId;
            this.videoId = videoId;
        }

        /**
         * Set description
         * @param description A description of the video version. This description can make use of the full unicode character set. (optional)
         * @return EditVideoVersionRequestBuilder
         */
        public EditVideoVersionRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set isCurrent
         * @param isCurrent Whether the video version is active. (optional)
         * @return EditVideoVersionRequestBuilder
         */
        public EditVideoVersionRequestBuilder isCurrent(Boolean isCurrent) {
            this.isCurrent = isCurrent;
            return this;
        }
        
        /**
         * Build call for editVideoVersion
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The version was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VideosVersionsEditVideoVersionRequest videosVersionsEditVideoVersionRequest = buildBodyParams();
            return editVideoVersionCall(versionId, videoId, videosVersionsEditVideoVersionRequest, _callback);
        }

        private VideosVersionsEditVideoVersionRequest buildBodyParams() {
            VideosVersionsEditVideoVersionRequest videosVersionsEditVideoVersionRequest = new VideosVersionsEditVideoVersionRequest();
            videosVersionsEditVideoVersionRequest.description(this.description);
            videosVersionsEditVideoVersionRequest.isCurrent(this.isCurrent);
            return videosVersionsEditVideoVersionRequest;
        }

        /**
         * Execute editVideoVersion request
         * @return VideoVersion
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The version was edited. </td><td>  -  </td></tr>
         </table>
         */
        public VideoVersion execute() throws ApiException {
            VideosVersionsEditVideoVersionRequest videosVersionsEditVideoVersionRequest = buildBodyParams();
            ApiResponse<VideoVersion> localVarResp = editVideoVersionWithHttpInfo(versionId, videoId, videosVersionsEditVideoVersionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute editVideoVersion request with HTTP info returned
         * @return ApiResponse&lt;VideoVersion&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The version was edited. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VideoVersion> executeWithHttpInfo() throws ApiException {
            VideosVersionsEditVideoVersionRequest videosVersionsEditVideoVersionRequest = buildBodyParams();
            return editVideoVersionWithHttpInfo(versionId, videoId, videosVersionsEditVideoVersionRequest);
        }

        /**
         * Execute editVideoVersion request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The version was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VideoVersion> _callback) throws ApiException {
            VideosVersionsEditVideoVersionRequest videosVersionsEditVideoVersionRequest = buildBodyParams();
            return editVideoVersionAsync(versionId, videoId, videosVersionsEditVideoVersionRequest, _callback);
        }
    }

    /**
     * Edit a video version
     * This method edits the specified version of a video. The authenticated user must be the owner of the video.
     * @param versionId The ID of the video version. (required)
     * @param videoId The ID of the video. (required)
     * @return EditVideoVersionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The version was edited. </td><td>  -  </td></tr>
     </table>
     */
    public EditVideoVersionRequestBuilder editVideoVersion(double versionId, double videoId) throws IllegalArgumentException {
        
        
        return new EditVideoVersionRequestBuilder(versionId, videoId);
    }
    private okhttp3.Call getAllVideoVersionsCall(Double channelId, Double videoId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/videos/{video_id}/versions"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video.version+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllVideoVersionsValidateBeforeCall(Double channelId, Double videoId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getAllVideoVersions(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getAllVideoVersions(Async)");
        }

        return getAllVideoVersionsCall(channelId, videoId, page, perPage, _callback);

    }


    private ApiResponse<List<VideoVersion>> getAllVideoVersionsWithHttpInfo(Double channelId, Double videoId, Double page, Double perPage) throws ApiException {
        okhttp3.Call localVarCall = getAllVideoVersionsValidateBeforeCall(channelId, videoId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<VideoVersion>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllVideoVersionsAsync(Double channelId, Double videoId, Double page, Double perPage, final ApiCallback<List<VideoVersion>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllVideoVersionsValidateBeforeCall(channelId, videoId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<VideoVersion>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllVideoVersionsRequestBuilder {
        private final Double channelId;
        private final Double videoId;
        private Double page;
        private Double perPage;

        private GetAllVideoVersionsRequestBuilder(double channelId, double videoId) {
            this.channelId = channelId;
            this.videoId = videoId;
        }

        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetAllVideoVersionsRequestBuilder
         */
        public GetAllVideoVersionsRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetAllVideoVersionsRequestBuilder
         */
        public GetAllVideoVersionsRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getAllVideoVersions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The versions were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllVideoVersionsCall(channelId, videoId, page, perPage, _callback);
        }


        /**
         * Execute getAllVideoVersions request
         * @return List&lt;VideoVersion&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The versions were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<VideoVersion> execute() throws ApiException {
            ApiResponse<List<VideoVersion>> localVarResp = getAllVideoVersionsWithHttpInfo(channelId, videoId, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllVideoVersions request with HTTP info returned
         * @return ApiResponse&lt;List&lt;VideoVersion&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The versions were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<VideoVersion>> executeWithHttpInfo() throws ApiException {
            return getAllVideoVersionsWithHttpInfo(channelId, videoId, page, perPage);
        }

        /**
         * Execute getAllVideoVersions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The versions were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<VideoVersion>> _callback) throws ApiException {
            return getAllVideoVersionsAsync(channelId, videoId, page, perPage, _callback);
        }
    }

    /**
     * Get all the versions of a video
     * This method returns every version of the specified video. The authenticated user must be the owner of the video.
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @return GetAllVideoVersionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The versions were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllVideoVersionsRequestBuilder getAllVideoVersions(double channelId, double videoId) throws IllegalArgumentException {
        
        
        return new GetAllVideoVersionsRequestBuilder(channelId, videoId);
    }
    private okhttp3.Call getAllVideoVersions_0Call(Double videoId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/versions"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video.version+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllVideoVersions_0ValidateBeforeCall(Double videoId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getAllVideoVersions_0(Async)");
        }

        return getAllVideoVersions_0Call(videoId, page, perPage, _callback);

    }


    private ApiResponse<List<VideoVersion>> getAllVideoVersions_0WithHttpInfo(Double videoId, Double page, Double perPage) throws ApiException {
        okhttp3.Call localVarCall = getAllVideoVersions_0ValidateBeforeCall(videoId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<VideoVersion>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllVideoVersions_0Async(Double videoId, Double page, Double perPage, final ApiCallback<List<VideoVersion>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllVideoVersions_0ValidateBeforeCall(videoId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<VideoVersion>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllVideoVersions0RequestBuilder {
        private final Double videoId;
        private Double page;
        private Double perPage;

        private GetAllVideoVersions0RequestBuilder(double videoId) {
            this.videoId = videoId;
        }

        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetAllVideoVersions0RequestBuilder
         */
        public GetAllVideoVersions0RequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetAllVideoVersions0RequestBuilder
         */
        public GetAllVideoVersions0RequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getAllVideoVersions_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The versions were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllVideoVersions_0Call(videoId, page, perPage, _callback);
        }


        /**
         * Execute getAllVideoVersions_0 request
         * @return List&lt;VideoVersion&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The versions were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<VideoVersion> execute() throws ApiException {
            ApiResponse<List<VideoVersion>> localVarResp = getAllVideoVersions_0WithHttpInfo(videoId, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllVideoVersions_0 request with HTTP info returned
         * @return ApiResponse&lt;List&lt;VideoVersion&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The versions were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<VideoVersion>> executeWithHttpInfo() throws ApiException {
            return getAllVideoVersions_0WithHttpInfo(videoId, page, perPage);
        }

        /**
         * Execute getAllVideoVersions_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The versions were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<VideoVersion>> _callback) throws ApiException {
            return getAllVideoVersions_0Async(videoId, page, perPage, _callback);
        }
    }

    /**
     * Get all the versions of a video
     * This method returns every version of the specified video. The authenticated user must be the owner of the video.
     * @param videoId The ID of the video. (required)
     * @return GetAllVideoVersions0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The versions were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllVideoVersions0RequestBuilder getAllVideoVersions_0(double videoId) throws IllegalArgumentException {
        
        return new GetAllVideoVersions0RequestBuilder(videoId);
    }
    private okhttp3.Call getSpecificVersionCall(Double versionId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/versions/{version_id}"
            .replace("{" + "version_id" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video.version+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificVersionValidateBeforeCall(Double versionId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling getSpecificVersion(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getSpecificVersion(Async)");
        }

        return getSpecificVersionCall(versionId, videoId, _callback);

    }


    private ApiResponse<VideoVersion> getSpecificVersionWithHttpInfo(Double versionId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = getSpecificVersionValidateBeforeCall(versionId, videoId, null);
        Type localVarReturnType = new TypeToken<VideoVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificVersionAsync(Double versionId, Double videoId, final ApiCallback<VideoVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificVersionValidateBeforeCall(versionId, videoId, _callback);
        Type localVarReturnType = new TypeToken<VideoVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificVersionRequestBuilder {
        private final Double versionId;
        private final Double videoId;

        private GetSpecificVersionRequestBuilder(double versionId, double videoId) {
            this.versionId = versionId;
            this.videoId = videoId;
        }

        /**
         * Build call for getSpecificVersion
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video version was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificVersionCall(versionId, videoId, _callback);
        }


        /**
         * Execute getSpecificVersion request
         * @return VideoVersion
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video version was returned. </td><td>  -  </td></tr>
         </table>
         */
        public VideoVersion execute() throws ApiException {
            ApiResponse<VideoVersion> localVarResp = getSpecificVersionWithHttpInfo(versionId, videoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificVersion request with HTTP info returned
         * @return ApiResponse&lt;VideoVersion&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video version was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VideoVersion> executeWithHttpInfo() throws ApiException {
            return getSpecificVersionWithHttpInfo(versionId, videoId);
        }

        /**
         * Execute getSpecificVersion request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video version was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VideoVersion> _callback) throws ApiException {
            return getSpecificVersionAsync(versionId, videoId, _callback);
        }
    }

    /**
     * Get a specific video version
     * This method returns a single version of the specified video. The authenticated user must be the owner of the video.
     * @param versionId The ID of the video version. (required)
     * @param videoId The ID of the video. (required)
     * @return GetSpecificVersionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video version was returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificVersionRequestBuilder getSpecificVersion(double versionId, double videoId) throws IllegalArgumentException {
        
        
        return new GetSpecificVersionRequestBuilder(versionId, videoId);
    }
}
