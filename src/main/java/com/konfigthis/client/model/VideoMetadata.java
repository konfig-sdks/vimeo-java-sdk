/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.VideoMetadataConnections;
import com.konfigthis.client.model.VideoMetadataInteractions;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The video&#39;s metadata.
 */
@ApiModel(description = "The video's metadata.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class VideoMetadata {
  public static final String SERIALIZED_NAME_CAN_BE_REPLACED = "can_be_replaced";
  @SerializedName(SERIALIZED_NAME_CAN_BE_REPLACED)
  private Boolean canBeReplaced;

  public static final String SERIALIZED_NAME_CONNECTIONS = "connections";
  @SerializedName(SERIALIZED_NAME_CONNECTIONS)
  private VideoMetadataConnections connections;

  public static final String SERIALIZED_NAME_HAS_CHAPTER_SUGGESTIONS = "has_chapter_suggestions";
  @SerializedName(SERIALIZED_NAME_HAS_CHAPTER_SUGGESTIONS)
  private Boolean hasChapterSuggestions;

  public static final String SERIALIZED_NAME_HAS_EMAIL_CAPTURE = "has_email_capture";
  @SerializedName(SERIALIZED_NAME_HAS_EMAIL_CAPTURE)
  private Boolean hasEmailCapture;

  public static final String SERIALIZED_NAME_INTERACTIONS = "interactions";
  @SerializedName(SERIALIZED_NAME_INTERACTIONS)
  private VideoMetadataInteractions interactions;

  public static final String SERIALIZED_NAME_IS_SCREEN_RECORD = "is_screen_record";
  @SerializedName(SERIALIZED_NAME_IS_SCREEN_RECORD)
  private Boolean isScreenRecord;

  public static final String SERIALIZED_NAME_IS_VIMEO_CREATE = "is_vimeo_create";
  @SerializedName(SERIALIZED_NAME_IS_VIMEO_CREATE)
  private Boolean isVimeoCreate;

  public static final String SERIALIZED_NAME_IS_WEBINAR = "is_webinar";
  @SerializedName(SERIALIZED_NAME_IS_WEBINAR)
  private Boolean isWebinar;

  public static final String SERIALIZED_NAME_IS_ZOOM_UPLOAD = "is_zoom_upload";
  @SerializedName(SERIALIZED_NAME_IS_ZOOM_UPLOAD)
  private Boolean isZoomUpload;

  public VideoMetadata() {
  }

  public VideoMetadata canBeReplaced(Boolean canBeReplaced) {
    
    
    
    
    this.canBeReplaced = canBeReplaced;
    return this;
  }

   /**
   * Whether the video can be replaced.
   * @return canBeReplaced
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the video can be replaced.")

  public Boolean getCanBeReplaced() {
    return canBeReplaced;
  }


  public void setCanBeReplaced(Boolean canBeReplaced) {
    
    
    
    this.canBeReplaced = canBeReplaced;
  }


  public VideoMetadata connections(VideoMetadataConnections connections) {
    
    
    
    
    this.connections = connections;
    return this;
  }

   /**
   * Get connections
   * @return connections
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public VideoMetadataConnections getConnections() {
    return connections;
  }


  public void setConnections(VideoMetadataConnections connections) {
    
    
    
    this.connections = connections;
  }


  public VideoMetadata hasChapterSuggestions(Boolean hasChapterSuggestions) {
    
    
    
    
    this.hasChapterSuggestions = hasChapterSuggestions;
    return this;
  }

   /**
   * Whether the video has chapter suggestions.
   * @return hasChapterSuggestions
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the video has chapter suggestions.")

  public Boolean getHasChapterSuggestions() {
    return hasChapterSuggestions;
  }


  public void setHasChapterSuggestions(Boolean hasChapterSuggestions) {
    
    
    
    this.hasChapterSuggestions = hasChapterSuggestions;
  }


  public VideoMetadata hasEmailCapture(Boolean hasEmailCapture) {
    
    
    
    
    this.hasEmailCapture = hasEmailCapture;
    return this;
  }

   /**
   * Whether the video has the email capture feature.
   * @return hasEmailCapture
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the video has the email capture feature.")

  public Boolean getHasEmailCapture() {
    return hasEmailCapture;
  }


  public void setHasEmailCapture(Boolean hasEmailCapture) {
    
    
    
    this.hasEmailCapture = hasEmailCapture;
  }


  public VideoMetadata interactions(VideoMetadataInteractions interactions) {
    
    
    
    
    this.interactions = interactions;
    return this;
  }

   /**
   * Get interactions
   * @return interactions
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public VideoMetadataInteractions getInteractions() {
    return interactions;
  }


  public void setInteractions(VideoMetadataInteractions interactions) {
    
    
    
    this.interactions = interactions;
  }


  public VideoMetadata isScreenRecord(Boolean isScreenRecord) {
    
    
    
    
    this.isScreenRecord = isScreenRecord;
    return this;
  }

   /**
   * Whether the video is a screen recording.
   * @return isScreenRecord
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the video is a screen recording.")

  public Boolean getIsScreenRecord() {
    return isScreenRecord;
  }


  public void setIsScreenRecord(Boolean isScreenRecord) {
    
    
    
    this.isScreenRecord = isScreenRecord;
  }


  public VideoMetadata isVimeoCreate(Boolean isVimeoCreate) {
    
    
    
    
    this.isVimeoCreate = isVimeoCreate;
    return this;
  }

   /**
   * Whether the video is a Vimeo Create video.
   * @return isVimeoCreate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the video is a Vimeo Create video.")

  public Boolean getIsVimeoCreate() {
    return isVimeoCreate;
  }


  public void setIsVimeoCreate(Boolean isVimeoCreate) {
    
    
    
    this.isVimeoCreate = isVimeoCreate;
  }


  public VideoMetadata isWebinar(Boolean isWebinar) {
    
    
    
    
    this.isWebinar = isWebinar;
    return this;
  }

   /**
   * Whether the video is a webinar.
   * @return isWebinar
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the video is a webinar.")

  public Boolean getIsWebinar() {
    return isWebinar;
  }


  public void setIsWebinar(Boolean isWebinar) {
    
    
    
    this.isWebinar = isWebinar;
  }


  public VideoMetadata isZoomUpload(Boolean isZoomUpload) {
    
    
    
    
    this.isZoomUpload = isZoomUpload;
    return this;
  }

   /**
   * Whether the video is a Zoom upload.
   * @return isZoomUpload
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the video is a Zoom upload.")

  public Boolean getIsZoomUpload() {
    return isZoomUpload;
  }


  public void setIsZoomUpload(Boolean isZoomUpload) {
    
    
    
    this.isZoomUpload = isZoomUpload;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the VideoMetadata instance itself
   */
  public VideoMetadata putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoMetadata videoMetadata = (VideoMetadata) o;
    return Objects.equals(this.canBeReplaced, videoMetadata.canBeReplaced) &&
        Objects.equals(this.connections, videoMetadata.connections) &&
        Objects.equals(this.hasChapterSuggestions, videoMetadata.hasChapterSuggestions) &&
        Objects.equals(this.hasEmailCapture, videoMetadata.hasEmailCapture) &&
        Objects.equals(this.interactions, videoMetadata.interactions) &&
        Objects.equals(this.isScreenRecord, videoMetadata.isScreenRecord) &&
        Objects.equals(this.isVimeoCreate, videoMetadata.isVimeoCreate) &&
        Objects.equals(this.isWebinar, videoMetadata.isWebinar) &&
        Objects.equals(this.isZoomUpload, videoMetadata.isZoomUpload)&&
        Objects.equals(this.additionalProperties, videoMetadata.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canBeReplaced, connections, hasChapterSuggestions, hasEmailCapture, interactions, isScreenRecord, isVimeoCreate, isWebinar, isZoomUpload, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoMetadata {\n");
    sb.append("    canBeReplaced: ").append(toIndentedString(canBeReplaced)).append("\n");
    sb.append("    connections: ").append(toIndentedString(connections)).append("\n");
    sb.append("    hasChapterSuggestions: ").append(toIndentedString(hasChapterSuggestions)).append("\n");
    sb.append("    hasEmailCapture: ").append(toIndentedString(hasEmailCapture)).append("\n");
    sb.append("    interactions: ").append(toIndentedString(interactions)).append("\n");
    sb.append("    isScreenRecord: ").append(toIndentedString(isScreenRecord)).append("\n");
    sb.append("    isVimeoCreate: ").append(toIndentedString(isVimeoCreate)).append("\n");
    sb.append("    isWebinar: ").append(toIndentedString(isWebinar)).append("\n");
    sb.append("    isZoomUpload: ").append(toIndentedString(isZoomUpload)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("can_be_replaced");
    openapiFields.add("connections");
    openapiFields.add("has_chapter_suggestions");
    openapiFields.add("has_email_capture");
    openapiFields.add("interactions");
    openapiFields.add("is_screen_record");
    openapiFields.add("is_vimeo_create");
    openapiFields.add("is_webinar");
    openapiFields.add("is_zoom_upload");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("connections");
    openapiRequiredFields.add("has_chapter_suggestions");
    openapiRequiredFields.add("interactions");
    openapiRequiredFields.add("is_screen_record");
    openapiRequiredFields.add("is_vimeo_create");
    openapiRequiredFields.add("is_webinar");
    openapiRequiredFields.add("is_zoom_upload");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VideoMetadata
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!VideoMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoMetadata is not found in the empty JSON string", VideoMetadata.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VideoMetadata.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `connections`
      VideoMetadataConnections.validateJsonObject(jsonObj.getAsJsonObject("connections"));
      // validate the required field `interactions`
      VideoMetadataInteractions.validateJsonObject(jsonObj.getAsJsonObject("interactions"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoMetadata>() {
           @Override
           public void write(JsonWriter out, VideoMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoMetadata read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             VideoMetadata instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VideoMetadata given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VideoMetadata
  * @throws IOException if the JSON string is invalid with respect to VideoMetadata
  */
  public static VideoMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoMetadata.class);
  }

 /**
  * Convert an instance of VideoMetadata to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

