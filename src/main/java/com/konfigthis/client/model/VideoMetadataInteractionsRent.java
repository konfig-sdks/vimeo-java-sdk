/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The Rent interaction for the On Demand video.
 */
@ApiModel(description = "The Rent interaction for the On Demand video.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class VideoMetadataInteractionsRent {
  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DISPLAY_PRICE = "display_price";
  @SerializedName(SERIALIZED_NAME_DISPLAY_PRICE)
  private String displayPrice;

  public static final String SERIALIZED_NAME_DRM = "drm";
  @SerializedName(SERIALIZED_NAME_DRM)
  private Boolean drm;

  public static final String SERIALIZED_NAME_EXPIRES_TIME = "expires_time";
  @SerializedName(SERIALIZED_NAME_EXPIRES_TIME)
  private String expiresTime;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Double price;

  public static final String SERIALIZED_NAME_PURCHASE_TIME = "purchase_time";
  @SerializedName(SERIALIZED_NAME_PURCHASE_TIME)
  private String purchaseTime;

  /**
   * The user&#39;s streaming access to the On Demand video.  Option descriptions:  * &#x60;available&#x60; - The video is available for streaming.  * &#x60;purchased&#x60; - The user has purchased the video.  * &#x60;restricted&#x60; - The user isn&#39;t permitted to stream the video.  * &#x60;unavailable&#x60; - The video isn&#39;t available for streaming. 
   */
  @JsonAdapter(StreamEnum.Adapter.class)
 public enum StreamEnum {
    AVAILABLE("available"),
    
    PURCHASED("purchased"),
    
    RESTRICTED("restricted"),
    
    UNAVAILABLE("unavailable");

    private String value;

    StreamEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StreamEnum fromValue(String value) {
      for (StreamEnum b : StreamEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StreamEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StreamEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StreamEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StreamEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STREAM = "stream";
  @SerializedName(SERIALIZED_NAME_STREAM)
  private StreamEnum stream;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public VideoMetadataInteractionsRent() {
  }

  public VideoMetadataInteractionsRent currency(String currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * The currency code for the user&#39;s region.
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "USD", required = true, value = "The currency code for the user's region.")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    
    
    
    this.currency = currency;
  }


  public VideoMetadataInteractionsRent displayPrice(String displayPrice) {
    
    
    
    
    this.displayPrice = displayPrice;
    return this;
  }

   /**
   * The formatted display price for renting the On Demand video.
   * @return displayPrice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5.99", required = true, value = "The formatted display price for renting the On Demand video.")

  public String getDisplayPrice() {
    return displayPrice;
  }


  public void setDisplayPrice(String displayPrice) {
    
    
    
    this.displayPrice = displayPrice;
  }


  public VideoMetadataInteractionsRent drm(Boolean drm) {
    
    
    
    
    this.drm = drm;
    return this;
  }

   /**
   * Whether the On Demand video has DRM.
   * @return drm
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the On Demand video has DRM.")

  public Boolean getDrm() {
    return drm;
  }


  public void setDrm(Boolean drm) {
    
    
    
    this.drm = drm;
  }


  public VideoMetadataInteractionsRent expiresTime(String expiresTime) {
    
    
    
    
    this.expiresTime = expiresTime;
    return this;
  }

   /**
   * The time in ISO 8601 format when the rental period for the On Demand video expires.
   * @return expiresTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2018-03-05T21:04:47+00:00", required = true, value = "The time in ISO 8601 format when the rental period for the On Demand video expires.")

  public String getExpiresTime() {
    return expiresTime;
  }


  public void setExpiresTime(String expiresTime) {
    
    
    
    this.expiresTime = expiresTime;
  }


  public VideoMetadataInteractionsRent link(String link) {
    
    
    
    
    this.link = link;
    return this;
  }

   /**
   * The URL to rent the On Demand video on Vimeo.
   * @return link
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://vimeo.com/ondemand/darbyforever", required = true, value = "The URL to rent the On Demand video on Vimeo.")

  public String getLink() {
    return link;
  }


  public void setLink(String link) {
    
    
    
    this.link = link;
  }


  public VideoMetadataInteractionsRent price(Double price) {
    
    
    
    
    this.price = price;
    return this;
  }

  public VideoMetadataInteractionsRent price(Integer price) {
    
    
    
    
    this.price = price.doubleValue();
    return this;
  }

   /**
   * The price to buy the On Demand video.
   * @return price
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5.99", required = true, value = "The price to buy the On Demand video.")

  public Double getPrice() {
    return price;
  }


  public void setPrice(Double price) {
    
    
    
    this.price = price;
  }


  public VideoMetadataInteractionsRent purchaseTime(String purchaseTime) {
    
    
    
    
    this.purchaseTime = purchaseTime;
    return this;
  }

   /**
   * The time in ISO 8601 format when the On Demand video was rented.
   * @return purchaseTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2018-09-16T09:02:40+00:00", required = true, value = "The time in ISO 8601 format when the On Demand video was rented.")

  public String getPurchaseTime() {
    return purchaseTime;
  }


  public void setPurchaseTime(String purchaseTime) {
    
    
    
    this.purchaseTime = purchaseTime;
  }


  public VideoMetadataInteractionsRent stream(StreamEnum stream) {
    
    
    
    
    this.stream = stream;
    return this;
  }

   /**
   * The user&#39;s streaming access to the On Demand video.  Option descriptions:  * &#x60;available&#x60; - The video is available for streaming.  * &#x60;purchased&#x60; - The user has purchased the video.  * &#x60;restricted&#x60; - The user isn&#39;t permitted to stream the video.  * &#x60;unavailable&#x60; - The video isn&#39;t available for streaming. 
   * @return stream
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "AVAILABLE", required = true, value = "The user's streaming access to the On Demand video.  Option descriptions:  * `available` - The video is available for streaming.  * `purchased` - The user has purchased the video.  * `restricted` - The user isn't permitted to stream the video.  * `unavailable` - The video isn't available for streaming. ")

  public StreamEnum getStream() {
    return stream;
  }


  public void setStream(StreamEnum stream) {
    
    
    
    this.stream = stream;
  }


  public VideoMetadataInteractionsRent uri(String uri) {
    
    
    
    
    this.uri = uri;
    return this;
  }

   /**
   * The product URI to rent the On Demand video.
   * @return uri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "/ondemand/pages/61326/products/12345", required = true, value = "The product URI to rent the On Demand video.")

  public String getUri() {
    return uri;
  }


  public void setUri(String uri) {
    
    
    
    this.uri = uri;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the VideoMetadataInteractionsRent instance itself
   */
  public VideoMetadataInteractionsRent putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoMetadataInteractionsRent videoMetadataInteractionsRent = (VideoMetadataInteractionsRent) o;
    return Objects.equals(this.currency, videoMetadataInteractionsRent.currency) &&
        Objects.equals(this.displayPrice, videoMetadataInteractionsRent.displayPrice) &&
        Objects.equals(this.drm, videoMetadataInteractionsRent.drm) &&
        Objects.equals(this.expiresTime, videoMetadataInteractionsRent.expiresTime) &&
        Objects.equals(this.link, videoMetadataInteractionsRent.link) &&
        Objects.equals(this.price, videoMetadataInteractionsRent.price) &&
        Objects.equals(this.purchaseTime, videoMetadataInteractionsRent.purchaseTime) &&
        Objects.equals(this.stream, videoMetadataInteractionsRent.stream) &&
        Objects.equals(this.uri, videoMetadataInteractionsRent.uri)&&
        Objects.equals(this.additionalProperties, videoMetadataInteractionsRent.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currency, displayPrice, drm, expiresTime, link, price, purchaseTime, stream, uri, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoMetadataInteractionsRent {\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    displayPrice: ").append(toIndentedString(displayPrice)).append("\n");
    sb.append("    drm: ").append(toIndentedString(drm)).append("\n");
    sb.append("    expiresTime: ").append(toIndentedString(expiresTime)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    purchaseTime: ").append(toIndentedString(purchaseTime)).append("\n");
    sb.append("    stream: ").append(toIndentedString(stream)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currency");
    openapiFields.add("display_price");
    openapiFields.add("drm");
    openapiFields.add("expires_time");
    openapiFields.add("link");
    openapiFields.add("price");
    openapiFields.add("purchase_time");
    openapiFields.add("stream");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("display_price");
    openapiRequiredFields.add("drm");
    openapiRequiredFields.add("expires_time");
    openapiRequiredFields.add("link");
    openapiRequiredFields.add("price");
    openapiRequiredFields.add("purchase_time");
    openapiRequiredFields.add("stream");
    openapiRequiredFields.add("uri");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VideoMetadataInteractionsRent
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!VideoMetadataInteractionsRent.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoMetadataInteractionsRent is not found in the empty JSON string", VideoMetadataInteractionsRent.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VideoMetadataInteractionsRent.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("currency").isJsonNull() && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (!jsonObj.get("display_price").isJsonNull() && !jsonObj.get("display_price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_price").toString()));
      }
      if (!jsonObj.get("expires_time").isJsonNull() && !jsonObj.get("expires_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expires_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expires_time").toString()));
      }
      if (!jsonObj.get("link").isJsonNull() && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if (!jsonObj.get("purchase_time").isJsonNull() && !jsonObj.get("purchase_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchase_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchase_time").toString()));
      }
      if (!jsonObj.get("stream").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stream` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stream").toString()));
      }
      if (!jsonObj.get("uri").isJsonNull() && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoMetadataInteractionsRent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoMetadataInteractionsRent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoMetadataInteractionsRent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoMetadataInteractionsRent.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoMetadataInteractionsRent>() {
           @Override
           public void write(JsonWriter out, VideoMetadataInteractionsRent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoMetadataInteractionsRent read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             VideoMetadataInteractionsRent instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VideoMetadataInteractionsRent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VideoMetadataInteractionsRent
  * @throws IOException if the JSON string is invalid with respect to VideoMetadataInteractionsRent
  */
  public static VideoMetadataInteractionsRent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoMetadataInteractionsRent.class);
  }

 /**
  * Convert an instance of VideoMetadataInteractionsRent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

