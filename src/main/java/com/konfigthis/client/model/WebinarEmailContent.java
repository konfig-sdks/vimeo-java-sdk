/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * WebinarEmailContent
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class WebinarEmailContent {
  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_BUTTON_LINK = "button_link";
  @SerializedName(SERIALIZED_NAME_BUTTON_LINK)
  private String buttonLink;

  public static final String SERIALIZED_NAME_BUTTON_TEXT = "button_text";
  @SerializedName(SERIALIZED_NAME_BUTTON_TEXT)
  private String buttonText;

  public static final String SERIALIZED_NAME_HEADER = "header";
  @SerializedName(SERIALIZED_NAME_HEADER)
  private String header;

  public static final String SERIALIZED_NAME_MODIFIED_TIME = "modified_time";
  @SerializedName(SERIALIZED_NAME_MODIFIED_TIME)
  private String modifiedTime;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  /**
   * The email type for which the content was customized.  Option descriptions:  * &#x60;email_event_reminder_24_hrs&#x60; - The webinar reminder email, which goes out 24 hours before the event.  * &#x60;email_post_event_thank_you&#x60; - The webinar post-event thank-you email.  * &#x60;email_registration_confirmation&#x60; - The webinar registration confirmation email. 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    EVENT_REMINDER_24_HRS("email_event_reminder_24_hrs"),
    
    POST_EVENT_THANK_YOU("email_post_event_thank_you"),
    
    REGISTRATION_CONFIRMATION("email_registration_confirmation");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_USE_CALENDER = "use_calender";
  @SerializedName(SERIALIZED_NAME_USE_CALENDER)
  private Boolean useCalender;

  public static final String SERIALIZED_NAME_USE_CUSTOM_LINK = "use_custom_link";
  @SerializedName(SERIALIZED_NAME_USE_CUSTOM_LINK)
  private Boolean useCustomLink;

  public WebinarEmailContent() {
  }

  public WebinarEmailContent body(String body) {
    
    
    
    
    this.body = body;
    return this;
  }

   /**
   * The HTML body of the email.
   * @return body
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "<p style=\"text-align:left;\"> This email is all about the webinar.</p>", required = true, value = "The HTML body of the email.")

  public String getBody() {
    return body;
  }


  public void setBody(String body) {
    
    
    
    this.body = body;
  }


  public WebinarEmailContent buttonLink(String buttonLink) {
    
    
    
    
    this.buttonLink = buttonLink;
    return this;
  }

   /**
   * The target link for the call-to-action button in the email.
   * @return buttonLink
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://vimeo.com", required = true, value = "The target link for the call-to-action button in the email.")

  public String getButtonLink() {
    return buttonLink;
  }


  public void setButtonLink(String buttonLink) {
    
    
    
    this.buttonLink = buttonLink;
  }


  public WebinarEmailContent buttonText(String buttonText) {
    
    
    
    
    this.buttonText = buttonText;
    return this;
  }

   /**
   * The text for the call-to-action button in the email.
   * @return buttonText
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Join now", required = true, value = "The text for the call-to-action button in the email.")

  public String getButtonText() {
    return buttonText;
  }


  public void setButtonText(String buttonText) {
    
    
    
    this.buttonText = buttonText;
  }


  public WebinarEmailContent header(String header) {
    
    
    
    
    this.header = header;
    return this;
  }

   /**
   * The HTML header section of the email.
   * @return header
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "<h3> Welcome to the webinar </h3>", required = true, value = "The HTML header section of the email.")

  public String getHeader() {
    return header;
  }


  public void setHeader(String header) {
    
    
    
    this.header = header;
  }


  public WebinarEmailContent modifiedTime(String modifiedTime) {
    
    
    
    
    this.modifiedTime = modifiedTime;
    return this;
  }

   /**
   * The time in ISO 8601 format when the webinar email content was updated.
   * @return modifiedTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2016-11-03T09:24:56+00:00", required = true, value = "The time in ISO 8601 format when the webinar email content was updated.")

  public String getModifiedTime() {
    return modifiedTime;
  }


  public void setModifiedTime(String modifiedTime) {
    
    
    
    this.modifiedTime = modifiedTime;
  }


  public WebinarEmailContent subject(String subject) {
    
    
    
    
    this.subject = subject;
    return this;
  }

   /**
   * The HTML subject of the email.
   * @return subject
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ABC is Hiring", required = true, value = "The HTML subject of the email.")

  public String getSubject() {
    return subject;
  }


  public void setSubject(String subject) {
    
    
    
    this.subject = subject;
  }


  public WebinarEmailContent type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * The email type for which the content was customized.  Option descriptions:  * &#x60;email_event_reminder_24_hrs&#x60; - The webinar reminder email, which goes out 24 hours before the event.  * &#x60;email_post_event_thank_you&#x60; - The webinar post-event thank-you email.  * &#x60;email_registration_confirmation&#x60; - The webinar registration confirmation email. 
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "EMAIL_REGISTRATION_CONFIRMATION", required = true, value = "The email type for which the content was customized.  Option descriptions:  * `email_event_reminder_24_hrs` - The webinar reminder email, which goes out 24 hours before the event.  * `email_post_event_thank_you` - The webinar post-event thank-you email.  * `email_registration_confirmation` - The webinar registration confirmation email. ")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public WebinarEmailContent useCalender(Boolean useCalender) {
    
    
    
    
    this.useCalender = useCalender;
    return this;
  }

   /**
   * Whether to show the calendar in the email.
   * @return useCalender
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether to show the calendar in the email.")

  public Boolean getUseCalender() {
    return useCalender;
  }


  public void setUseCalender(Boolean useCalender) {
    
    
    
    this.useCalender = useCalender;
  }


  public WebinarEmailContent useCustomLink(Boolean useCustomLink) {
    
    
    
    
    this.useCustomLink = useCustomLink;
    return this;
  }

   /**
   * Whether to include a custom link in emails that are sent about the webinar.
   * @return useCustomLink
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether to include a custom link in emails that are sent about the webinar.")

  public Boolean getUseCustomLink() {
    return useCustomLink;
  }


  public void setUseCustomLink(Boolean useCustomLink) {
    
    
    
    this.useCustomLink = useCustomLink;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the WebinarEmailContent instance itself
   */
  public WebinarEmailContent putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebinarEmailContent webinarEmailContent = (WebinarEmailContent) o;
    return Objects.equals(this.body, webinarEmailContent.body) &&
        Objects.equals(this.buttonLink, webinarEmailContent.buttonLink) &&
        Objects.equals(this.buttonText, webinarEmailContent.buttonText) &&
        Objects.equals(this.header, webinarEmailContent.header) &&
        Objects.equals(this.modifiedTime, webinarEmailContent.modifiedTime) &&
        Objects.equals(this.subject, webinarEmailContent.subject) &&
        Objects.equals(this.type, webinarEmailContent.type) &&
        Objects.equals(this.useCalender, webinarEmailContent.useCalender) &&
        Objects.equals(this.useCustomLink, webinarEmailContent.useCustomLink)&&
        Objects.equals(this.additionalProperties, webinarEmailContent.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(body, buttonLink, buttonText, header, modifiedTime, subject, type, useCalender, useCustomLink, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebinarEmailContent {\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    buttonLink: ").append(toIndentedString(buttonLink)).append("\n");
    sb.append("    buttonText: ").append(toIndentedString(buttonText)).append("\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    modifiedTime: ").append(toIndentedString(modifiedTime)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    useCalender: ").append(toIndentedString(useCalender)).append("\n");
    sb.append("    useCustomLink: ").append(toIndentedString(useCustomLink)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body");
    openapiFields.add("button_link");
    openapiFields.add("button_text");
    openapiFields.add("header");
    openapiFields.add("modified_time");
    openapiFields.add("subject");
    openapiFields.add("type");
    openapiFields.add("use_calender");
    openapiFields.add("use_custom_link");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("body");
    openapiRequiredFields.add("button_link");
    openapiRequiredFields.add("button_text");
    openapiRequiredFields.add("header");
    openapiRequiredFields.add("modified_time");
    openapiRequiredFields.add("subject");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("use_calender");
    openapiRequiredFields.add("use_custom_link");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WebinarEmailContent
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WebinarEmailContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebinarEmailContent is not found in the empty JSON string", WebinarEmailContent.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebinarEmailContent.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if (!jsonObj.get("button_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `button_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("button_link").toString()));
      }
      if (!jsonObj.get("button_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `button_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("button_text").toString()));
      }
      if (!jsonObj.get("header").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header").toString()));
      }
      if (!jsonObj.get("modified_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modified_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modified_time").toString()));
      }
      if (!jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebinarEmailContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebinarEmailContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebinarEmailContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebinarEmailContent.class));

       return (TypeAdapter<T>) new TypeAdapter<WebinarEmailContent>() {
           @Override
           public void write(JsonWriter out, WebinarEmailContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public WebinarEmailContent read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             WebinarEmailContent instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WebinarEmailContent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WebinarEmailContent
  * @throws IOException if the JSON string is invalid with respect to WebinarEmailContent
  */
  public static WebinarEmailContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebinarEmailContent.class);
  }

 /**
  * Convert an instance of WebinarEmailContent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

