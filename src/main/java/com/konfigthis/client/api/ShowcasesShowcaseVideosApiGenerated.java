/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Album;
import com.konfigthis.client.model.ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest;
import com.konfigthis.client.model.ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest1;
import com.konfigthis.client.model.ShowcasesShowcaseVideosReplaceShowcaseVideosRequest;
import com.konfigthis.client.model.ShowcasesShowcaseVideosReplaceVideosRequest;
import com.konfigthis.client.model.Video;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ShowcasesShowcaseVideosApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ShowcasesShowcaseVideosApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ShowcasesShowcaseVideosApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addToShowcaseCall(Double albumId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/albums/{album_id}/videos/{video_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addToShowcaseValidateBeforeCall(Double albumId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling addToShowcase(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addToShowcase(Async)");
        }

        return addToShowcaseCall(albumId, videoId, _callback);

    }


    private ApiResponse<Void> addToShowcaseWithHttpInfo(Double albumId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = addToShowcaseValidateBeforeCall(albumId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addToShowcaseAsync(Double albumId, Double videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addToShowcaseValidateBeforeCall(albumId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddToShowcaseRequestBuilder {
        private final Double albumId;
        private final Double videoId;

        private AddToShowcaseRequestBuilder(double albumId, double videoId) {
            this.albumId = albumId;
            this.videoId = videoId;
        }

        /**
         * Build call for addToShowcase
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addToShowcaseCall(albumId, videoId, _callback);
        }


        /**
         * Execute addToShowcase request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            addToShowcaseWithHttpInfo(albumId, videoId);
        }

        /**
         * Execute addToShowcase request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return addToShowcaseWithHttpInfo(albumId, videoId);
        }

        /**
         * Execute addToShowcase request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return addToShowcaseAsync(albumId, videoId, _callback);
        }
    }

    /**
     * Add a specific video to a showcase
     * This method adds a single video to the specified showcase. The authenticated user must be the owner of the showcase.
     * @param albumId The ID of the showcase. (required)
     * @param videoId The ID of the video. (required)
     * @return AddToShowcaseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
     </table>
     */
    public AddToShowcaseRequestBuilder addToShowcase(double albumId, double videoId) throws IllegalArgumentException {
        
        
        return new AddToShowcaseRequestBuilder(albumId, videoId);
    }
    private okhttp3.Call addToShowcase_0Call(Double albumId, Double userId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}/videos/{video_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addToShowcase_0ValidateBeforeCall(Double albumId, Double userId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling addToShowcase_0(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling addToShowcase_0(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addToShowcase_0(Async)");
        }

        return addToShowcase_0Call(albumId, userId, videoId, _callback);

    }


    private ApiResponse<Void> addToShowcase_0WithHttpInfo(Double albumId, Double userId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = addToShowcase_0ValidateBeforeCall(albumId, userId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addToShowcase_0Async(Double albumId, Double userId, Double videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addToShowcase_0ValidateBeforeCall(albumId, userId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddToShowcase0RequestBuilder {
        private final Double albumId;
        private final Double userId;
        private final Double videoId;

        private AddToShowcase0RequestBuilder(double albumId, double userId, double videoId) {
            this.albumId = albumId;
            this.userId = userId;
            this.videoId = videoId;
        }

        /**
         * Build call for addToShowcase_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addToShowcase_0Call(albumId, userId, videoId, _callback);
        }


        /**
         * Execute addToShowcase_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            addToShowcase_0WithHttpInfo(albumId, userId, videoId);
        }

        /**
         * Execute addToShowcase_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return addToShowcase_0WithHttpInfo(albumId, userId, videoId);
        }

        /**
         * Execute addToShowcase_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return addToShowcase_0Async(albumId, userId, videoId, _callback);
        }
    }

    /**
     * Add a specific video to a showcase
     * This method adds a single video to the specified showcase. The authenticated user must be the owner of the showcase.
     * @param albumId The ID of the showcase. (required)
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @return AddToShowcase0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
     </table>
     */
    public AddToShowcase0RequestBuilder addToShowcase_0(double albumId, double userId, double videoId) throws IllegalArgumentException {
        
        
        
        return new AddToShowcase0RequestBuilder(albumId, userId, videoId);
    }
    private okhttp3.Call createShowcaseThumbnailCall(Double albumId, Double videoId, ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest showcasesShowcaseVideosCreateShowcaseThumbnailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = showcasesShowcaseVideosCreateShowcaseThumbnailRequest;

        // create path and map variables
        String localVarPath = "/me/albums/{album_id}/videos/{video_id}/set_album_thumbnail"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createShowcaseThumbnailValidateBeforeCall(Double albumId, Double videoId, ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest showcasesShowcaseVideosCreateShowcaseThumbnailRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling createShowcaseThumbnail(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling createShowcaseThumbnail(Async)");
        }

        return createShowcaseThumbnailCall(albumId, videoId, showcasesShowcaseVideosCreateShowcaseThumbnailRequest, _callback);

    }


    private ApiResponse<Album> createShowcaseThumbnailWithHttpInfo(Double albumId, Double videoId, ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest showcasesShowcaseVideosCreateShowcaseThumbnailRequest) throws ApiException {
        okhttp3.Call localVarCall = createShowcaseThumbnailValidateBeforeCall(albumId, videoId, showcasesShowcaseVideosCreateShowcaseThumbnailRequest, null);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createShowcaseThumbnailAsync(Double albumId, Double videoId, ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest showcasesShowcaseVideosCreateShowcaseThumbnailRequest, final ApiCallback<Album> _callback) throws ApiException {

        okhttp3.Call localVarCall = createShowcaseThumbnailValidateBeforeCall(albumId, videoId, showcasesShowcaseVideosCreateShowcaseThumbnailRequest, _callback);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateShowcaseThumbnailRequestBuilder {
        private final Double albumId;
        private final Double videoId;
        private Double timeCode;

        private CreateShowcaseThumbnailRequestBuilder(double albumId, double videoId) {
            this.albumId = albumId;
            this.videoId = videoId;
        }

        /**
         * Set timeCode
         * @param timeCode The time in seconds of the video frame to use as the thumbnail image. (optional)
         * @return CreateShowcaseThumbnailRequestBuilder
         */
        public CreateShowcaseThumbnailRequestBuilder timeCode(Double timeCode) {
            this.timeCode = timeCode;
            return this;
        }
        
        /**
         * Build call for createShowcaseThumbnail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcase thumbnail was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest showcasesShowcaseVideosCreateShowcaseThumbnailRequest = buildBodyParams();
            return createShowcaseThumbnailCall(albumId, videoId, showcasesShowcaseVideosCreateShowcaseThumbnailRequest, _callback);
        }

        private ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest buildBodyParams() {
            ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest showcasesShowcaseVideosCreateShowcaseThumbnailRequest = new ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest();
            showcasesShowcaseVideosCreateShowcaseThumbnailRequest.timeCode(this.timeCode);
            return showcasesShowcaseVideosCreateShowcaseThumbnailRequest;
        }

        /**
         * Execute createShowcaseThumbnail request
         * @return Album
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcase thumbnail was created. </td><td>  -  </td></tr>
         </table>
         */
        public Album execute() throws ApiException {
            ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest showcasesShowcaseVideosCreateShowcaseThumbnailRequest = buildBodyParams();
            ApiResponse<Album> localVarResp = createShowcaseThumbnailWithHttpInfo(albumId, videoId, showcasesShowcaseVideosCreateShowcaseThumbnailRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createShowcaseThumbnail request with HTTP info returned
         * @return ApiResponse&lt;Album&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcase thumbnail was created. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Album> executeWithHttpInfo() throws ApiException {
            ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest showcasesShowcaseVideosCreateShowcaseThumbnailRequest = buildBodyParams();
            return createShowcaseThumbnailWithHttpInfo(albumId, videoId, showcasesShowcaseVideosCreateShowcaseThumbnailRequest);
        }

        /**
         * Execute createShowcaseThumbnail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcase thumbnail was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Album> _callback) throws ApiException {
            ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest showcasesShowcaseVideosCreateShowcaseThumbnailRequest = buildBodyParams();
            return createShowcaseThumbnailAsync(albumId, videoId, showcasesShowcaseVideosCreateShowcaseThumbnailRequest, _callback);
        }
    }

    /**
     * Create a thumbnail for a showcase from a showcase video
     * This method creates a thumbnail image for a showcase from the specified frame of a showcase video. The authenticated user must be the owner of the showcase.
     * @param albumId The ID of the showcase. (required)
     * @param videoId The ID of the video. (required)
     * @return CreateShowcaseThumbnailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The showcase thumbnail was created. </td><td>  -  </td></tr>
     </table>
     */
    public CreateShowcaseThumbnailRequestBuilder createShowcaseThumbnail(double albumId, double videoId) throws IllegalArgumentException {
        
        
        return new CreateShowcaseThumbnailRequestBuilder(albumId, videoId);
    }
    private okhttp3.Call createShowcaseThumbnail_0Call(Double albumId, Double userId, Double videoId, ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest1 showcasesShowcaseVideosCreateShowcaseThumbnailRequest1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = showcasesShowcaseVideosCreateShowcaseThumbnailRequest1;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}/videos/{video_id}/set_album_thumbnail"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createShowcaseThumbnail_0ValidateBeforeCall(Double albumId, Double userId, Double videoId, ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest1 showcasesShowcaseVideosCreateShowcaseThumbnailRequest1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling createShowcaseThumbnail_0(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createShowcaseThumbnail_0(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling createShowcaseThumbnail_0(Async)");
        }

        return createShowcaseThumbnail_0Call(albumId, userId, videoId, showcasesShowcaseVideosCreateShowcaseThumbnailRequest1, _callback);

    }


    private ApiResponse<Album> createShowcaseThumbnail_0WithHttpInfo(Double albumId, Double userId, Double videoId, ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest1 showcasesShowcaseVideosCreateShowcaseThumbnailRequest1) throws ApiException {
        okhttp3.Call localVarCall = createShowcaseThumbnail_0ValidateBeforeCall(albumId, userId, videoId, showcasesShowcaseVideosCreateShowcaseThumbnailRequest1, null);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createShowcaseThumbnail_0Async(Double albumId, Double userId, Double videoId, ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest1 showcasesShowcaseVideosCreateShowcaseThumbnailRequest1, final ApiCallback<Album> _callback) throws ApiException {

        okhttp3.Call localVarCall = createShowcaseThumbnail_0ValidateBeforeCall(albumId, userId, videoId, showcasesShowcaseVideosCreateShowcaseThumbnailRequest1, _callback);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateShowcaseThumbnail0RequestBuilder {
        private final Double albumId;
        private final Double userId;
        private final Double videoId;
        private Double timeCode;

        private CreateShowcaseThumbnail0RequestBuilder(double albumId, double userId, double videoId) {
            this.albumId = albumId;
            this.userId = userId;
            this.videoId = videoId;
        }

        /**
         * Set timeCode
         * @param timeCode The time in seconds of the video frame to use as the thumbnail image. (optional)
         * @return CreateShowcaseThumbnail0RequestBuilder
         */
        public CreateShowcaseThumbnail0RequestBuilder timeCode(Double timeCode) {
            this.timeCode = timeCode;
            return this;
        }
        
        /**
         * Build call for createShowcaseThumbnail_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcase thumbnail was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest1 showcasesShowcaseVideosCreateShowcaseThumbnailRequest1 = buildBodyParams();
            return createShowcaseThumbnail_0Call(albumId, userId, videoId, showcasesShowcaseVideosCreateShowcaseThumbnailRequest1, _callback);
        }

        private ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest1 buildBodyParams() {
            ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest1 showcasesShowcaseVideosCreateShowcaseThumbnailRequest1 = new ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest1();
            showcasesShowcaseVideosCreateShowcaseThumbnailRequest1.timeCode(this.timeCode);
            return showcasesShowcaseVideosCreateShowcaseThumbnailRequest1;
        }

        /**
         * Execute createShowcaseThumbnail_0 request
         * @return Album
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcase thumbnail was created. </td><td>  -  </td></tr>
         </table>
         */
        public Album execute() throws ApiException {
            ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest1 showcasesShowcaseVideosCreateShowcaseThumbnailRequest1 = buildBodyParams();
            ApiResponse<Album> localVarResp = createShowcaseThumbnail_0WithHttpInfo(albumId, userId, videoId, showcasesShowcaseVideosCreateShowcaseThumbnailRequest1);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createShowcaseThumbnail_0 request with HTTP info returned
         * @return ApiResponse&lt;Album&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcase thumbnail was created. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Album> executeWithHttpInfo() throws ApiException {
            ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest1 showcasesShowcaseVideosCreateShowcaseThumbnailRequest1 = buildBodyParams();
            return createShowcaseThumbnail_0WithHttpInfo(albumId, userId, videoId, showcasesShowcaseVideosCreateShowcaseThumbnailRequest1);
        }

        /**
         * Execute createShowcaseThumbnail_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcase thumbnail was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Album> _callback) throws ApiException {
            ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest1 showcasesShowcaseVideosCreateShowcaseThumbnailRequest1 = buildBodyParams();
            return createShowcaseThumbnail_0Async(albumId, userId, videoId, showcasesShowcaseVideosCreateShowcaseThumbnailRequest1, _callback);
        }
    }

    /**
     * Create a thumbnail for a showcase from a showcase video
     * This method creates a thumbnail image for a showcase from the specified frame of a showcase video. The authenticated user must be the owner of the showcase.
     * @param albumId The ID of the showcase. (required)
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @return CreateShowcaseThumbnail0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The showcase thumbnail was created. </td><td>  -  </td></tr>
     </table>
     */
    public CreateShowcaseThumbnail0RequestBuilder createShowcaseThumbnail_0(double albumId, double userId, double videoId) throws IllegalArgumentException {
        
        
        
        return new CreateShowcaseThumbnail0RequestBuilder(albumId, userId, videoId);
    }
    private okhttp3.Call getShowcaseVideosCall(Double albumId, Double userId, String containingUri, String direction, String filter, Boolean filterEmbeddable, Double page, String password, Double perPage, String query, String sort, Boolean weakSearch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}/videos"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (containingUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("containing_uri", containingUri));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (filterEmbeddable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_embeddable", filterEmbeddable));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (password != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("password", password));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (weakSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weak_search", weakSearch));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShowcaseVideosValidateBeforeCall(Double albumId, Double userId, String containingUri, String direction, String filter, Boolean filterEmbeddable, Double page, String password, Double perPage, String query, String sort, Boolean weakSearch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling getShowcaseVideos(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getShowcaseVideos(Async)");
        }

        return getShowcaseVideosCall(albumId, userId, containingUri, direction, filter, filterEmbeddable, page, password, perPage, query, sort, weakSearch, _callback);

    }


    private ApiResponse<List<Video>> getShowcaseVideosWithHttpInfo(Double albumId, Double userId, String containingUri, String direction, String filter, Boolean filterEmbeddable, Double page, String password, Double perPage, String query, String sort, Boolean weakSearch) throws ApiException {
        okhttp3.Call localVarCall = getShowcaseVideosValidateBeforeCall(albumId, userId, containingUri, direction, filter, filterEmbeddable, page, password, perPage, query, sort, weakSearch, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getShowcaseVideosAsync(Double albumId, Double userId, String containingUri, String direction, String filter, Boolean filterEmbeddable, Double page, String password, Double perPage, String query, String sort, Boolean weakSearch, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getShowcaseVideosValidateBeforeCall(albumId, userId, containingUri, direction, filter, filterEmbeddable, page, password, perPage, query, sort, weakSearch, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetShowcaseVideosRequestBuilder {
        private final Double albumId;
        private final Double userId;
        private String containingUri;
        private String direction;
        private String filter;
        private Boolean filterEmbeddable;
        private Double page;
        private String password;
        private Double perPage;
        private String query;
        private String sort;
        private Boolean weakSearch;

        private GetShowcaseVideosRequestBuilder(double albumId, double userId) {
            this.albumId = albumId;
            this.userId = userId;
        }

        /**
         * Set containingUri
         * @param containingUri The page containing the video URI. (optional)
         * @return GetShowcaseVideosRequestBuilder
         */
        public GetShowcaseVideosRequestBuilder containingUri(String containingUri) {
            this.containingUri = containingUri;
            return this;
        }
        
        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return GetShowcaseVideosRequestBuilder
         */
        public GetShowcaseVideosRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Filter the results by the **embeddable** attribute.  (optional)
         * @return GetShowcaseVideosRequestBuilder
         */
        public GetShowcaseVideosRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set filterEmbeddable
         * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)
         * @return GetShowcaseVideosRequestBuilder
         */
        public GetShowcaseVideosRequestBuilder filterEmbeddable(Boolean filterEmbeddable) {
            this.filterEmbeddable = filterEmbeddable;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetShowcaseVideosRequestBuilder
         */
        public GetShowcaseVideosRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set password
         * @param password The password of the showcase. (optional)
         * @return GetShowcaseVideosRequestBuilder
         */
        public GetShowcaseVideosRequestBuilder password(String password) {
            this.password = password;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetShowcaseVideosRequestBuilder
         */
        public GetShowcaseVideosRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set query
         * @param query The search query to use to filter the results. (optional)
         * @return GetShowcaseVideosRequestBuilder
         */
        public GetShowcaseVideosRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Sort the results by the default method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;manual&#x60; - Sort the results by their manual order.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)
         * @return GetShowcaseVideosRequestBuilder
         */
        public GetShowcaseVideosRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set weakSearch
         * @param weakSearch Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video&#39;s name. (optional)
         * @return GetShowcaseVideosRequestBuilder
         */
        public GetShowcaseVideosRequestBuilder weakSearch(Boolean weakSearch) {
            this.weakSearch = weakSearch;
            return this;
        }
        
        /**
         * Build call for getShowcaseVideos
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getShowcaseVideosCall(albumId, userId, containingUri, direction, filter, filterEmbeddable, page, password, perPage, query, sort, weakSearch, _callback);
        }


        /**
         * Execute getShowcaseVideos request
         * @return List&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Video> execute() throws ApiException {
            ApiResponse<List<Video>> localVarResp = getShowcaseVideosWithHttpInfo(albumId, userId, containingUri, direction, filter, filterEmbeddable, page, password, perPage, query, sort, weakSearch);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getShowcaseVideos request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Video&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Video>> executeWithHttpInfo() throws ApiException {
            return getShowcaseVideosWithHttpInfo(albumId, userId, containingUri, direction, filter, filterEmbeddable, page, password, perPage, query, sort, weakSearch);
        }

        /**
         * Execute getShowcaseVideos request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Video>> _callback) throws ApiException {
            return getShowcaseVideosAsync(albumId, userId, containingUri, direction, filter, filterEmbeddable, page, password, perPage, query, sort, weakSearch, _callback);
        }
    }

    /**
     * Get all the videos in a showcase
     * This method returns every video in the specified showcase. The authenticated user must be the owner of the showcase.
     * @param albumId The ID of the showcase. (required)
     * @param userId The ID of the user. (required)
     * @return GetShowcaseVideosRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetShowcaseVideosRequestBuilder getShowcaseVideos(double albumId, double userId) throws IllegalArgumentException {
        
        
        return new GetShowcaseVideosRequestBuilder(albumId, userId);
    }
    private okhttp3.Call getSpecificVideoInShowcaseCall(Double albumId, Double videoId, String password, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/albums/{album_id}/videos/{video_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (password != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("password", password));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificVideoInShowcaseValidateBeforeCall(Double albumId, Double videoId, String password, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling getSpecificVideoInShowcase(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getSpecificVideoInShowcase(Async)");
        }

        return getSpecificVideoInShowcaseCall(albumId, videoId, password, _callback);

    }


    private ApiResponse<Video> getSpecificVideoInShowcaseWithHttpInfo(Double albumId, Double videoId, String password) throws ApiException {
        okhttp3.Call localVarCall = getSpecificVideoInShowcaseValidateBeforeCall(albumId, videoId, password, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificVideoInShowcaseAsync(Double albumId, Double videoId, String password, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificVideoInShowcaseValidateBeforeCall(albumId, videoId, password, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificVideoInShowcaseRequestBuilder {
        private final Double albumId;
        private final Double videoId;
        private String password;

        private GetSpecificVideoInShowcaseRequestBuilder(double albumId, double videoId) {
            this.albumId = albumId;
            this.videoId = videoId;
        }

        /**
         * Set password
         * @param password The password of the showcase. (optional)
         * @return GetSpecificVideoInShowcaseRequestBuilder
         */
        public GetSpecificVideoInShowcaseRequestBuilder password(String password) {
            this.password = password;
            return this;
        }
        
        /**
         * Build call for getSpecificVideoInShowcase
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificVideoInShowcaseCall(albumId, videoId, password, _callback);
        }


        /**
         * Execute getSpecificVideoInShowcase request
         * @return Video
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public Video execute() throws ApiException {
            ApiResponse<Video> localVarResp = getSpecificVideoInShowcaseWithHttpInfo(albumId, videoId, password);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificVideoInShowcase request with HTTP info returned
         * @return ApiResponse&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Video> executeWithHttpInfo() throws ApiException {
            return getSpecificVideoInShowcaseWithHttpInfo(albumId, videoId, password);
        }

        /**
         * Execute getSpecificVideoInShowcase request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Video> _callback) throws ApiException {
            return getSpecificVideoInShowcaseAsync(albumId, videoId, password, _callback);
        }
    }

    /**
     * Get a specific video in a showcase
     * This method returns a single video belonging to the specified showcase. The authenticated user must be the owner of the showcase.
     * @param albumId The ID of the showcase. (required)
     * @param videoId The ID of the video. (required)
     * @return GetSpecificVideoInShowcaseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificVideoInShowcaseRequestBuilder getSpecificVideoInShowcase(double albumId, double videoId) throws IllegalArgumentException {
        
        
        return new GetSpecificVideoInShowcaseRequestBuilder(albumId, videoId);
    }
    private okhttp3.Call getSpecificVideoInShowcase_0Call(Double albumId, Double userId, Double videoId, String password, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}/videos/{video_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (password != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("password", password));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificVideoInShowcase_0ValidateBeforeCall(Double albumId, Double userId, Double videoId, String password, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling getSpecificVideoInShowcase_0(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getSpecificVideoInShowcase_0(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getSpecificVideoInShowcase_0(Async)");
        }

        return getSpecificVideoInShowcase_0Call(albumId, userId, videoId, password, _callback);

    }


    private ApiResponse<Video> getSpecificVideoInShowcase_0WithHttpInfo(Double albumId, Double userId, Double videoId, String password) throws ApiException {
        okhttp3.Call localVarCall = getSpecificVideoInShowcase_0ValidateBeforeCall(albumId, userId, videoId, password, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificVideoInShowcase_0Async(Double albumId, Double userId, Double videoId, String password, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificVideoInShowcase_0ValidateBeforeCall(albumId, userId, videoId, password, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificVideoInShowcase0RequestBuilder {
        private final Double albumId;
        private final Double userId;
        private final Double videoId;
        private String password;

        private GetSpecificVideoInShowcase0RequestBuilder(double albumId, double userId, double videoId) {
            this.albumId = albumId;
            this.userId = userId;
            this.videoId = videoId;
        }

        /**
         * Set password
         * @param password The password of the showcase. (optional)
         * @return GetSpecificVideoInShowcase0RequestBuilder
         */
        public GetSpecificVideoInShowcase0RequestBuilder password(String password) {
            this.password = password;
            return this;
        }
        
        /**
         * Build call for getSpecificVideoInShowcase_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificVideoInShowcase_0Call(albumId, userId, videoId, password, _callback);
        }


        /**
         * Execute getSpecificVideoInShowcase_0 request
         * @return Video
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public Video execute() throws ApiException {
            ApiResponse<Video> localVarResp = getSpecificVideoInShowcase_0WithHttpInfo(albumId, userId, videoId, password);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificVideoInShowcase_0 request with HTTP info returned
         * @return ApiResponse&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Video> executeWithHttpInfo() throws ApiException {
            return getSpecificVideoInShowcase_0WithHttpInfo(albumId, userId, videoId, password);
        }

        /**
         * Execute getSpecificVideoInShowcase_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Video> _callback) throws ApiException {
            return getSpecificVideoInShowcase_0Async(albumId, userId, videoId, password, _callback);
        }
    }

    /**
     * Get a specific video in a showcase
     * This method returns a single video belonging to the specified showcase. The authenticated user must be the owner of the showcase.
     * @param albumId The ID of the showcase. (required)
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @return GetSpecificVideoInShowcase0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificVideoInShowcase0RequestBuilder getSpecificVideoInShowcase_0(double albumId, double userId, double videoId) throws IllegalArgumentException {
        
        
        
        return new GetSpecificVideoInShowcase0RequestBuilder(albumId, userId, videoId);
    }
    private okhttp3.Call listAvailableShowcasesCall(Double videoId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/available_albums"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.album+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAvailableShowcasesValidateBeforeCall(Double videoId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling listAvailableShowcases(Async)");
        }

        return listAvailableShowcasesCall(videoId, page, perPage, _callback);

    }


    private ApiResponse<List<Album>> listAvailableShowcasesWithHttpInfo(Double videoId, Double page, Double perPage) throws ApiException {
        okhttp3.Call localVarCall = listAvailableShowcasesValidateBeforeCall(videoId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Album>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAvailableShowcasesAsync(Double videoId, Double page, Double perPage, final ApiCallback<List<Album>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAvailableShowcasesValidateBeforeCall(videoId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Album>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAvailableShowcasesRequestBuilder {
        private final Double videoId;
        private Double page;
        private Double perPage;

        private ListAvailableShowcasesRequestBuilder(double videoId) {
            this.videoId = videoId;
        }

        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return ListAvailableShowcasesRequestBuilder
         */
        public ListAvailableShowcasesRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return ListAvailableShowcasesRequestBuilder
         */
        public ListAvailableShowcasesRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for listAvailableShowcases
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcases were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAvailableShowcasesCall(videoId, page, perPage, _callback);
        }


        /**
         * Execute listAvailableShowcases request
         * @return List&lt;Album&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcases were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Album> execute() throws ApiException {
            ApiResponse<List<Album>> localVarResp = listAvailableShowcasesWithHttpInfo(videoId, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAvailableShowcases request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Album&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcases were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Album>> executeWithHttpInfo() throws ApiException {
            return listAvailableShowcasesWithHttpInfo(videoId, page, perPage);
        }

        /**
         * Execute listAvailableShowcases request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcases were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Album>> _callback) throws ApiException {
            return listAvailableShowcasesAsync(videoId, page, perPage, _callback);
        }
    }

    /**
     * Get all the showcases to which the user can add or remove a specific video
     * This endpoint returns every showcase to which the authenticated user can add or remove the specified video. The user must be the owner of the showcase.
     * @param videoId The ID of the video. (required)
     * @return ListAvailableShowcasesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The showcases were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ListAvailableShowcasesRequestBuilder listAvailableShowcases(double videoId) throws IllegalArgumentException {
        
        return new ListAvailableShowcasesRequestBuilder(videoId);
    }
    private okhttp3.Call listInShowcaseCall(Double albumId, String direction, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/albums/{album_id}/available_videos"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInShowcaseValidateBeforeCall(Double albumId, String direction, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling listInShowcase(Async)");
        }

        return listInShowcaseCall(albumId, direction, page, perPage, sort, _callback);

    }


    private ApiResponse<List<Video>> listInShowcaseWithHttpInfo(Double albumId, String direction, Double page, Double perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = listInShowcaseValidateBeforeCall(albumId, direction, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listInShowcaseAsync(Double albumId, String direction, Double page, Double perPage, String sort, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInShowcaseValidateBeforeCall(albumId, direction, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListInShowcaseRequestBuilder {
        private final Double albumId;
        private String direction;
        private Double page;
        private Double perPage;
        private String sort;

        private ListInShowcaseRequestBuilder(double albumId) {
            this.albumId = albumId;
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return ListInShowcaseRequestBuilder
         */
        public ListInShowcaseRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return ListInShowcaseRequestBuilder
         */
        public ListInShowcaseRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return ListInShowcaseRequestBuilder
         */
        public ListInShowcaseRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Sort the results by the default method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by most recent user interaction.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)
         * @return ListInShowcaseRequestBuilder
         */
        public ListInShowcaseRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for listInShowcase
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listInShowcaseCall(albumId, direction, page, perPage, sort, _callback);
        }


        /**
         * Execute listInShowcase request
         * @return List&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Video> execute() throws ApiException {
            ApiResponse<List<Video>> localVarResp = listInShowcaseWithHttpInfo(albumId, direction, page, perPage, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listInShowcase request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Video&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Video>> executeWithHttpInfo() throws ApiException {
            return listInShowcaseWithHttpInfo(albumId, direction, page, perPage, sort);
        }

        /**
         * Execute listInShowcase request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Video>> _callback) throws ApiException {
            return listInShowcaseAsync(albumId, direction, page, perPage, sort, _callback);
        }
    }

    /**
     * Get all the user&#39;s videos that can be added to or removed from a showcase
     * This method returns every video belonging to the authenticated user that can be added to or removed from the specified showcase.
     * @param albumId The ID of the showcase. (required)
     * @return ListInShowcaseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ListInShowcaseRequestBuilder listInShowcase(double albumId) throws IllegalArgumentException {
        
        return new ListInShowcaseRequestBuilder(albumId);
    }
    private okhttp3.Call listInShowcase_0Call(Double albumId, String containingUri, String direction, String filter, Boolean filterEmbeddable, Double page, String password, Double perPage, String query, String sort, Boolean weakSearch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/albums/{album_id}/videos"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (containingUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("containing_uri", containingUri));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (filterEmbeddable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_embeddable", filterEmbeddable));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (password != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("password", password));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (weakSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weak_search", weakSearch));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInShowcase_0ValidateBeforeCall(Double albumId, String containingUri, String direction, String filter, Boolean filterEmbeddable, Double page, String password, Double perPage, String query, String sort, Boolean weakSearch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling listInShowcase_0(Async)");
        }

        return listInShowcase_0Call(albumId, containingUri, direction, filter, filterEmbeddable, page, password, perPage, query, sort, weakSearch, _callback);

    }


    private ApiResponse<List<Video>> listInShowcase_0WithHttpInfo(Double albumId, String containingUri, String direction, String filter, Boolean filterEmbeddable, Double page, String password, Double perPage, String query, String sort, Boolean weakSearch) throws ApiException {
        okhttp3.Call localVarCall = listInShowcase_0ValidateBeforeCall(albumId, containingUri, direction, filter, filterEmbeddable, page, password, perPage, query, sort, weakSearch, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listInShowcase_0Async(Double albumId, String containingUri, String direction, String filter, Boolean filterEmbeddable, Double page, String password, Double perPage, String query, String sort, Boolean weakSearch, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInShowcase_0ValidateBeforeCall(albumId, containingUri, direction, filter, filterEmbeddable, page, password, perPage, query, sort, weakSearch, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListInShowcase0RequestBuilder {
        private final Double albumId;
        private String containingUri;
        private String direction;
        private String filter;
        private Boolean filterEmbeddable;
        private Double page;
        private String password;
        private Double perPage;
        private String query;
        private String sort;
        private Boolean weakSearch;

        private ListInShowcase0RequestBuilder(double albumId) {
            this.albumId = albumId;
        }

        /**
         * Set containingUri
         * @param containingUri The page containing the video URI. (optional)
         * @return ListInShowcase0RequestBuilder
         */
        public ListInShowcase0RequestBuilder containingUri(String containingUri) {
            this.containingUri = containingUri;
            return this;
        }
        
        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return ListInShowcase0RequestBuilder
         */
        public ListInShowcase0RequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Filter the results by the **embeddable** attribute.  (optional)
         * @return ListInShowcase0RequestBuilder
         */
        public ListInShowcase0RequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set filterEmbeddable
         * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)
         * @return ListInShowcase0RequestBuilder
         */
        public ListInShowcase0RequestBuilder filterEmbeddable(Boolean filterEmbeddable) {
            this.filterEmbeddable = filterEmbeddable;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return ListInShowcase0RequestBuilder
         */
        public ListInShowcase0RequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set password
         * @param password The password of the showcase. (optional)
         * @return ListInShowcase0RequestBuilder
         */
        public ListInShowcase0RequestBuilder password(String password) {
            this.password = password;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return ListInShowcase0RequestBuilder
         */
        public ListInShowcase0RequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set query
         * @param query The search query to use to filter the results. (optional)
         * @return ListInShowcase0RequestBuilder
         */
        public ListInShowcase0RequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Sort the results by the default method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;manual&#x60; - Sort the results by their manual order.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)
         * @return ListInShowcase0RequestBuilder
         */
        public ListInShowcase0RequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set weakSearch
         * @param weakSearch Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video&#39;s name. (optional)
         * @return ListInShowcase0RequestBuilder
         */
        public ListInShowcase0RequestBuilder weakSearch(Boolean weakSearch) {
            this.weakSearch = weakSearch;
            return this;
        }
        
        /**
         * Build call for listInShowcase_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listInShowcase_0Call(albumId, containingUri, direction, filter, filterEmbeddable, page, password, perPage, query, sort, weakSearch, _callback);
        }


        /**
         * Execute listInShowcase_0 request
         * @return List&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Video> execute() throws ApiException {
            ApiResponse<List<Video>> localVarResp = listInShowcase_0WithHttpInfo(albumId, containingUri, direction, filter, filterEmbeddable, page, password, perPage, query, sort, weakSearch);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listInShowcase_0 request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Video&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Video>> executeWithHttpInfo() throws ApiException {
            return listInShowcase_0WithHttpInfo(albumId, containingUri, direction, filter, filterEmbeddable, page, password, perPage, query, sort, weakSearch);
        }

        /**
         * Execute listInShowcase_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Video>> _callback) throws ApiException {
            return listInShowcase_0Async(albumId, containingUri, direction, filter, filterEmbeddable, page, password, perPage, query, sort, weakSearch, _callback);
        }
    }

    /**
     * Get all the videos in a showcase
     * This method returns every video in the specified showcase. The authenticated user must be the owner of the showcase.
     * @param albumId The ID of the showcase. (required)
     * @return ListInShowcase0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ListInShowcase0RequestBuilder listInShowcase_0(double albumId) throws IllegalArgumentException {
        
        return new ListInShowcase0RequestBuilder(albumId);
    }
    private okhttp3.Call removeFromShowcaseCall(Double albumId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/albums/{album_id}/videos/{video_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFromShowcaseValidateBeforeCall(Double albumId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling removeFromShowcase(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling removeFromShowcase(Async)");
        }

        return removeFromShowcaseCall(albumId, videoId, _callback);

    }


    private ApiResponse<Void> removeFromShowcaseWithHttpInfo(Double albumId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = removeFromShowcaseValidateBeforeCall(albumId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeFromShowcaseAsync(Double albumId, Double videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFromShowcaseValidateBeforeCall(albumId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveFromShowcaseRequestBuilder {
        private final Double albumId;
        private final Double videoId;

        private RemoveFromShowcaseRequestBuilder(double albumId, double videoId) {
            this.albumId = albumId;
            this.videoId = videoId;
        }

        /**
         * Build call for removeFromShowcase
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeFromShowcaseCall(albumId, videoId, _callback);
        }


        /**
         * Execute removeFromShowcase request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeFromShowcaseWithHttpInfo(albumId, videoId);
        }

        /**
         * Execute removeFromShowcase request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeFromShowcaseWithHttpInfo(albumId, videoId);
        }

        /**
         * Execute removeFromShowcase request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeFromShowcaseAsync(albumId, videoId, _callback);
        }
    }

    /**
     * Remove a video from a showcase
     * This method removes the specified video from its showcase. The authenticated user must be the owner of the showcase.
     * @param albumId The ID of the showcase. (required)
     * @param videoId The ID of the video. (required)
     * @return RemoveFromShowcaseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFromShowcaseRequestBuilder removeFromShowcase(double albumId, double videoId) throws IllegalArgumentException {
        
        
        return new RemoveFromShowcaseRequestBuilder(albumId, videoId);
    }
    private okhttp3.Call removeVideoFromShowcaseCall(Double albumId, Double userId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}/videos/{video_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeVideoFromShowcaseValidateBeforeCall(Double albumId, Double userId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling removeVideoFromShowcase(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling removeVideoFromShowcase(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling removeVideoFromShowcase(Async)");
        }

        return removeVideoFromShowcaseCall(albumId, userId, videoId, _callback);

    }


    private ApiResponse<Void> removeVideoFromShowcaseWithHttpInfo(Double albumId, Double userId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = removeVideoFromShowcaseValidateBeforeCall(albumId, userId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeVideoFromShowcaseAsync(Double albumId, Double userId, Double videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeVideoFromShowcaseValidateBeforeCall(albumId, userId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveVideoFromShowcaseRequestBuilder {
        private final Double albumId;
        private final Double userId;
        private final Double videoId;

        private RemoveVideoFromShowcaseRequestBuilder(double albumId, double userId, double videoId) {
            this.albumId = albumId;
            this.userId = userId;
            this.videoId = videoId;
        }

        /**
         * Build call for removeVideoFromShowcase
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeVideoFromShowcaseCall(albumId, userId, videoId, _callback);
        }


        /**
         * Execute removeVideoFromShowcase request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeVideoFromShowcaseWithHttpInfo(albumId, userId, videoId);
        }

        /**
         * Execute removeVideoFromShowcase request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeVideoFromShowcaseWithHttpInfo(albumId, userId, videoId);
        }

        /**
         * Execute removeVideoFromShowcase request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeVideoFromShowcaseAsync(albumId, userId, videoId, _callback);
        }
    }

    /**
     * Remove a video from a showcase
     * This method removes the specified video from its showcase. The authenticated user must be the owner of the showcase.
     * @param albumId The ID of the showcase. (required)
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @return RemoveVideoFromShowcaseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveVideoFromShowcaseRequestBuilder removeVideoFromShowcase(double albumId, double userId, double videoId) throws IllegalArgumentException {
        
        
        
        return new RemoveVideoFromShowcaseRequestBuilder(albumId, userId, videoId);
    }
    private okhttp3.Call replaceShowcaseVideosCall(Double albumId, Double userId, ShowcasesShowcaseVideosReplaceShowcaseVideosRequest showcasesShowcaseVideosReplaceShowcaseVideosRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = showcasesShowcaseVideosReplaceShowcaseVideosRequest;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}/videos"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceShowcaseVideosValidateBeforeCall(Double albumId, Double userId, ShowcasesShowcaseVideosReplaceShowcaseVideosRequest showcasesShowcaseVideosReplaceShowcaseVideosRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling replaceShowcaseVideos(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling replaceShowcaseVideos(Async)");
        }

        // verify the required parameter 'showcasesShowcaseVideosReplaceShowcaseVideosRequest' is set
        if (showcasesShowcaseVideosReplaceShowcaseVideosRequest == null) {
            throw new ApiException("Missing the required parameter 'showcasesShowcaseVideosReplaceShowcaseVideosRequest' when calling replaceShowcaseVideos(Async)");
        }

        return replaceShowcaseVideosCall(albumId, userId, showcasesShowcaseVideosReplaceShowcaseVideosRequest, _callback);

    }


    private ApiResponse<Void> replaceShowcaseVideosWithHttpInfo(Double albumId, Double userId, ShowcasesShowcaseVideosReplaceShowcaseVideosRequest showcasesShowcaseVideosReplaceShowcaseVideosRequest) throws ApiException {
        okhttp3.Call localVarCall = replaceShowcaseVideosValidateBeforeCall(albumId, userId, showcasesShowcaseVideosReplaceShowcaseVideosRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call replaceShowcaseVideosAsync(Double albumId, Double userId, ShowcasesShowcaseVideosReplaceShowcaseVideosRequest showcasesShowcaseVideosReplaceShowcaseVideosRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceShowcaseVideosValidateBeforeCall(albumId, userId, showcasesShowcaseVideosReplaceShowcaseVideosRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ReplaceShowcaseVideosRequestBuilder {
        private final String videos;
        private final Double albumId;
        private final Double userId;

        private ReplaceShowcaseVideosRequestBuilder(String videos, double albumId, double userId) {
            this.videos = videos;
            this.albumId = albumId;
            this.userId = userId;
        }

        /**
         * Build call for replaceShowcaseVideos
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The videos were added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ShowcasesShowcaseVideosReplaceShowcaseVideosRequest showcasesShowcaseVideosReplaceShowcaseVideosRequest = buildBodyParams();
            return replaceShowcaseVideosCall(albumId, userId, showcasesShowcaseVideosReplaceShowcaseVideosRequest, _callback);
        }

        private ShowcasesShowcaseVideosReplaceShowcaseVideosRequest buildBodyParams() {
            ShowcasesShowcaseVideosReplaceShowcaseVideosRequest showcasesShowcaseVideosReplaceShowcaseVideosRequest = new ShowcasesShowcaseVideosReplaceShowcaseVideosRequest();
            showcasesShowcaseVideosReplaceShowcaseVideosRequest.videos(this.videos);
            return showcasesShowcaseVideosReplaceShowcaseVideosRequest;
        }

        /**
         * Execute replaceShowcaseVideos request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The videos were added. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ShowcasesShowcaseVideosReplaceShowcaseVideosRequest showcasesShowcaseVideosReplaceShowcaseVideosRequest = buildBodyParams();
            replaceShowcaseVideosWithHttpInfo(albumId, userId, showcasesShowcaseVideosReplaceShowcaseVideosRequest);
        }

        /**
         * Execute replaceShowcaseVideos request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The videos were added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ShowcasesShowcaseVideosReplaceShowcaseVideosRequest showcasesShowcaseVideosReplaceShowcaseVideosRequest = buildBodyParams();
            return replaceShowcaseVideosWithHttpInfo(albumId, userId, showcasesShowcaseVideosReplaceShowcaseVideosRequest);
        }

        /**
         * Execute replaceShowcaseVideos request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The videos were added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ShowcasesShowcaseVideosReplaceShowcaseVideosRequest showcasesShowcaseVideosReplaceShowcaseVideosRequest = buildBodyParams();
            return replaceShowcaseVideosAsync(albumId, userId, showcasesShowcaseVideosReplaceShowcaseVideosRequest, _callback);
        }
    }

    /**
     * Replace all the videos in a showcase
     * This method replaces all the videos in the specified showcase with a new set of one or more videos. The authenticated user must be the owner of the showcase.
     * @param albumId The ID of the showcase. (required)
     * @param userId The ID of the user. (required)
     * @param showcasesShowcaseVideosReplaceShowcaseVideosRequest  (required)
     * @return ReplaceShowcaseVideosRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The videos were added. </td><td>  -  </td></tr>
     </table>
     */
    public ReplaceShowcaseVideosRequestBuilder replaceShowcaseVideos(String videos, double albumId, double userId) throws IllegalArgumentException {
        if (videos == null) throw new IllegalArgumentException("\"videos\" is required but got null");
            

        
        
        return new ReplaceShowcaseVideosRequestBuilder(videos, albumId, userId);
    }
    private okhttp3.Call replaceVideosCall(Double albumId, ShowcasesShowcaseVideosReplaceVideosRequest showcasesShowcaseVideosReplaceVideosRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = showcasesShowcaseVideosReplaceVideosRequest;

        // create path and map variables
        String localVarPath = "/me/albums/{album_id}/videos"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceVideosValidateBeforeCall(Double albumId, ShowcasesShowcaseVideosReplaceVideosRequest showcasesShowcaseVideosReplaceVideosRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling replaceVideos(Async)");
        }

        // verify the required parameter 'showcasesShowcaseVideosReplaceVideosRequest' is set
        if (showcasesShowcaseVideosReplaceVideosRequest == null) {
            throw new ApiException("Missing the required parameter 'showcasesShowcaseVideosReplaceVideosRequest' when calling replaceVideos(Async)");
        }

        return replaceVideosCall(albumId, showcasesShowcaseVideosReplaceVideosRequest, _callback);

    }


    private ApiResponse<Void> replaceVideosWithHttpInfo(Double albumId, ShowcasesShowcaseVideosReplaceVideosRequest showcasesShowcaseVideosReplaceVideosRequest) throws ApiException {
        okhttp3.Call localVarCall = replaceVideosValidateBeforeCall(albumId, showcasesShowcaseVideosReplaceVideosRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call replaceVideosAsync(Double albumId, ShowcasesShowcaseVideosReplaceVideosRequest showcasesShowcaseVideosReplaceVideosRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceVideosValidateBeforeCall(albumId, showcasesShowcaseVideosReplaceVideosRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ReplaceVideosRequestBuilder {
        private final String videos;
        private final Double albumId;

        private ReplaceVideosRequestBuilder(String videos, double albumId) {
            this.videos = videos;
            this.albumId = albumId;
        }

        /**
         * Build call for replaceVideos
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The videos were added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ShowcasesShowcaseVideosReplaceVideosRequest showcasesShowcaseVideosReplaceVideosRequest = buildBodyParams();
            return replaceVideosCall(albumId, showcasesShowcaseVideosReplaceVideosRequest, _callback);
        }

        private ShowcasesShowcaseVideosReplaceVideosRequest buildBodyParams() {
            ShowcasesShowcaseVideosReplaceVideosRequest showcasesShowcaseVideosReplaceVideosRequest = new ShowcasesShowcaseVideosReplaceVideosRequest();
            showcasesShowcaseVideosReplaceVideosRequest.videos(this.videos);
            return showcasesShowcaseVideosReplaceVideosRequest;
        }

        /**
         * Execute replaceVideos request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The videos were added. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ShowcasesShowcaseVideosReplaceVideosRequest showcasesShowcaseVideosReplaceVideosRequest = buildBodyParams();
            replaceVideosWithHttpInfo(albumId, showcasesShowcaseVideosReplaceVideosRequest);
        }

        /**
         * Execute replaceVideos request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The videos were added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ShowcasesShowcaseVideosReplaceVideosRequest showcasesShowcaseVideosReplaceVideosRequest = buildBodyParams();
            return replaceVideosWithHttpInfo(albumId, showcasesShowcaseVideosReplaceVideosRequest);
        }

        /**
         * Execute replaceVideos request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The videos were added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ShowcasesShowcaseVideosReplaceVideosRequest showcasesShowcaseVideosReplaceVideosRequest = buildBodyParams();
            return replaceVideosAsync(albumId, showcasesShowcaseVideosReplaceVideosRequest, _callback);
        }
    }

    /**
     * Replace all the videos in a showcase
     * This method replaces all the videos in the specified showcase with a new set of one or more videos. The authenticated user must be the owner of the showcase.
     * @param albumId The ID of the showcase. (required)
     * @param showcasesShowcaseVideosReplaceVideosRequest  (required)
     * @return ReplaceVideosRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The videos were added. </td><td>  -  </td></tr>
     </table>
     */
    public ReplaceVideosRequestBuilder replaceVideos(String videos, double albumId) throws IllegalArgumentException {
        if (videos == null) throw new IllegalArgumentException("\"videos\" is required but got null");
            

        
        return new ReplaceVideosRequestBuilder(videos, albumId);
    }
    private okhttp3.Call setFeaturedVideoCall(Double albumId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/albums/{album_id}/videos/{video_id}/set_featured_video"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setFeaturedVideoValidateBeforeCall(Double albumId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling setFeaturedVideo(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling setFeaturedVideo(Async)");
        }

        return setFeaturedVideoCall(albumId, videoId, _callback);

    }


    private ApiResponse<Album> setFeaturedVideoWithHttpInfo(Double albumId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = setFeaturedVideoValidateBeforeCall(albumId, videoId, null);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setFeaturedVideoAsync(Double albumId, Double videoId, final ApiCallback<Album> _callback) throws ApiException {

        okhttp3.Call localVarCall = setFeaturedVideoValidateBeforeCall(albumId, videoId, _callback);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetFeaturedVideoRequestBuilder {
        private final Double albumId;
        private final Double videoId;

        private SetFeaturedVideoRequestBuilder(double albumId, double videoId) {
            this.albumId = albumId;
            this.videoId = videoId;
        }

        /**
         * Build call for setFeaturedVideo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video is now the featured video of the showcase. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return setFeaturedVideoCall(albumId, videoId, _callback);
        }


        /**
         * Execute setFeaturedVideo request
         * @return Album
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video is now the featured video of the showcase. </td><td>  -  </td></tr>
         </table>
         */
        public Album execute() throws ApiException {
            ApiResponse<Album> localVarResp = setFeaturedVideoWithHttpInfo(albumId, videoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setFeaturedVideo request with HTTP info returned
         * @return ApiResponse&lt;Album&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video is now the featured video of the showcase. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Album> executeWithHttpInfo() throws ApiException {
            return setFeaturedVideoWithHttpInfo(albumId, videoId);
        }

        /**
         * Execute setFeaturedVideo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video is now the featured video of the showcase. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Album> _callback) throws ApiException {
            return setFeaturedVideoAsync(albumId, videoId, _callback);
        }
    }

    /**
     * Set the featured video of a showcase
     * This method sets the featured video of the specified showcase. The authenticated user must be the owner of the showcase, and the featured video must belong to it.
     * @param albumId The ID of the showcase. (required)
     * @param videoId The ID of the video. (required)
     * @return SetFeaturedVideoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video is now the featured video of the showcase. </td><td>  -  </td></tr>
     </table>
     */
    public SetFeaturedVideoRequestBuilder setFeaturedVideo(double albumId, double videoId) throws IllegalArgumentException {
        
        
        return new SetFeaturedVideoRequestBuilder(albumId, videoId);
    }
    private okhttp3.Call setFeaturedVideo_0Call(Double albumId, Double userId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}/videos/{video_id}/set_featured_video"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setFeaturedVideo_0ValidateBeforeCall(Double albumId, Double userId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling setFeaturedVideo_0(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling setFeaturedVideo_0(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling setFeaturedVideo_0(Async)");
        }

        return setFeaturedVideo_0Call(albumId, userId, videoId, _callback);

    }


    private ApiResponse<Album> setFeaturedVideo_0WithHttpInfo(Double albumId, Double userId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = setFeaturedVideo_0ValidateBeforeCall(albumId, userId, videoId, null);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setFeaturedVideo_0Async(Double albumId, Double userId, Double videoId, final ApiCallback<Album> _callback) throws ApiException {

        okhttp3.Call localVarCall = setFeaturedVideo_0ValidateBeforeCall(albumId, userId, videoId, _callback);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetFeaturedVideo0RequestBuilder {
        private final Double albumId;
        private final Double userId;
        private final Double videoId;

        private SetFeaturedVideo0RequestBuilder(double albumId, double userId, double videoId) {
            this.albumId = albumId;
            this.userId = userId;
            this.videoId = videoId;
        }

        /**
         * Build call for setFeaturedVideo_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video is now the featured video of the showcase. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return setFeaturedVideo_0Call(albumId, userId, videoId, _callback);
        }


        /**
         * Execute setFeaturedVideo_0 request
         * @return Album
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video is now the featured video of the showcase. </td><td>  -  </td></tr>
         </table>
         */
        public Album execute() throws ApiException {
            ApiResponse<Album> localVarResp = setFeaturedVideo_0WithHttpInfo(albumId, userId, videoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setFeaturedVideo_0 request with HTTP info returned
         * @return ApiResponse&lt;Album&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video is now the featured video of the showcase. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Album> executeWithHttpInfo() throws ApiException {
            return setFeaturedVideo_0WithHttpInfo(albumId, userId, videoId);
        }

        /**
         * Execute setFeaturedVideo_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video is now the featured video of the showcase. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Album> _callback) throws ApiException {
            return setFeaturedVideo_0Async(albumId, userId, videoId, _callback);
        }
    }

    /**
     * Set the featured video of a showcase
     * This method sets the featured video of the specified showcase. The authenticated user must be the owner of the showcase, and the featured video must belong to it.
     * @param albumId The ID of the showcase. (required)
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @return SetFeaturedVideo0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video is now the featured video of the showcase. </td><td>  -  </td></tr>
     </table>
     */
    public SetFeaturedVideo0RequestBuilder setFeaturedVideo_0(double albumId, double userId, double videoId) throws IllegalArgumentException {
        
        
        
        return new SetFeaturedVideo0RequestBuilder(albumId, userId, videoId);
    }
}
