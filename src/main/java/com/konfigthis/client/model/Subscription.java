/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.SubscriptionItemsInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Subscription
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Subscription {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_AUTO_RENEW = "auto_renew";
  @SerializedName(SERIALIZED_NAME_AUTO_RENEW)
  private Boolean autoRenew;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_DISABLED_AT = "disabled_at";
  @SerializedName(SERIALIZED_NAME_DISABLED_AT)
  private String disabledAt;

  public static final String SERIALIZED_NAME_END_DATE = "end_date";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_GRACE_PERIOD_ID = "grace_period_id";
  @SerializedName(SERIALIZED_NAME_GRACE_PERIOD_ID)
  private String gracePeriodId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_LATEST = "is_latest";
  @SerializedName(SERIALIZED_NAME_IS_LATEST)
  private Boolean isLatest;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<SubscriptionItemsInner> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAYMENT_METHOD_ID = "payment_method_id";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD_ID)
  private String paymentMethodId;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  /**
   * The status of the subscription.  Option descriptions:  * &#x60;0&#x60; - The subscription status is unspecified.  * &#x60;1&#x60; - The subscription is active.  * &#x60;2&#x60; - The subscription is canceled.  * &#x60;3&#x60; - The subscription is in a grace period.  * &#x60;4&#x60; - The subscription is in a trial period.  * &#x60;5&#x60; - The subscription is past due.  * &#x60;6&#x60; - The subscription is unpaid. 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    _0("0"),
    
    _1("1"),
    
    _2("2"),
    
    _3("3"),
    
    _4("4"),
    
    _5("5"),
    
    _6("6");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_NUMBER = "subscription_number";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_NUMBER)
  private String subscriptionNumber;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_VERSION = "subscription_version";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_VERSION)
  private Double subscriptionVersion;

  public static final String SERIALIZED_NAME_SYNCED_AT = "synced_at";
  @SerializedName(SERIALIZED_NAME_SYNCED_AT)
  private String syncedAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_VENDOR = "vendor";
  @SerializedName(SERIALIZED_NAME_VENDOR)
  private String vendor;

  public Subscription() {
  }

  public Subscription accountId(String accountId) {
    
    
    
    
    this.accountId = accountId;
    return this;
  }

   /**
   * The ID of the account.
   * @return accountId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "abc12345", value = "The ID of the account.")

  public String getAccountId() {
    return accountId;
  }


  public void setAccountId(String accountId) {
    
    
    
    this.accountId = accountId;
  }


  public Subscription autoRenew(Boolean autoRenew) {
    
    
    
    
    this.autoRenew = autoRenew;
    return this;
  }

   /**
   * Whether the subscription is set to auto-renew.
   * @return autoRenew
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the subscription is set to auto-renew.")

  public Boolean getAutoRenew() {
    return autoRenew;
  }


  public void setAutoRenew(Boolean autoRenew) {
    
    
    
    this.autoRenew = autoRenew;
  }


  public Subscription createdAt(String createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The time in ISO 8601 format when the subscription was created.
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2020-01-01T00:00:00Z", required = true, value = "The time in ISO 8601 format when the subscription was created.")

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public Subscription disabledAt(String disabledAt) {
    
    
    
    
    this.disabledAt = disabledAt;
    return this;
  }

   /**
   * The time in ISO 8601 format when the subscription was disabled.
   * @return disabledAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-01-01T00:00:00Z", value = "The time in ISO 8601 format when the subscription was disabled.")

  public String getDisabledAt() {
    return disabledAt;
  }


  public void setDisabledAt(String disabledAt) {
    
    
    
    this.disabledAt = disabledAt;
  }


  public Subscription endDate(String endDate) {
    
    
    
    
    this.endDate = endDate;
    return this;
  }

   /**
   * The time in ISO 8601 format when the subscription ended.
   * @return endDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2020-01-01T00:00:00Z", required = true, value = "The time in ISO 8601 format when the subscription ended.")

  public String getEndDate() {
    return endDate;
  }


  public void setEndDate(String endDate) {
    
    
    
    this.endDate = endDate;
  }


  public Subscription gracePeriodId(String gracePeriodId) {
    
    
    
    
    this.gracePeriodId = gracePeriodId;
    return this;
  }

   /**
   * The ID of the grace period.
   * @return gracePeriodId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "abc12345", required = true, value = "The ID of the grace period.")

  public String getGracePeriodId() {
    return gracePeriodId;
  }


  public void setGracePeriodId(String gracePeriodId) {
    
    
    
    this.gracePeriodId = gracePeriodId;
  }


  public Subscription id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The ID of the subscription.
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "abc12345", required = true, value = "The ID of the subscription.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public Subscription isLatest(Boolean isLatest) {
    
    
    
    
    this.isLatest = isLatest;
    return this;
  }

   /**
   * Whether the subscription is the latest version.
   * @return isLatest
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the subscription is the latest version.")

  public Boolean getIsLatest() {
    return isLatest;
  }


  public void setIsLatest(Boolean isLatest) {
    
    
    
    this.isLatest = isLatest;
  }


  public Subscription items(List<SubscriptionItemsInner> items) {
    
    
    
    
    this.items = items;
    return this;
  }

  public Subscription addItemsItem(SubscriptionItemsInner itemsItem) {
    this.items.add(itemsItem);
    return this;
  }

   /**
   * An array of items in the subscription.
   * @return items
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An array of items in the subscription.")

  public List<SubscriptionItemsInner> getItems() {
    return items;
  }


  public void setItems(List<SubscriptionItemsInner> items) {
    
    
    
    this.items = items;
  }


  public Subscription paymentMethodId(String paymentMethodId) {
    
    
    
    
    this.paymentMethodId = paymentMethodId;
    return this;
  }

   /**
   * The ID of the payment method.
   * @return paymentMethodId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "abc12345", required = true, value = "The ID of the payment method.")

  public String getPaymentMethodId() {
    return paymentMethodId;
  }


  public void setPaymentMethodId(String paymentMethodId) {
    
    
    
    this.paymentMethodId = paymentMethodId;
  }


  public Subscription startDate(String startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * The time in ISO 8601 format when the subscription started.
   * @return startDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2020-01-01T00:00:00Z", required = true, value = "The time in ISO 8601 format when the subscription started.")

  public String getStartDate() {
    return startDate;
  }


  public void setStartDate(String startDate) {
    
    
    
    this.startDate = startDate;
  }


  public Subscription status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The status of the subscription.  Option descriptions:  * &#x60;0&#x60; - The subscription status is unspecified.  * &#x60;1&#x60; - The subscription is active.  * &#x60;2&#x60; - The subscription is canceled.  * &#x60;3&#x60; - The subscription is in a grace period.  * &#x60;4&#x60; - The subscription is in a trial period.  * &#x60;5&#x60; - The subscription is past due.  * &#x60;6&#x60; - The subscription is unpaid. 
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "_1", required = true, value = "The status of the subscription.  Option descriptions:  * `0` - The subscription status is unspecified.  * `1` - The subscription is active.  * `2` - The subscription is canceled.  * `3` - The subscription is in a grace period.  * `4` - The subscription is in a trial period.  * `5` - The subscription is past due.  * `6` - The subscription is unpaid. ")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public Subscription subscriptionNumber(String subscriptionNumber) {
    
    
    
    
    this.subscriptionNumber = subscriptionNumber;
    return this;
  }

   /**
   * The number of the subscription.
   * @return subscriptionNumber
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "12345", required = true, value = "The number of the subscription.")

  public String getSubscriptionNumber() {
    return subscriptionNumber;
  }


  public void setSubscriptionNumber(String subscriptionNumber) {
    
    
    
    this.subscriptionNumber = subscriptionNumber;
  }


  public Subscription subscriptionVersion(Double subscriptionVersion) {
    
    
    
    
    this.subscriptionVersion = subscriptionVersion;
    return this;
  }

  public Subscription subscriptionVersion(Integer subscriptionVersion) {
    
    
    
    
    this.subscriptionVersion = subscriptionVersion.doubleValue();
    return this;
  }

   /**
   * The version of the subscription.
   * @return subscriptionVersion
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1", required = true, value = "The version of the subscription.")

  public Double getSubscriptionVersion() {
    return subscriptionVersion;
  }


  public void setSubscriptionVersion(Double subscriptionVersion) {
    
    
    
    this.subscriptionVersion = subscriptionVersion;
  }


  public Subscription syncedAt(String syncedAt) {
    
    
    
    
    this.syncedAt = syncedAt;
    return this;
  }

   /**
   * The time in ISO 8601 format when the subscription was synced.
   * @return syncedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2020-01-01T00:00:00Z", required = true, value = "The time in ISO 8601 format when the subscription was synced.")

  public String getSyncedAt() {
    return syncedAt;
  }


  public void setSyncedAt(String syncedAt) {
    
    
    
    this.syncedAt = syncedAt;
  }


  public Subscription updatedAt(String updatedAt) {
    
    
    
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * The time in ISO 8601 format when the subscription was updated.
   * @return updatedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2020-01-01T00:00:00Z", required = true, value = "The time in ISO 8601 format when the subscription was updated.")

  public String getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(String updatedAt) {
    
    
    
    this.updatedAt = updatedAt;
  }


  public Subscription vendor(String vendor) {
    
    
    
    
    this.vendor = vendor;
    return this;
  }

   /**
   * The vendor of the subscription.
   * @return vendor
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "vimeo", required = true, value = "The vendor of the subscription.")

  public String getVendor() {
    return vendor;
  }


  public void setVendor(String vendor) {
    
    
    
    this.vendor = vendor;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Subscription instance itself
   */
  public Subscription putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Subscription subscription = (Subscription) o;
    return Objects.equals(this.accountId, subscription.accountId) &&
        Objects.equals(this.autoRenew, subscription.autoRenew) &&
        Objects.equals(this.createdAt, subscription.createdAt) &&
        Objects.equals(this.disabledAt, subscription.disabledAt) &&
        Objects.equals(this.endDate, subscription.endDate) &&
        Objects.equals(this.gracePeriodId, subscription.gracePeriodId) &&
        Objects.equals(this.id, subscription.id) &&
        Objects.equals(this.isLatest, subscription.isLatest) &&
        Objects.equals(this.items, subscription.items) &&
        Objects.equals(this.paymentMethodId, subscription.paymentMethodId) &&
        Objects.equals(this.startDate, subscription.startDate) &&
        Objects.equals(this.status, subscription.status) &&
        Objects.equals(this.subscriptionNumber, subscription.subscriptionNumber) &&
        Objects.equals(this.subscriptionVersion, subscription.subscriptionVersion) &&
        Objects.equals(this.syncedAt, subscription.syncedAt) &&
        Objects.equals(this.updatedAt, subscription.updatedAt) &&
        Objects.equals(this.vendor, subscription.vendor)&&
        Objects.equals(this.additionalProperties, subscription.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, autoRenew, createdAt, disabledAt, endDate, gracePeriodId, id, isLatest, items, paymentMethodId, startDate, status, subscriptionNumber, subscriptionVersion, syncedAt, updatedAt, vendor, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Subscription {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    autoRenew: ").append(toIndentedString(autoRenew)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    disabledAt: ").append(toIndentedString(disabledAt)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    gracePeriodId: ").append(toIndentedString(gracePeriodId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isLatest: ").append(toIndentedString(isLatest)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    paymentMethodId: ").append(toIndentedString(paymentMethodId)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subscriptionNumber: ").append(toIndentedString(subscriptionNumber)).append("\n");
    sb.append("    subscriptionVersion: ").append(toIndentedString(subscriptionVersion)).append("\n");
    sb.append("    syncedAt: ").append(toIndentedString(syncedAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    vendor: ").append(toIndentedString(vendor)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_id");
    openapiFields.add("auto_renew");
    openapiFields.add("created_at");
    openapiFields.add("disabled_at");
    openapiFields.add("end_date");
    openapiFields.add("grace_period_id");
    openapiFields.add("id");
    openapiFields.add("is_latest");
    openapiFields.add("items");
    openapiFields.add("payment_method_id");
    openapiFields.add("start_date");
    openapiFields.add("status");
    openapiFields.add("subscription_number");
    openapiFields.add("subscription_version");
    openapiFields.add("synced_at");
    openapiFields.add("updated_at");
    openapiFields.add("vendor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("auto_renew");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("end_date");
    openapiRequiredFields.add("grace_period_id");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("is_latest");
    openapiRequiredFields.add("items");
    openapiRequiredFields.add("payment_method_id");
    openapiRequiredFields.add("start_date");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("subscription_number");
    openapiRequiredFields.add("subscription_version");
    openapiRequiredFields.add("synced_at");
    openapiRequiredFields.add("updated_at");
    openapiRequiredFields.add("vendor");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Subscription
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Subscription.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Subscription is not found in the empty JSON string", Subscription.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Subscription.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("account_id") != null && !jsonObj.get("account_id").isJsonNull()) && !jsonObj.get("account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_id").toString()));
      }
      if (!jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("disabled_at") != null && !jsonObj.get("disabled_at").isJsonNull()) && !jsonObj.get("disabled_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disabled_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disabled_at").toString()));
      }
      if (!jsonObj.get("end_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end_date").toString()));
      }
      if (!jsonObj.get("grace_period_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grace_period_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grace_period_id").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("items").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
      }

      JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
      // validate the required field `items` (array)
      for (int i = 0; i < jsonArrayitems.size(); i++) {
        SubscriptionItemsInner.validateJsonObject(jsonArrayitems.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("payment_method_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_method_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_method_id").toString()));
      }
      if (!jsonObj.get("start_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_date").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("subscription_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscription_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscription_number").toString()));
      }
      if (!jsonObj.get("synced_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `synced_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("synced_at").toString()));
      }
      if (!jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
      if (!jsonObj.get("vendor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendor").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Subscription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Subscription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Subscription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Subscription.class));

       return (TypeAdapter<T>) new TypeAdapter<Subscription>() {
           @Override
           public void write(JsonWriter out, Subscription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Subscription read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Subscription instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Subscription given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Subscription
  * @throws IOException if the JSON string is invalid with respect to Subscription
  */
  public static Subscription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Subscription.class);
  }

 /**
  * Convert an instance of Subscription to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

