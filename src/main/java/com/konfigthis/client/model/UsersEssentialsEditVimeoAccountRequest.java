/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.UsersEssentialsEditVimeoAccountRequestVideos;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * UsersEssentialsEditVimeoAccountRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class UsersEssentialsEditVimeoAccountRequest {
  public static final String SERIALIZED_NAME_BIO = "bio";
  @SerializedName(SERIALIZED_NAME_BIO)
  private String bio;

  public static final String SERIALIZED_NAME_CONTENT_FILTER = "content_filter";
  @SerializedName(SERIALIZED_NAME_CONTENT_FILTER)
  private List<String> contentFilter = null;

  /**
   * The authenticated user&#39;s gender.  Option descriptions:  * &#x60;f&#x60; - The user&#39;s preferred pronouns are she and her.  * &#x60;m&#x60; - The user&#39;s preferred pronouns are he and him.  * &#x60;n&#x60; - The user would rather not give preferred pronouns.  * &#x60;o&#x60; - The user&#39;s preferred pronouns are they and them. 
   */
  @JsonAdapter(GenderEnum.Adapter.class)
 public enum GenderEnum {
    F("f"),
    
    M("m"),
    
    N("n"),
    
    O("o");

    private String value;

    GenderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GenderEnum fromValue(String value) {
      for (GenderEnum b : GenderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GenderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GenderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GenderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GenderEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private GenderEnum gender;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_VIDEOS = "videos";
  @SerializedName(SERIALIZED_NAME_VIDEOS)
  private UsersEssentialsEditVimeoAccountRequestVideos videos;

  public UsersEssentialsEditVimeoAccountRequest() {
  }

  public UsersEssentialsEditVimeoAccountRequest bio(String bio) {
    
    
    
    
    this.bio = bio;
    return this;
  }

   /**
   * The user&#39;s bio.
   * @return bio
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "This is where you will find videos and news updates from the staff", value = "The user's bio.")

  public String getBio() {
    return bio;
  }


  public void setBio(String bio) {
    
    
    
    this.bio = bio;
  }


  public UsersEssentialsEditVimeoAccountRequest contentFilter(List<String> contentFilter) {
    
    
    
    
    this.contentFilter = contentFilter;
    return this;
  }

  public UsersEssentialsEditVimeoAccountRequest addContentFilterItem(String contentFilterItem) {
    if (this.contentFilter == null) {
      this.contentFilter = new ArrayList<>();
    }
    this.contentFilter.add(contentFilterItem);
    return this;
  }

   /**
   * A list of values describing the content in the user&#39;s videos. Find the full list in the [/contentratings](https://developer.vimeo.com/api/reference/videos#get_content_ratings) endpoint. You must provide a comma-separated list if you&#39;re using a query string or an array if you&#39;re using JSON.
   * @return contentFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of values describing the content in the user's videos. Find the full list in the [/contentratings](https://developer.vimeo.com/api/reference/videos#get_content_ratings) endpoint. You must provide a comma-separated list if you're using a query string or an array if you're using JSON.")

  public List<String> getContentFilter() {
    return contentFilter;
  }


  public void setContentFilter(List<String> contentFilter) {
    
    
    
    this.contentFilter = contentFilter;
  }


  public UsersEssentialsEditVimeoAccountRequest gender(GenderEnum gender) {
    
    
    
    
    this.gender = gender;
    return this;
  }

   /**
   * The authenticated user&#39;s gender.  Option descriptions:  * &#x60;f&#x60; - The user&#39;s preferred pronouns are she and her.  * &#x60;m&#x60; - The user&#39;s preferred pronouns are he and him.  * &#x60;n&#x60; - The user would rather not give preferred pronouns.  * &#x60;o&#x60; - The user&#39;s preferred pronouns are they and them. 
   * @return gender
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The authenticated user's gender.  Option descriptions:  * `f` - The user's preferred pronouns are she and her.  * `m` - The user's preferred pronouns are he and him.  * `n` - The user would rather not give preferred pronouns.  * `o` - The user's preferred pronouns are they and them. ")

  public GenderEnum getGender() {
    return gender;
  }


  public void setGender(GenderEnum gender) {
    
    
    
    this.gender = gender;
  }


  public UsersEssentialsEditVimeoAccountRequest link(String link) {
    
    
    
    
    this.link = link;
    return this;
  }

   /**
   * The user&#39;s custom Vimeo URL.
   * @return link
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "staff", value = "The user's custom Vimeo URL.")

  public String getLink() {
    return link;
  }


  public void setLink(String link) {
    
    
    
    this.link = link;
  }


  public UsersEssentialsEditVimeoAccountRequest location(String location) {
    
    
    
    
    this.location = location;
    return this;
  }

   /**
   * The user&#39;s location.
   * @return location
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "New York City", value = "The user's location.")

  public String getLocation() {
    return location;
  }


  public void setLocation(String location) {
    
    
    
    this.location = location;
  }


  public UsersEssentialsEditVimeoAccountRequest name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The user&#39;s display name.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Vimeo Staff", value = "The user's display name.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public UsersEssentialsEditVimeoAccountRequest password(String password) {
    
    
    
    
    this.password = password;
    return this;
  }

   /**
   * The default password for all future videos that this user uploads. To use this field, the **videos.privacy.view** field must be &#x60;password&#x60;.
   * @return password
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "hunter1", value = "The default password for all future videos that this user uploads. To use this field, the **videos.privacy.view** field must be `password`.")

  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    
    
    
    this.password = password;
  }


  public UsersEssentialsEditVimeoAccountRequest videos(UsersEssentialsEditVimeoAccountRequestVideos videos) {
    
    
    
    
    this.videos = videos;
    return this;
  }

   /**
   * Get videos
   * @return videos
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UsersEssentialsEditVimeoAccountRequestVideos getVideos() {
    return videos;
  }


  public void setVideos(UsersEssentialsEditVimeoAccountRequestVideos videos) {
    
    
    
    this.videos = videos;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the UsersEssentialsEditVimeoAccountRequest instance itself
   */
  public UsersEssentialsEditVimeoAccountRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsersEssentialsEditVimeoAccountRequest usersEssentialsEditVimeoAccountRequest = (UsersEssentialsEditVimeoAccountRequest) o;
    return Objects.equals(this.bio, usersEssentialsEditVimeoAccountRequest.bio) &&
        Objects.equals(this.contentFilter, usersEssentialsEditVimeoAccountRequest.contentFilter) &&
        Objects.equals(this.gender, usersEssentialsEditVimeoAccountRequest.gender) &&
        Objects.equals(this.link, usersEssentialsEditVimeoAccountRequest.link) &&
        Objects.equals(this.location, usersEssentialsEditVimeoAccountRequest.location) &&
        Objects.equals(this.name, usersEssentialsEditVimeoAccountRequest.name) &&
        Objects.equals(this.password, usersEssentialsEditVimeoAccountRequest.password) &&
        Objects.equals(this.videos, usersEssentialsEditVimeoAccountRequest.videos)&&
        Objects.equals(this.additionalProperties, usersEssentialsEditVimeoAccountRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bio, contentFilter, gender, link, location, name, password, videos, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsersEssentialsEditVimeoAccountRequest {\n");
    sb.append("    bio: ").append(toIndentedString(bio)).append("\n");
    sb.append("    contentFilter: ").append(toIndentedString(contentFilter)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    videos: ").append(toIndentedString(videos)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bio");
    openapiFields.add("content_filter");
    openapiFields.add("gender");
    openapiFields.add("link");
    openapiFields.add("location");
    openapiFields.add("name");
    openapiFields.add("password");
    openapiFields.add("videos");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UsersEssentialsEditVimeoAccountRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UsersEssentialsEditVimeoAccountRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsersEssentialsEditVimeoAccountRequest is not found in the empty JSON string", UsersEssentialsEditVimeoAccountRequest.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("bio") != null && !jsonObj.get("bio").isJsonNull()) && !jsonObj.get("bio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bio").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("content_filter") != null && !jsonObj.get("content_filter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_filter` to be an array in the JSON string but got `%s`", jsonObj.get("content_filter").toString()));
      }
      if ((jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      // validate the optional field `videos`
      if (jsonObj.get("videos") != null && !jsonObj.get("videos").isJsonNull()) {
        UsersEssentialsEditVimeoAccountRequestVideos.validateJsonObject(jsonObj.getAsJsonObject("videos"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsersEssentialsEditVimeoAccountRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsersEssentialsEditVimeoAccountRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsersEssentialsEditVimeoAccountRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsersEssentialsEditVimeoAccountRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UsersEssentialsEditVimeoAccountRequest>() {
           @Override
           public void write(JsonWriter out, UsersEssentialsEditVimeoAccountRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public UsersEssentialsEditVimeoAccountRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             UsersEssentialsEditVimeoAccountRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UsersEssentialsEditVimeoAccountRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UsersEssentialsEditVimeoAccountRequest
  * @throws IOException if the JSON string is invalid with respect to UsersEssentialsEditVimeoAccountRequest
  */
  public static UsersEssentialsEditVimeoAccountRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsersEssentialsEditVimeoAccountRequest.class);
  }

 /**
  * Convert an instance of UsersEssentialsEditVimeoAccountRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

