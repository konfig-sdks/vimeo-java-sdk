/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Domain;
import com.konfigthis.client.model.LiveEmbedPrivacyEmbedEventOnDomainsRequest;
import com.konfigthis.client.model.LiveEmbedPrivacyEmbedEventOnDomainsRequest1;
import com.konfigthis.client.model.LiveEmbedPrivacyEmbedEventOnDomainsRequest2;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LiveEmbedPrivacyApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LiveEmbedPrivacyApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LiveEmbedPrivacyApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call embedEventOnDomainsCall(Double liveEventId, LiveEmbedPrivacyEmbedEventOnDomainsRequest liveEmbedPrivacyEmbedEventOnDomainsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = liveEmbedPrivacyEmbedEventOnDomainsRequest;

        // create path and map variables
        String localVarPath = "/live_events/{live_event_id}/privacy/domains"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call embedEventOnDomainsValidateBeforeCall(Double liveEventId, LiveEmbedPrivacyEmbedEventOnDomainsRequest liveEmbedPrivacyEmbedEventOnDomainsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling embedEventOnDomains(Async)");
        }

        return embedEventOnDomainsCall(liveEventId, liveEmbedPrivacyEmbedEventOnDomainsRequest, _callback);

    }


    private ApiResponse<Void> embedEventOnDomainsWithHttpInfo(Double liveEventId, LiveEmbedPrivacyEmbedEventOnDomainsRequest liveEmbedPrivacyEmbedEventOnDomainsRequest) throws ApiException {
        okhttp3.Call localVarCall = embedEventOnDomainsValidateBeforeCall(liveEventId, liveEmbedPrivacyEmbedEventOnDomainsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call embedEventOnDomainsAsync(Double liveEventId, LiveEmbedPrivacyEmbedEventOnDomainsRequest liveEmbedPrivacyEmbedEventOnDomainsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = embedEventOnDomainsValidateBeforeCall(liveEventId, liveEmbedPrivacyEmbedEventOnDomainsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class EmbedEventOnDomainsRequestBuilder {
        private final Double liveEventId;
        private List<String> allowedDomains;

        private EmbedEventOnDomainsRequestBuilder(double liveEventId) {
            this.liveEventId = liveEventId;
        }

        /**
         * Set allowedDomains
         * @param allowedDomains An array of the domains on which the embedded event can appear. (optional)
         * @return EmbedEventOnDomainsRequestBuilder
         */
        public EmbedEventOnDomainsRequestBuilder allowedDomains(List<String> allowedDomains) {
            this.allowedDomains = allowedDomains;
            return this;
        }
        
        /**
         * Build call for embedEventOnDomains
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The domains were added to the whitelist. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LiveEmbedPrivacyEmbedEventOnDomainsRequest liveEmbedPrivacyEmbedEventOnDomainsRequest = buildBodyParams();
            return embedEventOnDomainsCall(liveEventId, liveEmbedPrivacyEmbedEventOnDomainsRequest, _callback);
        }

        private LiveEmbedPrivacyEmbedEventOnDomainsRequest buildBodyParams() {
            LiveEmbedPrivacyEmbedEventOnDomainsRequest liveEmbedPrivacyEmbedEventOnDomainsRequest = new LiveEmbedPrivacyEmbedEventOnDomainsRequest();
            liveEmbedPrivacyEmbedEventOnDomainsRequest.allowedDomains(this.allowedDomains);
            return liveEmbedPrivacyEmbedEventOnDomainsRequest;
        }

        /**
         * Execute embedEventOnDomains request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The domains were added to the whitelist. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            LiveEmbedPrivacyEmbedEventOnDomainsRequest liveEmbedPrivacyEmbedEventOnDomainsRequest = buildBodyParams();
            embedEventOnDomainsWithHttpInfo(liveEventId, liveEmbedPrivacyEmbedEventOnDomainsRequest);
        }

        /**
         * Execute embedEventOnDomains request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The domains were added to the whitelist. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            LiveEmbedPrivacyEmbedEventOnDomainsRequest liveEmbedPrivacyEmbedEventOnDomainsRequest = buildBodyParams();
            return embedEventOnDomainsWithHttpInfo(liveEventId, liveEmbedPrivacyEmbedEventOnDomainsRequest);
        }

        /**
         * Execute embedEventOnDomains request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The domains were added to the whitelist. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            LiveEmbedPrivacyEmbedEventOnDomainsRequest liveEmbedPrivacyEmbedEventOnDomainsRequest = buildBodyParams();
            return embedEventOnDomainsAsync(liveEventId, liveEmbedPrivacyEmbedEventOnDomainsRequest, _callback);
        }
    }

    /**
     * Embed a live event on one or more domains
     * This method embeds an event on the specified domains. The embed privacy setting must be &#x60;whitelist&#x60;.
     * @param liveEventId The ID of the event. (required)
     * @return EmbedEventOnDomainsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The domains were added to the whitelist. </td><td>  -  </td></tr>
     </table>
     */
    public EmbedEventOnDomainsRequestBuilder embedEventOnDomains(double liveEventId) throws IllegalArgumentException {
        
        return new EmbedEventOnDomainsRequestBuilder(liveEventId);
    }
    private okhttp3.Call embedEventOnDomains_0Call(Double liveEventId, LiveEmbedPrivacyEmbedEventOnDomainsRequest1 liveEmbedPrivacyEmbedEventOnDomainsRequest1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = liveEmbedPrivacyEmbedEventOnDomainsRequest1;

        // create path and map variables
        String localVarPath = "/me/live_events/{live_event_id}/privacy/domains"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call embedEventOnDomains_0ValidateBeforeCall(Double liveEventId, LiveEmbedPrivacyEmbedEventOnDomainsRequest1 liveEmbedPrivacyEmbedEventOnDomainsRequest1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling embedEventOnDomains_0(Async)");
        }

        return embedEventOnDomains_0Call(liveEventId, liveEmbedPrivacyEmbedEventOnDomainsRequest1, _callback);

    }


    private ApiResponse<Void> embedEventOnDomains_0WithHttpInfo(Double liveEventId, LiveEmbedPrivacyEmbedEventOnDomainsRequest1 liveEmbedPrivacyEmbedEventOnDomainsRequest1) throws ApiException {
        okhttp3.Call localVarCall = embedEventOnDomains_0ValidateBeforeCall(liveEventId, liveEmbedPrivacyEmbedEventOnDomainsRequest1, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call embedEventOnDomains_0Async(Double liveEventId, LiveEmbedPrivacyEmbedEventOnDomainsRequest1 liveEmbedPrivacyEmbedEventOnDomainsRequest1, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = embedEventOnDomains_0ValidateBeforeCall(liveEventId, liveEmbedPrivacyEmbedEventOnDomainsRequest1, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class EmbedEventOnDomains0RequestBuilder {
        private final Double liveEventId;
        private List<String> allowedDomains;

        private EmbedEventOnDomains0RequestBuilder(double liveEventId) {
            this.liveEventId = liveEventId;
        }

        /**
         * Set allowedDomains
         * @param allowedDomains An array of the domains on which the embedded event can appear. (optional)
         * @return EmbedEventOnDomains0RequestBuilder
         */
        public EmbedEventOnDomains0RequestBuilder allowedDomains(List<String> allowedDomains) {
            this.allowedDomains = allowedDomains;
            return this;
        }
        
        /**
         * Build call for embedEventOnDomains_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The domains were added to the whitelist. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LiveEmbedPrivacyEmbedEventOnDomainsRequest1 liveEmbedPrivacyEmbedEventOnDomainsRequest1 = buildBodyParams();
            return embedEventOnDomains_0Call(liveEventId, liveEmbedPrivacyEmbedEventOnDomainsRequest1, _callback);
        }

        private LiveEmbedPrivacyEmbedEventOnDomainsRequest1 buildBodyParams() {
            LiveEmbedPrivacyEmbedEventOnDomainsRequest1 liveEmbedPrivacyEmbedEventOnDomainsRequest1 = new LiveEmbedPrivacyEmbedEventOnDomainsRequest1();
            liveEmbedPrivacyEmbedEventOnDomainsRequest1.allowedDomains(this.allowedDomains);
            return liveEmbedPrivacyEmbedEventOnDomainsRequest1;
        }

        /**
         * Execute embedEventOnDomains_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The domains were added to the whitelist. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            LiveEmbedPrivacyEmbedEventOnDomainsRequest1 liveEmbedPrivacyEmbedEventOnDomainsRequest1 = buildBodyParams();
            embedEventOnDomains_0WithHttpInfo(liveEventId, liveEmbedPrivacyEmbedEventOnDomainsRequest1);
        }

        /**
         * Execute embedEventOnDomains_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The domains were added to the whitelist. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            LiveEmbedPrivacyEmbedEventOnDomainsRequest1 liveEmbedPrivacyEmbedEventOnDomainsRequest1 = buildBodyParams();
            return embedEventOnDomains_0WithHttpInfo(liveEventId, liveEmbedPrivacyEmbedEventOnDomainsRequest1);
        }

        /**
         * Execute embedEventOnDomains_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The domains were added to the whitelist. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            LiveEmbedPrivacyEmbedEventOnDomainsRequest1 liveEmbedPrivacyEmbedEventOnDomainsRequest1 = buildBodyParams();
            return embedEventOnDomains_0Async(liveEventId, liveEmbedPrivacyEmbedEventOnDomainsRequest1, _callback);
        }
    }

    /**
     * Embed a live event on one or more domains
     * This method embeds an event on the specified domains. The embed privacy setting must be &#x60;whitelist&#x60;.
     * @param liveEventId The ID of the event. (required)
     * @return EmbedEventOnDomains0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The domains were added to the whitelist. </td><td>  -  </td></tr>
     </table>
     */
    public EmbedEventOnDomains0RequestBuilder embedEventOnDomains_0(double liveEventId) throws IllegalArgumentException {
        
        return new EmbedEventOnDomains0RequestBuilder(liveEventId);
    }
    private okhttp3.Call embedEventOnDomains_1Call(Double liveEventId, Double userId, LiveEmbedPrivacyEmbedEventOnDomainsRequest2 liveEmbedPrivacyEmbedEventOnDomainsRequest2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = liveEmbedPrivacyEmbedEventOnDomainsRequest2;

        // create path and map variables
        String localVarPath = "/users/{user_id}/live_events/{live_event_id}/privacy/domains"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call embedEventOnDomains_1ValidateBeforeCall(Double liveEventId, Double userId, LiveEmbedPrivacyEmbedEventOnDomainsRequest2 liveEmbedPrivacyEmbedEventOnDomainsRequest2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling embedEventOnDomains_1(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling embedEventOnDomains_1(Async)");
        }

        return embedEventOnDomains_1Call(liveEventId, userId, liveEmbedPrivacyEmbedEventOnDomainsRequest2, _callback);

    }


    private ApiResponse<Void> embedEventOnDomains_1WithHttpInfo(Double liveEventId, Double userId, LiveEmbedPrivacyEmbedEventOnDomainsRequest2 liveEmbedPrivacyEmbedEventOnDomainsRequest2) throws ApiException {
        okhttp3.Call localVarCall = embedEventOnDomains_1ValidateBeforeCall(liveEventId, userId, liveEmbedPrivacyEmbedEventOnDomainsRequest2, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call embedEventOnDomains_1Async(Double liveEventId, Double userId, LiveEmbedPrivacyEmbedEventOnDomainsRequest2 liveEmbedPrivacyEmbedEventOnDomainsRequest2, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = embedEventOnDomains_1ValidateBeforeCall(liveEventId, userId, liveEmbedPrivacyEmbedEventOnDomainsRequest2, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class EmbedEventOnDomains1RequestBuilder {
        private final Double liveEventId;
        private final Double userId;
        private List<String> allowedDomains;

        private EmbedEventOnDomains1RequestBuilder(double liveEventId, double userId) {
            this.liveEventId = liveEventId;
            this.userId = userId;
        }

        /**
         * Set allowedDomains
         * @param allowedDomains An array of the domains on which the embedded event can appear. (optional)
         * @return EmbedEventOnDomains1RequestBuilder
         */
        public EmbedEventOnDomains1RequestBuilder allowedDomains(List<String> allowedDomains) {
            this.allowedDomains = allowedDomains;
            return this;
        }
        
        /**
         * Build call for embedEventOnDomains_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The domains were added to the whitelist. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LiveEmbedPrivacyEmbedEventOnDomainsRequest2 liveEmbedPrivacyEmbedEventOnDomainsRequest2 = buildBodyParams();
            return embedEventOnDomains_1Call(liveEventId, userId, liveEmbedPrivacyEmbedEventOnDomainsRequest2, _callback);
        }

        private LiveEmbedPrivacyEmbedEventOnDomainsRequest2 buildBodyParams() {
            LiveEmbedPrivacyEmbedEventOnDomainsRequest2 liveEmbedPrivacyEmbedEventOnDomainsRequest2 = new LiveEmbedPrivacyEmbedEventOnDomainsRequest2();
            liveEmbedPrivacyEmbedEventOnDomainsRequest2.allowedDomains(this.allowedDomains);
            return liveEmbedPrivacyEmbedEventOnDomainsRequest2;
        }

        /**
         * Execute embedEventOnDomains_1 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The domains were added to the whitelist. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            LiveEmbedPrivacyEmbedEventOnDomainsRequest2 liveEmbedPrivacyEmbedEventOnDomainsRequest2 = buildBodyParams();
            embedEventOnDomains_1WithHttpInfo(liveEventId, userId, liveEmbedPrivacyEmbedEventOnDomainsRequest2);
        }

        /**
         * Execute embedEventOnDomains_1 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The domains were added to the whitelist. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            LiveEmbedPrivacyEmbedEventOnDomainsRequest2 liveEmbedPrivacyEmbedEventOnDomainsRequest2 = buildBodyParams();
            return embedEventOnDomains_1WithHttpInfo(liveEventId, userId, liveEmbedPrivacyEmbedEventOnDomainsRequest2);
        }

        /**
         * Execute embedEventOnDomains_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The domains were added to the whitelist. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            LiveEmbedPrivacyEmbedEventOnDomainsRequest2 liveEmbedPrivacyEmbedEventOnDomainsRequest2 = buildBodyParams();
            return embedEventOnDomains_1Async(liveEventId, userId, liveEmbedPrivacyEmbedEventOnDomainsRequest2, _callback);
        }
    }

    /**
     * Embed a live event on one or more domains
     * This method embeds an event on the specified domains. The embed privacy setting must be &#x60;whitelist&#x60;.
     * @param liveEventId The ID of the event. (required)
     * @param userId The ID of the user. (required)
     * @return EmbedEventOnDomains1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The domains were added to the whitelist. </td><td>  -  </td></tr>
     </table>
     */
    public EmbedEventOnDomains1RequestBuilder embedEventOnDomains_1(double liveEventId, double userId) throws IllegalArgumentException {
        
        
        return new EmbedEventOnDomains1RequestBuilder(liveEventId, userId);
    }
    private okhttp3.Call getWhitelistDomainsCall(Double liveEventId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/live_events/{live_event_id}/privacy/domains"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.domain+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWhitelistDomainsValidateBeforeCall(Double liveEventId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling getWhitelistDomains(Async)");
        }

        return getWhitelistDomainsCall(liveEventId, _callback);

    }


    private ApiResponse<List<Domain>> getWhitelistDomainsWithHttpInfo(Double liveEventId) throws ApiException {
        okhttp3.Call localVarCall = getWhitelistDomainsValidateBeforeCall(liveEventId, null);
        Type localVarReturnType = new TypeToken<List<Domain>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWhitelistDomainsAsync(Double liveEventId, final ApiCallback<List<Domain>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWhitelistDomainsValidateBeforeCall(liveEventId, _callback);
        Type localVarReturnType = new TypeToken<List<Domain>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWhitelistDomainsRequestBuilder {
        private final Double liveEventId;

        private GetWhitelistDomainsRequestBuilder(double liveEventId) {
            this.liveEventId = liveEventId;
        }

        /**
         * Build call for getWhitelistDomains
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The whitelisted domains for the event were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWhitelistDomainsCall(liveEventId, _callback);
        }


        /**
         * Execute getWhitelistDomains request
         * @return List&lt;Domain&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The whitelisted domains for the event were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Domain> execute() throws ApiException {
            ApiResponse<List<Domain>> localVarResp = getWhitelistDomainsWithHttpInfo(liveEventId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWhitelistDomains request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Domain&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The whitelisted domains for the event were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Domain>> executeWithHttpInfo() throws ApiException {
            return getWhitelistDomainsWithHttpInfo(liveEventId);
        }

        /**
         * Execute getWhitelistDomains request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The whitelisted domains for the event were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Domain>> _callback) throws ApiException {
            return getWhitelistDomainsAsync(liveEventId, _callback);
        }
    }

    /**
     * Get all the domains on which a live event can be embedded
     * This method returns every whitelisted domain for an event. The embed privacy setting must be &#x60;whitelist&#x60;.
     * @param liveEventId The ID of the event. (required)
     * @return GetWhitelistDomainsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The whitelisted domains for the event were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetWhitelistDomainsRequestBuilder getWhitelistDomains(double liveEventId) throws IllegalArgumentException {
        
        return new GetWhitelistDomainsRequestBuilder(liveEventId);
    }
    private okhttp3.Call getWhitelistDomains_0Call(Double liveEventId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/live_events/{live_event_id}/privacy/domains"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.domain+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWhitelistDomains_0ValidateBeforeCall(Double liveEventId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling getWhitelistDomains_0(Async)");
        }

        return getWhitelistDomains_0Call(liveEventId, _callback);

    }


    private ApiResponse<List<Domain>> getWhitelistDomains_0WithHttpInfo(Double liveEventId) throws ApiException {
        okhttp3.Call localVarCall = getWhitelistDomains_0ValidateBeforeCall(liveEventId, null);
        Type localVarReturnType = new TypeToken<List<Domain>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWhitelistDomains_0Async(Double liveEventId, final ApiCallback<List<Domain>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWhitelistDomains_0ValidateBeforeCall(liveEventId, _callback);
        Type localVarReturnType = new TypeToken<List<Domain>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWhitelistDomains0RequestBuilder {
        private final Double liveEventId;

        private GetWhitelistDomains0RequestBuilder(double liveEventId) {
            this.liveEventId = liveEventId;
        }

        /**
         * Build call for getWhitelistDomains_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The whitelisted domains for the event were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWhitelistDomains_0Call(liveEventId, _callback);
        }


        /**
         * Execute getWhitelistDomains_0 request
         * @return List&lt;Domain&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The whitelisted domains for the event were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Domain> execute() throws ApiException {
            ApiResponse<List<Domain>> localVarResp = getWhitelistDomains_0WithHttpInfo(liveEventId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWhitelistDomains_0 request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Domain&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The whitelisted domains for the event were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Domain>> executeWithHttpInfo() throws ApiException {
            return getWhitelistDomains_0WithHttpInfo(liveEventId);
        }

        /**
         * Execute getWhitelistDomains_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The whitelisted domains for the event were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Domain>> _callback) throws ApiException {
            return getWhitelistDomains_0Async(liveEventId, _callback);
        }
    }

    /**
     * Get all the domains on which a live event can be embedded
     * This method returns every whitelisted domain for an event. The embed privacy setting must be &#x60;whitelist&#x60;.
     * @param liveEventId The ID of the event. (required)
     * @return GetWhitelistDomains0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The whitelisted domains for the event were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetWhitelistDomains0RequestBuilder getWhitelistDomains_0(double liveEventId) throws IllegalArgumentException {
        
        return new GetWhitelistDomains0RequestBuilder(liveEventId);
    }
    private okhttp3.Call getWhitelistDomains_1Call(Double liveEventId, Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/live_events/{live_event_id}/privacy/domains"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.domain+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWhitelistDomains_1ValidateBeforeCall(Double liveEventId, Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling getWhitelistDomains_1(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getWhitelistDomains_1(Async)");
        }

        return getWhitelistDomains_1Call(liveEventId, userId, _callback);

    }


    private ApiResponse<List<Domain>> getWhitelistDomains_1WithHttpInfo(Double liveEventId, Double userId) throws ApiException {
        okhttp3.Call localVarCall = getWhitelistDomains_1ValidateBeforeCall(liveEventId, userId, null);
        Type localVarReturnType = new TypeToken<List<Domain>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWhitelistDomains_1Async(Double liveEventId, Double userId, final ApiCallback<List<Domain>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWhitelistDomains_1ValidateBeforeCall(liveEventId, userId, _callback);
        Type localVarReturnType = new TypeToken<List<Domain>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWhitelistDomains1RequestBuilder {
        private final Double liveEventId;
        private final Double userId;

        private GetWhitelistDomains1RequestBuilder(double liveEventId, double userId) {
            this.liveEventId = liveEventId;
            this.userId = userId;
        }

        /**
         * Build call for getWhitelistDomains_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The whitelisted domains for the event were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWhitelistDomains_1Call(liveEventId, userId, _callback);
        }


        /**
         * Execute getWhitelistDomains_1 request
         * @return List&lt;Domain&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The whitelisted domains for the event were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Domain> execute() throws ApiException {
            ApiResponse<List<Domain>> localVarResp = getWhitelistDomains_1WithHttpInfo(liveEventId, userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWhitelistDomains_1 request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Domain&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The whitelisted domains for the event were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Domain>> executeWithHttpInfo() throws ApiException {
            return getWhitelistDomains_1WithHttpInfo(liveEventId, userId);
        }

        /**
         * Execute getWhitelistDomains_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The whitelisted domains for the event were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Domain>> _callback) throws ApiException {
            return getWhitelistDomains_1Async(liveEventId, userId, _callback);
        }
    }

    /**
     * Get all the domains on which a live event can be embedded
     * This method returns every whitelisted domain for an event. The embed privacy setting must be &#x60;whitelist&#x60;.
     * @param liveEventId The ID of the event. (required)
     * @param userId The ID of the user. (required)
     * @return GetWhitelistDomains1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The whitelisted domains for the event were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetWhitelistDomains1RequestBuilder getWhitelistDomains_1(double liveEventId, double userId) throws IllegalArgumentException {
        
        
        return new GetWhitelistDomains1RequestBuilder(liveEventId, userId);
    }
}
