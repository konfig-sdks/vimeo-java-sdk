/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.PaymentMethodCardBillingAddress;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Information about the card used to make the payment.
 */
@ApiModel(description = "Information about the card used to make the payment.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PaymentMethodCard {
  public static final String SERIALIZED_NAME_BILLING_ADDRESS = "billing_address";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS)
  private PaymentMethodCardBillingAddress billingAddress;

  public static final String SERIALIZED_NAME_BIN = "bin";
  @SerializedName(SERIALIZED_NAME_BIN)
  private String bin;

  public static final String SERIALIZED_NAME_BRAND = "brand";
  @SerializedName(SERIALIZED_NAME_BRAND)
  private String brand;

  public static final String SERIALIZED_NAME_CARDHOLDER_NAME = "cardholder_name";
  @SerializedName(SERIALIZED_NAME_CARDHOLDER_NAME)
  private String cardholderName;

  public static final String SERIALIZED_NAME_EXPIRATION_MONTH = "expiration_month";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_MONTH)
  private Double expirationMonth;

  public static final String SERIALIZED_NAME_EXPIRATION_YEAR = "expiration_year";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_YEAR)
  private Double expirationYear;

  public static final String SERIALIZED_NAME_LAST_FOUR_DIGITS = "last_four_digits";
  @SerializedName(SERIALIZED_NAME_LAST_FOUR_DIGITS)
  private String lastFourDigits;

  public PaymentMethodCard() {
  }

  public PaymentMethodCard billingAddress(PaymentMethodCardBillingAddress billingAddress) {
    
    
    
    
    this.billingAddress = billingAddress;
    return this;
  }

   /**
   * Get billingAddress
   * @return billingAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PaymentMethodCardBillingAddress getBillingAddress() {
    return billingAddress;
  }


  public void setBillingAddress(PaymentMethodCardBillingAddress billingAddress) {
    
    
    
    this.billingAddress = billingAddress;
  }


  public PaymentMethodCard bin(String bin) {
    
    
    
    
    this.bin = bin;
    return this;
  }

   /**
   * The bank identification number of the card.
   * @return bin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123456", value = "The bank identification number of the card.")

  public String getBin() {
    return bin;
  }


  public void setBin(String bin) {
    
    
    
    this.bin = bin;
  }


  public PaymentMethodCard brand(String brand) {
    
    
    
    
    this.brand = brand;
    return this;
  }

   /**
   * The brand of the card.
   * @return brand
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Visa", value = "The brand of the card.")

  public String getBrand() {
    return brand;
  }


  public void setBrand(String brand) {
    
    
    
    this.brand = brand;
  }


  public PaymentMethodCard cardholderName(String cardholderName) {
    
    
    
    
    this.cardholderName = cardholderName;
    return this;
  }

   /**
   * The name of the cardholder.
   * @return cardholderName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "John Doe", value = "The name of the cardholder.")

  public String getCardholderName() {
    return cardholderName;
  }


  public void setCardholderName(String cardholderName) {
    
    
    
    this.cardholderName = cardholderName;
  }


  public PaymentMethodCard expirationMonth(Double expirationMonth) {
    
    
    
    
    this.expirationMonth = expirationMonth;
    return this;
  }

  public PaymentMethodCard expirationMonth(Integer expirationMonth) {
    
    
    
    
    this.expirationMonth = expirationMonth.doubleValue();
    return this;
  }

   /**
   * The expiration month of the card.
   * @return expirationMonth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "The expiration month of the card.")

  public Double getExpirationMonth() {
    return expirationMonth;
  }


  public void setExpirationMonth(Double expirationMonth) {
    
    
    
    this.expirationMonth = expirationMonth;
  }


  public PaymentMethodCard expirationYear(Double expirationYear) {
    
    
    
    
    this.expirationYear = expirationYear;
    return this;
  }

  public PaymentMethodCard expirationYear(Integer expirationYear) {
    
    
    
    
    this.expirationYear = expirationYear.doubleValue();
    return this;
  }

   /**
   * The expiration year of the card.
   * @return expirationYear
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020", value = "The expiration year of the card.")

  public Double getExpirationYear() {
    return expirationYear;
  }


  public void setExpirationYear(Double expirationYear) {
    
    
    
    this.expirationYear = expirationYear;
  }


  public PaymentMethodCard lastFourDigits(String lastFourDigits) {
    
    
    
    
    this.lastFourDigits = lastFourDigits;
    return this;
  }

   /**
   * The last four digits of the card.
   * @return lastFourDigits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1234", value = "The last four digits of the card.")

  public String getLastFourDigits() {
    return lastFourDigits;
  }


  public void setLastFourDigits(String lastFourDigits) {
    
    
    
    this.lastFourDigits = lastFourDigits;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PaymentMethodCard instance itself
   */
  public PaymentMethodCard putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentMethodCard paymentMethodCard = (PaymentMethodCard) o;
    return Objects.equals(this.billingAddress, paymentMethodCard.billingAddress) &&
        Objects.equals(this.bin, paymentMethodCard.bin) &&
        Objects.equals(this.brand, paymentMethodCard.brand) &&
        Objects.equals(this.cardholderName, paymentMethodCard.cardholderName) &&
        Objects.equals(this.expirationMonth, paymentMethodCard.expirationMonth) &&
        Objects.equals(this.expirationYear, paymentMethodCard.expirationYear) &&
        Objects.equals(this.lastFourDigits, paymentMethodCard.lastFourDigits)&&
        Objects.equals(this.additionalProperties, paymentMethodCard.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingAddress, bin, brand, cardholderName, expirationMonth, expirationYear, lastFourDigits, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentMethodCard {\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    bin: ").append(toIndentedString(bin)).append("\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    cardholderName: ").append(toIndentedString(cardholderName)).append("\n");
    sb.append("    expirationMonth: ").append(toIndentedString(expirationMonth)).append("\n");
    sb.append("    expirationYear: ").append(toIndentedString(expirationYear)).append("\n");
    sb.append("    lastFourDigits: ").append(toIndentedString(lastFourDigits)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billing_address");
    openapiFields.add("bin");
    openapiFields.add("brand");
    openapiFields.add("cardholder_name");
    openapiFields.add("expiration_month");
    openapiFields.add("expiration_year");
    openapiFields.add("last_four_digits");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PaymentMethodCard
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PaymentMethodCard.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentMethodCard is not found in the empty JSON string", PaymentMethodCard.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `billing_address`
      if (jsonObj.get("billing_address") != null && !jsonObj.get("billing_address").isJsonNull()) {
        PaymentMethodCardBillingAddress.validateJsonObject(jsonObj.getAsJsonObject("billing_address"));
      }
      if ((jsonObj.get("bin") != null && !jsonObj.get("bin").isJsonNull()) && !jsonObj.get("bin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bin").toString()));
      }
      if ((jsonObj.get("brand") != null && !jsonObj.get("brand").isJsonNull()) && !jsonObj.get("brand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand").toString()));
      }
      if ((jsonObj.get("cardholder_name") != null && !jsonObj.get("cardholder_name").isJsonNull()) && !jsonObj.get("cardholder_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardholder_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardholder_name").toString()));
      }
      if ((jsonObj.get("last_four_digits") != null && !jsonObj.get("last_four_digits").isJsonNull()) && !jsonObj.get("last_four_digits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_four_digits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_four_digits").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentMethodCard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentMethodCard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentMethodCard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentMethodCard.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentMethodCard>() {
           @Override
           public void write(JsonWriter out, PaymentMethodCard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentMethodCard read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PaymentMethodCard instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaymentMethodCard given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaymentMethodCard
  * @throws IOException if the JSON string is invalid with respect to PaymentMethodCard
  */
  public static PaymentMethodCard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentMethodCard.class);
  }

 /**
  * Convert an instance of PaymentMethodCard to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

