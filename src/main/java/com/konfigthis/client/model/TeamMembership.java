/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.TeamMembershipApplicablePermissionPolicies;
import com.konfigthis.client.model.TeamMembershipMetadata;
import com.konfigthis.client.model.TeamRole;
import com.konfigthis.client.model.User;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TeamMembership
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TeamMembership {
  public static final String SERIALIZED_NAME_ACCESS_GRANT = "access_grant";
  @SerializedName(SERIALIZED_NAME_ACCESS_GRANT)
  private Object accessGrant;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_APPLICABLE_PERMISSION_POLICIES = "applicable_permission_policies";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_PERMISSION_POLICIES)
  private TeamMembershipApplicablePermissionPolicies applicablePermissionPolicies;

  public static final String SERIALIZED_NAME_APPLICABLE_ROLES = "applicable_roles";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_ROLES)
  private List<TeamRole> applicableRoles = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_TIME = "created_time";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private String createdTime;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_HAS_FOLDER_ACCESS = "has_folder_access";
  @SerializedName(SERIALIZED_NAME_HAS_FOLDER_ACCESS)
  private Boolean hasFolderAccess;

  public static final String SERIALIZED_NAME_INVITE_URL = "invite_url";
  @SerializedName(SERIALIZED_NAME_INVITE_URL)
  private String inviteUrl;

  public static final String SERIALIZED_NAME_JOINED_TIME = "joined_time";
  @SerializedName(SERIALIZED_NAME_JOINED_TIME)
  private String joinedTime;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private TeamMembershipMetadata metadata;

  public static final String SERIALIZED_NAME_MODIFIED_TIME = "modified_time";
  @SerializedName(SERIALIZED_NAME_MODIFIED_TIME)
  private String modifiedTime;

  /**
   * The team member&#39;s permission level.  Option descriptions:  * &#x60;Admin&#x60; - The team member has admin permissions. They can upload and edit videos for the entire team and perform team administration tasks.  * &#x60;Contributor&#x60; - The team member has contributor permissions. They can upload and edit videos for the entire team but can&#39;t perform team administration tasks.  * &#x60;Contributor Plus&#x60; - The team member has contributor plus permissions. They can upload and edit videos for the entire team, and have additional sets of permissions, but can&#39;t perform team administration tasks.  * &#x60;Owner&#x60; - The team member has owner permissions.  * &#x60;Uploader&#x60; - The team member has uploader permissions. They can upload videos for the entire team but can&#39;t edit videos.  * &#x60;Viewer&#x60; - The team member has viewer permissions. They can access team videos and specific team folders but can&#39;t upload or edit videos. 
   */
  @JsonAdapter(PermissionLevelEnum.Adapter.class)
 public enum PermissionLevelEnum {
    ADMIN("Admin"),
    
    CONTRIBUTOR("Contributor"),
    
    CONTRIBUTOR_PLUS("Contributor Plus"),
    
    OWNER("Owner"),
    
    UPLOADER("Uploader"),
    
    VIEWER("Viewer");

    private String value;

    PermissionLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PermissionLevelEnum fromValue(String value) {
      for (PermissionLevelEnum b : PermissionLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PermissionLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PermissionLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PermissionLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PermissionLevelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PERMISSION_LEVEL = "permission_level";
  @SerializedName(SERIALIZED_NAME_PERMISSION_LEVEL)
  private PermissionLevelEnum permissionLevel;

  public static final String SERIALIZED_NAME_RECENTLY_REMINDED = "recently_reminded";
  @SerializedName(SERIALIZED_NAME_RECENTLY_REMINDED)
  private Boolean recentlyReminded;

  public static final String SERIALIZED_NAME_RESOURCE_KEY = "resource_key";
  @SerializedName(SERIALIZED_NAME_RESOURCE_KEY)
  private String resourceKey;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;

  /**
   * The status of the team membership invite.  Option descriptions:  * &#x60;accepted&#x60; - Team membership has been accepted.  * &#x60;pending&#x60; - Team membership has been offered but not yet accepted. 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    ACCEPTED("accepted"),
    
    PENDING("pending");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public TeamMembership() {
  }

  public TeamMembership accessGrant(Object accessGrant) {
    
    
    
    
    this.accessGrant = accessGrant;
    return this;
  }

   /**
   * Information about an access grant that applies to the team member on the folder. _This field is deprecated because grants are no longer exposed via API responses._
   * @return accessGrant
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "Information about an access grant that applies to the team member on the folder. _This field is deprecated because grants are no longer exposed via API responses._")

  public Object getAccessGrant() {
    return accessGrant;
  }


  public void setAccessGrant(Object accessGrant) {
    
    
    
    this.accessGrant = accessGrant;
  }


  public TeamMembership active(Boolean active) {
    
    
    
    
    this.active = active;
    return this;
  }

   /**
   * Whether the team membership is currently active.
   * @return active
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the team membership is currently active.")

  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    
    
    
    this.active = active;
  }


  public TeamMembership applicablePermissionPolicies(TeamMembershipApplicablePermissionPolicies applicablePermissionPolicies) {
    
    
    
    
    this.applicablePermissionPolicies = applicablePermissionPolicies;
    return this;
  }

   /**
   * Get applicablePermissionPolicies
   * @return applicablePermissionPolicies
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public TeamMembershipApplicablePermissionPolicies getApplicablePermissionPolicies() {
    return applicablePermissionPolicies;
  }


  public void setApplicablePermissionPolicies(TeamMembershipApplicablePermissionPolicies applicablePermissionPolicies) {
    
    
    
    this.applicablePermissionPolicies = applicablePermissionPolicies;
  }


  public TeamMembership applicableRoles(List<TeamRole> applicableRoles) {
    
    
    
    
    this.applicableRoles = applicableRoles;
    return this;
  }

  public TeamMembership addApplicableRolesItem(TeamRole applicableRolesItem) {
    this.applicableRoles.add(applicableRolesItem);
    return this;
  }

   /**
   * An array of the team roles this team member can have.
   * @return applicableRoles
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An array of the team roles this team member can have.")

  public List<TeamRole> getApplicableRoles() {
    return applicableRoles;
  }


  public void setApplicableRoles(List<TeamRole> applicableRoles) {
    
    
    
    this.applicableRoles = applicableRoles;
  }


  public TeamMembership createdTime(String createdTime) {
    
    
    
    
    this.createdTime = createdTime;
    return this;
  }

   /**
   * The time in ISO 8601 format when the invite was sent.
   * @return createdTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2017-05-15T17:42:07+00:00", required = true, value = "The time in ISO 8601 format when the invite was sent.")

  public String getCreatedTime() {
    return createdTime;
  }


  public void setCreatedTime(String createdTime) {
    
    
    
    this.createdTime = createdTime;
  }


  public TeamMembership email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * The team member&#39;s email.
   * @return email
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "user@example.com", required = true, value = "The team member's email.")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public TeamMembership hasFolderAccess(Boolean hasFolderAccess) {
    
    
    
    
    this.hasFolderAccess = hasFolderAccess;
    return this;
  }

   /**
   * Whether the team member has folder access.
   * @return hasFolderAccess
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the team member has folder access.")

  public Boolean getHasFolderAccess() {
    return hasFolderAccess;
  }


  public void setHasFolderAccess(Boolean hasFolderAccess) {
    
    
    
    this.hasFolderAccess = hasFolderAccess;
  }


  public TeamMembership inviteUrl(String inviteUrl) {
    
    
    
    
    this.inviteUrl = inviteUrl;
    return this;
  }

   /**
   * The URL for the invited user to join the team. The value of this field is null if the invited user has already joined.
   * @return inviteUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://vimeo.com/user/seat?code=e7c71ae7f4dc5d71a3bceb4d1d9e", required = true, value = "The URL for the invited user to join the team. The value of this field is null if the invited user has already joined.")

  public String getInviteUrl() {
    return inviteUrl;
  }


  public void setInviteUrl(String inviteUrl) {
    
    
    
    this.inviteUrl = inviteUrl;
  }


  public TeamMembership joinedTime(String joinedTime) {
    
    
    
    
    this.joinedTime = joinedTime;
    return this;
  }

   /**
   * The time in ISO 8601 format when the invite was accepted.
   * @return joinedTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2017-05-15T17:42:07+00:00", required = true, value = "The time in ISO 8601 format when the invite was accepted.")

  public String getJoinedTime() {
    return joinedTime;
  }


  public void setJoinedTime(String joinedTime) {
    
    
    
    this.joinedTime = joinedTime;
  }


  public TeamMembership metadata(TeamMembershipMetadata metadata) {
    
    
    
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public TeamMembershipMetadata getMetadata() {
    return metadata;
  }


  public void setMetadata(TeamMembershipMetadata metadata) {
    
    
    
    this.metadata = metadata;
  }


  public TeamMembership modifiedTime(String modifiedTime) {
    
    
    
    
    this.modifiedTime = modifiedTime;
    return this;
  }

   /**
   * The time in ISO 8601 format when the team membership was last modified.
   * @return modifiedTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2017-05-15T17:42:07+00:00", required = true, value = "The time in ISO 8601 format when the team membership was last modified.")

  public String getModifiedTime() {
    return modifiedTime;
  }


  public void setModifiedTime(String modifiedTime) {
    
    
    
    this.modifiedTime = modifiedTime;
  }


  public TeamMembership permissionLevel(PermissionLevelEnum permissionLevel) {
    
    
    
    
    this.permissionLevel = permissionLevel;
    return this;
  }

   /**
   * The team member&#39;s permission level.  Option descriptions:  * &#x60;Admin&#x60; - The team member has admin permissions. They can upload and edit videos for the entire team and perform team administration tasks.  * &#x60;Contributor&#x60; - The team member has contributor permissions. They can upload and edit videos for the entire team but can&#39;t perform team administration tasks.  * &#x60;Contributor Plus&#x60; - The team member has contributor plus permissions. They can upload and edit videos for the entire team, and have additional sets of permissions, but can&#39;t perform team administration tasks.  * &#x60;Owner&#x60; - The team member has owner permissions.  * &#x60;Uploader&#x60; - The team member has uploader permissions. They can upload videos for the entire team but can&#39;t edit videos.  * &#x60;Viewer&#x60; - The team member has viewer permissions. They can access team videos and specific team folders but can&#39;t upload or edit videos. 
   * @return permissionLevel
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ADMIN", required = true, value = "The team member's permission level.  Option descriptions:  * `Admin` - The team member has admin permissions. They can upload and edit videos for the entire team and perform team administration tasks.  * `Contributor` - The team member has contributor permissions. They can upload and edit videos for the entire team but can't perform team administration tasks.  * `Contributor Plus` - The team member has contributor plus permissions. They can upload and edit videos for the entire team, and have additional sets of permissions, but can't perform team administration tasks.  * `Owner` - The team member has owner permissions.  * `Uploader` - The team member has uploader permissions. They can upload videos for the entire team but can't edit videos.  * `Viewer` - The team member has viewer permissions. They can access team videos and specific team folders but can't upload or edit videos. ")

  public PermissionLevelEnum getPermissionLevel() {
    return permissionLevel;
  }


  public void setPermissionLevel(PermissionLevelEnum permissionLevel) {
    
    
    
    this.permissionLevel = permissionLevel;
  }


  public TeamMembership recentlyReminded(Boolean recentlyReminded) {
    
    
    
    
    this.recentlyReminded = recentlyReminded;
    return this;
  }

   /**
   * Whether the team member has been reminded about the invite.
   * @return recentlyReminded
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the team member has been reminded about the invite.")

  public Boolean getRecentlyReminded() {
    return recentlyReminded;
  }


  public void setRecentlyReminded(Boolean recentlyReminded) {
    
    
    
    this.recentlyReminded = recentlyReminded;
  }


  public TeamMembership resourceKey(String resourceKey) {
    
    
    
    
    this.resourceKey = resourceKey;
    return this;
  }

   /**
   * The resource key of the team membership.
   * @return resourceKey
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "dc724af18fbdd4e59189f5fe768a5f8311527050", required = true, value = "The resource key of the team membership.")

  public String getResourceKey() {
    return resourceKey;
  }


  public void setResourceKey(String resourceKey) {
    
    
    
    this.resourceKey = resourceKey;
  }


  public TeamMembership role(String role) {
    
    
    
    
    this.role = role;
    return this;
  }

   /**
   * The team member&#39;s role, translated.
   * @return role
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The team member's role, translated.")

  public String getRole() {
    return role;
  }


  public void setRole(String role) {
    
    
    
    this.role = role;
  }


  public TeamMembership status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The status of the team membership invite.  Option descriptions:  * &#x60;accepted&#x60; - Team membership has been accepted.  * &#x60;pending&#x60; - Team membership has been offered but not yet accepted. 
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ACCEPTED", required = true, value = "The status of the team membership invite.  Option descriptions:  * `accepted` - Team membership has been accepted.  * `pending` - Team membership has been offered but not yet accepted. ")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public TeamMembership uri(String uri) {
    
    
    
    
    this.uri = uri;
    return this;
  }

   /**
   * The unique identifier to access the team membership resource.
   * @return uri
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "/users/152184/team_users/12345", required = true, value = "The unique identifier to access the team membership resource.")

  public String getUri() {
    return uri;
  }


  public void setUri(String uri) {
    
    
    
    this.uri = uri;
  }


  public TeamMembership user(User user) {
    
    
    
    
    this.user = user;
    return this;
  }

   /**
   * The team member. The value of this field is null if the user hasn&#39;t joined the team yet.
   * @return user
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The team member. The value of this field is null if the user hasn't joined the team yet.")

  public User getUser() {
    return user;
  }


  public void setUser(User user) {
    
    
    
    this.user = user;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TeamMembership instance itself
   */
  public TeamMembership putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TeamMembership teamMembership = (TeamMembership) o;
    return Objects.equals(this.accessGrant, teamMembership.accessGrant) &&
        Objects.equals(this.active, teamMembership.active) &&
        Objects.equals(this.applicablePermissionPolicies, teamMembership.applicablePermissionPolicies) &&
        Objects.equals(this.applicableRoles, teamMembership.applicableRoles) &&
        Objects.equals(this.createdTime, teamMembership.createdTime) &&
        Objects.equals(this.email, teamMembership.email) &&
        Objects.equals(this.hasFolderAccess, teamMembership.hasFolderAccess) &&
        Objects.equals(this.inviteUrl, teamMembership.inviteUrl) &&
        Objects.equals(this.joinedTime, teamMembership.joinedTime) &&
        Objects.equals(this.metadata, teamMembership.metadata) &&
        Objects.equals(this.modifiedTime, teamMembership.modifiedTime) &&
        Objects.equals(this.permissionLevel, teamMembership.permissionLevel) &&
        Objects.equals(this.recentlyReminded, teamMembership.recentlyReminded) &&
        Objects.equals(this.resourceKey, teamMembership.resourceKey) &&
        Objects.equals(this.role, teamMembership.role) &&
        Objects.equals(this.status, teamMembership.status) &&
        Objects.equals(this.uri, teamMembership.uri) &&
        Objects.equals(this.user, teamMembership.user)&&
        Objects.equals(this.additionalProperties, teamMembership.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessGrant, active, applicablePermissionPolicies, applicableRoles, createdTime, email, hasFolderAccess, inviteUrl, joinedTime, metadata, modifiedTime, permissionLevel, recentlyReminded, resourceKey, role, status, uri, user, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TeamMembership {\n");
    sb.append("    accessGrant: ").append(toIndentedString(accessGrant)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    applicablePermissionPolicies: ").append(toIndentedString(applicablePermissionPolicies)).append("\n");
    sb.append("    applicableRoles: ").append(toIndentedString(applicableRoles)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    hasFolderAccess: ").append(toIndentedString(hasFolderAccess)).append("\n");
    sb.append("    inviteUrl: ").append(toIndentedString(inviteUrl)).append("\n");
    sb.append("    joinedTime: ").append(toIndentedString(joinedTime)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    modifiedTime: ").append(toIndentedString(modifiedTime)).append("\n");
    sb.append("    permissionLevel: ").append(toIndentedString(permissionLevel)).append("\n");
    sb.append("    recentlyReminded: ").append(toIndentedString(recentlyReminded)).append("\n");
    sb.append("    resourceKey: ").append(toIndentedString(resourceKey)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access_grant");
    openapiFields.add("active");
    openapiFields.add("applicable_permission_policies");
    openapiFields.add("applicable_roles");
    openapiFields.add("created_time");
    openapiFields.add("email");
    openapiFields.add("has_folder_access");
    openapiFields.add("invite_url");
    openapiFields.add("joined_time");
    openapiFields.add("metadata");
    openapiFields.add("modified_time");
    openapiFields.add("permission_level");
    openapiFields.add("recently_reminded");
    openapiFields.add("resource_key");
    openapiFields.add("role");
    openapiFields.add("status");
    openapiFields.add("uri");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("access_grant");
    openapiRequiredFields.add("active");
    openapiRequiredFields.add("applicable_permission_policies");
    openapiRequiredFields.add("applicable_roles");
    openapiRequiredFields.add("created_time");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("invite_url");
    openapiRequiredFields.add("joined_time");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("modified_time");
    openapiRequiredFields.add("permission_level");
    openapiRequiredFields.add("resource_key");
    openapiRequiredFields.add("role");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("uri");
    openapiRequiredFields.add("user");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TeamMembership
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TeamMembership.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TeamMembership is not found in the empty JSON string", TeamMembership.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TeamMembership.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `applicable_permission_policies`
      TeamMembershipApplicablePermissionPolicies.validateJsonObject(jsonObj.getAsJsonObject("applicable_permission_policies"));
      // ensure the json data is an array
      if (!jsonObj.get("applicable_roles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicable_roles` to be an array in the JSON string but got `%s`", jsonObj.get("applicable_roles").toString()));
      }

      JsonArray jsonArrayapplicableRoles = jsonObj.getAsJsonArray("applicable_roles");
      // validate the required field `applicable_roles` (array)
      for (int i = 0; i < jsonArrayapplicableRoles.size(); i++) {
        TeamRole.validateJsonObject(jsonArrayapplicableRoles.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("created_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_time").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("invite_url").isJsonNull() && !jsonObj.get("invite_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invite_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invite_url").toString()));
      }
      if (!jsonObj.get("joined_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `joined_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("joined_time").toString()));
      }
      // validate the required field `metadata`
      TeamMembershipMetadata.validateJsonObject(jsonObj.getAsJsonObject("metadata"));
      if (!jsonObj.get("modified_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modified_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modified_time").toString()));
      }
      if (!jsonObj.get("permission_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permission_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permission_level").toString()));
      }
      if (!jsonObj.get("resource_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_key").toString()));
      }
      if (!jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      // validate the required field `user`
      User.validateJsonObject(jsonObj.getAsJsonObject("user"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TeamMembership.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TeamMembership' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TeamMembership> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TeamMembership.class));

       return (TypeAdapter<T>) new TypeAdapter<TeamMembership>() {
           @Override
           public void write(JsonWriter out, TeamMembership value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TeamMembership read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TeamMembership instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TeamMembership given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TeamMembership
  * @throws IOException if the JSON string is invalid with respect to TeamMembership
  */
  public static TeamMembership fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TeamMembership.class);
  }

 /**
  * Convert an instance of TeamMembership to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

