/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.User;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ChannelsSubscriptionsAndSubscribersApi
 */
@Disabled
public class ChannelsSubscriptionsAndSubscribersApiTest {

    private static ChannelsSubscriptionsAndSubscribersApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ChannelsSubscriptionsAndSubscribersApi(apiClient);
    }

    /**
     * Check if a user follows a channel
     *
     * This method determines whether the specified user is a follower of a particular channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkIfUserFollowsChannelTest() throws ApiException {
        Double channelId = null;
        api.checkIfUserFollowsChannel(channelId)
                .execute();
        // TODO: test validations
    }

    /**
     * Check if a user follows a channel
     *
     * This method determines whether the specified user is a follower of a particular channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkUserFollowsChannelTest() throws ApiException {
        Double channelId = null;
        Double userId = null;
        api.checkUserFollowsChannel(channelId, userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the followers of a channel
     *
     * This method returns every follower of the specified channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listChannelFollowersTest() throws ApiException {
        Double channelId = null;
        String filter = null;
        String direction = null;
        Double page = null;
        Double perPage = null;
        String query = null;
        String sort = null;
        List<User> response = api.listChannelFollowers(channelId, filter)
                .direction(direction)
                .page(page)
                .perPage(perPage)
                .query(query)
                .sort(sort)
                .execute();
        // TODO: test validations
    }

    /**
     * Subscribe the user to a specific channel
     *
     * This method subscribes the authenticated user to the specified channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscribeToChannelTest() throws ApiException {
        Double channelId = null;
        Double userId = null;
        api.subscribeToChannel(channelId, userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Subscribe the user to a specific channel
     *
     * This method subscribes the authenticated user to the specified channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscribeUserToChannelTest() throws ApiException {
        Double channelId = null;
        api.subscribeUserToChannel(channelId)
                .execute();
        // TODO: test validations
    }

    /**
     * Unsubscribe the user from a specific channel
     *
     * This method unsubscribes the authenticated user from the specified channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unsubscribeUserFromChannelTest() throws ApiException {
        Double channelId = null;
        api.unsubscribeUserFromChannel(channelId)
                .execute();
        // TODO: test validations
    }

    /**
     * Unsubscribe the user from a specific channel
     *
     * This method unsubscribes the authenticated user from the specified channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unsubscribeUserFromChannel_0Test() throws ApiException {
        Double channelId = null;
        Double userId = null;
        api.unsubscribeUserFromChannel_0(channelId, userId)
                .execute();
        // TODO: test validations
    }

}
