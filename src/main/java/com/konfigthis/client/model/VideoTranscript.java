/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The transcript information of the video. This data requires a bearer token with the &#x60;private&#x60; scope.
 */
@ApiModel(description = "The transcript information of the video. This data requires a bearer token with the `private` scope.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class VideoTranscript {
  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  /**
   * The video transcript&#39;s availability status. This data requires a bearer token with the &#x60;private&#x60; scope.  Option descriptions:  * &#x60;completed&#x60; - Transcription is completed. The transcript is available.  * &#x60;failed&#x60; - There was a transcription error. The transcript isn&#39;t available.  * &#x60;in_progress&#x60; - Transcription is currently underway. The transcript isn&#39;t available yet.  * &#x60;language_not_supported&#x60; - We currently don&#39;t support transcribing audio for this video&#39;s language.  * &#x60;no_speech&#x60; - Transcription was completed, but there were no words in the audio to transcribe.  * &#x60;not_started&#x60; - The transcript job hasn&#39;t started.  * &#x60;unknown&#x60; - There isn&#39;t a record of this video&#39;s transcription job. 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    COMPLETED("completed"),
    
    FAILED("failed"),
    
    IN_PROGRESS("in_progress"),
    
    LANGUAGE_NOT_SUPPORTED("language_not_supported"),
    
    NO_SPEECH("no_speech"),
    
    NOT_STARTED("not_started"),
    
    UNKNOWN("unknown");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public VideoTranscript() {
  }

  public VideoTranscript language(String language) {
    
    
    
    
    this.language = language;
    return this;
  }

   /**
   * The video transcript&#39;s language. This data requires a bearer token with the &#x60;private&#x60; scope.
   * @return language
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "en", required = true, value = "The video transcript's language. This data requires a bearer token with the `private` scope.")

  public String getLanguage() {
    return language;
  }


  public void setLanguage(String language) {
    
    
    
    this.language = language;
  }


  public VideoTranscript status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The video transcript&#39;s availability status. This data requires a bearer token with the &#x60;private&#x60; scope.  Option descriptions:  * &#x60;completed&#x60; - Transcription is completed. The transcript is available.  * &#x60;failed&#x60; - There was a transcription error. The transcript isn&#39;t available.  * &#x60;in_progress&#x60; - Transcription is currently underway. The transcript isn&#39;t available yet.  * &#x60;language_not_supported&#x60; - We currently don&#39;t support transcribing audio for this video&#39;s language.  * &#x60;no_speech&#x60; - Transcription was completed, but there were no words in the audio to transcribe.  * &#x60;not_started&#x60; - The transcript job hasn&#39;t started.  * &#x60;unknown&#x60; - There isn&#39;t a record of this video&#39;s transcription job. 
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "COMPLETED", value = "The video transcript's availability status. This data requires a bearer token with the `private` scope.  Option descriptions:  * `completed` - Transcription is completed. The transcript is available.  * `failed` - There was a transcription error. The transcript isn't available.  * `in_progress` - Transcription is currently underway. The transcript isn't available yet.  * `language_not_supported` - We currently don't support transcribing audio for this video's language.  * `no_speech` - Transcription was completed, but there were no words in the audio to transcribe.  * `not_started` - The transcript job hasn't started.  * `unknown` - There isn't a record of this video's transcription job. ")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the VideoTranscript instance itself
   */
  public VideoTranscript putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoTranscript videoTranscript = (VideoTranscript) o;
    return Objects.equals(this.language, videoTranscript.language) &&
        Objects.equals(this.status, videoTranscript.status)&&
        Objects.equals(this.additionalProperties, videoTranscript.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(language, status, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoTranscript {\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("language");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("language");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VideoTranscript
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!VideoTranscript.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoTranscript is not found in the empty JSON string", VideoTranscript.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VideoTranscript.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("language").isJsonNull() && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoTranscript.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoTranscript' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoTranscript> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoTranscript.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoTranscript>() {
           @Override
           public void write(JsonWriter out, VideoTranscript value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoTranscript read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             VideoTranscript instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VideoTranscript given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VideoTranscript
  * @throws IOException if the JSON string is invalid with respect to VideoTranscript
  */
  public static VideoTranscript fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoTranscript.class);
  }

 /**
  * Convert an instance of VideoTranscript to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

