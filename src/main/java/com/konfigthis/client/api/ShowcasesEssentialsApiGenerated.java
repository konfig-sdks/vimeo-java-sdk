/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Album;
import com.konfigthis.client.model.CreateShowcaseRequest;
import com.konfigthis.client.model.EditShowcaseRequest;
import com.konfigthis.client.model.ShowcasesEssentialsCreateUserShowcaseRequest;
import com.konfigthis.client.model.ShowcasesEssentialsEditShowcaseRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ShowcasesEssentialsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ShowcasesEssentialsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ShowcasesEssentialsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createUserShowcaseCall(ShowcasesEssentialsCreateUserShowcaseRequest showcasesEssentialsCreateUserShowcaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = showcasesEssentialsCreateUserShowcaseRequest;

        // create path and map variables
        String localVarPath = "/me/albums";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.album+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.album+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserShowcaseValidateBeforeCall(ShowcasesEssentialsCreateUserShowcaseRequest showcasesEssentialsCreateUserShowcaseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'showcasesEssentialsCreateUserShowcaseRequest' is set
        if (showcasesEssentialsCreateUserShowcaseRequest == null) {
            throw new ApiException("Missing the required parameter 'showcasesEssentialsCreateUserShowcaseRequest' when calling createUserShowcase(Async)");
        }

        return createUserShowcaseCall(showcasesEssentialsCreateUserShowcaseRequest, _callback);

    }


    private ApiResponse<Album> createUserShowcaseWithHttpInfo(ShowcasesEssentialsCreateUserShowcaseRequest showcasesEssentialsCreateUserShowcaseRequest) throws ApiException {
        okhttp3.Call localVarCall = createUserShowcaseValidateBeforeCall(showcasesEssentialsCreateUserShowcaseRequest, null);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createUserShowcaseAsync(ShowcasesEssentialsCreateUserShowcaseRequest showcasesEssentialsCreateUserShowcaseRequest, final ApiCallback<Album> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserShowcaseValidateBeforeCall(showcasesEssentialsCreateUserShowcaseRequest, _callback);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateUserShowcaseRequestBuilder {
        private final String name;
        private String description;
        private String brandColor;
        private Boolean hideFromVimeo;
        private Boolean hideNav;
        private Boolean hideUpcoming;
        private String layout;
        private String password;
        private String privacy;
        private Boolean reviewMode;
        private String sort;
        private String theme;

        private CreateUserShowcaseRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set description
         * @param description The description of the showcase. (optional)
         * @return CreateUserShowcaseRequestBuilder
         */
        public CreateUserShowcaseRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set brandColor
         * @param brandColor The hexadecimal code for the color of the player buttons and showcase controls. (optional)
         * @return CreateUserShowcaseRequestBuilder
         */
        public CreateUserShowcaseRequestBuilder brandColor(String brandColor) {
            this.brandColor = brandColor;
            return this;
        }
        
        /**
         * Set hideFromVimeo
         * @param hideFromVimeo Whether the showcase should be hidden from Vimeo when unlisted. (optional)
         * @return CreateUserShowcaseRequestBuilder
         */
        public CreateUserShowcaseRequestBuilder hideFromVimeo(Boolean hideFromVimeo) {
            this.hideFromVimeo = hideFromVimeo;
            return this;
        }
        
        /**
         * Set hideNav
         * @param hideNav Whether to hide Vimeo navigation when displaying the showcase. (optional)
         * @return CreateUserShowcaseRequestBuilder
         */
        public CreateUserShowcaseRequestBuilder hideNav(Boolean hideNav) {
            this.hideNav = hideNav;
            return this;
        }
        
        /**
         * Set hideUpcoming
         * @param hideUpcoming Whether to include the upcoming event in the showcase. (optional)
         * @return CreateUserShowcaseRequestBuilder
         */
        public CreateUserShowcaseRequestBuilder hideUpcoming(Boolean hideUpcoming) {
            this.hideUpcoming = hideUpcoming;
            return this;
        }
        
        /**
         * Set layout
         * @param layout The type of layout for presenting the showcase.  Option descriptions:  * &#x60;grid&#x60; - The videos appear in a grid.  * &#x60;player&#x60; - The videos appear in the player.  (optional)
         * @return CreateUserShowcaseRequestBuilder
         */
        public CreateUserShowcaseRequestBuilder layout(String layout) {
            this.layout = layout;
            return this;
        }
        
        /**
         * Set password
         * @param password The showcase&#39;s password. This field is required only when **privacy** is &#x60;password&#x60;. (optional)
         * @return CreateUserShowcaseRequestBuilder
         */
        public CreateUserShowcaseRequestBuilder password(String password) {
            this.password = password;
            return this;
        }
        
        /**
         * Set privacy
         * @param privacy The privacy level of the showcase.  Option descriptions:  * &#x60;anybody&#x60; - Anyone can access the showcase, either on Vimeo or through an embed.  * &#x60;embed_only&#x60; - The showcase doesn&#39;t appear on Vimeo, but it can be embedded on other sites.  * &#x60;nobody&#x60; - No one can access the showcase, including the authenticated user.  * &#x60;password&#x60; - Only those with the password can access the showcase.  * &#x60;team&#x60; - Only members of the authenticated user&#39;s team can access the showcase.  * &#x60;unlisted&#x60; - The showcase can&#39;t be accessed if the URL omits its unlisted hash.  (optional)
         * @return CreateUserShowcaseRequestBuilder
         */
        public CreateUserShowcaseRequestBuilder privacy(String privacy) {
            this.privacy = privacy;
            return this;
        }
        
        /**
         * Set reviewMode
         * @param reviewMode Whether showcase videos use the review mode URL. (optional)
         * @return CreateUserShowcaseRequestBuilder
         */
        public CreateUserShowcaseRequestBuilder reviewMode(Boolean reviewMode) {
            this.reviewMode = reviewMode;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The default sort order of the videos as they appear in the showcase.  Option descriptions:  * &#x60;added_first&#x60; - The videos appear according to when they were added to the showcase, with the most recently added first.  * &#x60;added_last&#x60; - The videos appear according to when they were added to the showcase, with the most recently added last.  * &#x60;alphabetical&#x60; - The videos appear alphabetically by their title.  * &#x60;arranged&#x60; - The videos appear as arranged by the owner of the showcase.  * &#x60;comments&#x60; - The videos appear according to their number of comments.  * &#x60;likes&#x60; - The videos appear according to their number of likes.  * &#x60;newest&#x60; - The videos appear in chronological order with the newest first.  * &#x60;oldest&#x60; - The videos appear in chronological order with the oldest first.  * &#x60;plays&#x60; - The videos appear according to their number of plays.  (optional)
         * @return CreateUserShowcaseRequestBuilder
         */
        public CreateUserShowcaseRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set theme
         * @param theme The color theme of the showcase.  Option descriptions:  * &#x60;dark&#x60; - The showcase uses the dark theme.  * &#x60;standard&#x60; - The showcase uses the standard theme.  (optional)
         * @return CreateUserShowcaseRequestBuilder
         */
        public CreateUserShowcaseRequestBuilder theme(String theme) {
            this.theme = theme;
            return this;
        }
        
        /**
         * Build call for createUserShowcase
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The showcase was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ShowcasesEssentialsCreateUserShowcaseRequest showcasesEssentialsCreateUserShowcaseRequest = buildBodyParams();
            return createUserShowcaseCall(showcasesEssentialsCreateUserShowcaseRequest, _callback);
        }

        private ShowcasesEssentialsCreateUserShowcaseRequest buildBodyParams() {
            ShowcasesEssentialsCreateUserShowcaseRequest showcasesEssentialsCreateUserShowcaseRequest = new ShowcasesEssentialsCreateUserShowcaseRequest();
            showcasesEssentialsCreateUserShowcaseRequest.description(this.description);
            showcasesEssentialsCreateUserShowcaseRequest.brandColor(this.brandColor);
            showcasesEssentialsCreateUserShowcaseRequest.hideFromVimeo(this.hideFromVimeo);
            showcasesEssentialsCreateUserShowcaseRequest.hideNav(this.hideNav);
            showcasesEssentialsCreateUserShowcaseRequest.hideUpcoming(this.hideUpcoming);
            if (this.layout != null)
            showcasesEssentialsCreateUserShowcaseRequest.layout(ShowcasesEssentialsCreateUserShowcaseRequest.LayoutEnum.fromValue(this.layout));
            showcasesEssentialsCreateUserShowcaseRequest.name(this.name);
            showcasesEssentialsCreateUserShowcaseRequest.password(this.password);
            if (this.privacy != null)
            showcasesEssentialsCreateUserShowcaseRequest.privacy(ShowcasesEssentialsCreateUserShowcaseRequest.PrivacyEnum.fromValue(this.privacy));
            showcasesEssentialsCreateUserShowcaseRequest.reviewMode(this.reviewMode);
            if (this.sort != null)
            showcasesEssentialsCreateUserShowcaseRequest.sort(ShowcasesEssentialsCreateUserShowcaseRequest.SortEnum.fromValue(this.sort));
            if (this.theme != null)
            showcasesEssentialsCreateUserShowcaseRequest.theme(ShowcasesEssentialsCreateUserShowcaseRequest.ThemeEnum.fromValue(this.theme));
            return showcasesEssentialsCreateUserShowcaseRequest;
        }

        /**
         * Execute createUserShowcase request
         * @return Album
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The showcase was created. </td><td>  -  </td></tr>
         </table>
         */
        public Album execute() throws ApiException {
            ShowcasesEssentialsCreateUserShowcaseRequest showcasesEssentialsCreateUserShowcaseRequest = buildBodyParams();
            ApiResponse<Album> localVarResp = createUserShowcaseWithHttpInfo(showcasesEssentialsCreateUserShowcaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createUserShowcase request with HTTP info returned
         * @return ApiResponse&lt;Album&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The showcase was created. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Album> executeWithHttpInfo() throws ApiException {
            ShowcasesEssentialsCreateUserShowcaseRequest showcasesEssentialsCreateUserShowcaseRequest = buildBodyParams();
            return createUserShowcaseWithHttpInfo(showcasesEssentialsCreateUserShowcaseRequest);
        }

        /**
         * Execute createUserShowcase request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The showcase was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Album> _callback) throws ApiException {
            ShowcasesEssentialsCreateUserShowcaseRequest showcasesEssentialsCreateUserShowcaseRequest = buildBodyParams();
            return createUserShowcaseAsync(showcasesEssentialsCreateUserShowcaseRequest, _callback);
        }
    }

    /**
     * Create a showcase
     * This method creates a new showcase for the specified user.
     * @param showcasesEssentialsCreateUserShowcaseRequest  (required)
     * @return CreateUserShowcaseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The showcase was created. </td><td>  -  </td></tr>
     </table>
     */
    public CreateUserShowcaseRequestBuilder createUserShowcase(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateUserShowcaseRequestBuilder(name);
    }
    private okhttp3.Call deleteShowcaseCall(Double albumId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/albums/{album_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteShowcaseValidateBeforeCall(Double albumId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling deleteShowcase(Async)");
        }

        return deleteShowcaseCall(albumId, _callback);

    }


    private ApiResponse<Void> deleteShowcaseWithHttpInfo(Double albumId) throws ApiException {
        okhttp3.Call localVarCall = deleteShowcaseValidateBeforeCall(albumId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteShowcaseAsync(Double albumId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteShowcaseValidateBeforeCall(albumId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteShowcaseRequestBuilder {
        private final Double albumId;

        private DeleteShowcaseRequestBuilder(double albumId) {
            this.albumId = albumId;
        }

        /**
         * Build call for deleteShowcase
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The showcase was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteShowcaseCall(albumId, _callback);
        }


        /**
         * Execute deleteShowcase request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The showcase was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteShowcaseWithHttpInfo(albumId);
        }

        /**
         * Execute deleteShowcase request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The showcase was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteShowcaseWithHttpInfo(albumId);
        }

        /**
         * Execute deleteShowcase request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The showcase was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteShowcaseAsync(albumId, _callback);
        }
    }

    /**
     * Delete a showcase
     * This method deletes the specified showcase. The authenticated user must be the owner of the showcase.
     * @param albumId The ID of the showcase. (required)
     * @return DeleteShowcaseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The showcase was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteShowcaseRequestBuilder deleteShowcase(double albumId) throws IllegalArgumentException {
        
        return new DeleteShowcaseRequestBuilder(albumId);
    }
    private okhttp3.Call editShowcaseCall(Double albumId, ShowcasesEssentialsEditShowcaseRequest showcasesEssentialsEditShowcaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = showcasesEssentialsEditShowcaseRequest;

        // create path and map variables
        String localVarPath = "/me/albums/{album_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.album+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.album+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editShowcaseValidateBeforeCall(Double albumId, ShowcasesEssentialsEditShowcaseRequest showcasesEssentialsEditShowcaseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling editShowcase(Async)");
        }

        return editShowcaseCall(albumId, showcasesEssentialsEditShowcaseRequest, _callback);

    }


    private ApiResponse<Album> editShowcaseWithHttpInfo(Double albumId, ShowcasesEssentialsEditShowcaseRequest showcasesEssentialsEditShowcaseRequest) throws ApiException {
        okhttp3.Call localVarCall = editShowcaseValidateBeforeCall(albumId, showcasesEssentialsEditShowcaseRequest, null);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call editShowcaseAsync(Double albumId, ShowcasesEssentialsEditShowcaseRequest showcasesEssentialsEditShowcaseRequest, final ApiCallback<Album> _callback) throws ApiException {

        okhttp3.Call localVarCall = editShowcaseValidateBeforeCall(albumId, showcasesEssentialsEditShowcaseRequest, _callback);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EditShowcaseRequestBuilder {
        private final Double albumId;
        private String description;
        private String brandColor;
        private String domain;
        private Boolean hideNav;
        private Boolean hideUpcoming;
        private String layout;
        private String name;
        private String password;
        private String privacy;
        private Boolean reviewMode;
        private String sort;
        private String theme;
        private String url;
        private Boolean useCustomDomain;

        private EditShowcaseRequestBuilder(double albumId) {
            this.albumId = albumId;
        }

        /**
         * Set description
         * @param description The description of the showcase. (optional)
         * @return EditShowcaseRequestBuilder
         */
        public EditShowcaseRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set brandColor
         * @param brandColor The hexadecimal code for the color of the player buttons and showcase controls. (optional)
         * @return EditShowcaseRequestBuilder
         */
        public EditShowcaseRequestBuilder brandColor(String brandColor) {
            this.brandColor = brandColor;
            return this;
        }
        
        /**
         * Set domain
         * @param domain The custom domain of the showcase. (optional)
         * @return EditShowcaseRequestBuilder
         */
        public EditShowcaseRequestBuilder domain(String domain) {
            this.domain = domain;
            return this;
        }
        
        /**
         * Set hideNav
         * @param hideNav Whether to hide Vimeo navigation when displaying the showcase. (optional)
         * @return EditShowcaseRequestBuilder
         */
        public EditShowcaseRequestBuilder hideNav(Boolean hideNav) {
            this.hideNav = hideNav;
            return this;
        }
        
        /**
         * Set hideUpcoming
         * @param hideUpcoming Whether to include the upcoming event in the showcase. (optional)
         * @return EditShowcaseRequestBuilder
         */
        public EditShowcaseRequestBuilder hideUpcoming(Boolean hideUpcoming) {
            this.hideUpcoming = hideUpcoming;
            return this;
        }
        
        /**
         * Set layout
         * @param layout The type of layout for presenting the showcase.  Option descriptions:  * &#x60;grid&#x60; - The videos appear in a grid.  * &#x60;player&#x60; - The videos appear in the player.  (optional)
         * @return EditShowcaseRequestBuilder
         */
        public EditShowcaseRequestBuilder layout(String layout) {
            this.layout = layout;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the showcase. (optional)
         * @return EditShowcaseRequestBuilder
         */
        public EditShowcaseRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set password
         * @param password The showcase&#39;s password. This field is required only when **privacy** is &#x60;password&#x60;. (optional)
         * @return EditShowcaseRequestBuilder
         */
        public EditShowcaseRequestBuilder password(String password) {
            this.password = password;
            return this;
        }
        
        /**
         * Set privacy
         * @param privacy The privacy level of the showcase.  Option descriptions:  * &#x60;anybody&#x60; - Anyone can access the showcase, either on Vimeo or through an embed.  * &#x60;embed_only&#x60; - The showcase doesn&#39;t appear on Vimeo, but it can be embedded on other sites.  * &#x60;nobody&#x60; - No one can access the showcase, including the authenticated user.  * &#x60;password&#x60; - Only people with the password can access the showcase.  * &#x60;team&#x60; - Only members of the authenticated user&#39;s team can access the showcase.  * &#x60;unlisted&#x60; - The showcase can&#39;t be accessed if the URL omits its unlisted hash.  (optional)
         * @return EditShowcaseRequestBuilder
         */
        public EditShowcaseRequestBuilder privacy(String privacy) {
            this.privacy = privacy;
            return this;
        }
        
        /**
         * Set reviewMode
         * @param reviewMode Whether showcase videos use the review mode URL. (optional)
         * @return EditShowcaseRequestBuilder
         */
        public EditShowcaseRequestBuilder reviewMode(Boolean reviewMode) {
            this.reviewMode = reviewMode;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The default sort order of the videos as they appear in the showcase.  Option descriptions:  * &#x60;added_first&#x60; - The videos appear according to when they were added to the showcase, with the most recently added first.  * &#x60;added_last&#x60; - The videos appear according to when they were added to the showcase, with the most recently added last.  * &#x60;alphabetical&#x60; - The videos appear alphabetically by their title.  * &#x60;arranged&#x60; - The videos appear as arranged by the owner of the showcase.  * &#x60;comments&#x60; - The videos appear according to their number of comments.  * &#x60;likes&#x60; - The videos appear according to their number of likes.  * &#x60;newest&#x60; - The videos appear in chronological order with the newest first.  * &#x60;oldest&#x60; - The videos appear in chronological order with the oldest first.  * &#x60;plays&#x60; - The videos appear according to their number of plays.  (optional)
         * @return EditShowcaseRequestBuilder
         */
        public EditShowcaseRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set theme
         * @param theme The color theme of the showcase.  Option descriptions:  * &#x60;dark&#x60; - The showcase uses the dark theme.  * &#x60;standard&#x60; - The showcase uses the standard theme.  (optional)
         * @return EditShowcaseRequestBuilder
         */
        public EditShowcaseRequestBuilder theme(String theme) {
            this.theme = theme;
            return this;
        }
        
        /**
         * Set url
         * @param url The custom Vimeo URL of the showcase. (optional)
         * @return EditShowcaseRequestBuilder
         */
        public EditShowcaseRequestBuilder url(String url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set useCustomDomain
         * @param useCustomDomain Whether the user has opted for a custom domain for their showcase. (optional)
         * @return EditShowcaseRequestBuilder
         */
        public EditShowcaseRequestBuilder useCustomDomain(Boolean useCustomDomain) {
            this.useCustomDomain = useCustomDomain;
            return this;
        }
        
        /**
         * Build call for editShowcase
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcase was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ShowcasesEssentialsEditShowcaseRequest showcasesEssentialsEditShowcaseRequest = buildBodyParams();
            return editShowcaseCall(albumId, showcasesEssentialsEditShowcaseRequest, _callback);
        }

        private ShowcasesEssentialsEditShowcaseRequest buildBodyParams() {
            ShowcasesEssentialsEditShowcaseRequest showcasesEssentialsEditShowcaseRequest = new ShowcasesEssentialsEditShowcaseRequest();
            showcasesEssentialsEditShowcaseRequest.description(this.description);
            showcasesEssentialsEditShowcaseRequest.brandColor(this.brandColor);
            showcasesEssentialsEditShowcaseRequest.domain(this.domain);
            showcasesEssentialsEditShowcaseRequest.hideNav(this.hideNav);
            showcasesEssentialsEditShowcaseRequest.hideUpcoming(this.hideUpcoming);
            if (this.layout != null)
            showcasesEssentialsEditShowcaseRequest.layout(ShowcasesEssentialsEditShowcaseRequest.LayoutEnum.fromValue(this.layout));
            showcasesEssentialsEditShowcaseRequest.name(this.name);
            showcasesEssentialsEditShowcaseRequest.password(this.password);
            if (this.privacy != null)
            showcasesEssentialsEditShowcaseRequest.privacy(ShowcasesEssentialsEditShowcaseRequest.PrivacyEnum.fromValue(this.privacy));
            showcasesEssentialsEditShowcaseRequest.reviewMode(this.reviewMode);
            if (this.sort != null)
            showcasesEssentialsEditShowcaseRequest.sort(ShowcasesEssentialsEditShowcaseRequest.SortEnum.fromValue(this.sort));
            if (this.theme != null)
            showcasesEssentialsEditShowcaseRequest.theme(ShowcasesEssentialsEditShowcaseRequest.ThemeEnum.fromValue(this.theme));
            showcasesEssentialsEditShowcaseRequest.url(this.url);
            showcasesEssentialsEditShowcaseRequest.useCustomDomain(this.useCustomDomain);
            return showcasesEssentialsEditShowcaseRequest;
        }

        /**
         * Execute editShowcase request
         * @return Album
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcase was edited. </td><td>  -  </td></tr>
         </table>
         */
        public Album execute() throws ApiException {
            ShowcasesEssentialsEditShowcaseRequest showcasesEssentialsEditShowcaseRequest = buildBodyParams();
            ApiResponse<Album> localVarResp = editShowcaseWithHttpInfo(albumId, showcasesEssentialsEditShowcaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute editShowcase request with HTTP info returned
         * @return ApiResponse&lt;Album&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcase was edited. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Album> executeWithHttpInfo() throws ApiException {
            ShowcasesEssentialsEditShowcaseRequest showcasesEssentialsEditShowcaseRequest = buildBodyParams();
            return editShowcaseWithHttpInfo(albumId, showcasesEssentialsEditShowcaseRequest);
        }

        /**
         * Execute editShowcase request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcase was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Album> _callback) throws ApiException {
            ShowcasesEssentialsEditShowcaseRequest showcasesEssentialsEditShowcaseRequest = buildBodyParams();
            return editShowcaseAsync(albumId, showcasesEssentialsEditShowcaseRequest, _callback);
        }
    }

    /**
     * Edit a showcase
     * This method edits the specified showcase. The authenticated user must be the owner of the showcase.
     * @param albumId The ID of the showcase. (required)
     * @return EditShowcaseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The showcase was edited. </td><td>  -  </td></tr>
     </table>
     */
    public EditShowcaseRequestBuilder editShowcase(double albumId) throws IllegalArgumentException {
        
        return new EditShowcaseRequestBuilder(albumId);
    }
    private okhttp3.Call getAllUserShowcasesCall(String direction, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/albums";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllUserShowcasesValidateBeforeCall(String direction, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        return getAllUserShowcasesCall(direction, page, perPage, query, sort, _callback);

    }


    private ApiResponse<List<Album>> getAllUserShowcasesWithHttpInfo(String direction, Double page, Double perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = getAllUserShowcasesValidateBeforeCall(direction, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<Album>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllUserShowcasesAsync(String direction, Double page, Double perPage, String query, String sort, final ApiCallback<List<Album>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllUserShowcasesValidateBeforeCall(direction, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Album>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllUserShowcasesRequestBuilder {
        private String direction;
        private Double page;
        private Double perPage;
        private String query;
        private String sort;

        private GetAllUserShowcasesRequestBuilder() {
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return GetAllUserShowcasesRequestBuilder
         */
        public GetAllUserShowcasesRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetAllUserShowcasesRequestBuilder
         */
        public GetAllUserShowcasesRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetAllUserShowcasesRequestBuilder
         */
        public GetAllUserShowcasesRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set query
         * @param query The search query to use to filter the results. (optional)
         * @return GetAllUserShowcasesRequestBuilder
         */
        public GetAllUserShowcasesRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date of creation.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;videos&#x60; - Sort the results by the number of videos.  (optional)
         * @return GetAllUserShowcasesRequestBuilder
         */
        public GetAllUserShowcasesRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getAllUserShowcases
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcases were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllUserShowcasesCall(direction, page, perPage, query, sort, _callback);
        }


        /**
         * Execute getAllUserShowcases request
         * @return List&lt;Album&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcases were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Album> execute() throws ApiException {
            ApiResponse<List<Album>> localVarResp = getAllUserShowcasesWithHttpInfo(direction, page, perPage, query, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllUserShowcases request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Album&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcases were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Album>> executeWithHttpInfo() throws ApiException {
            return getAllUserShowcasesWithHttpInfo(direction, page, perPage, query, sort);
        }

        /**
         * Execute getAllUserShowcases request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcases were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Album>> _callback) throws ApiException {
            return getAllUserShowcasesAsync(direction, page, perPage, query, sort, _callback);
        }
    }

    /**
     * Get all the showcases that belong to the user
     * This method returns every showcase belonging to the authenticated user.
     * @return GetAllUserShowcasesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The showcases were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllUserShowcasesRequestBuilder getAllUserShowcases() throws IllegalArgumentException {
        return new GetAllUserShowcasesRequestBuilder();
    }
    private okhttp3.Call getSpecificShowcaseCall(Double albumId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/albums/{album_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.album+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificShowcaseValidateBeforeCall(Double albumId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling getSpecificShowcase(Async)");
        }

        return getSpecificShowcaseCall(albumId, _callback);

    }


    private ApiResponse<Album> getSpecificShowcaseWithHttpInfo(Double albumId) throws ApiException {
        okhttp3.Call localVarCall = getSpecificShowcaseValidateBeforeCall(albumId, null);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificShowcaseAsync(Double albumId, final ApiCallback<Album> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificShowcaseValidateBeforeCall(albumId, _callback);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificShowcaseRequestBuilder {
        private final Double albumId;

        private GetSpecificShowcaseRequestBuilder(double albumId) {
            this.albumId = albumId;
        }

        /**
         * Build call for getSpecificShowcase
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcase was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificShowcaseCall(albumId, _callback);
        }


        /**
         * Execute getSpecificShowcase request
         * @return Album
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcase was returned. </td><td>  -  </td></tr>
         </table>
         */
        public Album execute() throws ApiException {
            ApiResponse<Album> localVarResp = getSpecificShowcaseWithHttpInfo(albumId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificShowcase request with HTTP info returned
         * @return ApiResponse&lt;Album&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcase was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Album> executeWithHttpInfo() throws ApiException {
            return getSpecificShowcaseWithHttpInfo(albumId);
        }

        /**
         * Execute getSpecificShowcase request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcase was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Album> _callback) throws ApiException {
            return getSpecificShowcaseAsync(albumId, _callback);
        }
    }

    /**
     * Get a specific showcase
     * This method returns the specified showcase. The authenticated user must be the owner of the showcase.
     * @param albumId The ID of the showcase. (required)
     * @return GetSpecificShowcaseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The showcase was returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificShowcaseRequestBuilder getSpecificShowcase(double albumId) throws IllegalArgumentException {
        
        return new GetSpecificShowcaseRequestBuilder(albumId);
    }
    private okhttp3.Call showcaseCall(Double userId, CreateShowcaseRequest createShowcaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createShowcaseRequest;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.album+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.album+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showcaseValidateBeforeCall(Double userId, CreateShowcaseRequest createShowcaseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling showcase(Async)");
        }

        // verify the required parameter 'createShowcaseRequest' is set
        if (createShowcaseRequest == null) {
            throw new ApiException("Missing the required parameter 'createShowcaseRequest' when calling showcase(Async)");
        }

        return showcaseCall(userId, createShowcaseRequest, _callback);

    }


    private ApiResponse<Album> showcaseWithHttpInfo(Double userId, CreateShowcaseRequest createShowcaseRequest) throws ApiException {
        okhttp3.Call localVarCall = showcaseValidateBeforeCall(userId, createShowcaseRequest, null);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call showcaseAsync(Double userId, CreateShowcaseRequest createShowcaseRequest, final ApiCallback<Album> _callback) throws ApiException {

        okhttp3.Call localVarCall = showcaseValidateBeforeCall(userId, createShowcaseRequest, _callback);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ShowcaseRequestBuilder {
        private final String name;
        private final Double userId;
        private String description;
        private String brandColor;
        private Boolean hideFromVimeo;
        private Boolean hideNav;
        private Boolean hideUpcoming;
        private String layout;
        private String password;
        private String privacy;
        private Boolean reviewMode;
        private String sort;
        private String theme;

        private ShowcaseRequestBuilder(String name, double userId) {
            this.name = name;
            this.userId = userId;
        }

        /**
         * Set description
         * @param description The description of the showcase. (optional)
         * @return ShowcaseRequestBuilder
         */
        public ShowcaseRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set brandColor
         * @param brandColor The hexadecimal code for the color of the player buttons and showcase controls. (optional)
         * @return ShowcaseRequestBuilder
         */
        public ShowcaseRequestBuilder brandColor(String brandColor) {
            this.brandColor = brandColor;
            return this;
        }
        
        /**
         * Set hideFromVimeo
         * @param hideFromVimeo Whether the showcase should be hidden from Vimeo when unlisted. (optional)
         * @return ShowcaseRequestBuilder
         */
        public ShowcaseRequestBuilder hideFromVimeo(Boolean hideFromVimeo) {
            this.hideFromVimeo = hideFromVimeo;
            return this;
        }
        
        /**
         * Set hideNav
         * @param hideNav Whether to hide Vimeo navigation when displaying the showcase. (optional)
         * @return ShowcaseRequestBuilder
         */
        public ShowcaseRequestBuilder hideNav(Boolean hideNav) {
            this.hideNav = hideNav;
            return this;
        }
        
        /**
         * Set hideUpcoming
         * @param hideUpcoming Whether to include the upcoming event in the showcase. (optional)
         * @return ShowcaseRequestBuilder
         */
        public ShowcaseRequestBuilder hideUpcoming(Boolean hideUpcoming) {
            this.hideUpcoming = hideUpcoming;
            return this;
        }
        
        /**
         * Set layout
         * @param layout The type of layout for presenting the showcase.  Option descriptions:  * &#x60;grid&#x60; - The videos appear in a grid.  * &#x60;player&#x60; - The videos appear in the player.  (optional)
         * @return ShowcaseRequestBuilder
         */
        public ShowcaseRequestBuilder layout(String layout) {
            this.layout = layout;
            return this;
        }
        
        /**
         * Set password
         * @param password The showcase&#39;s password. This field is required only when **privacy** is &#x60;password&#x60;. (optional)
         * @return ShowcaseRequestBuilder
         */
        public ShowcaseRequestBuilder password(String password) {
            this.password = password;
            return this;
        }
        
        /**
         * Set privacy
         * @param privacy The privacy level of the showcase.  Option descriptions:  * &#x60;anybody&#x60; - Anyone can access the showcase, either on Vimeo or through an embed.  * &#x60;embed_only&#x60; - The showcase doesn&#39;t appear on Vimeo, but it can be embedded on other sites.  * &#x60;nobody&#x60; - No one can access the showcase, including the authenticated user.  * &#x60;password&#x60; - Only those with the password can access the showcase.  * &#x60;team&#x60; - Only members of the authenticated user&#39;s team can access the showcase.  * &#x60;unlisted&#x60; - The showcase can&#39;t be accessed if the URL omits its unlisted hash.  (optional)
         * @return ShowcaseRequestBuilder
         */
        public ShowcaseRequestBuilder privacy(String privacy) {
            this.privacy = privacy;
            return this;
        }
        
        /**
         * Set reviewMode
         * @param reviewMode Whether showcase videos use the review mode URL. (optional)
         * @return ShowcaseRequestBuilder
         */
        public ShowcaseRequestBuilder reviewMode(Boolean reviewMode) {
            this.reviewMode = reviewMode;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The default sort order of the videos as they appear in the showcase.  Option descriptions:  * &#x60;added_first&#x60; - The videos appear according to when they were added to the showcase, with the most recently added first.  * &#x60;added_last&#x60; - The videos appear according to when they were added to the showcase, with the most recently added last.  * &#x60;alphabetical&#x60; - The videos appear alphabetically by their title.  * &#x60;arranged&#x60; - The videos appear as arranged by the owner of the showcase.  * &#x60;comments&#x60; - The videos appear according to their number of comments.  * &#x60;likes&#x60; - The videos appear according to their number of likes.  * &#x60;newest&#x60; - The videos appear in chronological order with the newest first.  * &#x60;oldest&#x60; - The videos appear in chronological order with the oldest first.  * &#x60;plays&#x60; - The videos appear according to their number of plays.  (optional)
         * @return ShowcaseRequestBuilder
         */
        public ShowcaseRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set theme
         * @param theme The color theme of the showcase.  Option descriptions:  * &#x60;dark&#x60; - The showcase uses the dark theme.  * &#x60;standard&#x60; - The showcase uses the standard theme.  (optional)
         * @return ShowcaseRequestBuilder
         */
        public ShowcaseRequestBuilder theme(String theme) {
            this.theme = theme;
            return this;
        }
        
        /**
         * Build call for showcase
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The showcase was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateShowcaseRequest createShowcaseRequest = buildBodyParams();
            return showcaseCall(userId, createShowcaseRequest, _callback);
        }

        private CreateShowcaseRequest buildBodyParams() {
            CreateShowcaseRequest createShowcaseRequest = new CreateShowcaseRequest();
            createShowcaseRequest.description(this.description);
            createShowcaseRequest.brandColor(this.brandColor);
            createShowcaseRequest.hideFromVimeo(this.hideFromVimeo);
            createShowcaseRequest.hideNav(this.hideNav);
            createShowcaseRequest.hideUpcoming(this.hideUpcoming);
            if (this.layout != null)
            createShowcaseRequest.layout(CreateShowcaseRequest.LayoutEnum.fromValue(this.layout));
            createShowcaseRequest.name(this.name);
            createShowcaseRequest.password(this.password);
            if (this.privacy != null)
            createShowcaseRequest.privacy(CreateShowcaseRequest.PrivacyEnum.fromValue(this.privacy));
            createShowcaseRequest.reviewMode(this.reviewMode);
            if (this.sort != null)
            createShowcaseRequest.sort(CreateShowcaseRequest.SortEnum.fromValue(this.sort));
            if (this.theme != null)
            createShowcaseRequest.theme(CreateShowcaseRequest.ThemeEnum.fromValue(this.theme));
            return createShowcaseRequest;
        }

        /**
         * Execute showcase request
         * @return Album
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The showcase was created. </td><td>  -  </td></tr>
         </table>
         */
        public Album execute() throws ApiException {
            CreateShowcaseRequest createShowcaseRequest = buildBodyParams();
            ApiResponse<Album> localVarResp = showcaseWithHttpInfo(userId, createShowcaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute showcase request with HTTP info returned
         * @return ApiResponse&lt;Album&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The showcase was created. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Album> executeWithHttpInfo() throws ApiException {
            CreateShowcaseRequest createShowcaseRequest = buildBodyParams();
            return showcaseWithHttpInfo(userId, createShowcaseRequest);
        }

        /**
         * Execute showcase request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The showcase was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Album> _callback) throws ApiException {
            CreateShowcaseRequest createShowcaseRequest = buildBodyParams();
            return showcaseAsync(userId, createShowcaseRequest, _callback);
        }
    }

    /**
     * Create a showcase
     * This method creates a new showcase for the specified user.
     * @param userId The ID of the user. (required)
     * @param createShowcaseRequest  (required)
     * @return ShowcaseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The showcase was created. </td><td>  -  </td></tr>
     </table>
     */
    public ShowcaseRequestBuilder showcase(String name, double userId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        
        return new ShowcaseRequestBuilder(name, userId);
    }
    private okhttp3.Call showcase_0Call(Double albumId, Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.album+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showcase_0ValidateBeforeCall(Double albumId, Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling showcase_0(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling showcase_0(Async)");
        }

        return showcase_0Call(albumId, userId, _callback);

    }


    private ApiResponse<Album> showcase_0WithHttpInfo(Double albumId, Double userId) throws ApiException {
        okhttp3.Call localVarCall = showcase_0ValidateBeforeCall(albumId, userId, null);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call showcase_0Async(Double albumId, Double userId, final ApiCallback<Album> _callback) throws ApiException {

        okhttp3.Call localVarCall = showcase_0ValidateBeforeCall(albumId, userId, _callback);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Showcase0RequestBuilder {
        private final Double albumId;
        private final Double userId;

        private Showcase0RequestBuilder(double albumId, double userId) {
            this.albumId = albumId;
            this.userId = userId;
        }

        /**
         * Build call for showcase_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcase was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return showcase_0Call(albumId, userId, _callback);
        }


        /**
         * Execute showcase_0 request
         * @return Album
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcase was returned. </td><td>  -  </td></tr>
         </table>
         */
        public Album execute() throws ApiException {
            ApiResponse<Album> localVarResp = showcase_0WithHttpInfo(albumId, userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute showcase_0 request with HTTP info returned
         * @return ApiResponse&lt;Album&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcase was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Album> executeWithHttpInfo() throws ApiException {
            return showcase_0WithHttpInfo(albumId, userId);
        }

        /**
         * Execute showcase_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcase was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Album> _callback) throws ApiException {
            return showcase_0Async(albumId, userId, _callback);
        }
    }

    /**
     * Get a specific showcase
     * This method returns the specified showcase. The authenticated user must be the owner of the showcase.
     * @param albumId The ID of the showcase. (required)
     * @param userId The ID of the user. (required)
     * @return Showcase0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The showcase was returned. </td><td>  -  </td></tr>
     </table>
     */
    public Showcase0RequestBuilder showcase_0(double albumId, double userId) throws IllegalArgumentException {
        
        
        return new Showcase0RequestBuilder(albumId, userId);
    }
    private okhttp3.Call showcase_1Call(Double albumId, Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showcase_1ValidateBeforeCall(Double albumId, Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling showcase_1(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling showcase_1(Async)");
        }

        return showcase_1Call(albumId, userId, _callback);

    }


    private ApiResponse<Void> showcase_1WithHttpInfo(Double albumId, Double userId) throws ApiException {
        okhttp3.Call localVarCall = showcase_1ValidateBeforeCall(albumId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call showcase_1Async(Double albumId, Double userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = showcase_1ValidateBeforeCall(albumId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class Showcase1RequestBuilder {
        private final Double albumId;
        private final Double userId;

        private Showcase1RequestBuilder(double albumId, double userId) {
            this.albumId = albumId;
            this.userId = userId;
        }

        /**
         * Build call for showcase_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The showcase was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return showcase_1Call(albumId, userId, _callback);
        }


        /**
         * Execute showcase_1 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The showcase was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            showcase_1WithHttpInfo(albumId, userId);
        }

        /**
         * Execute showcase_1 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The showcase was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return showcase_1WithHttpInfo(albumId, userId);
        }

        /**
         * Execute showcase_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The showcase was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return showcase_1Async(albumId, userId, _callback);
        }
    }

    /**
     * Delete a showcase
     * This method deletes the specified showcase. The authenticated user must be the owner of the showcase.
     * @param albumId The ID of the showcase. (required)
     * @param userId The ID of the user. (required)
     * @return Showcase1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The showcase was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public Showcase1RequestBuilder showcase_1(double albumId, double userId) throws IllegalArgumentException {
        
        
        return new Showcase1RequestBuilder(albumId, userId);
    }
    private okhttp3.Call showcase_2Call(Double albumId, Double userId, EditShowcaseRequest editShowcaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editShowcaseRequest;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.album+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.album+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showcase_2ValidateBeforeCall(Double albumId, Double userId, EditShowcaseRequest editShowcaseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling showcase_2(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling showcase_2(Async)");
        }

        return showcase_2Call(albumId, userId, editShowcaseRequest, _callback);

    }


    private ApiResponse<Album> showcase_2WithHttpInfo(Double albumId, Double userId, EditShowcaseRequest editShowcaseRequest) throws ApiException {
        okhttp3.Call localVarCall = showcase_2ValidateBeforeCall(albumId, userId, editShowcaseRequest, null);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call showcase_2Async(Double albumId, Double userId, EditShowcaseRequest editShowcaseRequest, final ApiCallback<Album> _callback) throws ApiException {

        okhttp3.Call localVarCall = showcase_2ValidateBeforeCall(albumId, userId, editShowcaseRequest, _callback);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Showcase2RequestBuilder {
        private final Double albumId;
        private final Double userId;
        private String description;
        private String brandColor;
        private String domain;
        private Boolean hideNav;
        private Boolean hideUpcoming;
        private String layout;
        private String name;
        private String password;
        private String privacy;
        private Boolean reviewMode;
        private String sort;
        private String theme;
        private String url;
        private Boolean useCustomDomain;

        private Showcase2RequestBuilder(double albumId, double userId) {
            this.albumId = albumId;
            this.userId = userId;
        }

        /**
         * Set description
         * @param description The description of the showcase. (optional)
         * @return Showcase2RequestBuilder
         */
        public Showcase2RequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set brandColor
         * @param brandColor The hexadecimal code for the color of the player buttons and showcase controls. (optional)
         * @return Showcase2RequestBuilder
         */
        public Showcase2RequestBuilder brandColor(String brandColor) {
            this.brandColor = brandColor;
            return this;
        }
        
        /**
         * Set domain
         * @param domain The custom domain of the showcase. (optional)
         * @return Showcase2RequestBuilder
         */
        public Showcase2RequestBuilder domain(String domain) {
            this.domain = domain;
            return this;
        }
        
        /**
         * Set hideNav
         * @param hideNav Whether to hide Vimeo navigation when displaying the showcase. (optional)
         * @return Showcase2RequestBuilder
         */
        public Showcase2RequestBuilder hideNav(Boolean hideNav) {
            this.hideNav = hideNav;
            return this;
        }
        
        /**
         * Set hideUpcoming
         * @param hideUpcoming Whether to include the upcoming event in the showcase. (optional)
         * @return Showcase2RequestBuilder
         */
        public Showcase2RequestBuilder hideUpcoming(Boolean hideUpcoming) {
            this.hideUpcoming = hideUpcoming;
            return this;
        }
        
        /**
         * Set layout
         * @param layout The type of layout for presenting the showcase.  Option descriptions:  * &#x60;grid&#x60; - The videos appear in a grid.  * &#x60;player&#x60; - The videos appear in the player.  (optional)
         * @return Showcase2RequestBuilder
         */
        public Showcase2RequestBuilder layout(String layout) {
            this.layout = layout;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the showcase. (optional)
         * @return Showcase2RequestBuilder
         */
        public Showcase2RequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set password
         * @param password The showcase&#39;s password. This field is required only when **privacy** is &#x60;password&#x60;. (optional)
         * @return Showcase2RequestBuilder
         */
        public Showcase2RequestBuilder password(String password) {
            this.password = password;
            return this;
        }
        
        /**
         * Set privacy
         * @param privacy The privacy level of the showcase.  Option descriptions:  * &#x60;anybody&#x60; - Anyone can access the showcase, either on Vimeo or through an embed.  * &#x60;embed_only&#x60; - The showcase doesn&#39;t appear on Vimeo, but it can be embedded on other sites.  * &#x60;nobody&#x60; - No one can access the showcase, including the authenticated user.  * &#x60;password&#x60; - Only people with the password can access the showcase.  * &#x60;team&#x60; - Only members of the authenticated user&#39;s team can access the showcase.  * &#x60;unlisted&#x60; - The showcase can&#39;t be accessed if the URL omits its unlisted hash.  (optional)
         * @return Showcase2RequestBuilder
         */
        public Showcase2RequestBuilder privacy(String privacy) {
            this.privacy = privacy;
            return this;
        }
        
        /**
         * Set reviewMode
         * @param reviewMode Whether showcase videos use the review mode URL. (optional)
         * @return Showcase2RequestBuilder
         */
        public Showcase2RequestBuilder reviewMode(Boolean reviewMode) {
            this.reviewMode = reviewMode;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The default sort order of the videos as they appear in the showcase.  Option descriptions:  * &#x60;added_first&#x60; - The videos appear according to when they were added to the showcase, with the most recently added first.  * &#x60;added_last&#x60; - The videos appear according to when they were added to the showcase, with the most recently added last.  * &#x60;alphabetical&#x60; - The videos appear alphabetically by their title.  * &#x60;arranged&#x60; - The videos appear as arranged by the owner of the showcase.  * &#x60;comments&#x60; - The videos appear according to their number of comments.  * &#x60;likes&#x60; - The videos appear according to their number of likes.  * &#x60;newest&#x60; - The videos appear in chronological order with the newest first.  * &#x60;oldest&#x60; - The videos appear in chronological order with the oldest first.  * &#x60;plays&#x60; - The videos appear according to their number of plays.  (optional)
         * @return Showcase2RequestBuilder
         */
        public Showcase2RequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set theme
         * @param theme The color theme of the showcase.  Option descriptions:  * &#x60;dark&#x60; - The showcase uses the dark theme.  * &#x60;standard&#x60; - The showcase uses the standard theme.  (optional)
         * @return Showcase2RequestBuilder
         */
        public Showcase2RequestBuilder theme(String theme) {
            this.theme = theme;
            return this;
        }
        
        /**
         * Set url
         * @param url The custom Vimeo URL of the showcase. (optional)
         * @return Showcase2RequestBuilder
         */
        public Showcase2RequestBuilder url(String url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set useCustomDomain
         * @param useCustomDomain Whether the user has opted for a custom domain for their showcase. (optional)
         * @return Showcase2RequestBuilder
         */
        public Showcase2RequestBuilder useCustomDomain(Boolean useCustomDomain) {
            this.useCustomDomain = useCustomDomain;
            return this;
        }
        
        /**
         * Build call for showcase_2
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcase was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EditShowcaseRequest editShowcaseRequest = buildBodyParams();
            return showcase_2Call(albumId, userId, editShowcaseRequest, _callback);
        }

        private EditShowcaseRequest buildBodyParams() {
            EditShowcaseRequest editShowcaseRequest = new EditShowcaseRequest();
            editShowcaseRequest.description(this.description);
            editShowcaseRequest.brandColor(this.brandColor);
            editShowcaseRequest.domain(this.domain);
            editShowcaseRequest.hideNav(this.hideNav);
            editShowcaseRequest.hideUpcoming(this.hideUpcoming);
            if (this.layout != null)
            editShowcaseRequest.layout(EditShowcaseRequest.LayoutEnum.fromValue(this.layout));
            editShowcaseRequest.name(this.name);
            editShowcaseRequest.password(this.password);
            if (this.privacy != null)
            editShowcaseRequest.privacy(EditShowcaseRequest.PrivacyEnum.fromValue(this.privacy));
            editShowcaseRequest.reviewMode(this.reviewMode);
            if (this.sort != null)
            editShowcaseRequest.sort(EditShowcaseRequest.SortEnum.fromValue(this.sort));
            if (this.theme != null)
            editShowcaseRequest.theme(EditShowcaseRequest.ThemeEnum.fromValue(this.theme));
            editShowcaseRequest.url(this.url);
            editShowcaseRequest.useCustomDomain(this.useCustomDomain);
            return editShowcaseRequest;
        }

        /**
         * Execute showcase_2 request
         * @return Album
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcase was edited. </td><td>  -  </td></tr>
         </table>
         */
        public Album execute() throws ApiException {
            EditShowcaseRequest editShowcaseRequest = buildBodyParams();
            ApiResponse<Album> localVarResp = showcase_2WithHttpInfo(albumId, userId, editShowcaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute showcase_2 request with HTTP info returned
         * @return ApiResponse&lt;Album&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcase was edited. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Album> executeWithHttpInfo() throws ApiException {
            EditShowcaseRequest editShowcaseRequest = buildBodyParams();
            return showcase_2WithHttpInfo(albumId, userId, editShowcaseRequest);
        }

        /**
         * Execute showcase_2 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcase was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Album> _callback) throws ApiException {
            EditShowcaseRequest editShowcaseRequest = buildBodyParams();
            return showcase_2Async(albumId, userId, editShowcaseRequest, _callback);
        }
    }

    /**
     * Edit a showcase
     * This method edits the specified showcase. The authenticated user must be the owner of the showcase.
     * @param albumId The ID of the showcase. (required)
     * @param userId The ID of the user. (required)
     * @return Showcase2RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The showcase was edited. </td><td>  -  </td></tr>
     </table>
     */
    public Showcase2RequestBuilder showcase_2(double albumId, double userId) throws IllegalArgumentException {
        
        
        return new Showcase2RequestBuilder(albumId, userId);
    }
    private okhttp3.Call showcasesCall(Double userId, String direction, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showcasesValidateBeforeCall(Double userId, String direction, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling showcases(Async)");
        }

        return showcasesCall(userId, direction, page, perPage, query, sort, _callback);

    }


    private ApiResponse<List<Album>> showcasesWithHttpInfo(Double userId, String direction, Double page, Double perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = showcasesValidateBeforeCall(userId, direction, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<Album>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call showcasesAsync(Double userId, String direction, Double page, Double perPage, String query, String sort, final ApiCallback<List<Album>> _callback) throws ApiException {

        okhttp3.Call localVarCall = showcasesValidateBeforeCall(userId, direction, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Album>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ShowcasesRequestBuilder {
        private final Double userId;
        private String direction;
        private Double page;
        private Double perPage;
        private String query;
        private String sort;

        private ShowcasesRequestBuilder(double userId) {
            this.userId = userId;
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return ShowcasesRequestBuilder
         */
        public ShowcasesRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return ShowcasesRequestBuilder
         */
        public ShowcasesRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return ShowcasesRequestBuilder
         */
        public ShowcasesRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set query
         * @param query The search query to use to filter the results. (optional)
         * @return ShowcasesRequestBuilder
         */
        public ShowcasesRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date of creation.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;videos&#x60; - Sort the results by the number of videos.  (optional)
         * @return ShowcasesRequestBuilder
         */
        public ShowcasesRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for showcases
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcases were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return showcasesCall(userId, direction, page, perPage, query, sort, _callback);
        }


        /**
         * Execute showcases request
         * @return List&lt;Album&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcases were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Album> execute() throws ApiException {
            ApiResponse<List<Album>> localVarResp = showcasesWithHttpInfo(userId, direction, page, perPage, query, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute showcases request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Album&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcases were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Album>> executeWithHttpInfo() throws ApiException {
            return showcasesWithHttpInfo(userId, direction, page, perPage, query, sort);
        }

        /**
         * Execute showcases request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcases were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Album>> _callback) throws ApiException {
            return showcasesAsync(userId, direction, page, perPage, query, sort, _callback);
        }
    }

    /**
     * Get all the showcases that belong to the user
     * This method returns every showcase belonging to the authenticated user.
     * @param userId The ID of the user. (required)
     * @return ShowcasesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The showcases were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ShowcasesRequestBuilder showcases(double userId) throws IllegalArgumentException {
        
        return new ShowcasesRequestBuilder(userId);
    }
    private okhttp3.Call showcases_0Call(Double userId, String albumItemUris, String albumUris, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (albumItemUris != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("album_item_uris", albumItemUris));
        }

        if (albumUris != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("album_uris", albumUris));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showcases_0ValidateBeforeCall(Double userId, String albumItemUris, String albumUris, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling showcases_0(Async)");
        }

        // verify the required parameter 'albumItemUris' is set
        if (albumItemUris == null) {
            throw new ApiException("Missing the required parameter 'albumItemUris' when calling showcases_0(Async)");
        }

        // verify the required parameter 'albumUris' is set
        if (albumUris == null) {
            throw new ApiException("Missing the required parameter 'albumUris' when calling showcases_0(Async)");
        }

        return showcases_0Call(userId, albumItemUris, albumUris, _callback);

    }


    private ApiResponse<Void> showcases_0WithHttpInfo(Double userId, String albumItemUris, String albumUris) throws ApiException {
        okhttp3.Call localVarCall = showcases_0ValidateBeforeCall(userId, albumItemUris, albumUris, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call showcases_0Async(Double userId, String albumItemUris, String albumUris, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = showcases_0ValidateBeforeCall(userId, albumItemUris, albumUris, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class Showcases0RequestBuilder {
        private final Double userId;
        private final String albumItemUris;
        private final String albumUris;

        private Showcases0RequestBuilder(double userId, String albumItemUris, String albumUris) {
            this.userId = userId;
            this.albumItemUris = albumItemUris;
            this.albumUris = albumUris;
        }

        /**
         * Build call for showcases_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos and events were added to the showcases. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return showcases_0Call(userId, albumItemUris, albumUris, _callback);
        }


        /**
         * Execute showcases_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos and events were added to the showcases. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            showcases_0WithHttpInfo(userId, albumItemUris, albumUris);
        }

        /**
         * Execute showcases_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos and events were added to the showcases. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return showcases_0WithHttpInfo(userId, albumItemUris, albumUris);
        }

        /**
         * Execute showcases_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos and events were added to the showcases. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return showcases_0Async(userId, albumItemUris, albumUris, _callback);
        }
    }

    /**
     * Add videos and live events to showcases
     * This method adds videos and events to the specified showcases. The authenticated user must either be the owner of the showcase or have team permissions.  The present setup permits only one event per showcase.
     * @param userId The ID of the user. (required)
     * @param albumItemUris A comma-separated list of video or event URIs. (required)
     * @param albumUris A comma-separated list of showcase URIs. (required)
     * @return Showcases0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The videos and events were added to the showcases. </td><td>  -  </td></tr>
     </table>
     */
    public Showcases0RequestBuilder showcases_0(double userId, String albumItemUris, String albumUris) throws IllegalArgumentException {
        
        if (albumItemUris == null) throw new IllegalArgumentException("\"albumItemUris\" is required but got null");
            

        if (albumUris == null) throw new IllegalArgumentException("\"albumUris\" is required but got null");
            

        return new Showcases0RequestBuilder(userId, albumItemUris, albumUris);
    }
}
