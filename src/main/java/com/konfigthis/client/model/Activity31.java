/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Activity31Metadata;
import com.konfigthis.client.model.Category;
import com.konfigthis.client.model.Channel;
import com.konfigthis.client.model.Group;
import com.konfigthis.client.model.Tag;
import com.konfigthis.client.model.User;
import com.konfigthis.client.model.Video;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Activity31
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Activity31 {
  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private Category category;

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private Channel channel;

  public static final String SERIALIZED_NAME_CLIP = "clip";
  @SerializedName(SERIALIZED_NAME_CLIP)
  private Video clip;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private Group group;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Activity31Metadata metadata;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private Tag tag;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private String time;

  /**
   * The activity type.  Option descriptions:  * &#x60;appearance&#x60; - The activity is an appearance action.  * &#x60;category&#x60; - The activity is a category action.  * &#x60;channel&#x60; - The activity is a channel action.  * &#x60;facebook_feed&#x60; - The activity is a Facebook feed action.  * &#x60;group&#x60; - The activity is a group action.  * &#x60;like&#x60; - The activity is a like action.  * &#x60;ondemand&#x60; - The activity is a Vimeo On Demand action.  * &#x60;share&#x60; - The activity is a share action.  * &#x60;tag&#x60; - The activity is a tag action.  * &#x60;twitter_timeline&#x60; - The activity is a Twitter timeline action.  * &#x60;upload&#x60; - The activity is an upload action. 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    APPEARANCE("appearance"),
    
    CATEGORY("category"),
    
    CHANNEL("channel"),
    
    FACEBOOK_FEED("facebook_feed"),
    
    GROUP("group"),
    
    LIKE("like"),
    
    ONDEMAND("ondemand"),
    
    SHARE("share"),
    
    TAG("tag"),
    
    TWITTER_TIMELINE("twitter_timeline"),
    
    UPLOAD("upload");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public Activity31() {
  }

  public Activity31 category(Category category) {
    
    
    
    
    this.category = category;
    return this;
  }

   /**
   * The category associated with the event. This field is present only when the activity type is &#x60;category&#x60;.
   * @return category
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The category associated with the event. This field is present only when the activity type is `category`.")

  public Category getCategory() {
    return category;
  }


  public void setCategory(Category category) {
    
    
    
    this.category = category;
  }


  public Activity31 channel(Channel channel) {
    
    
    
    
    this.channel = channel;
    return this;
  }

   /**
   * The channel associated with the event. This field is present only when the activity type is &#x60;channel&#x60;.
   * @return channel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The channel associated with the event. This field is present only when the activity type is `channel`.")

  public Channel getChannel() {
    return channel;
  }


  public void setChannel(Channel channel) {
    
    
    
    this.channel = channel;
  }


  public Activity31 clip(Video clip) {
    
    
    
    
    this.clip = clip;
    return this;
  }

   /**
   * The video associated with the activity.
   * @return clip
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The video associated with the activity.")

  public Video getClip() {
    return clip;
  }


  public void setClip(Video clip) {
    
    
    
    this.clip = clip;
  }


  public Activity31 group(Group group) {
    
    
    
    
    this.group = group;
    return this;
  }

   /**
   * The group associated with the event. This field is present only when the activity type is &#x60;group&#x60;.
   * @return group
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The group associated with the event. This field is present only when the activity type is `group`.")

  public Group getGroup() {
    return group;
  }


  public void setGroup(Group group) {
    
    
    
    this.group = group;
  }


  public Activity31 metadata(Activity31Metadata metadata) {
    
    
    
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Activity31Metadata getMetadata() {
    return metadata;
  }


  public void setMetadata(Activity31Metadata metadata) {
    
    
    
    this.metadata = metadata;
  }


  public Activity31 tag(Tag tag) {
    
    
    
    
    this.tag = tag;
    return this;
  }

   /**
   * The tag associated with the event. This field is present only when the activity type is &#x60;tag&#x60;.
   * @return tag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The tag associated with the event. This field is present only when the activity type is `tag`.")

  public Tag getTag() {
    return tag;
  }


  public void setTag(Tag tag) {
    
    
    
    this.tag = tag;
  }


  public Activity31 time(String time) {
    
    
    
    
    this.time = time;
    return this;
  }

   /**
   * The time that the event occurred.
   * @return time
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2017-05-17T17:46:09+00:00", required = true, value = "The time that the event occurred.")

  public String getTime() {
    return time;
  }


  public void setTime(String time) {
    
    
    
    this.time = time;
  }


  public Activity31 type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * The activity type.  Option descriptions:  * &#x60;appearance&#x60; - The activity is an appearance action.  * &#x60;category&#x60; - The activity is a category action.  * &#x60;channel&#x60; - The activity is a channel action.  * &#x60;facebook_feed&#x60; - The activity is a Facebook feed action.  * &#x60;group&#x60; - The activity is a group action.  * &#x60;like&#x60; - The activity is a like action.  * &#x60;ondemand&#x60; - The activity is a Vimeo On Demand action.  * &#x60;share&#x60; - The activity is a share action.  * &#x60;tag&#x60; - The activity is a tag action.  * &#x60;twitter_timeline&#x60; - The activity is a Twitter timeline action.  * &#x60;upload&#x60; - The activity is an upload action. 
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "APPEARANCE", required = true, value = "The activity type.  Option descriptions:  * `appearance` - The activity is an appearance action.  * `category` - The activity is a category action.  * `channel` - The activity is a channel action.  * `facebook_feed` - The activity is a Facebook feed action.  * `group` - The activity is a group action.  * `like` - The activity is a like action.  * `ondemand` - The activity is a Vimeo On Demand action.  * `share` - The activity is a share action.  * `tag` - The activity is a tag action.  * `twitter_timeline` - The activity is a Twitter timeline action.  * `upload` - The activity is an upload action. ")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public Activity31 user(User user) {
    
    
    
    
    this.user = user;
    return this;
  }

   /**
   * The user associated with the event. This field is present only when the activity type is &#x60;like&#x60;, &#x60;appearance&#x60;, or &#x60;share&#x60;.
   * @return user
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The user associated with the event. This field is present only when the activity type is `like`, `appearance`, or `share`.")

  public User getUser() {
    return user;
  }


  public void setUser(User user) {
    
    
    
    this.user = user;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Activity31 instance itself
   */
  public Activity31 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Activity31 activity31 = (Activity31) o;
    return Objects.equals(this.category, activity31.category) &&
        Objects.equals(this.channel, activity31.channel) &&
        Objects.equals(this.clip, activity31.clip) &&
        Objects.equals(this.group, activity31.group) &&
        Objects.equals(this.metadata, activity31.metadata) &&
        Objects.equals(this.tag, activity31.tag) &&
        Objects.equals(this.time, activity31.time) &&
        Objects.equals(this.type, activity31.type) &&
        Objects.equals(this.user, activity31.user)&&
        Objects.equals(this.additionalProperties, activity31.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, channel, clip, group, metadata, tag, time, type, user, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Activity31 {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    clip: ").append(toIndentedString(clip)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("channel");
    openapiFields.add("clip");
    openapiFields.add("group");
    openapiFields.add("metadata");
    openapiFields.add("tag");
    openapiFields.add("time");
    openapiFields.add("type");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("clip");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("time");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Activity31
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Activity31.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Activity31 is not found in the empty JSON string", Activity31.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Activity31.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        Category.validateJsonObject(jsonObj.getAsJsonObject("category"));
      }
      // validate the optional field `channel`
      if (jsonObj.get("channel") != null && !jsonObj.get("channel").isJsonNull()) {
        Channel.validateJsonObject(jsonObj.getAsJsonObject("channel"));
      }
      // validate the required field `clip`
      Video.validateJsonObject(jsonObj.getAsJsonObject("clip"));
      // validate the optional field `group`
      if (jsonObj.get("group") != null && !jsonObj.get("group").isJsonNull()) {
        Group.validateJsonObject(jsonObj.getAsJsonObject("group"));
      }
      // validate the required field `metadata`
      Activity31Metadata.validateJsonObject(jsonObj.getAsJsonObject("metadata"));
      // validate the optional field `tag`
      if (jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) {
        Tag.validateJsonObject(jsonObj.getAsJsonObject("tag"));
      }
      if (!jsonObj.get("time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        User.validateJsonObject(jsonObj.getAsJsonObject("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Activity31.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Activity31' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Activity31> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Activity31.class));

       return (TypeAdapter<T>) new TypeAdapter<Activity31>() {
           @Override
           public void write(JsonWriter out, Activity31 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Activity31 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Activity31 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Activity31 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Activity31
  * @throws IOException if the JSON string is invalid with respect to Activity31
  */
  public static Activity31 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Activity31.class);
  }

 /**
  * Convert an instance of Activity31 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

