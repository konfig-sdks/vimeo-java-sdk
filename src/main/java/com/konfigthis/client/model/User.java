/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Location;
import com.konfigthis.client.model.Picture;
import com.konfigthis.client.model.Skill;
import com.konfigthis.client.model.UserMetadata;
import com.konfigthis.client.model.UserPreferences;
import com.konfigthis.client.model.UserUploadQuota;
import com.konfigthis.client.model.UserWebsitesInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * User
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class User {
  /**
   * The authenticated user&#39;s account type.  Option descriptions:  * &#x60;advanced&#x60; - The user has a Vimeo Advanced subscription.  * &#x60;basic&#x60; - The user has a Vimeo Basic subscription.  * &#x60;business&#x60; - The user has a Vimeo Business subscription.  * &#x60;enterprise&#x60; - The user has a Vimeo Enterprise subscription.  * &#x60;free&#x60; - The user has a Vimeo Free subscription.  * &#x60;live_business&#x60; - The user has a Vimeo Business Live subscription.  * &#x60;live_premium&#x60; - The user has a Vimeo Premium subscription.  * &#x60;live_pro&#x60; - The user has a Vimeo PRO Live subscription.  * &#x60;plus&#x60; - The user has a Vimeo Plus subscription.  * &#x60;pro&#x60; - The user has a Vimeo Pro subscription.  * &#x60;pro_unlimited&#x60; - The user has a Vimeo PRO Unlimited subscription.  * &#x60;producer&#x60; - The user has a Vimeo Producer subscription.  * &#x60;standard&#x60; - The user has a Vimeo Standard subscription.  * &#x60;starter&#x60; - The user has a Vimeo Starter subscription. 
   */
  @JsonAdapter(AccountEnum.Adapter.class)
 public enum AccountEnum {
    ADVANCED("advanced"),
    
    BASIC("basic"),
    
    BUSINESS("business"),
    
    ENTERPRISE("enterprise"),
    
    FREE("free"),
    
    LIVE_BUSINESS("live_business"),
    
    LIVE_PREMIUM("live_premium"),
    
    LIVE_PRO("live_pro"),
    
    PLUS("plus"),
    
    PRO("pro"),
    
    PRO_UNLIMITED("pro_unlimited"),
    
    PRODUCER("producer"),
    
    STANDARD("standard"),
    
    STARTER("starter");

    private String value;

    AccountEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccountEnum fromValue(String value) {
      for (AccountEnum b : AccountEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccountEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccountEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccountEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccountEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private AccountEnum account;

  public static final String SERIALIZED_NAME_AVAILABLE_FOR_HIRE = "available_for_hire";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_FOR_HIRE)
  private Boolean availableForHire;

  public static final String SERIALIZED_NAME_BIO = "bio";
  @SerializedName(SERIALIZED_NAME_BIO)
  private String bio;

  public static final String SERIALIZED_NAME_CAN_WORK_REMOTELY = "can_work_remotely";
  @SerializedName(SERIALIZED_NAME_CAN_WORK_REMOTELY)
  private Boolean canWorkRemotely;

  public static final String SERIALIZED_NAME_CAPABILITIES = "capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  private Object capabilities;

  public static final String SERIALIZED_NAME_CLIENTS = "clients";
  @SerializedName(SERIALIZED_NAME_CLIENTS)
  private String clients;

  /**
   * Gets or Sets contentFilter
   */
  @JsonAdapter(String.Adapter.class)
 public enum String {

    private String value;

    String(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static String fromValue(String value) {
      for (String b : String.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<String> {
      @Override
      public void write(final JsonWriter jsonWriter, final String enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public String read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return String.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CONTENT_FILTER = "content_filter";
  @SerializedName(SERIALIZED_NAME_CONTENT_FILTER)
  private ContentFilterEnum contentFilter = null;

  public static final String SERIALIZED_NAME_CREATED_TIME = "created_time";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private String createdTime;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private String gender;

  public static final String SERIALIZED_NAME_HAS_INVALID_EMAIL = "has_invalid_email";
  @SerializedName(SERIALIZED_NAME_HAS_INVALID_EMAIL)
  private Boolean hasInvalidEmail;

  public static final String SERIALIZED_NAME_IS_EXPERT = "is_expert";
  @SerializedName(SERIALIZED_NAME_IS_EXPERT)
  private Boolean isExpert;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_LOCATION_DETAILS = "location_details";
  @SerializedName(SERIALIZED_NAME_LOCATION_DETAILS)
  private Location locationDetails;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private UserMetadata metadata;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PICTURES = "pictures";
  @SerializedName(SERIALIZED_NAME_PICTURES)
  private Picture pictures;

  public static final String SERIALIZED_NAME_PREFERENCES = "preferences";
  @SerializedName(SERIALIZED_NAME_PREFERENCES)
  private UserPreferences preferences;

  public static final String SERIALIZED_NAME_RESOURCE_KEY = "resource_key";
  @SerializedName(SERIALIZED_NAME_RESOURCE_KEY)
  private String resourceKey;

  public static final String SERIALIZED_NAME_SHORT_BIO = "short_bio";
  @SerializedName(SERIALIZED_NAME_SHORT_BIO)
  private String shortBio;

  public static final String SERIALIZED_NAME_SKILLS = "skills";
  @SerializedName(SERIALIZED_NAME_SKILLS)
  private List<Skill> skills = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPLOAD_QUOTA = "upload_quota";
  @SerializedName(SERIALIZED_NAME_UPLOAD_QUOTA)
  private UserUploadQuota uploadQuota;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_WEBSITES = "websites";
  @SerializedName(SERIALIZED_NAME_WEBSITES)
  private List<UserWebsitesInner> websites = new ArrayList<>();

  public User() {
  }

  public User account(AccountEnum account) {
    
    
    
    
    this.account = account;
    return this;
  }

   /**
   * The authenticated user&#39;s account type.  Option descriptions:  * &#x60;advanced&#x60; - The user has a Vimeo Advanced subscription.  * &#x60;basic&#x60; - The user has a Vimeo Basic subscription.  * &#x60;business&#x60; - The user has a Vimeo Business subscription.  * &#x60;enterprise&#x60; - The user has a Vimeo Enterprise subscription.  * &#x60;free&#x60; - The user has a Vimeo Free subscription.  * &#x60;live_business&#x60; - The user has a Vimeo Business Live subscription.  * &#x60;live_premium&#x60; - The user has a Vimeo Premium subscription.  * &#x60;live_pro&#x60; - The user has a Vimeo PRO Live subscription.  * &#x60;plus&#x60; - The user has a Vimeo Plus subscription.  * &#x60;pro&#x60; - The user has a Vimeo Pro subscription.  * &#x60;pro_unlimited&#x60; - The user has a Vimeo PRO Unlimited subscription.  * &#x60;producer&#x60; - The user has a Vimeo Producer subscription.  * &#x60;standard&#x60; - The user has a Vimeo Standard subscription.  * &#x60;starter&#x60; - The user has a Vimeo Starter subscription. 
   * @return account
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ADVANCED", required = true, value = "The authenticated user's account type.  Option descriptions:  * `advanced` - The user has a Vimeo Advanced subscription.  * `basic` - The user has a Vimeo Basic subscription.  * `business` - The user has a Vimeo Business subscription.  * `enterprise` - The user has a Vimeo Enterprise subscription.  * `free` - The user has a Vimeo Free subscription.  * `live_business` - The user has a Vimeo Business Live subscription.  * `live_premium` - The user has a Vimeo Premium subscription.  * `live_pro` - The user has a Vimeo PRO Live subscription.  * `plus` - The user has a Vimeo Plus subscription.  * `pro` - The user has a Vimeo Pro subscription.  * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.  * `producer` - The user has a Vimeo Producer subscription.  * `standard` - The user has a Vimeo Standard subscription.  * `starter` - The user has a Vimeo Starter subscription. ")

  public AccountEnum getAccount() {
    return account;
  }


  public void setAccount(AccountEnum account) {
    
    
    
    this.account = account;
  }


  public User availableForHire(Boolean availableForHire) {
    
    
    
    
    this.availableForHire = availableForHire;
    return this;
  }

   /**
   * Whether the authenticated user is available for hire.
   * @return availableForHire
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "Whether the authenticated user is available for hire.")

  public Boolean getAvailableForHire() {
    return availableForHire;
  }


  public void setAvailableForHire(Boolean availableForHire) {
    
    
    
    this.availableForHire = availableForHire;
  }


  public User bio(String bio) {
    
    
    
    
    this.bio = bio;
    return this;
  }

   /**
   * The authenticated user&#39;s long bio text.
   * @return bio
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "This is where you will find videos and news updates from the staff.", required = true, value = "The authenticated user's long bio text.")

  public String getBio() {
    return bio;
  }


  public void setBio(String bio) {
    
    
    
    this.bio = bio;
  }


  public User canWorkRemotely(Boolean canWorkRemotely) {
    
    
    
    
    this.canWorkRemotely = canWorkRemotely;
    return this;
  }

   /**
   * Whether the authenticated user can work remotely.
   * @return canWorkRemotely
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "Whether the authenticated user can work remotely.")

  public Boolean getCanWorkRemotely() {
    return canWorkRemotely;
  }


  public void setCanWorkRemotely(Boolean canWorkRemotely) {
    
    
    
    this.canWorkRemotely = canWorkRemotely;
  }


  public User capabilities(Object capabilities) {
    
    
    
    
    this.capabilities = capabilities;
    return this;
  }

   /**
   * The users&#39;s capabilities list.
   * @return capabilities
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The users's capabilities list.")

  public Object getCapabilities() {
    return capabilities;
  }


  public void setCapabilities(Object capabilities) {
    
    
    
    this.capabilities = capabilities;
  }


  public User clients(String clients) {
    
    
    
    
    this.clients = clients;
    return this;
  }

   /**
   * The comma-separated list of clients.
   * @return clients
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "vimeo", required = true, value = "The comma-separated list of clients.")

  public String getClients() {
    return clients;
  }


  public void setClients(String clients) {
    
    
    
    this.clients = clients;
  }


  public User contentFilter(ContentFilterEnum contentFilter) {
    
    
    
    
    this.contentFilter = contentFilter;
    return this;
  }

  public User addContentFilterItem(String contentFilterItem) {
    if (this.contentFilter == null) {
      this.contentFilter = new ArrayList<>();
    }
    this.contentFilter.add(contentFilterItem);
    return this;
  }

   /**
   * The authenticated user&#39;s content filters.  Option descriptions:  * &#x60;drugs&#x60; - The content contains drug or alcohol use.  * &#x60;language&#x60; - The content contains profanity or sexually suggestive language.  * &#x60;nudity&#x60; - The content contains nudity.  * &#x60;safe&#x60; - The content is suitable for all audiences.  * &#x60;unrated&#x60; - The content hasn&#39;t been rated.  * &#x60;violence&#x60; - The content contains violence or is graphic. 
   * @return contentFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The authenticated user's content filters.  Option descriptions:  * `drugs` - The content contains drug or alcohol use.  * `language` - The content contains profanity or sexually suggestive language.  * `nudity` - The content contains nudity.  * `safe` - The content is suitable for all audiences.  * `unrated` - The content hasn't been rated.  * `violence` - The content contains violence or is graphic. ")

  public ContentFilterEnum getContentFilter() {
    return contentFilter;
  }


  public void setContentFilter(ContentFilterEnum contentFilter) {
    
    
    
    this.contentFilter = contentFilter;
  }


  public User createdTime(String createdTime) {
    
    
    
    
    this.createdTime = createdTime;
    return this;
  }

   /**
   * The time in ISO 8601 format when the user account was created.
   * @return createdTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2007-01-18T16:40:11+00:00", required = true, value = "The time in ISO 8601 format when the user account was created.")

  public String getCreatedTime() {
    return createdTime;
  }


  public void setCreatedTime(String createdTime) {
    
    
    
    this.createdTime = createdTime;
  }


  public User gender(String gender) {
    
    
    
    
    this.gender = gender;
    return this;
  }

   /**
   * The authenticated user&#39;s gender.
   * @return gender
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "m", required = true, value = "The authenticated user's gender.")

  public String getGender() {
    return gender;
  }


  public void setGender(String gender) {
    
    
    
    this.gender = gender;
  }


  public User hasInvalidEmail(Boolean hasInvalidEmail) {
    
    
    
    
    this.hasInvalidEmail = hasInvalidEmail;
    return this;
  }

   /**
   * Whether the user&#39;s email is invalid.
   * @return hasInvalidEmail
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether the user's email is invalid.")

  public Boolean getHasInvalidEmail() {
    return hasInvalidEmail;
  }


  public void setHasInvalidEmail(Boolean hasInvalidEmail) {
    
    
    
    this.hasInvalidEmail = hasInvalidEmail;
  }


  public User isExpert(Boolean isExpert) {
    
    
    
    
    this.isExpert = isExpert;
    return this;
  }

   /**
   * Whether the creator enrolled in and successfully completed the Vimeo Experts program.
   * @return isExpert
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "Whether the creator enrolled in and successfully completed the Vimeo Experts program.")

  public Boolean getIsExpert() {
    return isExpert;
  }


  public void setIsExpert(Boolean isExpert) {
    
    
    
    this.isExpert = isExpert;
  }


  public User link(String link) {
    
    
    
    
    this.link = link;
    return this;
  }

   /**
   * The absolute URL of the authenticated users&#39;s profile page.
   * @return link
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://vimeo.com/staff", required = true, value = "The absolute URL of the authenticated users's profile page.")

  public String getLink() {
    return link;
  }


  public void setLink(String link) {
    
    
    
    this.link = link;
  }


  public User location(String location) {
    
    
    
    
    this.location = location;
    return this;
  }

   /**
   * The authenticated user&#39;s location.
   * @return location
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "New York City", required = true, value = "The authenticated user's location.")

  public String getLocation() {
    return location;
  }


  public void setLocation(String location) {
    
    
    
    this.location = location;
  }


  public User locationDetails(Location locationDetails) {
    
    
    
    
    this.locationDetails = locationDetails;
    return this;
  }

   /**
   * The authenticated user&#39;s location details.
   * @return locationDetails
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The authenticated user's location details.")

  public Location getLocationDetails() {
    return locationDetails;
  }


  public void setLocationDetails(Location locationDetails) {
    
    
    
    this.locationDetails = locationDetails;
  }


  public User metadata(UserMetadata metadata) {
    
    
    
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UserMetadata getMetadata() {
    return metadata;
  }


  public void setMetadata(UserMetadata metadata) {
    
    
    
    this.metadata = metadata;
  }


  public User name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The authenticated user&#39;s display name.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Vimeo Staff", required = true, value = "The authenticated user's display name.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public User pictures(Picture pictures) {
    
    
    
    
    this.pictures = pictures;
    return this;
  }

   /**
   * The active portrait of the authenticated user.
   * @return pictures
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The active portrait of the authenticated user.")

  public Picture getPictures() {
    return pictures;
  }


  public void setPictures(Picture pictures) {
    
    
    
    this.pictures = pictures;
  }


  public User preferences(UserPreferences preferences) {
    
    
    
    
    this.preferences = preferences;
    return this;
  }

   /**
   * Get preferences
   * @return preferences
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UserPreferences getPreferences() {
    return preferences;
  }


  public void setPreferences(UserPreferences preferences) {
    
    
    
    this.preferences = preferences;
  }


  public User resourceKey(String resourceKey) {
    
    
    
    
    this.resourceKey = resourceKey;
    return this;
  }

   /**
   * The authenticated user&#39;s resource key string.
   * @return resourceKey
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "bac1033deba2310ebba2caec33c23e4beea67aba", required = true, value = "The authenticated user's resource key string.")

  public String getResourceKey() {
    return resourceKey;
  }


  public void setResourceKey(String resourceKey) {
    
    
    
    this.resourceKey = resourceKey;
  }


  public User shortBio(String shortBio) {
    
    
    
    
    this.shortBio = shortBio;
    return this;
  }

   /**
   * The authenticated user&#39;s short bio text.
   * @return shortBio
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "This is a short biography about me!", required = true, value = "The authenticated user's short bio text.")

  public String getShortBio() {
    return shortBio;
  }


  public void setShortBio(String shortBio) {
    
    
    
    this.shortBio = shortBio;
  }


  public User skills(List<Skill> skills) {
    
    
    
    
    this.skills = skills;
    return this;
  }

  public User addSkillsItem(Skill skillsItem) {
    this.skills.add(skillsItem);
    return this;
  }

   /**
   * A list of the authenticated user&#39;s skills.
   * @return skills
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "A list of the authenticated user's skills.")

  public List<Skill> getSkills() {
    return skills;
  }


  public void setSkills(List<Skill> skills) {
    
    
    
    this.skills = skills;
  }


  public User uploadQuota(UserUploadQuota uploadQuota) {
    
    
    
    
    this.uploadQuota = uploadQuota;
    return this;
  }

   /**
   * Get uploadQuota
   * @return uploadQuota
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UserUploadQuota getUploadQuota() {
    return uploadQuota;
  }


  public void setUploadQuota(UserUploadQuota uploadQuota) {
    
    
    
    this.uploadQuota = uploadQuota;
  }


  public User uri(String uri) {
    
    
    
    
    this.uri = uri;
    return this;
  }

   /**
   * The authenticated user&#39;s canonical relative URI.
   * @return uri
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "/users/152184", required = true, value = "The authenticated user's canonical relative URI.")

  public String getUri() {
    return uri;
  }


  public void setUri(String uri) {
    
    
    
    this.uri = uri;
  }


  public User websites(List<UserWebsitesInner> websites) {
    
    
    
    
    this.websites = websites;
    return this;
  }

  public User addWebsitesItem(UserWebsitesInner websitesItem) {
    this.websites.add(websitesItem);
    return this;
  }

   /**
   * The authenticated user&#39;s websites.
   * @return websites
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The authenticated user's websites.")

  public List<UserWebsitesInner> getWebsites() {
    return websites;
  }


  public void setWebsites(List<UserWebsitesInner> websites) {
    
    
    
    this.websites = websites;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the User instance itself
   */
  public User putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    User user = (User) o;
    return Objects.equals(this.account, user.account) &&
        Objects.equals(this.availableForHire, user.availableForHire) &&
        Objects.equals(this.bio, user.bio) &&
        Objects.equals(this.canWorkRemotely, user.canWorkRemotely) &&
        Objects.equals(this.capabilities, user.capabilities) &&
        Objects.equals(this.clients, user.clients) &&
        Objects.equals(this.contentFilter, user.contentFilter) &&
        Objects.equals(this.createdTime, user.createdTime) &&
        Objects.equals(this.gender, user.gender) &&
        Objects.equals(this.hasInvalidEmail, user.hasInvalidEmail) &&
        Objects.equals(this.isExpert, user.isExpert) &&
        Objects.equals(this.link, user.link) &&
        Objects.equals(this.location, user.location) &&
        Objects.equals(this.locationDetails, user.locationDetails) &&
        Objects.equals(this.metadata, user.metadata) &&
        Objects.equals(this.name, user.name) &&
        Objects.equals(this.pictures, user.pictures) &&
        Objects.equals(this.preferences, user.preferences) &&
        Objects.equals(this.resourceKey, user.resourceKey) &&
        Objects.equals(this.shortBio, user.shortBio) &&
        Objects.equals(this.skills, user.skills) &&
        Objects.equals(this.uploadQuota, user.uploadQuota) &&
        Objects.equals(this.uri, user.uri) &&
        Objects.equals(this.websites, user.websites)&&
        Objects.equals(this.additionalProperties, user.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, availableForHire, bio, canWorkRemotely, capabilities, clients, contentFilter, createdTime, gender, hasInvalidEmail, isExpert, link, location, locationDetails, metadata, name, pictures, preferences, resourceKey, shortBio, skills, uploadQuota, uri, websites, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User {\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    availableForHire: ").append(toIndentedString(availableForHire)).append("\n");
    sb.append("    bio: ").append(toIndentedString(bio)).append("\n");
    sb.append("    canWorkRemotely: ").append(toIndentedString(canWorkRemotely)).append("\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    clients: ").append(toIndentedString(clients)).append("\n");
    sb.append("    contentFilter: ").append(toIndentedString(contentFilter)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    hasInvalidEmail: ").append(toIndentedString(hasInvalidEmail)).append("\n");
    sb.append("    isExpert: ").append(toIndentedString(isExpert)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    locationDetails: ").append(toIndentedString(locationDetails)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pictures: ").append(toIndentedString(pictures)).append("\n");
    sb.append("    preferences: ").append(toIndentedString(preferences)).append("\n");
    sb.append("    resourceKey: ").append(toIndentedString(resourceKey)).append("\n");
    sb.append("    shortBio: ").append(toIndentedString(shortBio)).append("\n");
    sb.append("    skills: ").append(toIndentedString(skills)).append("\n");
    sb.append("    uploadQuota: ").append(toIndentedString(uploadQuota)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    websites: ").append(toIndentedString(websites)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account");
    openapiFields.add("available_for_hire");
    openapiFields.add("bio");
    openapiFields.add("can_work_remotely");
    openapiFields.add("capabilities");
    openapiFields.add("clients");
    openapiFields.add("content_filter");
    openapiFields.add("created_time");
    openapiFields.add("gender");
    openapiFields.add("has_invalid_email");
    openapiFields.add("is_expert");
    openapiFields.add("link");
    openapiFields.add("location");
    openapiFields.add("location_details");
    openapiFields.add("metadata");
    openapiFields.add("name");
    openapiFields.add("pictures");
    openapiFields.add("preferences");
    openapiFields.add("resource_key");
    openapiFields.add("short_bio");
    openapiFields.add("skills");
    openapiFields.add("upload_quota");
    openapiFields.add("uri");
    openapiFields.add("websites");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("account");
    openapiRequiredFields.add("available_for_hire");
    openapiRequiredFields.add("bio");
    openapiRequiredFields.add("can_work_remotely");
    openapiRequiredFields.add("capabilities");
    openapiRequiredFields.add("clients");
    openapiRequiredFields.add("created_time");
    openapiRequiredFields.add("gender");
    openapiRequiredFields.add("has_invalid_email");
    openapiRequiredFields.add("is_expert");
    openapiRequiredFields.add("link");
    openapiRequiredFields.add("location");
    openapiRequiredFields.add("location_details");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("pictures");
    openapiRequiredFields.add("preferences");
    openapiRequiredFields.add("resource_key");
    openapiRequiredFields.add("short_bio");
    openapiRequiredFields.add("skills");
    openapiRequiredFields.add("upload_quota");
    openapiRequiredFields.add("uri");
    openapiRequiredFields.add("websites");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to User
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!User.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in User is not found in the empty JSON string", User.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : User.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account").toString()));
      }
      if (!jsonObj.get("bio").isJsonNull() && !jsonObj.get("bio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bio").toString()));
      }
      if (!jsonObj.get("clients").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clients` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clients").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("content_filter") != null && !jsonObj.get("content_filter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_filter` to be an array in the JSON string but got `%s`", jsonObj.get("content_filter").toString()));
      }
      if (!jsonObj.get("created_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_time").toString()));
      }
      if (!jsonObj.get("gender").isJsonNull() && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      if (!jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if (!jsonObj.get("location").isJsonNull() && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      // validate the required field `location_details`
      Location.validateJsonObject(jsonObj.getAsJsonObject("location_details"));
      // validate the required field `metadata`
      UserMetadata.validateJsonObject(jsonObj.getAsJsonObject("metadata"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `pictures`
      Picture.validateJsonObject(jsonObj.getAsJsonObject("pictures"));
      // validate the required field `preferences`
      UserPreferences.validateJsonObject(jsonObj.getAsJsonObject("preferences"));
      if (!jsonObj.get("resource_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_key").toString()));
      }
      if (!jsonObj.get("short_bio").isJsonNull() && !jsonObj.get("short_bio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `short_bio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("short_bio").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("skills").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `skills` to be an array in the JSON string but got `%s`", jsonObj.get("skills").toString()));
      }

      JsonArray jsonArrayskills = jsonObj.getAsJsonArray("skills");
      // validate the required field `skills` (array)
      for (int i = 0; i < jsonArrayskills.size(); i++) {
        Skill.validateJsonObject(jsonArrayskills.get(i).getAsJsonObject());
      };
      // validate the required field `upload_quota`
      UserUploadQuota.validateJsonObject(jsonObj.getAsJsonObject("upload_quota"));
      if (!jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("websites").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `websites` to be an array in the JSON string but got `%s`", jsonObj.get("websites").toString()));
      }

      JsonArray jsonArraywebsites = jsonObj.getAsJsonArray("websites");
      // validate the required field `websites` (array)
      for (int i = 0; i < jsonArraywebsites.size(); i++) {
        UserWebsitesInner.validateJsonObject(jsonArraywebsites.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!User.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'User' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<User> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(User.class));

       return (TypeAdapter<T>) new TypeAdapter<User>() {
           @Override
           public void write(JsonWriter out, User value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public User read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             User instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of User given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of User
  * @throws IOException if the JSON string is invalid with respect to User
  */
  public static User fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, User.class);
  }

 /**
  * Convert an instance of User to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

