/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.VideoVersion;
import com.konfigthis.client.model.VideosVersionsAddVideoVersionRequest;
import com.konfigthis.client.model.VideosVersionsAddVideoVersionRequestUpload;
import com.konfigthis.client.model.VideosVersionsEditVideoVersionRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VideosVersionsApi
 */
@Disabled
public class VideosVersionsApiTest {

    private static VideosVersionsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new VideosVersionsApi(apiClient);
    }

    /**
     * Add a version to a video
     *
     * This method adds a version to the specified video. The authenticated user must be the owner of the video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addVideoVersionTest() throws ApiException {
        String fileName = null;
        VideosVersionsAddVideoVersionRequestUpload upload = null;
        Double videoId = null;
        VideoVersion response = api.addVideoVersion(fileName, upload, videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a video version
     *
     * This method deletes the specified version from a video. The authenticated user must be the owner of the video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteVideoVersionTest() throws ApiException {
        Double versionId = null;
        Double videoId = null;
        api.deleteVideoVersion(versionId, videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Edit a video version
     *
     * This method edits the specified version of a video. The authenticated user must be the owner of the video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void editVideoVersionTest() throws ApiException {
        Double versionId = null;
        Double videoId = null;
        String description = null;
        Boolean isCurrent = null;
        VideoVersion response = api.editVideoVersion(versionId, videoId)
                .description(description)
                .isCurrent(isCurrent)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the versions of a video
     *
     * This method returns every version of the specified video. The authenticated user must be the owner of the video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllVideoVersionsTest() throws ApiException {
        Double channelId = null;
        Double videoId = null;
        Double page = null;
        Double perPage = null;
        List<VideoVersion> response = api.getAllVideoVersions(channelId, videoId)
                .page(page)
                .perPage(perPage)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the versions of a video
     *
     * This method returns every version of the specified video. The authenticated user must be the owner of the video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllVideoVersions_0Test() throws ApiException {
        Double videoId = null;
        Double page = null;
        Double perPage = null;
        List<VideoVersion> response = api.getAllVideoVersions_0(videoId)
                .page(page)
                .perPage(perPage)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a specific video version
     *
     * This method returns a single version of the specified video. The authenticated user must be the owner of the video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSpecificVersionTest() throws ApiException {
        Double versionId = null;
        Double videoId = null;
        VideoVersion response = api.getSpecificVersion(versionId, videoId)
                .execute();
        // TODO: test validations
    }

}
