/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EmailCaptureFormCustomFieldsInnerFieldMetadata;
import com.konfigthis.client.model.EmailCaptureFormHiddenFieldsInnerConnectedFieldsInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EmailCaptureFormHiddenFieldsInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmailCaptureFormHiddenFieldsInner {
  public static final String SERIALIZED_NAME_CONNECTED_FIELDS = "connected_fields";
  @SerializedName(SERIALIZED_NAME_CONNECTED_FIELDS)
  private List<EmailCaptureFormHiddenFieldsInnerConnectedFieldsInner> connectedFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIELD_METADATA = "field_metadata";
  @SerializedName(SERIALIZED_NAME_FIELD_METADATA)
  private EmailCaptureFormCustomFieldsInnerFieldMetadata fieldMetadata;

  public static final String SERIALIZED_NAME_FIELD_NAME = "field_name";
  @SerializedName(SERIALIZED_NAME_FIELD_NAME)
  private String fieldName;

  /**
   * The type of custom field.  Option descriptions:  * &#x60;dropdown&#x60; - The custom field used for dropdown item selection.  * &#x60;text&#x60; - The custom field used for text input. 
   */
  @JsonAdapter(FieldTypeEnum.Adapter.class)
 public enum FieldTypeEnum {
    DROPDOWN("dropdown"),
    
    TEXT("text");

    private String value;

    FieldTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FieldTypeEnum fromValue(String value) {
      for (FieldTypeEnum b : FieldTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FieldTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FieldTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FieldTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FieldTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FIELD_TYPE = "field_type";
  @SerializedName(SERIALIZED_NAME_FIELD_TYPE)
  private FieldTypeEnum fieldType;

  public static final String SERIALIZED_NAME_LOCKED = "locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  private Boolean locked;

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required;

  public static final String SERIALIZED_NAME_STATIC_FIELD = "static_field";
  @SerializedName(SERIALIZED_NAME_STATIC_FIELD)
  private Boolean staticField;

  public EmailCaptureFormHiddenFieldsInner() {
  }

  public EmailCaptureFormHiddenFieldsInner connectedFields(List<EmailCaptureFormHiddenFieldsInnerConnectedFieldsInner> connectedFields) {
    
    
    
    
    this.connectedFields = connectedFields;
    return this;
  }

  public EmailCaptureFormHiddenFieldsInner addConnectedFieldsItem(EmailCaptureFormHiddenFieldsInnerConnectedFieldsInner connectedFieldsItem) {
    this.connectedFields.add(connectedFieldsItem);
    return this;
  }

   /**
   * The email provider fields associated with the field in the form.
   * @return connectedFields
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The email provider fields associated with the field in the form.")

  public List<EmailCaptureFormHiddenFieldsInnerConnectedFieldsInner> getConnectedFields() {
    return connectedFields;
  }


  public void setConnectedFields(List<EmailCaptureFormHiddenFieldsInnerConnectedFieldsInner> connectedFields) {
    
    
    
    this.connectedFields = connectedFields;
  }


  public EmailCaptureFormHiddenFieldsInner fieldMetadata(EmailCaptureFormCustomFieldsInnerFieldMetadata fieldMetadata) {
    
    
    
    
    this.fieldMetadata = fieldMetadata;
    return this;
  }

   /**
   * Get fieldMetadata
   * @return fieldMetadata
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EmailCaptureFormCustomFieldsInnerFieldMetadata getFieldMetadata() {
    return fieldMetadata;
  }


  public void setFieldMetadata(EmailCaptureFormCustomFieldsInnerFieldMetadata fieldMetadata) {
    
    
    
    this.fieldMetadata = fieldMetadata;
  }


  public EmailCaptureFormHiddenFieldsInner fieldName(String fieldName) {
    
    
    
    
    this.fieldName = fieldName;
    return this;
  }

   /**
   * The name of a field in the form.
   * @return fieldName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of a field in the form.")

  public String getFieldName() {
    return fieldName;
  }


  public void setFieldName(String fieldName) {
    
    
    
    this.fieldName = fieldName;
  }


  public EmailCaptureFormHiddenFieldsInner fieldType(FieldTypeEnum fieldType) {
    
    
    
    
    this.fieldType = fieldType;
    return this;
  }

   /**
   * The type of custom field.  Option descriptions:  * &#x60;dropdown&#x60; - The custom field used for dropdown item selection.  * &#x60;text&#x60; - The custom field used for text input. 
   * @return fieldType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "DROPDOWN", required = true, value = "The type of custom field.  Option descriptions:  * `dropdown` - The custom field used for dropdown item selection.  * `text` - The custom field used for text input. ")

  public FieldTypeEnum getFieldType() {
    return fieldType;
  }


  public void setFieldType(FieldTypeEnum fieldType) {
    
    
    
    this.fieldType = fieldType;
  }


  public EmailCaptureFormHiddenFieldsInner locked(Boolean locked) {
    
    
    
    
    this.locked = locked;
    return this;
  }

   /**
   * Whether the field&#39;s **required** property is editable but **field_name** isn&#39;t. If the value is &#x60;true&#x60;, the field can&#39;t be deleted.
   * @return locked
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether the field's **required** property is editable but **field_name** isn't. If the value is `true`, the field can't be deleted.")

  public Boolean getLocked() {
    return locked;
  }


  public void setLocked(Boolean locked) {
    
    
    
    this.locked = locked;
  }


  public EmailCaptureFormHiddenFieldsInner required(Boolean required) {
    
    
    
    
    this.required = required;
    return this;
  }

   /**
   * Whether the field is required.
   * @return required
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether the field is required.")

  public Boolean getRequired() {
    return required;
  }


  public void setRequired(Boolean required) {
    
    
    
    this.required = required;
  }


  public EmailCaptureFormHiddenFieldsInner staticField(Boolean staticField) {
    
    
    
    
    this.staticField = staticField;
    return this;
  }

   /**
   * Whether the field&#39;s **required** and **field_name** properties are both uneditable. If the value is &#x60;true&#x60;, the field can&#39;t be deleted.
   * @return staticField
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether the field's **required** and **field_name** properties are both uneditable. If the value is `true`, the field can't be deleted.")

  public Boolean getStaticField() {
    return staticField;
  }


  public void setStaticField(Boolean staticField) {
    
    
    
    this.staticField = staticField;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmailCaptureFormHiddenFieldsInner instance itself
   */
  public EmailCaptureFormHiddenFieldsInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailCaptureFormHiddenFieldsInner emailCaptureFormHiddenFieldsInner = (EmailCaptureFormHiddenFieldsInner) o;
    return Objects.equals(this.connectedFields, emailCaptureFormHiddenFieldsInner.connectedFields) &&
        Objects.equals(this.fieldMetadata, emailCaptureFormHiddenFieldsInner.fieldMetadata) &&
        Objects.equals(this.fieldName, emailCaptureFormHiddenFieldsInner.fieldName) &&
        Objects.equals(this.fieldType, emailCaptureFormHiddenFieldsInner.fieldType) &&
        Objects.equals(this.locked, emailCaptureFormHiddenFieldsInner.locked) &&
        Objects.equals(this.required, emailCaptureFormHiddenFieldsInner.required) &&
        Objects.equals(this.staticField, emailCaptureFormHiddenFieldsInner.staticField)&&
        Objects.equals(this.additionalProperties, emailCaptureFormHiddenFieldsInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectedFields, fieldMetadata, fieldName, fieldType, locked, required, staticField, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailCaptureFormHiddenFieldsInner {\n");
    sb.append("    connectedFields: ").append(toIndentedString(connectedFields)).append("\n");
    sb.append("    fieldMetadata: ").append(toIndentedString(fieldMetadata)).append("\n");
    sb.append("    fieldName: ").append(toIndentedString(fieldName)).append("\n");
    sb.append("    fieldType: ").append(toIndentedString(fieldType)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    staticField: ").append(toIndentedString(staticField)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connected_fields");
    openapiFields.add("field_metadata");
    openapiFields.add("field_name");
    openapiFields.add("field_type");
    openapiFields.add("locked");
    openapiFields.add("required");
    openapiFields.add("static_field");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("connected_fields");
    openapiRequiredFields.add("field_metadata");
    openapiRequiredFields.add("field_name");
    openapiRequiredFields.add("field_type");
    openapiRequiredFields.add("locked");
    openapiRequiredFields.add("required");
    openapiRequiredFields.add("static_field");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmailCaptureFormHiddenFieldsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmailCaptureFormHiddenFieldsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmailCaptureFormHiddenFieldsInner is not found in the empty JSON string", EmailCaptureFormHiddenFieldsInner.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EmailCaptureFormHiddenFieldsInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("connected_fields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `connected_fields` to be an array in the JSON string but got `%s`", jsonObj.get("connected_fields").toString()));
      }

      JsonArray jsonArrayconnectedFields = jsonObj.getAsJsonArray("connected_fields");
      // validate the required field `connected_fields` (array)
      for (int i = 0; i < jsonArrayconnectedFields.size(); i++) {
        EmailCaptureFormHiddenFieldsInnerConnectedFieldsInner.validateJsonObject(jsonArrayconnectedFields.get(i).getAsJsonObject());
      };
      // validate the required field `field_metadata`
      EmailCaptureFormCustomFieldsInnerFieldMetadata.validateJsonObject(jsonObj.getAsJsonObject("field_metadata"));
      if (!jsonObj.get("field_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `field_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("field_name").toString()));
      }
      if (!jsonObj.get("field_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `field_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("field_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmailCaptureFormHiddenFieldsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmailCaptureFormHiddenFieldsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmailCaptureFormHiddenFieldsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmailCaptureFormHiddenFieldsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<EmailCaptureFormHiddenFieldsInner>() {
           @Override
           public void write(JsonWriter out, EmailCaptureFormHiddenFieldsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmailCaptureFormHiddenFieldsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmailCaptureFormHiddenFieldsInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmailCaptureFormHiddenFieldsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmailCaptureFormHiddenFieldsInner
  * @throws IOException if the JSON string is invalid with respect to EmailCaptureFormHiddenFieldsInner
  */
  public static EmailCaptureFormHiddenFieldsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmailCaptureFormHiddenFieldsInner.class);
  }

 /**
  * Convert an instance of EmailCaptureFormHiddenFieldsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

