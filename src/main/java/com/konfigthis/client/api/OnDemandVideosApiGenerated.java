/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.OnDemandVideo;
import com.konfigthis.client.model.OnDemandVideosAddVideoToPageRequest;
import com.konfigthis.client.model.OnDemandVideosAddVideoToPageRequestBuy;
import com.konfigthis.client.model.OnDemandVideosAddVideoToPageRequestRent;
import com.konfigthis.client.model.Video;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OnDemandVideosApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OnDemandVideosApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OnDemandVideosApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addVideoToPageCall(Double ondemandId, Double videoId, OnDemandVideosAddVideoToPageRequest onDemandVideosAddVideoToPageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = onDemandVideosAddVideoToPageRequest;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/videos/{video_id}"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.ondemand.video+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVideoToPageValidateBeforeCall(Double ondemandId, Double videoId, OnDemandVideosAddVideoToPageRequest onDemandVideosAddVideoToPageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling addVideoToPage(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addVideoToPage(Async)");
        }

        // verify the required parameter 'onDemandVideosAddVideoToPageRequest' is set
        if (onDemandVideosAddVideoToPageRequest == null) {
            throw new ApiException("Missing the required parameter 'onDemandVideosAddVideoToPageRequest' when calling addVideoToPage(Async)");
        }

        return addVideoToPageCall(ondemandId, videoId, onDemandVideosAddVideoToPageRequest, _callback);

    }


    private ApiResponse<OnDemandVideo> addVideoToPageWithHttpInfo(Double ondemandId, Double videoId, OnDemandVideosAddVideoToPageRequest onDemandVideosAddVideoToPageRequest) throws ApiException {
        okhttp3.Call localVarCall = addVideoToPageValidateBeforeCall(ondemandId, videoId, onDemandVideosAddVideoToPageRequest, null);
        Type localVarReturnType = new TypeToken<OnDemandVideo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addVideoToPageAsync(Double ondemandId, Double videoId, OnDemandVideosAddVideoToPageRequest onDemandVideosAddVideoToPageRequest, final ApiCallback<OnDemandVideo> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVideoToPageValidateBeforeCall(ondemandId, videoId, onDemandVideosAddVideoToPageRequest, _callback);
        Type localVarReturnType = new TypeToken<OnDemandVideo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddVideoToPageRequestBuilder {
        private final String type;
        private final Double ondemandId;
        private final Double videoId;
        private OnDemandVideosAddVideoToPageRequestBuy buy;
        private Double position;
        private Double releaseYear;
        private OnDemandVideosAddVideoToPageRequestRent rent;

        private AddVideoToPageRequestBuilder(String type, double ondemandId, double videoId) {
            this.type = type;
            this.ondemandId = ondemandId;
            this.videoId = videoId;
        }

        /**
         * Set buy
         * @param buy  (optional)
         * @return AddVideoToPageRequestBuilder
         */
        public AddVideoToPageRequestBuilder buy(OnDemandVideosAddVideoToPageRequestBuy buy) {
            this.buy = buy;
            return this;
        }
        
        /**
         * Set position
         * @param position The position of the video in the On Demand collection. (optional)
         * @return AddVideoToPageRequestBuilder
         */
        public AddVideoToPageRequestBuilder position(Double position) {
            this.position = position;
            return this;
        }
        
        /**
         * Set releaseYear
         * @param releaseYear The release year of the video. (optional)
         * @return AddVideoToPageRequestBuilder
         */
        public AddVideoToPageRequestBuilder releaseYear(Double releaseYear) {
            this.releaseYear = releaseYear;
            return this;
        }
        
        /**
         * Set rent
         * @param rent  (optional)
         * @return AddVideoToPageRequestBuilder
         */
        public AddVideoToPageRequestBuilder rent(OnDemandVideosAddVideoToPageRequestRent rent) {
            this.rent = rent;
            return this;
        }
        
        /**
         * Build call for addVideoToPage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OnDemandVideosAddVideoToPageRequest onDemandVideosAddVideoToPageRequest = buildBodyParams();
            return addVideoToPageCall(ondemandId, videoId, onDemandVideosAddVideoToPageRequest, _callback);
        }

        private OnDemandVideosAddVideoToPageRequest buildBodyParams() {
            OnDemandVideosAddVideoToPageRequest onDemandVideosAddVideoToPageRequest = new OnDemandVideosAddVideoToPageRequest();
            onDemandVideosAddVideoToPageRequest.buy(this.buy);
            onDemandVideosAddVideoToPageRequest.position(this.position);
            onDemandVideosAddVideoToPageRequest.releaseYear(this.releaseYear);
            onDemandVideosAddVideoToPageRequest.rent(this.rent);
            if (this.type != null)
            onDemandVideosAddVideoToPageRequest.type(OnDemandVideosAddVideoToPageRequest.TypeEnum.fromValue(this.type));
            return onDemandVideosAddVideoToPageRequest;
        }

        /**
         * Execute addVideoToPage request
         * @return OnDemandVideo
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public OnDemandVideo execute() throws ApiException {
            OnDemandVideosAddVideoToPageRequest onDemandVideosAddVideoToPageRequest = buildBodyParams();
            ApiResponse<OnDemandVideo> localVarResp = addVideoToPageWithHttpInfo(ondemandId, videoId, onDemandVideosAddVideoToPageRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addVideoToPage request with HTTP info returned
         * @return ApiResponse&lt;OnDemandVideo&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OnDemandVideo> executeWithHttpInfo() throws ApiException {
            OnDemandVideosAddVideoToPageRequest onDemandVideosAddVideoToPageRequest = buildBodyParams();
            return addVideoToPageWithHttpInfo(ondemandId, videoId, onDemandVideosAddVideoToPageRequest);
        }

        /**
         * Execute addVideoToPage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OnDemandVideo> _callback) throws ApiException {
            OnDemandVideosAddVideoToPageRequest onDemandVideosAddVideoToPageRequest = buildBodyParams();
            return addVideoToPageAsync(ondemandId, videoId, onDemandVideosAddVideoToPageRequest, _callback);
        }
    }

    /**
     * Add a video to an On Demand page
     * This method adds a video to the specified On Demand page. The authenticated user must be the owner of the page.
     * @param ondemandId The ID of the On Demand page. (required)
     * @param videoId The ID of the video. (required)
     * @param onDemandVideosAddVideoToPageRequest  (required)
     * @return AddVideoToPageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was added. </td><td>  -  </td></tr>
     </table>
     */
    public AddVideoToPageRequestBuilder addVideoToPage(String type, double ondemandId, double videoId) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        
        
        return new AddVideoToPageRequestBuilder(type, ondemandId, videoId);
    }
    private okhttp3.Call getAllVideosCall(Double ondemandId, String direction, String filter, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/videos"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllVideosValidateBeforeCall(Double ondemandId, String direction, String filter, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling getAllVideos(Async)");
        }

        return getAllVideosCall(ondemandId, direction, filter, page, perPage, sort, _callback);

    }


    private ApiResponse<List<OnDemandVideo>> getAllVideosWithHttpInfo(Double ondemandId, String direction, String filter, Double page, Double perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = getAllVideosValidateBeforeCall(ondemandId, direction, filter, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<List<OnDemandVideo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllVideosAsync(Double ondemandId, String direction, String filter, Double page, Double perPage, String sort, final ApiCallback<List<OnDemandVideo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllVideosValidateBeforeCall(ondemandId, direction, filter, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<List<OnDemandVideo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllVideosRequestBuilder {
        private final Double ondemandId;
        private String direction;
        private String filter;
        private Double page;
        private Double perPage;
        private String sort;

        private GetAllVideosRequestBuilder(double ondemandId) {
            this.ondemandId = ondemandId;
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return GetAllVideosRequestBuilder
         */
        public GetAllVideosRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The attribute by which to filter the results.  Option descriptions:  * &#x60;all&#x60; - Filter for all videos.  * &#x60;buy&#x60; - Filter for purchased videos.  * &#x60;expiring_soon&#x60; - Filter for videos that expire soon.  * &#x60;extra&#x60; - Filter for extra footage videos.  * &#x60;main&#x60; - Filter for main videos.  * &#x60;main.viewable&#x60; - Filter for videos that are both the main video and are viewable.  * &#x60;rent&#x60; - Filter for rented videos.  * &#x60;trailer&#x60; - Filter for trailer videos.  * &#x60;unwatched&#x60; - Filter for unwatched videos.  * &#x60;viewable&#x60; - Filter for videos that are viewable.  * &#x60;watched&#x60; - Filter for watched videos.  (optional)
         * @return GetAllVideosRequestBuilder
         */
        public GetAllVideosRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetAllVideosRequestBuilder
         */
        public GetAllVideosRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetAllVideosRequestBuilder
         */
        public GetAllVideosRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sorting method.  * &#x60;episode&#x60; - Sort the results by episode.  * &#x60;manual&#x60; - Sort the results manually.  * &#x60;name&#x60; - Sort the results by name.  * &#x60;purchase_time&#x60; - Sort the results by time of purchase.  * &#x60;release_date&#x60; - Sort the results by release date.  (optional)
         * @return GetAllVideosRequestBuilder
         */
        public GetAllVideosRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getAllVideos
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllVideosCall(ondemandId, direction, filter, page, perPage, sort, _callback);
        }


        /**
         * Execute getAllVideos request
         * @return List&lt;OnDemandVideo&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<OnDemandVideo> execute() throws ApiException {
            ApiResponse<List<OnDemandVideo>> localVarResp = getAllVideosWithHttpInfo(ondemandId, direction, filter, page, perPage, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllVideos request with HTTP info returned
         * @return ApiResponse&lt;List&lt;OnDemandVideo&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<OnDemandVideo>> executeWithHttpInfo() throws ApiException {
            return getAllVideosWithHttpInfo(ondemandId, direction, filter, page, perPage, sort);
        }

        /**
         * Execute getAllVideos request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<OnDemandVideo>> _callback) throws ApiException {
            return getAllVideosAsync(ondemandId, direction, filter, page, perPage, sort, _callback);
        }
    }

    /**
     * Get all the videos on an On Demand page
     * This method returns every video on the specified On Demand page.
     * @param ondemandId The ID of the On Demand page. (required)
     * @return GetAllVideosRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllVideosRequestBuilder getAllVideos(double ondemandId) throws IllegalArgumentException {
        
        return new GetAllVideosRequestBuilder(ondemandId);
    }
    private okhttp3.Call removeFromPageCall(Double ondemandId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/videos/{video_id}"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFromPageValidateBeforeCall(Double ondemandId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling removeFromPage(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling removeFromPage(Async)");
        }

        return removeFromPageCall(ondemandId, videoId, _callback);

    }


    private ApiResponse<Void> removeFromPageWithHttpInfo(Double ondemandId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = removeFromPageValidateBeforeCall(ondemandId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeFromPageAsync(Double ondemandId, Double videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFromPageValidateBeforeCall(ondemandId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveFromPageRequestBuilder {
        private final Double ondemandId;
        private final Double videoId;

        private RemoveFromPageRequestBuilder(double ondemandId, double videoId) {
            this.ondemandId = ondemandId;
            this.videoId = videoId;
        }

        /**
         * Build call for removeFromPage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeFromPageCall(ondemandId, videoId, _callback);
        }


        /**
         * Execute removeFromPage request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeFromPageWithHttpInfo(ondemandId, videoId);
        }

        /**
         * Execute removeFromPage request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeFromPageWithHttpInfo(ondemandId, videoId);
        }

        /**
         * Execute removeFromPage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeFromPageAsync(ondemandId, videoId, _callback);
        }
    }

    /**
     * Remove a video from an On Demand page
     * This method removes a video from the specified On Demand page. The authenticated user must be the owner of the page.
     * @param ondemandId The ID of the On Demand page. (required)
     * @param videoId The ID of the video. (required)
     * @return RemoveFromPageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFromPageRequestBuilder removeFromPage(double ondemandId, double videoId) throws IllegalArgumentException {
        
        
        return new RemoveFromPageRequestBuilder(ondemandId, videoId);
    }
    private okhttp3.Call specificVideoGetCall(Double ondemandId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/videos/{video_id}"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call specificVideoGetValidateBeforeCall(Double ondemandId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling specificVideoGet(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling specificVideoGet(Async)");
        }

        return specificVideoGetCall(ondemandId, videoId, _callback);

    }


    private ApiResponse<Video> specificVideoGetWithHttpInfo(Double ondemandId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = specificVideoGetValidateBeforeCall(ondemandId, videoId, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call specificVideoGetAsync(Double ondemandId, Double videoId, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = specificVideoGetValidateBeforeCall(ondemandId, videoId, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SpecificVideoGetRequestBuilder {
        private final Double ondemandId;
        private final Double videoId;

        private SpecificVideoGetRequestBuilder(double ondemandId, double videoId) {
            this.ondemandId = ondemandId;
            this.videoId = videoId;
        }

        /**
         * Build call for specificVideoGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return specificVideoGetCall(ondemandId, videoId, _callback);
        }


        /**
         * Execute specificVideoGet request
         * @return Video
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public Video execute() throws ApiException {
            ApiResponse<Video> localVarResp = specificVideoGetWithHttpInfo(ondemandId, videoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute specificVideoGet request with HTTP info returned
         * @return ApiResponse&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Video> executeWithHttpInfo() throws ApiException {
            return specificVideoGetWithHttpInfo(ondemandId, videoId);
        }

        /**
         * Execute specificVideoGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Video> _callback) throws ApiException {
            return specificVideoGetAsync(ondemandId, videoId, _callback);
        }
    }

    /**
     * Get a specific video on an On Demand page
     * This method returns a single video on the specified On Demand page. Use this method to determine whether the video is on the page.
     * @param ondemandId The ID of the On Demand page. (required)
     * @param videoId The ID of the video. (required)
     * @return SpecificVideoGetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
     </table>
     */
    public SpecificVideoGetRequestBuilder specificVideoGet(double ondemandId, double videoId) throws IllegalArgumentException {
        
        
        return new SpecificVideoGetRequestBuilder(ondemandId, videoId);
    }
}
