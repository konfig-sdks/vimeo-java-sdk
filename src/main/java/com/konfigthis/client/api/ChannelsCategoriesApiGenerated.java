/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Category;
import com.konfigthis.client.model.ChannelsCategoriesAddChannelToMultipleCategoriesRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ChannelsCategoriesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChannelsCategoriesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ChannelsCategoriesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addChannelToMultipleCategoriesCall(Double channelId, ChannelsCategoriesAddChannelToMultipleCategoriesRequest channelsCategoriesAddChannelToMultipleCategoriesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = channelsCategoriesAddChannelToMultipleCategoriesRequest;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/categories"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addChannelToMultipleCategoriesValidateBeforeCall(Double channelId, ChannelsCategoriesAddChannelToMultipleCategoriesRequest channelsCategoriesAddChannelToMultipleCategoriesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling addChannelToMultipleCategories(Async)");
        }

        // verify the required parameter 'channelsCategoriesAddChannelToMultipleCategoriesRequest' is set
        if (channelsCategoriesAddChannelToMultipleCategoriesRequest == null) {
            throw new ApiException("Missing the required parameter 'channelsCategoriesAddChannelToMultipleCategoriesRequest' when calling addChannelToMultipleCategories(Async)");
        }

        return addChannelToMultipleCategoriesCall(channelId, channelsCategoriesAddChannelToMultipleCategoriesRequest, _callback);

    }


    private ApiResponse<Void> addChannelToMultipleCategoriesWithHttpInfo(Double channelId, ChannelsCategoriesAddChannelToMultipleCategoriesRequest channelsCategoriesAddChannelToMultipleCategoriesRequest) throws ApiException {
        okhttp3.Call localVarCall = addChannelToMultipleCategoriesValidateBeforeCall(channelId, channelsCategoriesAddChannelToMultipleCategoriesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addChannelToMultipleCategoriesAsync(Double channelId, ChannelsCategoriesAddChannelToMultipleCategoriesRequest channelsCategoriesAddChannelToMultipleCategoriesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addChannelToMultipleCategoriesValidateBeforeCall(channelId, channelsCategoriesAddChannelToMultipleCategoriesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddChannelToMultipleCategoriesRequestBuilder {
        private final List<String> channels;
        private final Double channelId;

        private AddChannelToMultipleCategoriesRequestBuilder(List<String> channels, double channelId) {
            this.channels = channels;
            this.channelId = channelId;
        }

        /**
         * Build call for addChannelToMultipleCategories
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The channel was added to the categories. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ChannelsCategoriesAddChannelToMultipleCategoriesRequest channelsCategoriesAddChannelToMultipleCategoriesRequest = buildBodyParams();
            return addChannelToMultipleCategoriesCall(channelId, channelsCategoriesAddChannelToMultipleCategoriesRequest, _callback);
        }

        private ChannelsCategoriesAddChannelToMultipleCategoriesRequest buildBodyParams() {
            ChannelsCategoriesAddChannelToMultipleCategoriesRequest channelsCategoriesAddChannelToMultipleCategoriesRequest = new ChannelsCategoriesAddChannelToMultipleCategoriesRequest();
            channelsCategoriesAddChannelToMultipleCategoriesRequest.channels(this.channels);
            return channelsCategoriesAddChannelToMultipleCategoriesRequest;
        }

        /**
         * Execute addChannelToMultipleCategories request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The channel was added to the categories. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ChannelsCategoriesAddChannelToMultipleCategoriesRequest channelsCategoriesAddChannelToMultipleCategoriesRequest = buildBodyParams();
            addChannelToMultipleCategoriesWithHttpInfo(channelId, channelsCategoriesAddChannelToMultipleCategoriesRequest);
        }

        /**
         * Execute addChannelToMultipleCategories request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The channel was added to the categories. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ChannelsCategoriesAddChannelToMultipleCategoriesRequest channelsCategoriesAddChannelToMultipleCategoriesRequest = buildBodyParams();
            return addChannelToMultipleCategoriesWithHttpInfo(channelId, channelsCategoriesAddChannelToMultipleCategoriesRequest);
        }

        /**
         * Execute addChannelToMultipleCategories request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The channel was added to the categories. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ChannelsCategoriesAddChannelToMultipleCategoriesRequest channelsCategoriesAddChannelToMultipleCategoriesRequest = buildBodyParams();
            return addChannelToMultipleCategoriesAsync(channelId, channelsCategoriesAddChannelToMultipleCategoriesRequest, _callback);
        }
    }

    /**
     * Add a channel to a list of categories
     * This method adds the specified channel to multiple categories.
     * @param channelId The ID of the channel. (required)
     * @param channelsCategoriesAddChannelToMultipleCategoriesRequest  (required)
     * @return AddChannelToMultipleCategoriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The channel was added to the categories. </td><td>  -  </td></tr>
     </table>
     */
    public AddChannelToMultipleCategoriesRequestBuilder addChannelToMultipleCategories(List<String> channels, double channelId) throws IllegalArgumentException {
        if (channels == null) throw new IllegalArgumentException("\"channels\" is required but got null");
        
        return new AddChannelToMultipleCategoriesRequestBuilder(channels, channelId);
    }
    private okhttp3.Call channelCall(String category, Double channelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/categories/{category}"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()))
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.category+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call channelValidateBeforeCall(String category, Double channelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling channel(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling channel(Async)");
        }

        return channelCall(category, channelId, _callback);

    }


    private ApiResponse<Void> channelWithHttpInfo(String category, Double channelId) throws ApiException {
        okhttp3.Call localVarCall = channelValidateBeforeCall(category, channelId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call channelAsync(String category, Double channelId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = channelValidateBeforeCall(category, channelId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ChannelRequestBuilder {
        private final String category;
        private final Double channelId;

        private ChannelRequestBuilder(String category, double channelId) {
            this.category = category;
            this.channelId = channelId;
        }

        /**
         * Build call for channel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The channel was added to the category. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return channelCall(category, channelId, _callback);
        }


        /**
         * Execute channel request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The channel was added to the category. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            channelWithHttpInfo(category, channelId);
        }

        /**
         * Execute channel request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The channel was added to the category. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return channelWithHttpInfo(category, channelId);
        }

        /**
         * Execute channel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The channel was added to the category. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return channelAsync(category, channelId, _callback);
        }
    }

    /**
     * Add a channel to a specific category
     * This method adds the specified channel to a single category. The authenticated user must be the owner of the channel.
     * @param category The name of the category. (required)
     * @param channelId The ID of the channel. (required)
     * @return ChannelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The channel was added to the category. </td><td>  -  </td></tr>
     </table>
     */
    public ChannelRequestBuilder channel(String category, double channelId) throws IllegalArgumentException {
        if (category == null) throw new IllegalArgumentException("\"category\" is required but got null");
            

        
        return new ChannelRequestBuilder(category, channelId);
    }
    private okhttp3.Call getBelongingCategoriesCall(Double channelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/categories"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.category+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBelongingCategoriesValidateBeforeCall(Double channelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getBelongingCategories(Async)");
        }

        return getBelongingCategoriesCall(channelId, _callback);

    }


    private ApiResponse<List<Category>> getBelongingCategoriesWithHttpInfo(Double channelId) throws ApiException {
        okhttp3.Call localVarCall = getBelongingCategoriesValidateBeforeCall(channelId, null);
        Type localVarReturnType = new TypeToken<List<Category>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBelongingCategoriesAsync(Double channelId, final ApiCallback<List<Category>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBelongingCategoriesValidateBeforeCall(channelId, _callback);
        Type localVarReturnType = new TypeToken<List<Category>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBelongingCategoriesRequestBuilder {
        private final Double channelId;

        private GetBelongingCategoriesRequestBuilder(double channelId) {
            this.channelId = channelId;
        }

        /**
         * Build call for getBelongingCategories
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The categories were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBelongingCategoriesCall(channelId, _callback);
        }


        /**
         * Execute getBelongingCategories request
         * @return List&lt;Category&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The categories were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Category> execute() throws ApiException {
            ApiResponse<List<Category>> localVarResp = getBelongingCategoriesWithHttpInfo(channelId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBelongingCategories request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Category&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The categories were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Category>> executeWithHttpInfo() throws ApiException {
            return getBelongingCategoriesWithHttpInfo(channelId);
        }

        /**
         * Execute getBelongingCategories request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The categories were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Category>> _callback) throws ApiException {
            return getBelongingCategoriesAsync(channelId, _callback);
        }
    }

    /**
     * Get all the categories to which a channel belongs
     * This method returns every category to which the specified channel belongs.
     * @param channelId The ID of the channel. (required)
     * @return GetBelongingCategoriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The categories were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetBelongingCategoriesRequestBuilder getBelongingCategories(double channelId) throws IllegalArgumentException {
        
        return new GetBelongingCategoriesRequestBuilder(channelId);
    }
    private okhttp3.Call removeChannelFromCategoryCall(String category, Double channelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/categories/{category}"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()))
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.category+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeChannelFromCategoryValidateBeforeCall(String category, Double channelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling removeChannelFromCategory(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling removeChannelFromCategory(Async)");
        }

        return removeChannelFromCategoryCall(category, channelId, _callback);

    }


    private ApiResponse<Void> removeChannelFromCategoryWithHttpInfo(String category, Double channelId) throws ApiException {
        okhttp3.Call localVarCall = removeChannelFromCategoryValidateBeforeCall(category, channelId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeChannelFromCategoryAsync(String category, Double channelId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeChannelFromCategoryValidateBeforeCall(category, channelId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveChannelFromCategoryRequestBuilder {
        private final String category;
        private final Double channelId;

        private RemoveChannelFromCategoryRequestBuilder(String category, double channelId) {
            this.category = category;
            this.channelId = channelId;
        }

        /**
         * Build call for removeChannelFromCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The channel was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeChannelFromCategoryCall(category, channelId, _callback);
        }


        /**
         * Execute removeChannelFromCategory request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The channel was removed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeChannelFromCategoryWithHttpInfo(category, channelId);
        }

        /**
         * Execute removeChannelFromCategory request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The channel was removed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeChannelFromCategoryWithHttpInfo(category, channelId);
        }

        /**
         * Execute removeChannelFromCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The channel was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeChannelFromCategoryAsync(category, channelId, _callback);
        }
    }

    /**
     * Remove a channel from a category
     * This method removes a channel from the specified category. The authenticated user must be the owner of the channel.
     * @param category The name of the category. (required)
     * @param channelId The ID of the channel. (required)
     * @return RemoveChannelFromCategoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The channel was removed. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveChannelFromCategoryRequestBuilder removeChannelFromCategory(String category, double channelId) throws IllegalArgumentException {
        if (category == null) throw new IllegalArgumentException("\"category\" is required but got null");
            

        
        return new RemoveChannelFromCategoryRequestBuilder(category, channelId);
    }
}
