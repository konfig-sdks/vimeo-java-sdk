/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.LiveEventDestination;
import com.konfigthis.client.model.LiveEventDestinationsCreateDestinationRequest;
import com.konfigthis.client.model.LiveEventDestinationsCreateEventDestinationRequest;
import com.konfigthis.client.model.LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest;
import com.konfigthis.client.model.LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest1;
import com.konfigthis.client.model.LiveEventDestinationsUpdateDestinationRequest;
import com.konfigthis.client.model.OttDestination;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LiveEventDestinationsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LiveEventDestinationsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LiveEventDestinationsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createDestinationCall(Double liveEventId, LiveEventDestinationsCreateDestinationRequest liveEventDestinationsCreateDestinationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = liveEventDestinationsCreateDestinationRequest;

        // create path and map variables
        String localVarPath = "/me/live_events/{live_event_id}/destinations"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.live.simulcast.destination+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.live.simulcast.destination+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDestinationValidateBeforeCall(Double liveEventId, LiveEventDestinationsCreateDestinationRequest liveEventDestinationsCreateDestinationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling createDestination(Async)");
        }

        // verify the required parameter 'liveEventDestinationsCreateDestinationRequest' is set
        if (liveEventDestinationsCreateDestinationRequest == null) {
            throw new ApiException("Missing the required parameter 'liveEventDestinationsCreateDestinationRequest' when calling createDestination(Async)");
        }

        return createDestinationCall(liveEventId, liveEventDestinationsCreateDestinationRequest, _callback);

    }


    private ApiResponse<LiveEventDestination> createDestinationWithHttpInfo(Double liveEventId, LiveEventDestinationsCreateDestinationRequest liveEventDestinationsCreateDestinationRequest) throws ApiException {
        okhttp3.Call localVarCall = createDestinationValidateBeforeCall(liveEventId, liveEventDestinationsCreateDestinationRequest, null);
        Type localVarReturnType = new TypeToken<LiveEventDestination>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createDestinationAsync(Double liveEventId, LiveEventDestinationsCreateDestinationRequest liveEventDestinationsCreateDestinationRequest, final ApiCallback<LiveEventDestination> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDestinationValidateBeforeCall(liveEventId, liveEventDestinationsCreateDestinationRequest, _callback);
        Type localVarReturnType = new TypeToken<LiveEventDestination>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateDestinationRequestBuilder {
        private final String displayName;
        private final String serviceName;
        private final String type;
        private final Double liveEventId;
        private Boolean isEnabled;
        private String privacy;
        private String providerDestinationId;
        private String providerVideoId;
        private Double scheduledAt;
        private String streamKey;
        private String streamUrl;

        private CreateDestinationRequestBuilder(String displayName, String serviceName, String type, double liveEventId) {
            this.displayName = displayName;
            this.serviceName = serviceName;
            this.type = type;
            this.liveEventId = liveEventId;
        }

        /**
         * Set isEnabled
         * @param isEnabled Whether the destination is enabled for simulcasting. (optional)
         * @return CreateDestinationRequestBuilder
         */
        public CreateDestinationRequestBuilder isEnabled(Boolean isEnabled) {
            this.isEnabled = isEnabled;
            return this;
        }
        
        /**
         * Set privacy
         * @param privacy The privacy setting of the destination. Be sure to choose a value that corresponds to your service.  Option descriptions:  * &#x60;CONNECTIONS&#x60; - The privacy setting is &#x60;CONNECTIONS&#x60; for LinkedIn.  * &#x60;PUBLIC&#x60; - The privacy setting is &#x60;PUBLIC&#x60; for LinkedIn.  * &#x60;all_friends&#x60; - The privacy setting is &#x60;all_friends&#x60; for Facebook.  * &#x60;everyone&#x60; - The privacy setting is &#x60;everyone&#x60; for Facebook.  * &#x60;private&#x60; - The privacy setting is &#x60;private&#x60; for YouTube.  * &#x60;public&#x60; - The privacy setting is &#x60;public&#x60; for YouTube.  * &#x60;self&#x60; - The privacy setting is &#x60;self&#x60; for Facebook.  * &#x60;unlisted&#x60; - The privacy setting is &#x60;unlisted&#x60; for YouTube.  (optional)
         * @return CreateDestinationRequestBuilder
         */
        public CreateDestinationRequestBuilder privacy(String privacy) {
            this.privacy = privacy;
            return this;
        }
        
        /**
         * Set providerDestinationId
         * @param providerDestinationId The ID of the destination on the specified service, such as the YouTube channel ID or the Facebook page ID. (optional)
         * @return CreateDestinationRequestBuilder
         */
        public CreateDestinationRequestBuilder providerDestinationId(String providerDestinationId) {
            this.providerDestinationId = providerDestinationId;
            return this;
        }
        
        /**
         * Set providerVideoId
         * @param providerVideoId The ID of the scheduled video. (optional)
         * @return CreateDestinationRequestBuilder
         */
        public CreateDestinationRequestBuilder providerVideoId(String providerVideoId) {
            this.providerVideoId = providerVideoId;
            return this;
        }
        
        /**
         * Set scheduledAt
         * @param scheduledAt The time in Unix timestamp format when live streaming is scheduled to start. (optional)
         * @return CreateDestinationRequestBuilder
         */
        public CreateDestinationRequestBuilder scheduledAt(Double scheduledAt) {
            this.scheduledAt = scheduledAt;
            return this;
        }
        
        /**
         * Set streamKey
         * @param streamKey The RTMP stream key. (optional)
         * @return CreateDestinationRequestBuilder
         */
        public CreateDestinationRequestBuilder streamKey(String streamKey) {
            this.streamKey = streamKey;
            return this;
        }
        
        /**
         * Set streamUrl
         * @param streamUrl The RTMP URL for receiving the video stream. (optional)
         * @return CreateDestinationRequestBuilder
         */
        public CreateDestinationRequestBuilder streamUrl(String streamUrl) {
            this.streamUrl = streamUrl;
            return this;
        }
        
        /**
         * Build call for createDestination
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destination was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LiveEventDestinationsCreateDestinationRequest liveEventDestinationsCreateDestinationRequest = buildBodyParams();
            return createDestinationCall(liveEventId, liveEventDestinationsCreateDestinationRequest, _callback);
        }

        private LiveEventDestinationsCreateDestinationRequest buildBodyParams() {
            LiveEventDestinationsCreateDestinationRequest liveEventDestinationsCreateDestinationRequest = new LiveEventDestinationsCreateDestinationRequest();
            liveEventDestinationsCreateDestinationRequest.displayName(this.displayName);
            liveEventDestinationsCreateDestinationRequest.isEnabled(this.isEnabled);
            if (this.privacy != null)
            liveEventDestinationsCreateDestinationRequest.privacy(LiveEventDestinationsCreateDestinationRequest.PrivacyEnum.fromValue(this.privacy));
            liveEventDestinationsCreateDestinationRequest.providerDestinationId(this.providerDestinationId);
            liveEventDestinationsCreateDestinationRequest.providerVideoId(this.providerVideoId);
            liveEventDestinationsCreateDestinationRequest.scheduledAt(this.scheduledAt);
            if (this.serviceName != null)
            liveEventDestinationsCreateDestinationRequest.serviceName(LiveEventDestinationsCreateDestinationRequest.ServiceNameEnum.fromValue(this.serviceName));
            liveEventDestinationsCreateDestinationRequest.streamKey(this.streamKey);
            liveEventDestinationsCreateDestinationRequest.streamUrl(this.streamUrl);
            if (this.type != null)
            liveEventDestinationsCreateDestinationRequest.type(LiveEventDestinationsCreateDestinationRequest.TypeEnum.fromValue(this.type));
            return liveEventDestinationsCreateDestinationRequest;
        }

        /**
         * Execute createDestination request
         * @return LiveEventDestination
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destination was created. </td><td>  -  </td></tr>
         </table>
         */
        public LiveEventDestination execute() throws ApiException {
            LiveEventDestinationsCreateDestinationRequest liveEventDestinationsCreateDestinationRequest = buildBodyParams();
            ApiResponse<LiveEventDestination> localVarResp = createDestinationWithHttpInfo(liveEventId, liveEventDestinationsCreateDestinationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createDestination request with HTTP info returned
         * @return ApiResponse&lt;LiveEventDestination&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destination was created. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LiveEventDestination> executeWithHttpInfo() throws ApiException {
            LiveEventDestinationsCreateDestinationRequest liveEventDestinationsCreateDestinationRequest = buildBodyParams();
            return createDestinationWithHttpInfo(liveEventId, liveEventDestinationsCreateDestinationRequest);
        }

        /**
         * Execute createDestination request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destination was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LiveEventDestination> _callback) throws ApiException {
            LiveEventDestinationsCreateDestinationRequest liveEventDestinationsCreateDestinationRequest = buildBodyParams();
            return createDestinationAsync(liveEventId, liveEventDestinationsCreateDestinationRequest, _callback);
        }
    }

    /**
     * Create a live event destination
     * This method creates a destination for the specified event. The authenticated user must be the owner of the event.
     * @param liveEventId The ID of the event. (required)
     * @param liveEventDestinationsCreateDestinationRequest  (required)
     * @return CreateDestinationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The event destination was created. </td><td>  -  </td></tr>
     </table>
     */
    public CreateDestinationRequestBuilder createDestination(String displayName, String serviceName, String type, double liveEventId) throws IllegalArgumentException {
        if (displayName == null) throw new IllegalArgumentException("\"displayName\" is required but got null");
            

        if (serviceName == null) throw new IllegalArgumentException("\"serviceName\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        
        return new CreateDestinationRequestBuilder(displayName, serviceName, type, liveEventId);
    }
    private okhttp3.Call createEventDestinationCall(Double liveEventId, Double userId, LiveEventDestinationsCreateEventDestinationRequest liveEventDestinationsCreateEventDestinationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = liveEventDestinationsCreateEventDestinationRequest;

        // create path and map variables
        String localVarPath = "/users/{user_id}/live_events/{live_event_id}/destinations"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.live.simulcast.destination+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.live.simulcast.destination+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEventDestinationValidateBeforeCall(Double liveEventId, Double userId, LiveEventDestinationsCreateEventDestinationRequest liveEventDestinationsCreateEventDestinationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling createEventDestination(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createEventDestination(Async)");
        }

        // verify the required parameter 'liveEventDestinationsCreateEventDestinationRequest' is set
        if (liveEventDestinationsCreateEventDestinationRequest == null) {
            throw new ApiException("Missing the required parameter 'liveEventDestinationsCreateEventDestinationRequest' when calling createEventDestination(Async)");
        }

        return createEventDestinationCall(liveEventId, userId, liveEventDestinationsCreateEventDestinationRequest, _callback);

    }


    private ApiResponse<LiveEventDestination> createEventDestinationWithHttpInfo(Double liveEventId, Double userId, LiveEventDestinationsCreateEventDestinationRequest liveEventDestinationsCreateEventDestinationRequest) throws ApiException {
        okhttp3.Call localVarCall = createEventDestinationValidateBeforeCall(liveEventId, userId, liveEventDestinationsCreateEventDestinationRequest, null);
        Type localVarReturnType = new TypeToken<LiveEventDestination>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createEventDestinationAsync(Double liveEventId, Double userId, LiveEventDestinationsCreateEventDestinationRequest liveEventDestinationsCreateEventDestinationRequest, final ApiCallback<LiveEventDestination> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEventDestinationValidateBeforeCall(liveEventId, userId, liveEventDestinationsCreateEventDestinationRequest, _callback);
        Type localVarReturnType = new TypeToken<LiveEventDestination>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateEventDestinationRequestBuilder {
        private final String displayName;
        private final String serviceName;
        private final String type;
        private final Double liveEventId;
        private final Double userId;
        private Boolean isEnabled;
        private String privacy;
        private String providerDestinationId;
        private String providerVideoId;
        private Double scheduledAt;
        private String streamKey;
        private String streamUrl;

        private CreateEventDestinationRequestBuilder(String displayName, String serviceName, String type, double liveEventId, double userId) {
            this.displayName = displayName;
            this.serviceName = serviceName;
            this.type = type;
            this.liveEventId = liveEventId;
            this.userId = userId;
        }

        /**
         * Set isEnabled
         * @param isEnabled Whether the destination is enabled for simulcasting. (optional)
         * @return CreateEventDestinationRequestBuilder
         */
        public CreateEventDestinationRequestBuilder isEnabled(Boolean isEnabled) {
            this.isEnabled = isEnabled;
            return this;
        }
        
        /**
         * Set privacy
         * @param privacy The privacy setting of the destination. Be sure to choose a value that corresponds to your service.  Option descriptions:  * &#x60;CONNECTIONS&#x60; - The privacy setting is &#x60;CONNECTIONS&#x60; for LinkedIn.  * &#x60;PUBLIC&#x60; - The privacy setting is &#x60;PUBLIC&#x60; for LinkedIn.  * &#x60;all_friends&#x60; - The privacy setting is &#x60;all_friends&#x60; for Facebook.  * &#x60;everyone&#x60; - The privacy setting is &#x60;everyone&#x60; for Facebook.  * &#x60;private&#x60; - The privacy setting is &#x60;private&#x60; for YouTube.  * &#x60;public&#x60; - The privacy setting is &#x60;public&#x60; for YouTube.  * &#x60;self&#x60; - The privacy setting is &#x60;self&#x60; for Facebook.  * &#x60;unlisted&#x60; - The privacy setting is &#x60;unlisted&#x60; for YouTube.  (optional)
         * @return CreateEventDestinationRequestBuilder
         */
        public CreateEventDestinationRequestBuilder privacy(String privacy) {
            this.privacy = privacy;
            return this;
        }
        
        /**
         * Set providerDestinationId
         * @param providerDestinationId The ID of the destination on the specified service, such as the YouTube channel ID or the Facebook page ID. (optional)
         * @return CreateEventDestinationRequestBuilder
         */
        public CreateEventDestinationRequestBuilder providerDestinationId(String providerDestinationId) {
            this.providerDestinationId = providerDestinationId;
            return this;
        }
        
        /**
         * Set providerVideoId
         * @param providerVideoId The ID of the scheduled video. (optional)
         * @return CreateEventDestinationRequestBuilder
         */
        public CreateEventDestinationRequestBuilder providerVideoId(String providerVideoId) {
            this.providerVideoId = providerVideoId;
            return this;
        }
        
        /**
         * Set scheduledAt
         * @param scheduledAt The time in Unix timestamp format when live streaming is scheduled to start. (optional)
         * @return CreateEventDestinationRequestBuilder
         */
        public CreateEventDestinationRequestBuilder scheduledAt(Double scheduledAt) {
            this.scheduledAt = scheduledAt;
            return this;
        }
        
        /**
         * Set streamKey
         * @param streamKey The RTMP stream key. (optional)
         * @return CreateEventDestinationRequestBuilder
         */
        public CreateEventDestinationRequestBuilder streamKey(String streamKey) {
            this.streamKey = streamKey;
            return this;
        }
        
        /**
         * Set streamUrl
         * @param streamUrl The RTMP URL for receiving the video stream. (optional)
         * @return CreateEventDestinationRequestBuilder
         */
        public CreateEventDestinationRequestBuilder streamUrl(String streamUrl) {
            this.streamUrl = streamUrl;
            return this;
        }
        
        /**
         * Build call for createEventDestination
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destination was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LiveEventDestinationsCreateEventDestinationRequest liveEventDestinationsCreateEventDestinationRequest = buildBodyParams();
            return createEventDestinationCall(liveEventId, userId, liveEventDestinationsCreateEventDestinationRequest, _callback);
        }

        private LiveEventDestinationsCreateEventDestinationRequest buildBodyParams() {
            LiveEventDestinationsCreateEventDestinationRequest liveEventDestinationsCreateEventDestinationRequest = new LiveEventDestinationsCreateEventDestinationRequest();
            liveEventDestinationsCreateEventDestinationRequest.displayName(this.displayName);
            liveEventDestinationsCreateEventDestinationRequest.isEnabled(this.isEnabled);
            if (this.privacy != null)
            liveEventDestinationsCreateEventDestinationRequest.privacy(LiveEventDestinationsCreateEventDestinationRequest.PrivacyEnum.fromValue(this.privacy));
            liveEventDestinationsCreateEventDestinationRequest.providerDestinationId(this.providerDestinationId);
            liveEventDestinationsCreateEventDestinationRequest.providerVideoId(this.providerVideoId);
            liveEventDestinationsCreateEventDestinationRequest.scheduledAt(this.scheduledAt);
            if (this.serviceName != null)
            liveEventDestinationsCreateEventDestinationRequest.serviceName(LiveEventDestinationsCreateEventDestinationRequest.ServiceNameEnum.fromValue(this.serviceName));
            liveEventDestinationsCreateEventDestinationRequest.streamKey(this.streamKey);
            liveEventDestinationsCreateEventDestinationRequest.streamUrl(this.streamUrl);
            if (this.type != null)
            liveEventDestinationsCreateEventDestinationRequest.type(LiveEventDestinationsCreateEventDestinationRequest.TypeEnum.fromValue(this.type));
            return liveEventDestinationsCreateEventDestinationRequest;
        }

        /**
         * Execute createEventDestination request
         * @return LiveEventDestination
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destination was created. </td><td>  -  </td></tr>
         </table>
         */
        public LiveEventDestination execute() throws ApiException {
            LiveEventDestinationsCreateEventDestinationRequest liveEventDestinationsCreateEventDestinationRequest = buildBodyParams();
            ApiResponse<LiveEventDestination> localVarResp = createEventDestinationWithHttpInfo(liveEventId, userId, liveEventDestinationsCreateEventDestinationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createEventDestination request with HTTP info returned
         * @return ApiResponse&lt;LiveEventDestination&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destination was created. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LiveEventDestination> executeWithHttpInfo() throws ApiException {
            LiveEventDestinationsCreateEventDestinationRequest liveEventDestinationsCreateEventDestinationRequest = buildBodyParams();
            return createEventDestinationWithHttpInfo(liveEventId, userId, liveEventDestinationsCreateEventDestinationRequest);
        }

        /**
         * Execute createEventDestination request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destination was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LiveEventDestination> _callback) throws ApiException {
            LiveEventDestinationsCreateEventDestinationRequest liveEventDestinationsCreateEventDestinationRequest = buildBodyParams();
            return createEventDestinationAsync(liveEventId, userId, liveEventDestinationsCreateEventDestinationRequest, _callback);
        }
    }

    /**
     * Create a live event destination
     * This method creates a destination for the specified event. The authenticated user must be the owner of the event.
     * @param liveEventId The ID of the event. (required)
     * @param userId The ID of the user. (required)
     * @param liveEventDestinationsCreateEventDestinationRequest  (required)
     * @return CreateEventDestinationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The event destination was created. </td><td>  -  </td></tr>
     </table>
     */
    public CreateEventDestinationRequestBuilder createEventDestination(String displayName, String serviceName, String type, double liveEventId, double userId) throws IllegalArgumentException {
        if (displayName == null) throw new IllegalArgumentException("\"displayName\" is required but got null");
            

        if (serviceName == null) throw new IllegalArgumentException("\"serviceName\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        
        
        return new CreateEventDestinationRequestBuilder(displayName, serviceName, type, liveEventId, userId);
    }
    private okhttp3.Call createOneTimeLiveEventDestinationCall(Double videoId, LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest liveEventDestinationsCreateOneTimeLiveEventDestinationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = liveEventDestinationsCreateOneTimeLiveEventDestinationRequest;

        // create path and map variables
        String localVarPath = "/me/videos/{video_id}/destinations"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.live.simulcast.destination+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.live.simulcast.destination+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOneTimeLiveEventDestinationValidateBeforeCall(Double videoId, LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest liveEventDestinationsCreateOneTimeLiveEventDestinationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling createOneTimeLiveEventDestination(Async)");
        }

        // verify the required parameter 'liveEventDestinationsCreateOneTimeLiveEventDestinationRequest' is set
        if (liveEventDestinationsCreateOneTimeLiveEventDestinationRequest == null) {
            throw new ApiException("Missing the required parameter 'liveEventDestinationsCreateOneTimeLiveEventDestinationRequest' when calling createOneTimeLiveEventDestination(Async)");
        }

        return createOneTimeLiveEventDestinationCall(videoId, liveEventDestinationsCreateOneTimeLiveEventDestinationRequest, _callback);

    }


    private ApiResponse<Void> createOneTimeLiveEventDestinationWithHttpInfo(Double videoId, LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest liveEventDestinationsCreateOneTimeLiveEventDestinationRequest) throws ApiException {
        okhttp3.Call localVarCall = createOneTimeLiveEventDestinationValidateBeforeCall(videoId, liveEventDestinationsCreateOneTimeLiveEventDestinationRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createOneTimeLiveEventDestinationAsync(Double videoId, LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest liveEventDestinationsCreateOneTimeLiveEventDestinationRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOneTimeLiveEventDestinationValidateBeforeCall(videoId, liveEventDestinationsCreateOneTimeLiveEventDestinationRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateOneTimeLiveEventDestinationRequestBuilder {
        private final String displayName;
        private final String serviceName;
        private final String type;
        private final Double videoId;
        private Boolean isEnabled;
        private String privacy;
        private String providerDestinationId;
        private String providerVideoId;
        private Double scheduledAt;
        private String streamKey;
        private String streamUrl;

        private CreateOneTimeLiveEventDestinationRequestBuilder(String displayName, String serviceName, String type, double videoId) {
            this.displayName = displayName;
            this.serviceName = serviceName;
            this.type = type;
            this.videoId = videoId;
        }

        /**
         * Set isEnabled
         * @param isEnabled Whether the destination is enabled for simulcasting. (optional)
         * @return CreateOneTimeLiveEventDestinationRequestBuilder
         */
        public CreateOneTimeLiveEventDestinationRequestBuilder isEnabled(Boolean isEnabled) {
            this.isEnabled = isEnabled;
            return this;
        }
        
        /**
         * Set privacy
         * @param privacy The privacy setting of the destination. Be sure to choose a value that corresponds to your service.  Option descriptions:  * &#x60;CONNECTIONS&#x60; - The privacy setting is &#x60;CONNECTIONS&#x60; for LinkedIn.  * &#x60;PUBLIC&#x60; - The privacy setting is &#x60;PUBLIC&#x60; for LinkedIn.  * &#x60;all_friends&#x60; - The privacy setting is &#x60;all_friends&#x60; for Facebook.  * &#x60;everyone&#x60; - The privacy setting is &#x60;everyone&#x60; for Facebook.  * &#x60;private&#x60; - The privacy setting is &#x60;private&#x60; for YouTube.  * &#x60;public&#x60; - The privacy setting is &#x60;public&#x60; for YouTube.  * &#x60;self&#x60; - The privacy setting is &#x60;self&#x60; for Facebook.  * &#x60;unlisted&#x60; - The privacy setting is &#x60;unlisted&#x60; for YouTube.  (optional)
         * @return CreateOneTimeLiveEventDestinationRequestBuilder
         */
        public CreateOneTimeLiveEventDestinationRequestBuilder privacy(String privacy) {
            this.privacy = privacy;
            return this;
        }
        
        /**
         * Set providerDestinationId
         * @param providerDestinationId The ID of the destination on the specified service, such as the YouTube channel ID or the Facebook page ID. (optional)
         * @return CreateOneTimeLiveEventDestinationRequestBuilder
         */
        public CreateOneTimeLiveEventDestinationRequestBuilder providerDestinationId(String providerDestinationId) {
            this.providerDestinationId = providerDestinationId;
            return this;
        }
        
        /**
         * Set providerVideoId
         * @param providerVideoId The ID of the scheduled video. (optional)
         * @return CreateOneTimeLiveEventDestinationRequestBuilder
         */
        public CreateOneTimeLiveEventDestinationRequestBuilder providerVideoId(String providerVideoId) {
            this.providerVideoId = providerVideoId;
            return this;
        }
        
        /**
         * Set scheduledAt
         * @param scheduledAt The time in Unix timestamp format when live streaming is scheduled to start. (optional)
         * @return CreateOneTimeLiveEventDestinationRequestBuilder
         */
        public CreateOneTimeLiveEventDestinationRequestBuilder scheduledAt(Double scheduledAt) {
            this.scheduledAt = scheduledAt;
            return this;
        }
        
        /**
         * Set streamKey
         * @param streamKey The RTMP stream key. (optional)
         * @return CreateOneTimeLiveEventDestinationRequestBuilder
         */
        public CreateOneTimeLiveEventDestinationRequestBuilder streamKey(String streamKey) {
            this.streamKey = streamKey;
            return this;
        }
        
        /**
         * Set streamUrl
         * @param streamUrl The RTMP URL for receiving the video stream. (optional)
         * @return CreateOneTimeLiveEventDestinationRequestBuilder
         */
        public CreateOneTimeLiveEventDestinationRequestBuilder streamUrl(String streamUrl) {
            this.streamUrl = streamUrl;
            return this;
        }
        
        /**
         * Build call for createOneTimeLiveEventDestination
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest liveEventDestinationsCreateOneTimeLiveEventDestinationRequest = buildBodyParams();
            return createOneTimeLiveEventDestinationCall(videoId, liveEventDestinationsCreateOneTimeLiveEventDestinationRequest, _callback);
        }

        private LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest buildBodyParams() {
            LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest liveEventDestinationsCreateOneTimeLiveEventDestinationRequest = new LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest();
            liveEventDestinationsCreateOneTimeLiveEventDestinationRequest.displayName(this.displayName);
            liveEventDestinationsCreateOneTimeLiveEventDestinationRequest.isEnabled(this.isEnabled);
            if (this.privacy != null)
            liveEventDestinationsCreateOneTimeLiveEventDestinationRequest.privacy(LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest.PrivacyEnum.fromValue(this.privacy));
            liveEventDestinationsCreateOneTimeLiveEventDestinationRequest.providerDestinationId(this.providerDestinationId);
            liveEventDestinationsCreateOneTimeLiveEventDestinationRequest.providerVideoId(this.providerVideoId);
            liveEventDestinationsCreateOneTimeLiveEventDestinationRequest.scheduledAt(this.scheduledAt);
            if (this.serviceName != null)
            liveEventDestinationsCreateOneTimeLiveEventDestinationRequest.serviceName(LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest.ServiceNameEnum.fromValue(this.serviceName));
            liveEventDestinationsCreateOneTimeLiveEventDestinationRequest.streamKey(this.streamKey);
            liveEventDestinationsCreateOneTimeLiveEventDestinationRequest.streamUrl(this.streamUrl);
            if (this.type != null)
            liveEventDestinationsCreateOneTimeLiveEventDestinationRequest.type(LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest.TypeEnum.fromValue(this.type));
            return liveEventDestinationsCreateOneTimeLiveEventDestinationRequest;
        }

        /**
         * Execute createOneTimeLiveEventDestination request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest liveEventDestinationsCreateOneTimeLiveEventDestinationRequest = buildBodyParams();
            createOneTimeLiveEventDestinationWithHttpInfo(videoId, liveEventDestinationsCreateOneTimeLiveEventDestinationRequest);
        }

        /**
         * Execute createOneTimeLiveEventDestination request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest liveEventDestinationsCreateOneTimeLiveEventDestinationRequest = buildBodyParams();
            return createOneTimeLiveEventDestinationWithHttpInfo(videoId, liveEventDestinationsCreateOneTimeLiveEventDestinationRequest);
        }

        /**
         * Execute createOneTimeLiveEventDestination request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest liveEventDestinationsCreateOneTimeLiveEventDestinationRequest = buildBodyParams();
            return createOneTimeLiveEventDestinationAsync(videoId, liveEventDestinationsCreateOneTimeLiveEventDestinationRequest, _callback);
        }
    }

    /**
     * Create a one-time live event destination
     * This method creates a destination for the specified event. The authenticated user must be the owner of the event.
     * @param videoId The ID of the video. (required)
     * @param liveEventDestinationsCreateOneTimeLiveEventDestinationRequest  (required)
     * @return CreateOneTimeLiveEventDestinationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateOneTimeLiveEventDestinationRequestBuilder createOneTimeLiveEventDestination(String displayName, String serviceName, String type, double videoId) throws IllegalArgumentException {
        if (displayName == null) throw new IllegalArgumentException("\"displayName\" is required but got null");
            

        if (serviceName == null) throw new IllegalArgumentException("\"serviceName\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        
        return new CreateOneTimeLiveEventDestinationRequestBuilder(displayName, serviceName, type, videoId);
    }
    private okhttp3.Call createOneTimeLiveEventDestination_0Call(Double userId, Double videoId, LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest1 liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1;

        // create path and map variables
        String localVarPath = "/users/{user_id}/videos/{video_id}/destinations"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.live.simulcast.destination+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.live.simulcast.destination+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOneTimeLiveEventDestination_0ValidateBeforeCall(Double userId, Double videoId, LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest1 liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createOneTimeLiveEventDestination_0(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling createOneTimeLiveEventDestination_0(Async)");
        }

        // verify the required parameter 'liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1' is set
        if (liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1 == null) {
            throw new ApiException("Missing the required parameter 'liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1' when calling createOneTimeLiveEventDestination_0(Async)");
        }

        return createOneTimeLiveEventDestination_0Call(userId, videoId, liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1, _callback);

    }


    private ApiResponse<Void> createOneTimeLiveEventDestination_0WithHttpInfo(Double userId, Double videoId, LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest1 liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1) throws ApiException {
        okhttp3.Call localVarCall = createOneTimeLiveEventDestination_0ValidateBeforeCall(userId, videoId, liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createOneTimeLiveEventDestination_0Async(Double userId, Double videoId, LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest1 liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOneTimeLiveEventDestination_0ValidateBeforeCall(userId, videoId, liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateOneTimeLiveEventDestination0RequestBuilder {
        private final String displayName;
        private final String serviceName;
        private final String type;
        private final Double userId;
        private final Double videoId;
        private Boolean isEnabled;
        private String privacy;
        private String providerDestinationId;
        private String providerVideoId;
        private Double scheduledAt;
        private String streamKey;
        private String streamUrl;

        private CreateOneTimeLiveEventDestination0RequestBuilder(String displayName, String serviceName, String type, double userId, double videoId) {
            this.displayName = displayName;
            this.serviceName = serviceName;
            this.type = type;
            this.userId = userId;
            this.videoId = videoId;
        }

        /**
         * Set isEnabled
         * @param isEnabled Whether the destination is enabled for simulcasting. (optional)
         * @return CreateOneTimeLiveEventDestination0RequestBuilder
         */
        public CreateOneTimeLiveEventDestination0RequestBuilder isEnabled(Boolean isEnabled) {
            this.isEnabled = isEnabled;
            return this;
        }
        
        /**
         * Set privacy
         * @param privacy The privacy setting of the destination. Be sure to choose a value that corresponds to your service.  Option descriptions:  * &#x60;CONNECTIONS&#x60; - The privacy setting is &#x60;CONNECTIONS&#x60; for LinkedIn.  * &#x60;PUBLIC&#x60; - The privacy setting is &#x60;PUBLIC&#x60; for LinkedIn.  * &#x60;all_friends&#x60; - The privacy setting is &#x60;all_friends&#x60; for Facebook.  * &#x60;everyone&#x60; - The privacy setting is &#x60;everyone&#x60; for Facebook.  * &#x60;private&#x60; - The privacy setting is &#x60;private&#x60; for YouTube.  * &#x60;public&#x60; - The privacy setting is &#x60;public&#x60; for YouTube.  * &#x60;self&#x60; - The privacy setting is &#x60;self&#x60; for Facebook.  * &#x60;unlisted&#x60; - The privacy setting is &#x60;unlisted&#x60; for YouTube.  (optional)
         * @return CreateOneTimeLiveEventDestination0RequestBuilder
         */
        public CreateOneTimeLiveEventDestination0RequestBuilder privacy(String privacy) {
            this.privacy = privacy;
            return this;
        }
        
        /**
         * Set providerDestinationId
         * @param providerDestinationId The ID of the destination on the specified service, such as the YouTube channel ID or the Facebook page ID. (optional)
         * @return CreateOneTimeLiveEventDestination0RequestBuilder
         */
        public CreateOneTimeLiveEventDestination0RequestBuilder providerDestinationId(String providerDestinationId) {
            this.providerDestinationId = providerDestinationId;
            return this;
        }
        
        /**
         * Set providerVideoId
         * @param providerVideoId The ID of the scheduled video. (optional)
         * @return CreateOneTimeLiveEventDestination0RequestBuilder
         */
        public CreateOneTimeLiveEventDestination0RequestBuilder providerVideoId(String providerVideoId) {
            this.providerVideoId = providerVideoId;
            return this;
        }
        
        /**
         * Set scheduledAt
         * @param scheduledAt The time in Unix timestamp format when live streaming is scheduled to start. (optional)
         * @return CreateOneTimeLiveEventDestination0RequestBuilder
         */
        public CreateOneTimeLiveEventDestination0RequestBuilder scheduledAt(Double scheduledAt) {
            this.scheduledAt = scheduledAt;
            return this;
        }
        
        /**
         * Set streamKey
         * @param streamKey The RTMP stream key. (optional)
         * @return CreateOneTimeLiveEventDestination0RequestBuilder
         */
        public CreateOneTimeLiveEventDestination0RequestBuilder streamKey(String streamKey) {
            this.streamKey = streamKey;
            return this;
        }
        
        /**
         * Set streamUrl
         * @param streamUrl The RTMP URL for receiving the video stream. (optional)
         * @return CreateOneTimeLiveEventDestination0RequestBuilder
         */
        public CreateOneTimeLiveEventDestination0RequestBuilder streamUrl(String streamUrl) {
            this.streamUrl = streamUrl;
            return this;
        }
        
        /**
         * Build call for createOneTimeLiveEventDestination_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest1 liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1 = buildBodyParams();
            return createOneTimeLiveEventDestination_0Call(userId, videoId, liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1, _callback);
        }

        private LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest1 buildBodyParams() {
            LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest1 liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1 = new LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest1();
            liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1.displayName(this.displayName);
            liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1.isEnabled(this.isEnabled);
            if (this.privacy != null)
            liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1.privacy(LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest1.PrivacyEnum.fromValue(this.privacy));
            liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1.providerDestinationId(this.providerDestinationId);
            liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1.providerVideoId(this.providerVideoId);
            liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1.scheduledAt(this.scheduledAt);
            if (this.serviceName != null)
            liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1.serviceName(LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest1.ServiceNameEnum.fromValue(this.serviceName));
            liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1.streamKey(this.streamKey);
            liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1.streamUrl(this.streamUrl);
            if (this.type != null)
            liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1.type(LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest1.TypeEnum.fromValue(this.type));
            return liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1;
        }

        /**
         * Execute createOneTimeLiveEventDestination_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest1 liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1 = buildBodyParams();
            createOneTimeLiveEventDestination_0WithHttpInfo(userId, videoId, liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1);
        }

        /**
         * Execute createOneTimeLiveEventDestination_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest1 liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1 = buildBodyParams();
            return createOneTimeLiveEventDestination_0WithHttpInfo(userId, videoId, liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1);
        }

        /**
         * Execute createOneTimeLiveEventDestination_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest1 liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1 = buildBodyParams();
            return createOneTimeLiveEventDestination_0Async(userId, videoId, liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1, _callback);
        }
    }

    /**
     * Create a one-time live event destination
     * This method creates a destination for the specified event. The authenticated user must be the owner of the event.
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @param liveEventDestinationsCreateOneTimeLiveEventDestinationRequest1  (required)
     * @return CreateOneTimeLiveEventDestination0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateOneTimeLiveEventDestination0RequestBuilder createOneTimeLiveEventDestination_0(String displayName, String serviceName, String type, double userId, double videoId) throws IllegalArgumentException {
        if (displayName == null) throw new IllegalArgumentException("\"displayName\" is required but got null");
            

        if (serviceName == null) throw new IllegalArgumentException("\"serviceName\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        
        
        return new CreateOneTimeLiveEventDestination0RequestBuilder(displayName, serviceName, type, userId, videoId);
    }
    private okhttp3.Call createOttDestinationCall(Double liveEventId, Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/live_events/{live_event_id}/ott_destinations"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.live.ott.destination+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOttDestinationValidateBeforeCall(Double liveEventId, Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling createOttDestination(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createOttDestination(Async)");
        }

        return createOttDestinationCall(liveEventId, userId, _callback);

    }


    private ApiResponse<OttDestination> createOttDestinationWithHttpInfo(Double liveEventId, Double userId) throws ApiException {
        okhttp3.Call localVarCall = createOttDestinationValidateBeforeCall(liveEventId, userId, null);
        Type localVarReturnType = new TypeToken<OttDestination>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createOttDestinationAsync(Double liveEventId, Double userId, final ApiCallback<OttDestination> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOttDestinationValidateBeforeCall(liveEventId, userId, _callback);
        Type localVarReturnType = new TypeToken<OttDestination>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateOttDestinationRequestBuilder {
        private final Double liveEventId;
        private final Double userId;

        private CreateOttDestinationRequestBuilder(double liveEventId, double userId) {
            this.liveEventId = liveEventId;
            this.userId = userId;
        }

        /**
         * Build call for createOttDestination
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The new OTT destination was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createOttDestinationCall(liveEventId, userId, _callback);
        }


        /**
         * Execute createOttDestination request
         * @return OttDestination
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The new OTT destination was created. </td><td>  -  </td></tr>
         </table>
         */
        public OttDestination execute() throws ApiException {
            ApiResponse<OttDestination> localVarResp = createOttDestinationWithHttpInfo(liveEventId, userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createOttDestination request with HTTP info returned
         * @return ApiResponse&lt;OttDestination&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The new OTT destination was created. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OttDestination> executeWithHttpInfo() throws ApiException {
            return createOttDestinationWithHttpInfo(liveEventId, userId);
        }

        /**
         * Execute createOttDestination request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The new OTT destination was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OttDestination> _callback) throws ApiException {
            return createOttDestinationAsync(liveEventId, userId, _callback);
        }
    }

    /**
     * Create a live event OTT destination
     * This method creates an OTT channel as the destination of the specified event. The authenticated user must be the owner of the event.
     * @param liveEventId The ID of the event. (required)
     * @param userId The ID of the user. (required)
     * @return CreateOttDestinationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new OTT destination was created. </td><td>  -  </td></tr>
     </table>
     */
    public CreateOttDestinationRequestBuilder createOttDestination(double liveEventId, double userId) throws IllegalArgumentException {
        
        
        return new CreateOttDestinationRequestBuilder(liveEventId, userId);
    }
    private okhttp3.Call deleteDestinationCall(Double destinationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/destination/{destination_id}"
            .replace("{" + "destination_id" + "}", localVarApiClient.escapeString(destinationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDestinationValidateBeforeCall(Double destinationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'destinationId' is set
        if (destinationId == null) {
            throw new ApiException("Missing the required parameter 'destinationId' when calling deleteDestination(Async)");
        }

        return deleteDestinationCall(destinationId, _callback);

    }


    private ApiResponse<Void> deleteDestinationWithHttpInfo(Double destinationId) throws ApiException {
        okhttp3.Call localVarCall = deleteDestinationValidateBeforeCall(destinationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteDestinationAsync(Double destinationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDestinationValidateBeforeCall(destinationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteDestinationRequestBuilder {
        private final Double destinationId;

        private DeleteDestinationRequestBuilder(double destinationId) {
            this.destinationId = destinationId;
        }

        /**
         * Build call for deleteDestination
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The event destination was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteDestinationCall(destinationId, _callback);
        }


        /**
         * Execute deleteDestination request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The event destination was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteDestinationWithHttpInfo(destinationId);
        }

        /**
         * Execute deleteDestination request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The event destination was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteDestinationWithHttpInfo(destinationId);
        }

        /**
         * Execute deleteDestination request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The event destination was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteDestinationAsync(destinationId, _callback);
        }
    }

    /**
     * Delete a live event destination
     * This method deletes the specified event destination belonging to the authenticated user.
     * @param destinationId The ID of the event destination. (required)
     * @return DeleteDestinationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The event destination was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDestinationRequestBuilder deleteDestination(double destinationId) throws IllegalArgumentException {
        
        return new DeleteDestinationRequestBuilder(destinationId);
    }
    private okhttp3.Call deleteOttDestinationCall(Double liveEventId, Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/live_events/{live_event_id}/ott_destination/{destination_id}"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.live.ott.destination+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOttDestinationValidateBeforeCall(Double liveEventId, Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling deleteOttDestination(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteOttDestination(Async)");
        }

        return deleteOttDestinationCall(liveEventId, userId, _callback);

    }


    private ApiResponse<Void> deleteOttDestinationWithHttpInfo(Double liveEventId, Double userId) throws ApiException {
        okhttp3.Call localVarCall = deleteOttDestinationValidateBeforeCall(liveEventId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteOttDestinationAsync(Double liveEventId, Double userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOttDestinationValidateBeforeCall(liveEventId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteOttDestinationRequestBuilder {
        private final Double liveEventId;
        private final Double userId;

        private DeleteOttDestinationRequestBuilder(double liveEventId, double userId) {
            this.liveEventId = liveEventId;
            this.userId = userId;
        }

        /**
         * Build call for deleteOttDestination
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The OTT destination was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteOttDestinationCall(liveEventId, userId, _callback);
        }


        /**
         * Execute deleteOttDestination request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The OTT destination was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteOttDestinationWithHttpInfo(liveEventId, userId);
        }

        /**
         * Execute deleteOttDestination request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The OTT destination was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteOttDestinationWithHttpInfo(liveEventId, userId);
        }

        /**
         * Execute deleteOttDestination request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The OTT destination was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteOttDestinationAsync(liveEventId, userId, _callback);
        }
    }

    /**
     * Delete a live event OTT destination
     * This method deletes an OTT channel as the destination of the specified event. The authenticated user must be the owner of the event.
     * @param liveEventId The ID of the event. (required)
     * @param userId The ID of the user. (required)
     * @return DeleteOttDestinationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The OTT destination was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteOttDestinationRequestBuilder deleteOttDestination(double liveEventId, double userId) throws IllegalArgumentException {
        
        
        return new DeleteOttDestinationRequestBuilder(liveEventId, userId);
    }
    private okhttp3.Call getAllAvailableDestinationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/destinations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.live.simulcast.destination+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllAvailableDestinationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllAvailableDestinationsCall(_callback);

    }


    private ApiResponse<Void> getAllAvailableDestinationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllAvailableDestinationsValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getAllAvailableDestinationsAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllAvailableDestinationsValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetAllAvailableDestinationsRequestBuilder {

        private GetAllAvailableDestinationsRequestBuilder() {
        }

        /**
         * Build call for getAllAvailableDestinations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destinations were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllAvailableDestinationsCall(_callback);
        }


        /**
         * Execute getAllAvailableDestinations request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destinations were returned. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getAllAvailableDestinationsWithHttpInfo();
        }

        /**
         * Execute getAllAvailableDestinations request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destinations were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getAllAvailableDestinationsWithHttpInfo();
        }

        /**
         * Execute getAllAvailableDestinations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destinations were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getAllAvailableDestinationsAsync(_callback);
        }
    }

    /**
     * Get all available live event destinations for the user to stream to
     * This method returns every available event destination for the authenticated user to stream to.
     * @return GetAllAvailableDestinationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The event destinations were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllAvailableDestinationsRequestBuilder getAllAvailableDestinations() throws IllegalArgumentException {
        return new GetAllAvailableDestinationsRequestBuilder();
    }
    private okhttp3.Call getAllAvailableDestinations_0Call(Double liveEventId, Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/live_events/{live_event_id}/destinations"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.live.simulcast.destination+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllAvailableDestinations_0ValidateBeforeCall(Double liveEventId, Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling getAllAvailableDestinations_0(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getAllAvailableDestinations_0(Async)");
        }

        return getAllAvailableDestinations_0Call(liveEventId, userId, _callback);

    }


    private ApiResponse<List<LiveEventDestination>> getAllAvailableDestinations_0WithHttpInfo(Double liveEventId, Double userId) throws ApiException {
        okhttp3.Call localVarCall = getAllAvailableDestinations_0ValidateBeforeCall(liveEventId, userId, null);
        Type localVarReturnType = new TypeToken<List<LiveEventDestination>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAvailableDestinations_0Async(Double liveEventId, Double userId, final ApiCallback<List<LiveEventDestination>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllAvailableDestinations_0ValidateBeforeCall(liveEventId, userId, _callback);
        Type localVarReturnType = new TypeToken<List<LiveEventDestination>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllAvailableDestinations0RequestBuilder {
        private final Double liveEventId;
        private final Double userId;

        private GetAllAvailableDestinations0RequestBuilder(double liveEventId, double userId) {
            this.liveEventId = liveEventId;
            this.userId = userId;
        }

        /**
         * Build call for getAllAvailableDestinations_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destinations were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllAvailableDestinations_0Call(liveEventId, userId, _callback);
        }


        /**
         * Execute getAllAvailableDestinations_0 request
         * @return List&lt;LiveEventDestination&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destinations were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<LiveEventDestination> execute() throws ApiException {
            ApiResponse<List<LiveEventDestination>> localVarResp = getAllAvailableDestinations_0WithHttpInfo(liveEventId, userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllAvailableDestinations_0 request with HTTP info returned
         * @return ApiResponse&lt;List&lt;LiveEventDestination&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destinations were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<LiveEventDestination>> executeWithHttpInfo() throws ApiException {
            return getAllAvailableDestinations_0WithHttpInfo(liveEventId, userId);
        }

        /**
         * Execute getAllAvailableDestinations_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destinations were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<LiveEventDestination>> _callback) throws ApiException {
            return getAllAvailableDestinations_0Async(liveEventId, userId, _callback);
        }
    }

    /**
     * Get all the destinations of a recurring live event
     * This method returns every destination of the specified event. The authenticated user must be the owner of the event.
     * @param liveEventId The ID of the event. (required)
     * @param userId The ID of the user. (required)
     * @return GetAllAvailableDestinations0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The event destinations were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllAvailableDestinations0RequestBuilder getAllAvailableDestinations_0(double liveEventId, double userId) throws IllegalArgumentException {
        
        
        return new GetAllAvailableDestinations0RequestBuilder(liveEventId, userId);
    }
    private okhttp3.Call getAllAvailableDestinations_1Call(Double userId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/videos/{video_id}/destinations"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.live.simulcast.destination+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllAvailableDestinations_1ValidateBeforeCall(Double userId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getAllAvailableDestinations_1(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getAllAvailableDestinations_1(Async)");
        }

        return getAllAvailableDestinations_1Call(userId, videoId, _callback);

    }


    private ApiResponse<List<LiveEventDestination>> getAllAvailableDestinations_1WithHttpInfo(Double userId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = getAllAvailableDestinations_1ValidateBeforeCall(userId, videoId, null);
        Type localVarReturnType = new TypeToken<List<LiveEventDestination>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAvailableDestinations_1Async(Double userId, Double videoId, final ApiCallback<List<LiveEventDestination>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllAvailableDestinations_1ValidateBeforeCall(userId, videoId, _callback);
        Type localVarReturnType = new TypeToken<List<LiveEventDestination>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllAvailableDestinations1RequestBuilder {
        private final Double userId;
        private final Double videoId;

        private GetAllAvailableDestinations1RequestBuilder(double userId, double videoId) {
            this.userId = userId;
            this.videoId = videoId;
        }

        /**
         * Build call for getAllAvailableDestinations_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destinations were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllAvailableDestinations_1Call(userId, videoId, _callback);
        }


        /**
         * Execute getAllAvailableDestinations_1 request
         * @return List&lt;LiveEventDestination&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destinations were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<LiveEventDestination> execute() throws ApiException {
            ApiResponse<List<LiveEventDestination>> localVarResp = getAllAvailableDestinations_1WithHttpInfo(userId, videoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllAvailableDestinations_1 request with HTTP info returned
         * @return ApiResponse&lt;List&lt;LiveEventDestination&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destinations were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<LiveEventDestination>> executeWithHttpInfo() throws ApiException {
            return getAllAvailableDestinations_1WithHttpInfo(userId, videoId);
        }

        /**
         * Execute getAllAvailableDestinations_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destinations were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<LiveEventDestination>> _callback) throws ApiException {
            return getAllAvailableDestinations_1Async(userId, videoId, _callback);
        }
    }

    /**
     * Get all the destinations of a one-time live event
     * This method returns every destination of the specified event. The authenticated user must be the owner of the event.
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @return GetAllAvailableDestinations1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The event destinations were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllAvailableDestinations1RequestBuilder getAllAvailableDestinations_1(double userId, double videoId) throws IllegalArgumentException {
        
        
        return new GetAllAvailableDestinations1RequestBuilder(userId, videoId);
    }
    private okhttp3.Call getAllDestinationsCall(Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/videos/{video_id}/destinations"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.live.simulcast.destination+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllDestinationsValidateBeforeCall(Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getAllDestinations(Async)");
        }

        return getAllDestinationsCall(videoId, _callback);

    }


    private ApiResponse<List<LiveEventDestination>> getAllDestinationsWithHttpInfo(Double videoId) throws ApiException {
        okhttp3.Call localVarCall = getAllDestinationsValidateBeforeCall(videoId, null);
        Type localVarReturnType = new TypeToken<List<LiveEventDestination>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllDestinationsAsync(Double videoId, final ApiCallback<List<LiveEventDestination>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllDestinationsValidateBeforeCall(videoId, _callback);
        Type localVarReturnType = new TypeToken<List<LiveEventDestination>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllDestinationsRequestBuilder {
        private final Double videoId;

        private GetAllDestinationsRequestBuilder(double videoId) {
            this.videoId = videoId;
        }

        /**
         * Build call for getAllDestinations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destinations were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllDestinationsCall(videoId, _callback);
        }


        /**
         * Execute getAllDestinations request
         * @return List&lt;LiveEventDestination&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destinations were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<LiveEventDestination> execute() throws ApiException {
            ApiResponse<List<LiveEventDestination>> localVarResp = getAllDestinationsWithHttpInfo(videoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllDestinations request with HTTP info returned
         * @return ApiResponse&lt;List&lt;LiveEventDestination&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destinations were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<LiveEventDestination>> executeWithHttpInfo() throws ApiException {
            return getAllDestinationsWithHttpInfo(videoId);
        }

        /**
         * Execute getAllDestinations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destinations were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<LiveEventDestination>> _callback) throws ApiException {
            return getAllDestinationsAsync(videoId, _callback);
        }
    }

    /**
     * Get all the destinations of a one-time live event
     * This method returns every destination of the specified event. The authenticated user must be the owner of the event.
     * @param videoId The ID of the video. (required)
     * @return GetAllDestinationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The event destinations were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllDestinationsRequestBuilder getAllDestinations(double videoId) throws IllegalArgumentException {
        
        return new GetAllDestinationsRequestBuilder(videoId);
    }
    private okhttp3.Call getAllOttDestinationsCall(Double liveEventId, Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/live_events/{live_event_id}/ott_destinations"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.live.ott.destination+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllOttDestinationsValidateBeforeCall(Double liveEventId, Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling getAllOttDestinations(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getAllOttDestinations(Async)");
        }

        return getAllOttDestinationsCall(liveEventId, userId, _callback);

    }


    private ApiResponse<List<OttDestination>> getAllOttDestinationsWithHttpInfo(Double liveEventId, Double userId) throws ApiException {
        okhttp3.Call localVarCall = getAllOttDestinationsValidateBeforeCall(liveEventId, userId, null);
        Type localVarReturnType = new TypeToken<List<OttDestination>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllOttDestinationsAsync(Double liveEventId, Double userId, final ApiCallback<List<OttDestination>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllOttDestinationsValidateBeforeCall(liveEventId, userId, _callback);
        Type localVarReturnType = new TypeToken<List<OttDestination>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllOttDestinationsRequestBuilder {
        private final Double liveEventId;
        private final Double userId;

        private GetAllOttDestinationsRequestBuilder(double liveEventId, double userId) {
            this.liveEventId = liveEventId;
            this.userId = userId;
        }

        /**
         * Build call for getAllOttDestinations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The OTT destinations were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllOttDestinationsCall(liveEventId, userId, _callback);
        }


        /**
         * Execute getAllOttDestinations request
         * @return List&lt;OttDestination&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The OTT destinations were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<OttDestination> execute() throws ApiException {
            ApiResponse<List<OttDestination>> localVarResp = getAllOttDestinationsWithHttpInfo(liveEventId, userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllOttDestinations request with HTTP info returned
         * @return ApiResponse&lt;List&lt;OttDestination&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The OTT destinations were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<OttDestination>> executeWithHttpInfo() throws ApiException {
            return getAllOttDestinationsWithHttpInfo(liveEventId, userId);
        }

        /**
         * Execute getAllOttDestinations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The OTT destinations were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<OttDestination>> _callback) throws ApiException {
            return getAllOttDestinationsAsync(liveEventId, userId, _callback);
        }
    }

    /**
     * Get all the OTT destinations of a recurring live event
     * This method returns every OTT destination of the specified event. The authenticated user must be the owner of the event.
     * @param liveEventId The ID of the event. (required)
     * @param userId The ID of the user. (required)
     * @return GetAllOttDestinationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The OTT destinations were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllOttDestinationsRequestBuilder getAllOttDestinations(double liveEventId, double userId) throws IllegalArgumentException {
        
        
        return new GetAllOttDestinationsRequestBuilder(liveEventId, userId);
    }
    private okhttp3.Call getDestinationCall(Double destinationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/destination/{destination_id}"
            .replace("{" + "destination_id" + "}", localVarApiClient.escapeString(destinationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.live.simulcast.destination+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDestinationValidateBeforeCall(Double destinationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'destinationId' is set
        if (destinationId == null) {
            throw new ApiException("Missing the required parameter 'destinationId' when calling getDestination(Async)");
        }

        return getDestinationCall(destinationId, _callback);

    }


    private ApiResponse<LiveEventDestination> getDestinationWithHttpInfo(Double destinationId) throws ApiException {
        okhttp3.Call localVarCall = getDestinationValidateBeforeCall(destinationId, null);
        Type localVarReturnType = new TypeToken<LiveEventDestination>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDestinationAsync(Double destinationId, final ApiCallback<LiveEventDestination> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDestinationValidateBeforeCall(destinationId, _callback);
        Type localVarReturnType = new TypeToken<LiveEventDestination>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDestinationRequestBuilder {
        private final Double destinationId;

        private GetDestinationRequestBuilder(double destinationId) {
            this.destinationId = destinationId;
        }

        /**
         * Build call for getDestination
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destination was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDestinationCall(destinationId, _callback);
        }


        /**
         * Execute getDestination request
         * @return LiveEventDestination
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destination was returned. </td><td>  -  </td></tr>
         </table>
         */
        public LiveEventDestination execute() throws ApiException {
            ApiResponse<LiveEventDestination> localVarResp = getDestinationWithHttpInfo(destinationId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDestination request with HTTP info returned
         * @return ApiResponse&lt;LiveEventDestination&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destination was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LiveEventDestination> executeWithHttpInfo() throws ApiException {
            return getDestinationWithHttpInfo(destinationId);
        }

        /**
         * Execute getDestination request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destination was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LiveEventDestination> _callback) throws ApiException {
            return getDestinationAsync(destinationId, _callback);
        }
    }

    /**
     * Get a live event destination
     * This method returns the specified event destination belonging to the authenticated user.
     * @param destinationId The ID of the event destination. (required)
     * @return GetDestinationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The event destination was returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetDestinationRequestBuilder getDestination(double destinationId) throws IllegalArgumentException {
        
        return new GetDestinationRequestBuilder(destinationId);
    }
    private okhttp3.Call listAllAvailableDestinationsCall(Double liveEventId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/live_events/{live_event_id}/destinations"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.live.simulcast.destination+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllAvailableDestinationsValidateBeforeCall(Double liveEventId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling listAllAvailableDestinations(Async)");
        }

        return listAllAvailableDestinationsCall(liveEventId, _callback);

    }


    private ApiResponse<List<LiveEventDestination>> listAllAvailableDestinationsWithHttpInfo(Double liveEventId) throws ApiException {
        okhttp3.Call localVarCall = listAllAvailableDestinationsValidateBeforeCall(liveEventId, null);
        Type localVarReturnType = new TypeToken<List<LiveEventDestination>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllAvailableDestinationsAsync(Double liveEventId, final ApiCallback<List<LiveEventDestination>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllAvailableDestinationsValidateBeforeCall(liveEventId, _callback);
        Type localVarReturnType = new TypeToken<List<LiveEventDestination>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllAvailableDestinationsRequestBuilder {
        private final Double liveEventId;

        private ListAllAvailableDestinationsRequestBuilder(double liveEventId) {
            this.liveEventId = liveEventId;
        }

        /**
         * Build call for listAllAvailableDestinations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destinations were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllAvailableDestinationsCall(liveEventId, _callback);
        }


        /**
         * Execute listAllAvailableDestinations request
         * @return List&lt;LiveEventDestination&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destinations were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<LiveEventDestination> execute() throws ApiException {
            ApiResponse<List<LiveEventDestination>> localVarResp = listAllAvailableDestinationsWithHttpInfo(liveEventId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllAvailableDestinations request with HTTP info returned
         * @return ApiResponse&lt;List&lt;LiveEventDestination&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destinations were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<LiveEventDestination>> executeWithHttpInfo() throws ApiException {
            return listAllAvailableDestinationsWithHttpInfo(liveEventId);
        }

        /**
         * Execute listAllAvailableDestinations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destinations were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<LiveEventDestination>> _callback) throws ApiException {
            return listAllAvailableDestinationsAsync(liveEventId, _callback);
        }
    }

    /**
     * Get all the destinations of a recurring live event
     * This method returns every destination of the specified event. The authenticated user must be the owner of the event.
     * @param liveEventId The ID of the event. (required)
     * @return ListAllAvailableDestinationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The event destinations were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ListAllAvailableDestinationsRequestBuilder listAllAvailableDestinations(double liveEventId) throws IllegalArgumentException {
        
        return new ListAllAvailableDestinationsRequestBuilder(liveEventId);
    }
    private okhttp3.Call listAvailableDestinationsCall(Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/destinations"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.live.simulcast.destination+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAvailableDestinationsValidateBeforeCall(Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listAvailableDestinations(Async)");
        }

        return listAvailableDestinationsCall(userId, _callback);

    }


    private ApiResponse<Void> listAvailableDestinationsWithHttpInfo(Double userId) throws ApiException {
        okhttp3.Call localVarCall = listAvailableDestinationsValidateBeforeCall(userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call listAvailableDestinationsAsync(Double userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAvailableDestinationsValidateBeforeCall(userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ListAvailableDestinationsRequestBuilder {
        private final Double userId;

        private ListAvailableDestinationsRequestBuilder(double userId) {
            this.userId = userId;
        }

        /**
         * Build call for listAvailableDestinations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destinations were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAvailableDestinationsCall(userId, _callback);
        }


        /**
         * Execute listAvailableDestinations request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destinations were returned. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            listAvailableDestinationsWithHttpInfo(userId);
        }

        /**
         * Execute listAvailableDestinations request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destinations were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return listAvailableDestinationsWithHttpInfo(userId);
        }

        /**
         * Execute listAvailableDestinations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destinations were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return listAvailableDestinationsAsync(userId, _callback);
        }
    }

    /**
     * Get all available live event destinations for the user to stream to
     * This method returns every available event destination for the authenticated user to stream to.
     * @param userId The ID of the user. (required)
     * @return ListAvailableDestinationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The event destinations were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ListAvailableDestinationsRequestBuilder listAvailableDestinations(double userId) throws IllegalArgumentException {
        
        return new ListAvailableDestinationsRequestBuilder(userId);
    }
    private okhttp3.Call updateDestinationCall(Double destinationId, LiveEventDestinationsUpdateDestinationRequest liveEventDestinationsUpdateDestinationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = liveEventDestinationsUpdateDestinationRequest;

        // create path and map variables
        String localVarPath = "/destination/{destination_id}"
            .replace("{" + "destination_id" + "}", localVarApiClient.escapeString(destinationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.live.simulcast.destination+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.live.simulcast.destination+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDestinationValidateBeforeCall(Double destinationId, LiveEventDestinationsUpdateDestinationRequest liveEventDestinationsUpdateDestinationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'destinationId' is set
        if (destinationId == null) {
            throw new ApiException("Missing the required parameter 'destinationId' when calling updateDestination(Async)");
        }

        return updateDestinationCall(destinationId, liveEventDestinationsUpdateDestinationRequest, _callback);

    }


    private ApiResponse<LiveEventDestination> updateDestinationWithHttpInfo(Double destinationId, LiveEventDestinationsUpdateDestinationRequest liveEventDestinationsUpdateDestinationRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDestinationValidateBeforeCall(destinationId, liveEventDestinationsUpdateDestinationRequest, null);
        Type localVarReturnType = new TypeToken<LiveEventDestination>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDestinationAsync(Double destinationId, LiveEventDestinationsUpdateDestinationRequest liveEventDestinationsUpdateDestinationRequest, final ApiCallback<LiveEventDestination> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDestinationValidateBeforeCall(destinationId, liveEventDestinationsUpdateDestinationRequest, _callback);
        Type localVarReturnType = new TypeToken<LiveEventDestination>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateDestinationRequestBuilder {
        private final Double destinationId;
        private String displayName;
        private Boolean isEnabled;
        private String privacy;
        private String providerDestinationId;
        private String serviceName;
        private String streamKey;
        private String streamUrl;
        private String type;

        private UpdateDestinationRequestBuilder(double destinationId) {
            this.destinationId = destinationId;
        }

        /**
         * Set displayName
         * @param displayName The title to display for the simulcast. (optional)
         * @return UpdateDestinationRequestBuilder
         */
        public UpdateDestinationRequestBuilder displayName(String displayName) {
            this.displayName = displayName;
            return this;
        }
        
        /**
         * Set isEnabled
         * @param isEnabled Whether the destination is enabled for simulcasting. (optional)
         * @return UpdateDestinationRequestBuilder
         */
        public UpdateDestinationRequestBuilder isEnabled(Boolean isEnabled) {
            this.isEnabled = isEnabled;
            return this;
        }
        
        /**
         * Set privacy
         * @param privacy The privacy setting of the destination. Be sure to choose a value that corresponds to your service.  Option descriptions:  * &#x60;CONNECTIONS&#x60; - The privacy setting is &#x60;CONNECTIONS&#x60; for LinkedIn.  * &#x60;PUBLIC&#x60; - The privacy setting is &#x60;PUBLIC&#x60; for LinkedIn.  * &#x60;all_friends&#x60; - The privacy setting is &#x60;all_friends&#x60; for Facebook.  * &#x60;everyone&#x60; - The privacy setting is &#x60;everyone&#x60; for Facebook.  * &#x60;private&#x60; - The privacy setting is &#x60;private&#x60; for YouTube.  * &#x60;public&#x60; - The privacy setting is &#x60;public&#x60; for YouTube.  * &#x60;self&#x60; - The privacy setting is &#x60;self&#x60; for Facebook.  * &#x60;unlisted&#x60; - The privacy setting is &#x60;unlisted&#x60; for YouTube.  (optional)
         * @return UpdateDestinationRequestBuilder
         */
        public UpdateDestinationRequestBuilder privacy(String privacy) {
            this.privacy = privacy;
            return this;
        }
        
        /**
         * Set providerDestinationId
         * @param providerDestinationId The ID of the destination on the specified service, such as the YouTube channel ID or the Facebook page ID. (optional)
         * @return UpdateDestinationRequestBuilder
         */
        public UpdateDestinationRequestBuilder providerDestinationId(String providerDestinationId) {
            this.providerDestinationId = providerDestinationId;
            return this;
        }
        
        /**
         * Set serviceName
         * @param serviceName The service to simulcast to.  Option descriptions:  * &#x60;custom_rtmp&#x60; - Simulcast to a custom service.  * &#x60;facebook&#x60; - Simulcast to Facebook Live.  * &#x60;linkedin&#x60; - Simulcast to LinkedIn Live.  * &#x60;youtube&#x60; - Simulcast to YouTube Live.  (optional)
         * @return UpdateDestinationRequestBuilder
         */
        public UpdateDestinationRequestBuilder serviceName(String serviceName) {
            this.serviceName = serviceName;
            return this;
        }
        
        /**
         * Set streamKey
         * @param streamKey The RTMP stream key. (optional)
         * @return UpdateDestinationRequestBuilder
         */
        public UpdateDestinationRequestBuilder streamKey(String streamKey) {
            this.streamKey = streamKey;
            return this;
        }
        
        /**
         * Set streamUrl
         * @param streamUrl The RTMP URL for receiving the video stream. (optional)
         * @return UpdateDestinationRequestBuilder
         */
        public UpdateDestinationRequestBuilder streamUrl(String streamUrl) {
            this.streamUrl = streamUrl;
            return this;
        }
        
        /**
         * Set type
         * @param type The type of the simulcast destination.  Option descriptions:  * &#x60;channel&#x60; - The destination is a YouTube channel.  * &#x60;custom&#x60; - The destination is custom.  * &#x60;organization&#x60; - The destination is a LinkedIn organization.  * &#x60;page&#x60; - The destination is a Facebook page.  * &#x60;profile&#x60; - The destination is a Facebook or LinkedIn profile.  (optional)
         * @return UpdateDestinationRequestBuilder
         */
        public UpdateDestinationRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for updateDestination
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destination was updated. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LiveEventDestinationsUpdateDestinationRequest liveEventDestinationsUpdateDestinationRequest = buildBodyParams();
            return updateDestinationCall(destinationId, liveEventDestinationsUpdateDestinationRequest, _callback);
        }

        private LiveEventDestinationsUpdateDestinationRequest buildBodyParams() {
            LiveEventDestinationsUpdateDestinationRequest liveEventDestinationsUpdateDestinationRequest = new LiveEventDestinationsUpdateDestinationRequest();
            liveEventDestinationsUpdateDestinationRequest.displayName(this.displayName);
            liveEventDestinationsUpdateDestinationRequest.isEnabled(this.isEnabled);
            if (this.privacy != null)
            liveEventDestinationsUpdateDestinationRequest.privacy(LiveEventDestinationsUpdateDestinationRequest.PrivacyEnum.fromValue(this.privacy));
            liveEventDestinationsUpdateDestinationRequest.providerDestinationId(this.providerDestinationId);
            if (this.serviceName != null)
            liveEventDestinationsUpdateDestinationRequest.serviceName(LiveEventDestinationsUpdateDestinationRequest.ServiceNameEnum.fromValue(this.serviceName));
            liveEventDestinationsUpdateDestinationRequest.streamKey(this.streamKey);
            liveEventDestinationsUpdateDestinationRequest.streamUrl(this.streamUrl);
            if (this.type != null)
            liveEventDestinationsUpdateDestinationRequest.type(LiveEventDestinationsUpdateDestinationRequest.TypeEnum.fromValue(this.type));
            return liveEventDestinationsUpdateDestinationRequest;
        }

        /**
         * Execute updateDestination request
         * @return LiveEventDestination
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destination was updated. </td><td>  -  </td></tr>
         </table>
         */
        public LiveEventDestination execute() throws ApiException {
            LiveEventDestinationsUpdateDestinationRequest liveEventDestinationsUpdateDestinationRequest = buildBodyParams();
            ApiResponse<LiveEventDestination> localVarResp = updateDestinationWithHttpInfo(destinationId, liveEventDestinationsUpdateDestinationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateDestination request with HTTP info returned
         * @return ApiResponse&lt;LiveEventDestination&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destination was updated. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LiveEventDestination> executeWithHttpInfo() throws ApiException {
            LiveEventDestinationsUpdateDestinationRequest liveEventDestinationsUpdateDestinationRequest = buildBodyParams();
            return updateDestinationWithHttpInfo(destinationId, liveEventDestinationsUpdateDestinationRequest);
        }

        /**
         * Execute updateDestination request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event destination was updated. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LiveEventDestination> _callback) throws ApiException {
            LiveEventDestinationsUpdateDestinationRequest liveEventDestinationsUpdateDestinationRequest = buildBodyParams();
            return updateDestinationAsync(destinationId, liveEventDestinationsUpdateDestinationRequest, _callback);
        }
    }

    /**
     * Update a live event destination
     * This method updates the specified event destination belonging to the authenticated user.
     * @param destinationId The ID of the event destination. (required)
     * @return UpdateDestinationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The event destination was updated. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDestinationRequestBuilder updateDestination(double destinationId) throws IllegalArgumentException {
        
        return new UpdateDestinationRequestBuilder(destinationId);
    }
}
