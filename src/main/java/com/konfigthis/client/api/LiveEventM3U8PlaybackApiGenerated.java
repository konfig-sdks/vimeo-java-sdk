/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LiveEventM3U8PlaybackApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LiveEventM3U8PlaybackApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LiveEventM3U8PlaybackApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getUrlCall(Double liveEventId, Double maxFpsFhd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/live_events/{live_event_id}/m3u8_playback"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxFpsFhd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_fps_fhd", maxFpsFhd));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUrlValidateBeforeCall(Double liveEventId, Double maxFpsFhd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling getUrl(Async)");
        }

        return getUrlCall(liveEventId, maxFpsFhd, _callback);

    }


    private ApiResponse<Void> getUrlWithHttpInfo(Double liveEventId, Double maxFpsFhd) throws ApiException {
        okhttp3.Call localVarCall = getUrlValidateBeforeCall(liveEventId, maxFpsFhd, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getUrlAsync(Double liveEventId, Double maxFpsFhd, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUrlValidateBeforeCall(liveEventId, maxFpsFhd, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetUrlRequestBuilder {
        private final Double liveEventId;
        private Double maxFpsFhd;

        private GetUrlRequestBuilder(double liveEventId) {
            this.liveEventId = liveEventId;
        }

        /**
         * Set maxFpsFhd
         * @param maxFpsFhd The requested maximum frames per second. (optional)
         * @return GetUrlRequestBuilder
         */
        public GetUrlRequestBuilder maxFpsFhd(Double maxFpsFhd) {
            this.maxFpsFhd = maxFpsFhd;
            return this;
        }
        
        /**
         * Build call for getUrl
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The M3U8 playback URL was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUrlCall(liveEventId, maxFpsFhd, _callback);
        }


        /**
         * Execute getUrl request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The M3U8 playback URL was returned. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getUrlWithHttpInfo(liveEventId, maxFpsFhd);
        }

        /**
         * Execute getUrl request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The M3U8 playback URL was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getUrlWithHttpInfo(liveEventId, maxFpsFhd);
        }

        /**
         * Execute getUrl request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The M3U8 playback URL was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getUrlAsync(liveEventId, maxFpsFhd, _callback);
        }
    }

    /**
     * Get an M3U8 playback URL for a live event
     * This method returns an M3U8 playback URL for the specified event stream. You should use this endpoint only in conjunction with our recommended procedure for playing events via HLS. For more information, see our [HLS guide](https://developer.vimeo.com/api/live/playback).
     * @param liveEventId The ID of the event. (required)
     * @return GetUrlRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The M3U8 playback URL was returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetUrlRequestBuilder getUrl(double liveEventId) throws IllegalArgumentException {
        
        return new GetUrlRequestBuilder(liveEventId);
    }
    private okhttp3.Call getUrlForEventStreamCall(Double liveEventId, Double userId, Double maxFpsFhd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/live_events/{live_event_id}/m3u8_playback"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxFpsFhd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_fps_fhd", maxFpsFhd));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUrlForEventStreamValidateBeforeCall(Double liveEventId, Double userId, Double maxFpsFhd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling getUrlForEventStream(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUrlForEventStream(Async)");
        }

        return getUrlForEventStreamCall(liveEventId, userId, maxFpsFhd, _callback);

    }


    private ApiResponse<Void> getUrlForEventStreamWithHttpInfo(Double liveEventId, Double userId, Double maxFpsFhd) throws ApiException {
        okhttp3.Call localVarCall = getUrlForEventStreamValidateBeforeCall(liveEventId, userId, maxFpsFhd, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getUrlForEventStreamAsync(Double liveEventId, Double userId, Double maxFpsFhd, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUrlForEventStreamValidateBeforeCall(liveEventId, userId, maxFpsFhd, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetUrlForEventStreamRequestBuilder {
        private final Double liveEventId;
        private final Double userId;
        private Double maxFpsFhd;

        private GetUrlForEventStreamRequestBuilder(double liveEventId, double userId) {
            this.liveEventId = liveEventId;
            this.userId = userId;
        }

        /**
         * Set maxFpsFhd
         * @param maxFpsFhd The requested maximum frames per second. (optional)
         * @return GetUrlForEventStreamRequestBuilder
         */
        public GetUrlForEventStreamRequestBuilder maxFpsFhd(Double maxFpsFhd) {
            this.maxFpsFhd = maxFpsFhd;
            return this;
        }
        
        /**
         * Build call for getUrlForEventStream
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The M3U8 playback URL was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUrlForEventStreamCall(liveEventId, userId, maxFpsFhd, _callback);
        }


        /**
         * Execute getUrlForEventStream request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The M3U8 playback URL was returned. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getUrlForEventStreamWithHttpInfo(liveEventId, userId, maxFpsFhd);
        }

        /**
         * Execute getUrlForEventStream request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The M3U8 playback URL was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getUrlForEventStreamWithHttpInfo(liveEventId, userId, maxFpsFhd);
        }

        /**
         * Execute getUrlForEventStream request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The M3U8 playback URL was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getUrlForEventStreamAsync(liveEventId, userId, maxFpsFhd, _callback);
        }
    }

    /**
     * Get an M3U8 playback URL for a live event
     * This method returns an M3U8 playback URL for the specified event stream. You should use this endpoint only in conjunction with our recommended procedure for playing events via HLS. For more information, see our [HLS guide](https://developer.vimeo.com/api/live/playback).
     * @param liveEventId The ID of the event. (required)
     * @param userId The ID of the user. (required)
     * @return GetUrlForEventStreamRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The M3U8 playback URL was returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetUrlForEventStreamRequestBuilder getUrlForEventStream(double liveEventId, double userId) throws IllegalArgumentException {
        
        
        return new GetUrlForEventStreamRequestBuilder(liveEventId, userId);
    }
}
