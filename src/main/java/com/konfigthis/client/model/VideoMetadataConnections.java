/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AncestorPath;
import com.konfigthis.client.model.VideoMetadataConnectionsAvailableChannels;
import com.konfigthis.client.model.VideoMetadataConnectionsComments;
import com.konfigthis.client.model.VideoMetadataConnectionsCredits;
import com.konfigthis.client.model.VideoMetadataConnectionsLikes;
import com.konfigthis.client.model.VideoMetadataConnectionsOndemand;
import com.konfigthis.client.model.VideoMetadataConnectionsPictures;
import com.konfigthis.client.model.VideoMetadataConnectionsRecommendations;
import com.konfigthis.client.model.VideoMetadataConnectionsRelated;
import com.konfigthis.client.model.VideoMetadataConnectionsResourceCreatorTeamUser;
import com.konfigthis.client.model.VideoMetadataConnectionsSeason;
import com.konfigthis.client.model.VideoMetadataConnectionsTeamPermissions;
import com.konfigthis.client.model.VideoMetadataConnectionsTexttracks;
import com.konfigthis.client.model.VideoMetadataConnectionsTrailer;
import com.konfigthis.client.model.VideoMetadataConnectionsUsersWithAccess;
import com.konfigthis.client.model.VideoMetadataConnectionsVersions;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A list of resource URIs related to the video.
 */
@ApiModel(description = "A list of resource URIs related to the video.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class VideoMetadataConnections {
  public static final String SERIALIZED_NAME_ANCESTOR_PATH = "ancestor_path";
  @SerializedName(SERIALIZED_NAME_ANCESTOR_PATH)
  private List<AncestorPath> ancestorPath = new ArrayList<>();

  public static final String SERIALIZED_NAME_AVAILABLE_CHANNELS = "available_channels";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_CHANNELS)
  private VideoMetadataConnectionsAvailableChannels availableChannels;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private VideoMetadataConnectionsComments comments;

  public static final String SERIALIZED_NAME_CREDITS = "credits";
  @SerializedName(SERIALIZED_NAME_CREDITS)
  private VideoMetadataConnectionsCredits credits;

  public static final String SERIALIZED_NAME_LIKES = "likes";
  @SerializedName(SERIALIZED_NAME_LIKES)
  private VideoMetadataConnectionsLikes likes;

  public static final String SERIALIZED_NAME_ONDEMAND = "ondemand";
  @SerializedName(SERIALIZED_NAME_ONDEMAND)
  private VideoMetadataConnectionsOndemand ondemand;

  public static final String SERIALIZED_NAME_PICTURES = "pictures";
  @SerializedName(SERIALIZED_NAME_PICTURES)
  private VideoMetadataConnectionsPictures pictures;

  public static final String SERIALIZED_NAME_RECOMMENDATIONS = "recommendations";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATIONS)
  private VideoMetadataConnectionsRecommendations recommendations;

  public static final String SERIALIZED_NAME_RELATED = "related";
  @SerializedName(SERIALIZED_NAME_RELATED)
  private VideoMetadataConnectionsRelated related;

  public static final String SERIALIZED_NAME_RESOURCE_CREATOR_TEAM_USER = "resource_creator_team_user";
  @SerializedName(SERIALIZED_NAME_RESOURCE_CREATOR_TEAM_USER)
  private VideoMetadataConnectionsResourceCreatorTeamUser resourceCreatorTeamUser;

  public static final String SERIALIZED_NAME_SEASON = "season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private VideoMetadataConnectionsSeason season;

  public static final String SERIALIZED_NAME_TEAM_PERMISSIONS = "team_permissions";
  @SerializedName(SERIALIZED_NAME_TEAM_PERMISSIONS)
  private VideoMetadataConnectionsTeamPermissions teamPermissions;

  public static final String SERIALIZED_NAME_TEXTTRACKS = "texttracks";
  @SerializedName(SERIALIZED_NAME_TEXTTRACKS)
  private VideoMetadataConnectionsTexttracks texttracks;

  public static final String SERIALIZED_NAME_TRAILER = "trailer";
  @SerializedName(SERIALIZED_NAME_TRAILER)
  private VideoMetadataConnectionsTrailer trailer;

  public static final String SERIALIZED_NAME_USERS_WITH_ACCESS = "users_with_access";
  @SerializedName(SERIALIZED_NAME_USERS_WITH_ACCESS)
  private VideoMetadataConnectionsUsersWithAccess usersWithAccess;

  public static final String SERIALIZED_NAME_VERSIONS = "versions";
  @SerializedName(SERIALIZED_NAME_VERSIONS)
  private VideoMetadataConnectionsVersions versions;

  public VideoMetadataConnections() {
  }

  public VideoMetadataConnections ancestorPath(List<AncestorPath> ancestorPath) {
    
    
    
    
    this.ancestorPath = ancestorPath;
    return this;
  }

  public VideoMetadataConnections addAncestorPathItem(AncestorPath ancestorPathItem) {
    this.ancestorPath.add(ancestorPathItem);
    return this;
  }

   /**
   * Information about the video&#39;s ancestry, ordered from the direct parent folder to higher-level ancestors.
   * @return ancestorPath
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Information about the video's ancestry, ordered from the direct parent folder to higher-level ancestors.")

  public List<AncestorPath> getAncestorPath() {
    return ancestorPath;
  }


  public void setAncestorPath(List<AncestorPath> ancestorPath) {
    
    
    
    this.ancestorPath = ancestorPath;
  }


  public VideoMetadataConnections availableChannels(VideoMetadataConnectionsAvailableChannels availableChannels) {
    
    
    
    
    this.availableChannels = availableChannels;
    return this;
  }

   /**
   * Get availableChannels
   * @return availableChannels
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public VideoMetadataConnectionsAvailableChannels getAvailableChannels() {
    return availableChannels;
  }


  public void setAvailableChannels(VideoMetadataConnectionsAvailableChannels availableChannels) {
    
    
    
    this.availableChannels = availableChannels;
  }


  public VideoMetadataConnections comments(VideoMetadataConnectionsComments comments) {
    
    
    
    
    this.comments = comments;
    return this;
  }

   /**
   * Get comments
   * @return comments
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public VideoMetadataConnectionsComments getComments() {
    return comments;
  }


  public void setComments(VideoMetadataConnectionsComments comments) {
    
    
    
    this.comments = comments;
  }


  public VideoMetadataConnections credits(VideoMetadataConnectionsCredits credits) {
    
    
    
    
    this.credits = credits;
    return this;
  }

   /**
   * Get credits
   * @return credits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public VideoMetadataConnectionsCredits getCredits() {
    return credits;
  }


  public void setCredits(VideoMetadataConnectionsCredits credits) {
    
    
    
    this.credits = credits;
  }


  public VideoMetadataConnections likes(VideoMetadataConnectionsLikes likes) {
    
    
    
    
    this.likes = likes;
    return this;
  }

   /**
   * Get likes
   * @return likes
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public VideoMetadataConnectionsLikes getLikes() {
    return likes;
  }


  public void setLikes(VideoMetadataConnectionsLikes likes) {
    
    
    
    this.likes = likes;
  }


  public VideoMetadataConnections ondemand(VideoMetadataConnectionsOndemand ondemand) {
    
    
    
    
    this.ondemand = ondemand;
    return this;
  }

   /**
   * Get ondemand
   * @return ondemand
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public VideoMetadataConnectionsOndemand getOndemand() {
    return ondemand;
  }


  public void setOndemand(VideoMetadataConnectionsOndemand ondemand) {
    
    
    
    this.ondemand = ondemand;
  }


  public VideoMetadataConnections pictures(VideoMetadataConnectionsPictures pictures) {
    
    
    
    
    this.pictures = pictures;
    return this;
  }

   /**
   * Get pictures
   * @return pictures
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public VideoMetadataConnectionsPictures getPictures() {
    return pictures;
  }


  public void setPictures(VideoMetadataConnectionsPictures pictures) {
    
    
    
    this.pictures = pictures;
  }


  public VideoMetadataConnections recommendations(VideoMetadataConnectionsRecommendations recommendations) {
    
    
    
    
    this.recommendations = recommendations;
    return this;
  }

   /**
   * Get recommendations
   * @return recommendations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public VideoMetadataConnectionsRecommendations getRecommendations() {
    return recommendations;
  }


  public void setRecommendations(VideoMetadataConnectionsRecommendations recommendations) {
    
    
    
    this.recommendations = recommendations;
  }


  public VideoMetadataConnections related(VideoMetadataConnectionsRelated related) {
    
    
    
    
    this.related = related;
    return this;
  }

   /**
   * Get related
   * @return related
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public VideoMetadataConnectionsRelated getRelated() {
    return related;
  }


  public void setRelated(VideoMetadataConnectionsRelated related) {
    
    
    
    this.related = related;
  }


  public VideoMetadataConnections resourceCreatorTeamUser(VideoMetadataConnectionsResourceCreatorTeamUser resourceCreatorTeamUser) {
    
    
    
    
    this.resourceCreatorTeamUser = resourceCreatorTeamUser;
    return this;
  }

   /**
   * Get resourceCreatorTeamUser
   * @return resourceCreatorTeamUser
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public VideoMetadataConnectionsResourceCreatorTeamUser getResourceCreatorTeamUser() {
    return resourceCreatorTeamUser;
  }


  public void setResourceCreatorTeamUser(VideoMetadataConnectionsResourceCreatorTeamUser resourceCreatorTeamUser) {
    
    
    
    this.resourceCreatorTeamUser = resourceCreatorTeamUser;
  }


  public VideoMetadataConnections season(VideoMetadataConnectionsSeason season) {
    
    
    
    
    this.season = season;
    return this;
  }

   /**
   * Get season
   * @return season
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public VideoMetadataConnectionsSeason getSeason() {
    return season;
  }


  public void setSeason(VideoMetadataConnectionsSeason season) {
    
    
    
    this.season = season;
  }


  public VideoMetadataConnections teamPermissions(VideoMetadataConnectionsTeamPermissions teamPermissions) {
    
    
    
    
    this.teamPermissions = teamPermissions;
    return this;
  }

   /**
   * Get teamPermissions
   * @return teamPermissions
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public VideoMetadataConnectionsTeamPermissions getTeamPermissions() {
    return teamPermissions;
  }


  public void setTeamPermissions(VideoMetadataConnectionsTeamPermissions teamPermissions) {
    
    
    
    this.teamPermissions = teamPermissions;
  }


  public VideoMetadataConnections texttracks(VideoMetadataConnectionsTexttracks texttracks) {
    
    
    
    
    this.texttracks = texttracks;
    return this;
  }

   /**
   * Get texttracks
   * @return texttracks
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public VideoMetadataConnectionsTexttracks getTexttracks() {
    return texttracks;
  }


  public void setTexttracks(VideoMetadataConnectionsTexttracks texttracks) {
    
    
    
    this.texttracks = texttracks;
  }


  public VideoMetadataConnections trailer(VideoMetadataConnectionsTrailer trailer) {
    
    
    
    
    this.trailer = trailer;
    return this;
  }

   /**
   * Get trailer
   * @return trailer
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public VideoMetadataConnectionsTrailer getTrailer() {
    return trailer;
  }


  public void setTrailer(VideoMetadataConnectionsTrailer trailer) {
    
    
    
    this.trailer = trailer;
  }


  public VideoMetadataConnections usersWithAccess(VideoMetadataConnectionsUsersWithAccess usersWithAccess) {
    
    
    
    
    this.usersWithAccess = usersWithAccess;
    return this;
  }

   /**
   * Get usersWithAccess
   * @return usersWithAccess
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public VideoMetadataConnectionsUsersWithAccess getUsersWithAccess() {
    return usersWithAccess;
  }


  public void setUsersWithAccess(VideoMetadataConnectionsUsersWithAccess usersWithAccess) {
    
    
    
    this.usersWithAccess = usersWithAccess;
  }


  public VideoMetadataConnections versions(VideoMetadataConnectionsVersions versions) {
    
    
    
    
    this.versions = versions;
    return this;
  }

   /**
   * Get versions
   * @return versions
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public VideoMetadataConnectionsVersions getVersions() {
    return versions;
  }


  public void setVersions(VideoMetadataConnectionsVersions versions) {
    
    
    
    this.versions = versions;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the VideoMetadataConnections instance itself
   */
  public VideoMetadataConnections putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoMetadataConnections videoMetadataConnections = (VideoMetadataConnections) o;
    return Objects.equals(this.ancestorPath, videoMetadataConnections.ancestorPath) &&
        Objects.equals(this.availableChannels, videoMetadataConnections.availableChannels) &&
        Objects.equals(this.comments, videoMetadataConnections.comments) &&
        Objects.equals(this.credits, videoMetadataConnections.credits) &&
        Objects.equals(this.likes, videoMetadataConnections.likes) &&
        Objects.equals(this.ondemand, videoMetadataConnections.ondemand) &&
        Objects.equals(this.pictures, videoMetadataConnections.pictures) &&
        Objects.equals(this.recommendations, videoMetadataConnections.recommendations) &&
        Objects.equals(this.related, videoMetadataConnections.related) &&
        Objects.equals(this.resourceCreatorTeamUser, videoMetadataConnections.resourceCreatorTeamUser) &&
        Objects.equals(this.season, videoMetadataConnections.season) &&
        Objects.equals(this.teamPermissions, videoMetadataConnections.teamPermissions) &&
        Objects.equals(this.texttracks, videoMetadataConnections.texttracks) &&
        Objects.equals(this.trailer, videoMetadataConnections.trailer) &&
        Objects.equals(this.usersWithAccess, videoMetadataConnections.usersWithAccess) &&
        Objects.equals(this.versions, videoMetadataConnections.versions)&&
        Objects.equals(this.additionalProperties, videoMetadataConnections.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ancestorPath, availableChannels, comments, credits, likes, ondemand, pictures, recommendations, related, resourceCreatorTeamUser, season, teamPermissions, texttracks, trailer, usersWithAccess, versions, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoMetadataConnections {\n");
    sb.append("    ancestorPath: ").append(toIndentedString(ancestorPath)).append("\n");
    sb.append("    availableChannels: ").append(toIndentedString(availableChannels)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    credits: ").append(toIndentedString(credits)).append("\n");
    sb.append("    likes: ").append(toIndentedString(likes)).append("\n");
    sb.append("    ondemand: ").append(toIndentedString(ondemand)).append("\n");
    sb.append("    pictures: ").append(toIndentedString(pictures)).append("\n");
    sb.append("    recommendations: ").append(toIndentedString(recommendations)).append("\n");
    sb.append("    related: ").append(toIndentedString(related)).append("\n");
    sb.append("    resourceCreatorTeamUser: ").append(toIndentedString(resourceCreatorTeamUser)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    teamPermissions: ").append(toIndentedString(teamPermissions)).append("\n");
    sb.append("    texttracks: ").append(toIndentedString(texttracks)).append("\n");
    sb.append("    trailer: ").append(toIndentedString(trailer)).append("\n");
    sb.append("    usersWithAccess: ").append(toIndentedString(usersWithAccess)).append("\n");
    sb.append("    versions: ").append(toIndentedString(versions)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ancestor_path");
    openapiFields.add("available_channels");
    openapiFields.add("comments");
    openapiFields.add("credits");
    openapiFields.add("likes");
    openapiFields.add("ondemand");
    openapiFields.add("pictures");
    openapiFields.add("recommendations");
    openapiFields.add("related");
    openapiFields.add("resource_creator_team_user");
    openapiFields.add("season");
    openapiFields.add("team_permissions");
    openapiFields.add("texttracks");
    openapiFields.add("trailer");
    openapiFields.add("users_with_access");
    openapiFields.add("versions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ancestor_path");
    openapiRequiredFields.add("available_channels");
    openapiRequiredFields.add("comments");
    openapiRequiredFields.add("credits");
    openapiRequiredFields.add("likes");
    openapiRequiredFields.add("ondemand");
    openapiRequiredFields.add("pictures");
    openapiRequiredFields.add("recommendations");
    openapiRequiredFields.add("related");
    openapiRequiredFields.add("resource_creator_team_user");
    openapiRequiredFields.add("season");
    openapiRequiredFields.add("team_permissions");
    openapiRequiredFields.add("texttracks");
    openapiRequiredFields.add("trailer");
    openapiRequiredFields.add("users_with_access");
    openapiRequiredFields.add("versions");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VideoMetadataConnections
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!VideoMetadataConnections.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoMetadataConnections is not found in the empty JSON string", VideoMetadataConnections.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VideoMetadataConnections.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("ancestor_path").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ancestor_path` to be an array in the JSON string but got `%s`", jsonObj.get("ancestor_path").toString()));
      }

      JsonArray jsonArrayancestorPath = jsonObj.getAsJsonArray("ancestor_path");
      // validate the required field `ancestor_path` (array)
      for (int i = 0; i < jsonArrayancestorPath.size(); i++) {
        AncestorPath.validateJsonObject(jsonArrayancestorPath.get(i).getAsJsonObject());
      };
      // validate the required field `available_channels`
      VideoMetadataConnectionsAvailableChannels.validateJsonObject(jsonObj.getAsJsonObject("available_channels"));
      // validate the required field `comments`
      VideoMetadataConnectionsComments.validateJsonObject(jsonObj.getAsJsonObject("comments"));
      // validate the required field `credits`
      VideoMetadataConnectionsCredits.validateJsonObject(jsonObj.getAsJsonObject("credits"));
      // validate the required field `likes`
      VideoMetadataConnectionsLikes.validateJsonObject(jsonObj.getAsJsonObject("likes"));
      // validate the required field `ondemand`
      VideoMetadataConnectionsOndemand.validateJsonObject(jsonObj.getAsJsonObject("ondemand"));
      // validate the required field `pictures`
      VideoMetadataConnectionsPictures.validateJsonObject(jsonObj.getAsJsonObject("pictures"));
      // validate the required field `recommendations`
      VideoMetadataConnectionsRecommendations.validateJsonObject(jsonObj.getAsJsonObject("recommendations"));
      // validate the required field `related`
      VideoMetadataConnectionsRelated.validateJsonObject(jsonObj.getAsJsonObject("related"));
      // validate the required field `resource_creator_team_user`
      VideoMetadataConnectionsResourceCreatorTeamUser.validateJsonObject(jsonObj.getAsJsonObject("resource_creator_team_user"));
      // validate the required field `season`
      VideoMetadataConnectionsSeason.validateJsonObject(jsonObj.getAsJsonObject("season"));
      // validate the required field `team_permissions`
      VideoMetadataConnectionsTeamPermissions.validateJsonObject(jsonObj.getAsJsonObject("team_permissions"));
      // validate the required field `texttracks`
      VideoMetadataConnectionsTexttracks.validateJsonObject(jsonObj.getAsJsonObject("texttracks"));
      // validate the required field `trailer`
      VideoMetadataConnectionsTrailer.validateJsonObject(jsonObj.getAsJsonObject("trailer"));
      // validate the required field `users_with_access`
      VideoMetadataConnectionsUsersWithAccess.validateJsonObject(jsonObj.getAsJsonObject("users_with_access"));
      // validate the required field `versions`
      VideoMetadataConnectionsVersions.validateJsonObject(jsonObj.getAsJsonObject("versions"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoMetadataConnections.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoMetadataConnections' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoMetadataConnections> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoMetadataConnections.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoMetadataConnections>() {
           @Override
           public void write(JsonWriter out, VideoMetadataConnections value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoMetadataConnections read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             VideoMetadataConnections instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VideoMetadataConnections given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VideoMetadataConnections
  * @throws IOException if the JSON string is invalid with respect to VideoMetadataConnections
  */
  public static VideoMetadataConnections fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoMetadataConnections.class);
  }

 /**
  * Convert an instance of VideoMetadataConnections to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

