/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.FollowUsersRequest;
import com.konfigthis.client.model.User;
import com.konfigthis.client.model.UsersFollowersFollowMultipleUsersRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersFollowersApi
 */
@Disabled
public class UsersFollowersApiTest {

    private static UsersFollowersApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new UsersFollowersApi(apiClient);
    }

    /**
     * Check if the user is following another user
     *
     * This method determines whether the authenticated user is a follower of the specified user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkFollowingStatusTest() throws ApiException {
        Double followUserId = null;
        Double userId = null;
        api.checkFollowingStatus(followUserId, userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Check if the user is following another user
     *
     * This method determines whether the authenticated user is a follower of the specified user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkFollowingUserTest() throws ApiException {
        Double followUserId = null;
        api.checkFollowingUser(followUserId)
                .execute();
        // TODO: test validations
    }

    /**
     * Follow a list of users
     *
     * This method causes the authenticated user to become a follower of multiple users. In the body of the request, specify the list of users to follow as an array of URIs, where &#x60;user01_id&#x60;, &#x60;user02_id&#x60;, &#x60;user03_id&#x60;, and so on, are the user IDs of the users in question:  &#x60;&#x60;&#x60; {  [      {\&quot;uri\&quot; : \&quot;/users/{user01_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user02_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user03_id}\&quot;}  ] } &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void followMultipleUsersTest() throws ApiException {
        List<String> users = null;
        api.followMultipleUsers(users)
                .execute();
        // TODO: test validations
    }

    /**
     * Follow a specific user
     *
     * This method causes the authenticated user to become the follower of the specified user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void followSpecificUserTest() throws ApiException {
        Double followUserId = null;
        api.followSpecificUser(followUserId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the followers of the user
     *
     * This method returns every follower of the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void followersTest() throws ApiException {
        Double userId = null;
        String direction = null;
        Double page = null;
        Double perPage = null;
        String query = null;
        String sort = null;
        List<User> response = api.followers(userId)
                .direction(direction)
                .page(page)
                .perPage(perPage)
                .query(query)
                .sort(sort)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the followers of the user
     *
     * This method returns every follower of the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllTest() throws ApiException {
        String direction = null;
        Double page = null;
        Double perPage = null;
        String query = null;
        String sort = null;
        List<User> response = api.listAll()
                .direction(direction)
                .page(page)
                .perPage(perPage)
                .query(query)
                .sort(sort)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the users that the user is following
     *
     * This method returns every user that the authenticated user is following.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOfFollowedUsersTest() throws ApiException {
        Double userId = null;
        String direction = null;
        String filter = null;
        Double page = null;
        Double perPage = null;
        String query = null;
        String sort = null;
        List<User> response = api.listOfFollowedUsers(userId)
                .direction(direction)
                .filter(filter)
                .page(page)
                .perPage(perPage)
                .query(query)
                .sort(sort)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the users that the user is following
     *
     * This method returns every user that the authenticated user is following.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOfFollowingUsersTest() throws ApiException {
        String direction = null;
        String filter = null;
        Double page = null;
        Double perPage = null;
        String query = null;
        String sort = null;
        List<User> response = api.listOfFollowingUsers()
                .direction(direction)
                .filter(filter)
                .page(page)
                .perPage(perPage)
                .query(query)
                .sort(sort)
                .execute();
        // TODO: test validations
    }

    /**
     * Unfollow a user
     *
     * This method causes the authenticated user to stop following another user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopFollowingUserTest() throws ApiException {
        Double followUserId = null;
        api.stopFollowingUser(followUserId)
                .execute();
        // TODO: test validations
    }

    /**
     * Follow a specific user
     *
     * This method causes the authenticated user to become the follower of the specified user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userTest() throws ApiException {
        Double followUserId = null;
        Double userId = null;
        api.user(followUserId, userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Unfollow a user
     *
     * This method causes the authenticated user to stop following another user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void user_0Test() throws ApiException {
        Double followUserId = null;
        Double userId = null;
        api.user_0(followUserId, userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Follow a list of users
     *
     * This method causes the authenticated user to become a follower of multiple users. In the body of the request, specify the list of users to follow as an array of URIs, where &#x60;user01_id&#x60;, &#x60;user02_id&#x60;, &#x60;user03_id&#x60;, and so on, are the user IDs of the users in question:  &#x60;&#x60;&#x60; {  [      {\&quot;uri\&quot; : \&quot;/users/{user01_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user02_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user03_id}\&quot;}  ] } &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersTest() throws ApiException {
        List<String> users = null;
        Double userId = null;
        api.users(users, userId)
                .execute();
        // TODO: test validations
    }

}
