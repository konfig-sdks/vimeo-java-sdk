/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Video;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LiveEventEndApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LiveEventEndApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LiveEventEndApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call eventTerminationCall(Double liveEventId, Double clipId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/live_events/{live_event_id}/end"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clipId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clip_id", clipId));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventTerminationValidateBeforeCall(Double liveEventId, Double clipId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling eventTermination(Async)");
        }

        return eventTerminationCall(liveEventId, clipId, _callback);

    }


    private ApiResponse<Video> eventTerminationWithHttpInfo(Double liveEventId, Double clipId) throws ApiException {
        okhttp3.Call localVarCall = eventTerminationValidateBeforeCall(liveEventId, clipId, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call eventTerminationAsync(Double liveEventId, Double clipId, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventTerminationValidateBeforeCall(liveEventId, clipId, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EventTerminationRequestBuilder {
        private final Double liveEventId;
        private Double clipId;

        private EventTerminationRequestBuilder(double liveEventId) {
            this.liveEventId = liveEventId;
        }

        /**
         * Set clipId
         * @param clipId The ID of the streamable video. (optional)
         * @return EventTerminationRequestBuilder
         */
        public EventTerminationRequestBuilder clipId(Double clipId) {
            this.clipId = clipId;
            return this;
        }
        
        /**
         * Build call for eventTermination
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event was ended. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return eventTerminationCall(liveEventId, clipId, _callback);
        }


        /**
         * Execute eventTermination request
         * @return Video
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event was ended. </td><td>  -  </td></tr>
         </table>
         */
        public Video execute() throws ApiException {
            ApiResponse<Video> localVarResp = eventTerminationWithHttpInfo(liveEventId, clipId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute eventTermination request with HTTP info returned
         * @return ApiResponse&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event was ended. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Video> executeWithHttpInfo() throws ApiException {
            return eventTerminationWithHttpInfo(liveEventId, clipId);
        }

        /**
         * Execute eventTermination request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event was ended. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Video> _callback) throws ApiException {
            return eventTerminationAsync(liveEventId, clipId, _callback);
        }
    }

    /**
     * End a live event
     * This method ends the specified event. The authenticated user must be the owner of the event.
     * @param liveEventId The ID of the event. (required)
     * @return EventTerminationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The event was ended. </td><td>  -  </td></tr>
     </table>
     */
    public EventTerminationRequestBuilder eventTermination(double liveEventId) throws IllegalArgumentException {
        
        return new EventTerminationRequestBuilder(liveEventId);
    }
    private okhttp3.Call eventTerminationAlt1Call(Double liveEventId, Double clipId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/live_events/{live_event_id}/end"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clipId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clip_id", clipId));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventTerminationAlt1ValidateBeforeCall(Double liveEventId, Double clipId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling eventTerminationAlt1(Async)");
        }

        return eventTerminationAlt1Call(liveEventId, clipId, _callback);

    }


    private ApiResponse<Video> eventTerminationAlt1WithHttpInfo(Double liveEventId, Double clipId) throws ApiException {
        okhttp3.Call localVarCall = eventTerminationAlt1ValidateBeforeCall(liveEventId, clipId, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call eventTerminationAlt1Async(Double liveEventId, Double clipId, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventTerminationAlt1ValidateBeforeCall(liveEventId, clipId, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EventTerminationAlt1RequestBuilder {
        private final Double liveEventId;
        private Double clipId;

        private EventTerminationAlt1RequestBuilder(double liveEventId) {
            this.liveEventId = liveEventId;
        }

        /**
         * Set clipId
         * @param clipId The ID of the streamable video. (optional)
         * @return EventTerminationAlt1RequestBuilder
         */
        public EventTerminationAlt1RequestBuilder clipId(Double clipId) {
            this.clipId = clipId;
            return this;
        }
        
        /**
         * Build call for eventTerminationAlt1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event was ended. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return eventTerminationAlt1Call(liveEventId, clipId, _callback);
        }


        /**
         * Execute eventTerminationAlt1 request
         * @return Video
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event was ended. </td><td>  -  </td></tr>
         </table>
         */
        public Video execute() throws ApiException {
            ApiResponse<Video> localVarResp = eventTerminationAlt1WithHttpInfo(liveEventId, clipId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute eventTerminationAlt1 request with HTTP info returned
         * @return ApiResponse&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event was ended. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Video> executeWithHttpInfo() throws ApiException {
            return eventTerminationAlt1WithHttpInfo(liveEventId, clipId);
        }

        /**
         * Execute eventTerminationAlt1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event was ended. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Video> _callback) throws ApiException {
            return eventTerminationAlt1Async(liveEventId, clipId, _callback);
        }
    }

    /**
     * End a live event
     * This method ends the specified event. The authenticated user must be the owner of the event.
     * @param liveEventId The ID of the event. (required)
     * @return EventTerminationAlt1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The event was ended. </td><td>  -  </td></tr>
     </table>
     */
    public EventTerminationAlt1RequestBuilder eventTerminationAlt1(double liveEventId) throws IllegalArgumentException {
        
        return new EventTerminationAlt1RequestBuilder(liveEventId);
    }
    private okhttp3.Call eventTerminationAlt2Call(Double liveEventId, Double clipId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/live_events/{live_event_id}/end"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clipId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clip_id", clipId));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventTerminationAlt2ValidateBeforeCall(Double liveEventId, Double clipId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling eventTerminationAlt2(Async)");
        }

        return eventTerminationAlt2Call(liveEventId, clipId, _callback);

    }


    private ApiResponse<Video> eventTerminationAlt2WithHttpInfo(Double liveEventId, Double clipId) throws ApiException {
        okhttp3.Call localVarCall = eventTerminationAlt2ValidateBeforeCall(liveEventId, clipId, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call eventTerminationAlt2Async(Double liveEventId, Double clipId, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventTerminationAlt2ValidateBeforeCall(liveEventId, clipId, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EventTerminationAlt2RequestBuilder {
        private final Double liveEventId;
        private Double clipId;

        private EventTerminationAlt2RequestBuilder(double liveEventId) {
            this.liveEventId = liveEventId;
        }

        /**
         * Set clipId
         * @param clipId The ID of the streamable video. (optional)
         * @return EventTerminationAlt2RequestBuilder
         */
        public EventTerminationAlt2RequestBuilder clipId(Double clipId) {
            this.clipId = clipId;
            return this;
        }
        
        /**
         * Build call for eventTerminationAlt2
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event was ended. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return eventTerminationAlt2Call(liveEventId, clipId, _callback);
        }


        /**
         * Execute eventTerminationAlt2 request
         * @return Video
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event was ended. </td><td>  -  </td></tr>
         </table>
         */
        public Video execute() throws ApiException {
            ApiResponse<Video> localVarResp = eventTerminationAlt2WithHttpInfo(liveEventId, clipId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute eventTerminationAlt2 request with HTTP info returned
         * @return ApiResponse&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event was ended. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Video> executeWithHttpInfo() throws ApiException {
            return eventTerminationAlt2WithHttpInfo(liveEventId, clipId);
        }

        /**
         * Execute eventTerminationAlt2 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event was ended. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Video> _callback) throws ApiException {
            return eventTerminationAlt2Async(liveEventId, clipId, _callback);
        }
    }

    /**
     * End a live event
     * This method ends the specified event. The authenticated user must be the owner of the event.
     * @param liveEventId The ID of the event. (required)
     * @return EventTerminationAlt2RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The event was ended. </td><td>  -  </td></tr>
     </table>
     */
    public EventTerminationAlt2RequestBuilder eventTerminationAlt2(double liveEventId) throws IllegalArgumentException {
        
        return new EventTerminationAlt2RequestBuilder(liveEventId);
    }
}
