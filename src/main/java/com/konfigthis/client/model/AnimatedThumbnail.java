/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AnimatedThumbnail
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AnimatedThumbnail {
  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Double duration;

  public static final String SERIALIZED_NAME_FILE_FORMAT = "file_format";
  @SerializedName(SERIALIZED_NAME_FILE_FORMAT)
  private String fileFormat;

  public static final String SERIALIZED_NAME_FILE_SIZE = "file_size";
  @SerializedName(SERIALIZED_NAME_FILE_SIZE)
  private Double fileSize;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Double height;

  public static final String SERIALIZED_NAME_IS_DOWNLOADABLE = "is_downloadable";
  @SerializedName(SERIALIZED_NAME_IS_DOWNLOADABLE)
  private Boolean isDownloadable;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_LINK_WITH_PLAY_BUTTON = "link_with_play_button";
  @SerializedName(SERIALIZED_NAME_LINK_WITH_PLAY_BUTTON)
  private String linkWithPlayButton;

  public static final String SERIALIZED_NAME_PROFILE_ID = "profile_id";
  @SerializedName(SERIALIZED_NAME_PROFILE_ID)
  private String profileId;

  public static final String SERIALIZED_NAME_START_TIME = "start_time";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private Double startTime;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Double width;

  public AnimatedThumbnail() {
  }

  public AnimatedThumbnail duration(Double duration) {
    
    
    
    
    this.duration = duration;
    return this;
  }

  public AnimatedThumbnail duration(Integer duration) {
    
    
    
    
    this.duration = duration.doubleValue();
    return this;
  }

   /**
   * The duration of the animated thumbnail in seconds.
   * @return duration
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "4", required = true, value = "The duration of the animated thumbnail in seconds.")

  public Double getDuration() {
    return duration;
  }


  public void setDuration(Double duration) {
    
    
    
    this.duration = duration;
  }


  public AnimatedThumbnail fileFormat(String fileFormat) {
    
    
    
    
    this.fileFormat = fileFormat;
    return this;
  }

   /**
   * The file format of the animated thumbnail.
   * @return fileFormat
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "gif", required = true, value = "The file format of the animated thumbnail.")

  public String getFileFormat() {
    return fileFormat;
  }


  public void setFileFormat(String fileFormat) {
    
    
    
    this.fileFormat = fileFormat;
  }


  public AnimatedThumbnail fileSize(Double fileSize) {
    
    
    
    
    this.fileSize = fileSize;
    return this;
  }

  public AnimatedThumbnail fileSize(Integer fileSize) {
    
    
    
    
    this.fileSize = fileSize.doubleValue();
    return this;
  }

   /**
   * The file size of the animated thumbnail in bytes.
   * @return fileSize
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1440000", required = true, value = "The file size of the animated thumbnail in bytes.")

  public Double getFileSize() {
    return fileSize;
  }


  public void setFileSize(Double fileSize) {
    
    
    
    this.fileSize = fileSize;
  }


  public AnimatedThumbnail height(Double height) {
    
    
    
    
    this.height = height;
    return this;
  }

  public AnimatedThumbnail height(Integer height) {
    
    
    
    
    this.height = height.doubleValue();
    return this;
  }

   /**
   * The height of the animated thumbnail in pixels.
   * @return height
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "450", required = true, value = "The height of the animated thumbnail in pixels.")

  public Double getHeight() {
    return height;
  }


  public void setHeight(Double height) {
    
    
    
    this.height = height;
  }


  public AnimatedThumbnail isDownloadable(Boolean isDownloadable) {
    
    
    
    
    this.isDownloadable = isDownloadable;
    return this;
  }

   /**
   * Whether the animated thumbnail can be downloaded.
   * @return isDownloadable
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the animated thumbnail can be downloaded.")

  public Boolean getIsDownloadable() {
    return isDownloadable;
  }


  public void setIsDownloadable(Boolean isDownloadable) {
    
    
    
    this.isDownloadable = isDownloadable;
  }


  public AnimatedThumbnail link(String link) {
    
    
    
    
    this.link = link;
    return this;
  }

   /**
   * The URL of the animated thumbnail file.
   * @return link
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://videoapi-muybridge-dev.vimeocdn.com/animated-thumbnails/image/7005be96-e5ab-4c4c-9cdd-8b6dfc2b304", required = true, value = "The URL of the animated thumbnail file.")

  public String getLink() {
    return link;
  }


  public void setLink(String link) {
    
    
    
    this.link = link;
  }


  public AnimatedThumbnail linkWithPlayButton(String linkWithPlayButton) {
    
    
    
    
    this.linkWithPlayButton = linkWithPlayButton;
    return this;
  }

   /**
   * The URL of the animated thumbnail file with a play button overlay.
   * @return linkWithPlayButton
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://videoapi-muybridge-dev.vimeocdn.com/animated-thumbnails/image/7005be96-e5ab-4c4c-9cdd-8b6dfc2b304", required = true, value = "The URL of the animated thumbnail file with a play button overlay.")

  public String getLinkWithPlayButton() {
    return linkWithPlayButton;
  }


  public void setLinkWithPlayButton(String linkWithPlayButton) {
    
    
    
    this.linkWithPlayButton = linkWithPlayButton;
  }


  public AnimatedThumbnail profileId(String profileId) {
    
    
    
    
    this.profileId = profileId;
    return this;
  }

   /**
   * The profile ID of the animated thumbnail.
   * @return profileId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Low", required = true, value = "The profile ID of the animated thumbnail.")

  public String getProfileId() {
    return profileId;
  }


  public void setProfileId(String profileId) {
    
    
    
    this.profileId = profileId;
  }


  public AnimatedThumbnail startTime(Double startTime) {
    
    
    
    
    this.startTime = startTime;
    return this;
  }

  public AnimatedThumbnail startTime(Integer startTime) {
    
    
    
    
    this.startTime = startTime.doubleValue();
    return this;
  }

   /**
   * The time in the video, in seconds, corresponding to the start of the animation.
   * @return startTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0", required = true, value = "The time in the video, in seconds, corresponding to the start of the animation.")

  public Double getStartTime() {
    return startTime;
  }


  public void setStartTime(Double startTime) {
    
    
    
    this.startTime = startTime;
  }


  public AnimatedThumbnail uuid(String uuid) {
    
    
    
    
    this.uuid = uuid;
    return this;
  }

   /**
   * The ID of the animated thumbnail.
   * @return uuid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "b2f1-711515ecf", required = true, value = "The ID of the animated thumbnail.")

  public String getUuid() {
    return uuid;
  }


  public void setUuid(String uuid) {
    
    
    
    this.uuid = uuid;
  }


  public AnimatedThumbnail width(Double width) {
    
    
    
    
    this.width = width;
    return this;
  }

  public AnimatedThumbnail width(Integer width) {
    
    
    
    
    this.width = width.doubleValue();
    return this;
  }

   /**
   * The width of the animated thumbnail in pixels.
   * @return width
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "800", required = true, value = "The width of the animated thumbnail in pixels.")

  public Double getWidth() {
    return width;
  }


  public void setWidth(Double width) {
    
    
    
    this.width = width;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AnimatedThumbnail instance itself
   */
  public AnimatedThumbnail putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnimatedThumbnail animatedThumbnail = (AnimatedThumbnail) o;
    return Objects.equals(this.duration, animatedThumbnail.duration) &&
        Objects.equals(this.fileFormat, animatedThumbnail.fileFormat) &&
        Objects.equals(this.fileSize, animatedThumbnail.fileSize) &&
        Objects.equals(this.height, animatedThumbnail.height) &&
        Objects.equals(this.isDownloadable, animatedThumbnail.isDownloadable) &&
        Objects.equals(this.link, animatedThumbnail.link) &&
        Objects.equals(this.linkWithPlayButton, animatedThumbnail.linkWithPlayButton) &&
        Objects.equals(this.profileId, animatedThumbnail.profileId) &&
        Objects.equals(this.startTime, animatedThumbnail.startTime) &&
        Objects.equals(this.uuid, animatedThumbnail.uuid) &&
        Objects.equals(this.width, animatedThumbnail.width)&&
        Objects.equals(this.additionalProperties, animatedThumbnail.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(duration, fileFormat, fileSize, height, isDownloadable, link, linkWithPlayButton, profileId, startTime, uuid, width, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnimatedThumbnail {\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    fileFormat: ").append(toIndentedString(fileFormat)).append("\n");
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    isDownloadable: ").append(toIndentedString(isDownloadable)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    linkWithPlayButton: ").append(toIndentedString(linkWithPlayButton)).append("\n");
    sb.append("    profileId: ").append(toIndentedString(profileId)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("duration");
    openapiFields.add("file_format");
    openapiFields.add("file_size");
    openapiFields.add("height");
    openapiFields.add("is_downloadable");
    openapiFields.add("link");
    openapiFields.add("link_with_play_button");
    openapiFields.add("profile_id");
    openapiFields.add("start_time");
    openapiFields.add("uuid");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("duration");
    openapiRequiredFields.add("file_format");
    openapiRequiredFields.add("file_size");
    openapiRequiredFields.add("height");
    openapiRequiredFields.add("is_downloadable");
    openapiRequiredFields.add("link");
    openapiRequiredFields.add("link_with_play_button");
    openapiRequiredFields.add("profile_id");
    openapiRequiredFields.add("start_time");
    openapiRequiredFields.add("uuid");
    openapiRequiredFields.add("width");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AnimatedThumbnail
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AnimatedThumbnail.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnimatedThumbnail is not found in the empty JSON string", AnimatedThumbnail.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AnimatedThumbnail.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("file_format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_format").toString()));
      }
      if (!jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if (!jsonObj.get("link_with_play_button").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link_with_play_button` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link_with_play_button").toString()));
      }
      if (!jsonObj.get("profile_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profile_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profile_id").toString()));
      }
      if (!jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnimatedThumbnail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnimatedThumbnail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnimatedThumbnail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnimatedThumbnail.class));

       return (TypeAdapter<T>) new TypeAdapter<AnimatedThumbnail>() {
           @Override
           public void write(JsonWriter out, AnimatedThumbnail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AnimatedThumbnail read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AnimatedThumbnail instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AnimatedThumbnail given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AnimatedThumbnail
  * @throws IOException if the JSON string is invalid with respect to AnimatedThumbnail
  */
  public static AnimatedThumbnail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnimatedThumbnail.class);
  }

 /**
  * Convert an instance of AnimatedThumbnail to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

