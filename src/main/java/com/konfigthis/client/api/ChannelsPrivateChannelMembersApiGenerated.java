/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ChannelsPrivateChannelMembersPermitUserAccessRequest;
import com.konfigthis.client.model.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ChannelsPrivateChannelMembersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChannelsPrivateChannelMembersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ChannelsPrivateChannelMembersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAccessibleUsersCall(Double channelId, String direction, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/privacy/users"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccessibleUsersValidateBeforeCall(Double channelId, String direction, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getAccessibleUsers(Async)");
        }

        return getAccessibleUsersCall(channelId, direction, page, perPage, _callback);

    }


    private ApiResponse<List<User>> getAccessibleUsersWithHttpInfo(Double channelId, String direction, Double page, Double perPage) throws ApiException {
        okhttp3.Call localVarCall = getAccessibleUsersValidateBeforeCall(channelId, direction, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAccessibleUsersAsync(Double channelId, String direction, Double page, Double perPage, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccessibleUsersValidateBeforeCall(channelId, direction, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAccessibleUsersRequestBuilder {
        private final Double channelId;
        private String direction;
        private Double page;
        private Double perPage;

        private GetAccessibleUsersRequestBuilder(double channelId) {
            this.channelId = channelId;
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return GetAccessibleUsersRequestBuilder
         */
        public GetAccessibleUsersRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetAccessibleUsersRequestBuilder
         */
        public GetAccessibleUsersRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetAccessibleUsersRequestBuilder
         */
        public GetAccessibleUsersRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getAccessibleUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAccessibleUsersCall(channelId, direction, page, perPage, _callback);
        }


        /**
         * Execute getAccessibleUsers request
         * @return List&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<User> execute() throws ApiException {
            ApiResponse<List<User>> localVarResp = getAccessibleUsersWithHttpInfo(channelId, direction, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAccessibleUsers request with HTTP info returned
         * @return ApiResponse&lt;List&lt;User&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<User>> executeWithHttpInfo() throws ApiException {
            return getAccessibleUsersWithHttpInfo(channelId, direction, page, perPage);
        }

        /**
         * Execute getAccessibleUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<User>> _callback) throws ApiException {
            return getAccessibleUsersAsync(channelId, direction, page, perPage, _callback);
        }
    }

    /**
     * Get all the users who can access a private channel
     * This method returns all the users who have access to the specified private channel. The authenticated user must be the owner of the channel.
     * @param channelId The ID of the channel. (required)
     * @return GetAccessibleUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAccessibleUsersRequestBuilder getAccessibleUsers(double channelId) throws IllegalArgumentException {
        
        return new GetAccessibleUsersRequestBuilder(channelId);
    }
    private okhttp3.Call permitUserAccessCall(Double channelId, ChannelsPrivateChannelMembersPermitUserAccessRequest channelsPrivateChannelMembersPermitUserAccessRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = channelsPrivateChannelMembersPermitUserAccessRequest;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/privacy/users"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call permitUserAccessValidateBeforeCall(Double channelId, ChannelsPrivateChannelMembersPermitUserAccessRequest channelsPrivateChannelMembersPermitUserAccessRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling permitUserAccess(Async)");
        }

        // verify the required parameter 'channelsPrivateChannelMembersPermitUserAccessRequest' is set
        if (channelsPrivateChannelMembersPermitUserAccessRequest == null) {
            throw new ApiException("Missing the required parameter 'channelsPrivateChannelMembersPermitUserAccessRequest' when calling permitUserAccess(Async)");
        }

        return permitUserAccessCall(channelId, channelsPrivateChannelMembersPermitUserAccessRequest, _callback);

    }


    private ApiResponse<List<User>> permitUserAccessWithHttpInfo(Double channelId, ChannelsPrivateChannelMembersPermitUserAccessRequest channelsPrivateChannelMembersPermitUserAccessRequest) throws ApiException {
        okhttp3.Call localVarCall = permitUserAccessValidateBeforeCall(channelId, channelsPrivateChannelMembersPermitUserAccessRequest, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call permitUserAccessAsync(Double channelId, ChannelsPrivateChannelMembersPermitUserAccessRequest channelsPrivateChannelMembersPermitUserAccessRequest, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = permitUserAccessValidateBeforeCall(channelId, channelsPrivateChannelMembersPermitUserAccessRequest, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PermitUserAccessRequestBuilder {
        private final List<String> users;
        private final Double channelId;

        private PermitUserAccessRequestBuilder(List<String> users, double channelId) {
            this.users = users;
            this.channelId = channelId;
        }

        /**
         * Build call for permitUserAccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The users can access the private channel. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ChannelsPrivateChannelMembersPermitUserAccessRequest channelsPrivateChannelMembersPermitUserAccessRequest = buildBodyParams();
            return permitUserAccessCall(channelId, channelsPrivateChannelMembersPermitUserAccessRequest, _callback);
        }

        private ChannelsPrivateChannelMembersPermitUserAccessRequest buildBodyParams() {
            ChannelsPrivateChannelMembersPermitUserAccessRequest channelsPrivateChannelMembersPermitUserAccessRequest = new ChannelsPrivateChannelMembersPermitUserAccessRequest();
            channelsPrivateChannelMembersPermitUserAccessRequest.users(this.users);
            return channelsPrivateChannelMembersPermitUserAccessRequest;
        }

        /**
         * Execute permitUserAccess request
         * @return List&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The users can access the private channel. </td><td>  -  </td></tr>
         </table>
         */
        public List<User> execute() throws ApiException {
            ChannelsPrivateChannelMembersPermitUserAccessRequest channelsPrivateChannelMembersPermitUserAccessRequest = buildBodyParams();
            ApiResponse<List<User>> localVarResp = permitUserAccessWithHttpInfo(channelId, channelsPrivateChannelMembersPermitUserAccessRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute permitUserAccess request with HTTP info returned
         * @return ApiResponse&lt;List&lt;User&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The users can access the private channel. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<User>> executeWithHttpInfo() throws ApiException {
            ChannelsPrivateChannelMembersPermitUserAccessRequest channelsPrivateChannelMembersPermitUserAccessRequest = buildBodyParams();
            return permitUserAccessWithHttpInfo(channelId, channelsPrivateChannelMembersPermitUserAccessRequest);
        }

        /**
         * Execute permitUserAccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The users can access the private channel. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<User>> _callback) throws ApiException {
            ChannelsPrivateChannelMembersPermitUserAccessRequest channelsPrivateChannelMembersPermitUserAccessRequest = buildBodyParams();
            return permitUserAccessAsync(channelId, channelsPrivateChannelMembersPermitUserAccessRequest, _callback);
        }
    }

    /**
     * Permit a list of users to access a private channel
     * This method gives multiple users access to the specified private channel. The authenticated user must be the owner of the channel.
     * @param channelId The ID of the channel. (required)
     * @param channelsPrivateChannelMembersPermitUserAccessRequest  (required)
     * @return PermitUserAccessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users can access the private channel. </td><td>  -  </td></tr>
     </table>
     */
    public PermitUserAccessRequestBuilder permitUserAccess(List<String> users, double channelId) throws IllegalArgumentException {
        if (users == null) throw new IllegalArgumentException("\"users\" is required but got null");
        
        return new PermitUserAccessRequestBuilder(users, channelId);
    }
    private okhttp3.Call permitUserAccess_0Call(Double channelId, Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/privacy/users/{user_id}"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call permitUserAccess_0ValidateBeforeCall(Double channelId, Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling permitUserAccess_0(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling permitUserAccess_0(Async)");
        }

        return permitUserAccess_0Call(channelId, userId, _callback);

    }


    private ApiResponse<Void> permitUserAccess_0WithHttpInfo(Double channelId, Double userId) throws ApiException {
        okhttp3.Call localVarCall = permitUserAccess_0ValidateBeforeCall(channelId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call permitUserAccess_0Async(Double channelId, Double userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = permitUserAccess_0ValidateBeforeCall(channelId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class PermitUserAccess0RequestBuilder {
        private final Double channelId;
        private final Double userId;

        private PermitUserAccess0RequestBuilder(double channelId, double userId) {
            this.channelId = channelId;
            this.userId = userId;
        }

        /**
         * Build call for permitUserAccess_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The user can now view the private channel. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return permitUserAccess_0Call(channelId, userId, _callback);
        }


        /**
         * Execute permitUserAccess_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The user can now view the private channel. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            permitUserAccess_0WithHttpInfo(channelId, userId);
        }

        /**
         * Execute permitUserAccess_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The user can now view the private channel. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return permitUserAccess_0WithHttpInfo(channelId, userId);
        }

        /**
         * Execute permitUserAccess_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The user can now view the private channel. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return permitUserAccess_0Async(channelId, userId, _callback);
        }
    }

    /**
     * Permit a specific user to access a private channel
     * This method gives a single user access to the specified private channel. The authenticated user must be the owner of the channel.
     * @param channelId The ID of the channel. (required)
     * @param userId The ID of the user. (required)
     * @return PermitUserAccess0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user can now view the private channel. </td><td>  -  </td></tr>
     </table>
     */
    public PermitUserAccess0RequestBuilder permitUserAccess_0(double channelId, double userId) throws IllegalArgumentException {
        
        
        return new PermitUserAccess0RequestBuilder(channelId, userId);
    }
    private okhttp3.Call restrictUserAccessCall(Double channelId, Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/privacy/users/{user_id}"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restrictUserAccessValidateBeforeCall(Double channelId, Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling restrictUserAccess(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling restrictUserAccess(Async)");
        }

        return restrictUserAccessCall(channelId, userId, _callback);

    }


    private ApiResponse<Void> restrictUserAccessWithHttpInfo(Double channelId, Double userId) throws ApiException {
        okhttp3.Call localVarCall = restrictUserAccessValidateBeforeCall(channelId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call restrictUserAccessAsync(Double channelId, Double userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = restrictUserAccessValidateBeforeCall(channelId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RestrictUserAccessRequestBuilder {
        private final Double channelId;
        private final Double userId;

        private RestrictUserAccessRequestBuilder(double channelId, double userId) {
            this.channelId = channelId;
            this.userId = userId;
        }

        /**
         * Build call for restrictUserAccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user can&#39;t acceess the private channel. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return restrictUserAccessCall(channelId, userId, _callback);
        }


        /**
         * Execute restrictUserAccess request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user can&#39;t acceess the private channel. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            restrictUserAccessWithHttpInfo(channelId, userId);
        }

        /**
         * Execute restrictUserAccess request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user can&#39;t acceess the private channel. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return restrictUserAccessWithHttpInfo(channelId, userId);
        }

        /**
         * Execute restrictUserAccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user can&#39;t acceess the private channel. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return restrictUserAccessAsync(channelId, userId, _callback);
        }
    }

    /**
     * Restrict a user from accessing a private channel
     * This method prevents a single user from being able to access the specified private channel. The authenticated user must be the owner of the channel.
     * @param channelId The ID of the channel. (required)
     * @param userId The ID of the user. (required)
     * @return RestrictUserAccessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user can&#39;t acceess the private channel. </td><td>  -  </td></tr>
     </table>
     */
    public RestrictUserAccessRequestBuilder restrictUserAccess(double channelId, double userId) throws IllegalArgumentException {
        
        
        return new RestrictUserAccessRequestBuilder(channelId, userId);
    }
}
