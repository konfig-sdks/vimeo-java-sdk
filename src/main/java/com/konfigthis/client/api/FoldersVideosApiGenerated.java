/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Video;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FoldersVideosApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FoldersVideosApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public FoldersVideosApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addMultipleToFolderCall(Double projectId, String uris, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/projects/{project_id}/videos"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uris != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uris", uris));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMultipleToFolderValidateBeforeCall(Double projectId, String uris, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling addMultipleToFolder(Async)");
        }

        // verify the required parameter 'uris' is set
        if (uris == null) {
            throw new ApiException("Missing the required parameter 'uris' when calling addMultipleToFolder(Async)");
        }

        return addMultipleToFolderCall(projectId, uris, _callback);

    }


    private ApiResponse<Void> addMultipleToFolderWithHttpInfo(Double projectId, String uris) throws ApiException {
        okhttp3.Call localVarCall = addMultipleToFolderValidateBeforeCall(projectId, uris, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addMultipleToFolderAsync(Double projectId, String uris, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMultipleToFolderValidateBeforeCall(projectId, uris, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddMultipleToFolderRequestBuilder {
        private final Double projectId;
        private final String uris;

        private AddMultipleToFolderRequestBuilder(double projectId, String uris) {
            this.projectId = projectId;
            this.uris = uris;
        }

        /**
         * Build call for addMultipleToFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addMultipleToFolderCall(projectId, uris, _callback);
        }


        /**
         * Execute addMultipleToFolder request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were added. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            addMultipleToFolderWithHttpInfo(projectId, uris);
        }

        /**
         * Execute addMultipleToFolder request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return addMultipleToFolderWithHttpInfo(projectId, uris);
        }

        /**
         * Execute addMultipleToFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return addMultipleToFolderAsync(projectId, uris, _callback);
        }
    }

    /**
     * Add a list of videos to a folder
     * This method adds multiple videos to the specified folder. The authenticated user must be the owner of the folder.
     * @param projectId The ID of the folder. (required)
     * @param uris A comma-separated list of video URIs to add. (required)
     * @return AddMultipleToFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The videos were added. </td><td>  -  </td></tr>
     </table>
     */
    public AddMultipleToFolderRequestBuilder addMultipleToFolder(double projectId, String uris) throws IllegalArgumentException {
        
        if (uris == null) throw new IllegalArgumentException("\"uris\" is required but got null");
            

        return new AddMultipleToFolderRequestBuilder(projectId, uris);
    }
    private okhttp3.Call addSingleFolderVideoCall(Double projectId, Double userId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/projects/{project_id}/videos/{video_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addSingleFolderVideoValidateBeforeCall(Double projectId, Double userId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling addSingleFolderVideo(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling addSingleFolderVideo(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addSingleFolderVideo(Async)");
        }

        return addSingleFolderVideoCall(projectId, userId, videoId, _callback);

    }


    private ApiResponse<Void> addSingleFolderVideoWithHttpInfo(Double projectId, Double userId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = addSingleFolderVideoValidateBeforeCall(projectId, userId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addSingleFolderVideoAsync(Double projectId, Double userId, Double videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addSingleFolderVideoValidateBeforeCall(projectId, userId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddSingleFolderVideoRequestBuilder {
        private final Double projectId;
        private final Double userId;
        private final Double videoId;

        private AddSingleFolderVideoRequestBuilder(double projectId, double userId, double videoId) {
            this.projectId = projectId;
            this.userId = userId;
            this.videoId = videoId;
        }

        /**
         * Build call for addSingleFolderVideo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addSingleFolderVideoCall(projectId, userId, videoId, _callback);
        }


        /**
         * Execute addSingleFolderVideo request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            addSingleFolderVideoWithHttpInfo(projectId, userId, videoId);
        }

        /**
         * Execute addSingleFolderVideo request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return addSingleFolderVideoWithHttpInfo(projectId, userId, videoId);
        }

        /**
         * Execute addSingleFolderVideo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return addSingleFolderVideoAsync(projectId, userId, videoId, _callback);
        }
    }

    /**
     * Add a video to a folder
     * This method adds a single video to the specified folder. The authenticated user must be the owner of the folder.
     * @param projectId The ID of the folder. (required)
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @return AddSingleFolderVideoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
     </table>
     */
    public AddSingleFolderVideoRequestBuilder addSingleFolderVideo(double projectId, double userId, double videoId) throws IllegalArgumentException {
        
        
        
        return new AddSingleFolderVideoRequestBuilder(projectId, userId, videoId);
    }
    private okhttp3.Call addToFolderCall(Double projectId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/projects/{project_id}/videos/{video_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addToFolderValidateBeforeCall(Double projectId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling addToFolder(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addToFolder(Async)");
        }

        return addToFolderCall(projectId, videoId, _callback);

    }


    private ApiResponse<Void> addToFolderWithHttpInfo(Double projectId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = addToFolderValidateBeforeCall(projectId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addToFolderAsync(Double projectId, Double videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addToFolderValidateBeforeCall(projectId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddToFolderRequestBuilder {
        private final Double projectId;
        private final Double videoId;

        private AddToFolderRequestBuilder(double projectId, double videoId) {
            this.projectId = projectId;
            this.videoId = videoId;
        }

        /**
         * Build call for addToFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addToFolderCall(projectId, videoId, _callback);
        }


        /**
         * Execute addToFolder request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            addToFolderWithHttpInfo(projectId, videoId);
        }

        /**
         * Execute addToFolder request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return addToFolderWithHttpInfo(projectId, videoId);
        }

        /**
         * Execute addToFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return addToFolderAsync(projectId, videoId, _callback);
        }
    }

    /**
     * Add a video to a folder
     * This method adds a single video to the specified folder. The authenticated user must be the owner of the folder.
     * @param projectId The ID of the folder. (required)
     * @param videoId The ID of the video. (required)
     * @return AddToFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
     </table>
     */
    public AddToFolderRequestBuilder addToFolder(double projectId, double videoId) throws IllegalArgumentException {
        
        
        return new AddToFolderRequestBuilder(projectId, videoId);
    }
    private okhttp3.Call addToFolderVideosCall(Double projectId, Double userId, String uris, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/projects/{project_id}/videos"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uris != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uris", uris));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addToFolderVideosValidateBeforeCall(Double projectId, Double userId, String uris, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling addToFolderVideos(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling addToFolderVideos(Async)");
        }

        // verify the required parameter 'uris' is set
        if (uris == null) {
            throw new ApiException("Missing the required parameter 'uris' when calling addToFolderVideos(Async)");
        }

        return addToFolderVideosCall(projectId, userId, uris, _callback);

    }


    private ApiResponse<Void> addToFolderVideosWithHttpInfo(Double projectId, Double userId, String uris) throws ApiException {
        okhttp3.Call localVarCall = addToFolderVideosValidateBeforeCall(projectId, userId, uris, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addToFolderVideosAsync(Double projectId, Double userId, String uris, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addToFolderVideosValidateBeforeCall(projectId, userId, uris, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddToFolderVideosRequestBuilder {
        private final Double projectId;
        private final Double userId;
        private final String uris;

        private AddToFolderVideosRequestBuilder(double projectId, double userId, String uris) {
            this.projectId = projectId;
            this.userId = userId;
            this.uris = uris;
        }

        /**
         * Build call for addToFolderVideos
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addToFolderVideosCall(projectId, userId, uris, _callback);
        }


        /**
         * Execute addToFolderVideos request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were added. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            addToFolderVideosWithHttpInfo(projectId, userId, uris);
        }

        /**
         * Execute addToFolderVideos request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return addToFolderVideosWithHttpInfo(projectId, userId, uris);
        }

        /**
         * Execute addToFolderVideos request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return addToFolderVideosAsync(projectId, userId, uris, _callback);
        }
    }

    /**
     * Add a list of videos to a folder
     * This method adds multiple videos to the specified folder. The authenticated user must be the owner of the folder.
     * @param projectId The ID of the folder. (required)
     * @param userId The ID of the user. (required)
     * @param uris A comma-separated list of video URIs to add. (required)
     * @return AddToFolderVideosRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The videos were added. </td><td>  -  </td></tr>
     </table>
     */
    public AddToFolderVideosRequestBuilder addToFolderVideos(double projectId, double userId, String uris) throws IllegalArgumentException {
        
        
        if (uris == null) throw new IllegalArgumentException("\"uris\" is required but got null");
            

        return new AddToFolderVideosRequestBuilder(projectId, userId, uris);
    }
    private okhttp3.Call getAllFolderVideosCall(Double projectId, Double userId, String direction, String filterTag, String filterTagAllOf, String filterTagExclude, Boolean includeSubfolders, Double page, Double perPage, String query, String queryFields, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/projects/{project_id}/videos"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filterTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_tag", filterTag));
        }

        if (filterTagAllOf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_tag_all_of", filterTagAllOf));
        }

        if (filterTagExclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_tag_exclude", filterTagExclude));
        }

        if (includeSubfolders != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_subfolders", includeSubfolders));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (queryFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query_fields", queryFields));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllFolderVideosValidateBeforeCall(Double projectId, Double userId, String direction, String filterTag, String filterTagAllOf, String filterTagExclude, Boolean includeSubfolders, Double page, Double perPage, String query, String queryFields, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getAllFolderVideos(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getAllFolderVideos(Async)");
        }

        return getAllFolderVideosCall(projectId, userId, direction, filterTag, filterTagAllOf, filterTagExclude, includeSubfolders, page, perPage, query, queryFields, sort, _callback);

    }


    private ApiResponse<List<Video>> getAllFolderVideosWithHttpInfo(Double projectId, Double userId, String direction, String filterTag, String filterTagAllOf, String filterTagExclude, Boolean includeSubfolders, Double page, Double perPage, String query, String queryFields, String sort) throws ApiException {
        okhttp3.Call localVarCall = getAllFolderVideosValidateBeforeCall(projectId, userId, direction, filterTag, filterTagAllOf, filterTagExclude, includeSubfolders, page, perPage, query, queryFields, sort, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllFolderVideosAsync(Double projectId, Double userId, String direction, String filterTag, String filterTagAllOf, String filterTagExclude, Boolean includeSubfolders, Double page, Double perPage, String query, String queryFields, String sort, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllFolderVideosValidateBeforeCall(projectId, userId, direction, filterTag, filterTagAllOf, filterTagExclude, includeSubfolders, page, perPage, query, queryFields, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllFolderVideosRequestBuilder {
        private final Double projectId;
        private final Double userId;
        private String direction;
        private String filterTag;
        private String filterTagAllOf;
        private String filterTagExclude;
        private Boolean includeSubfolders;
        private Double page;
        private Double perPage;
        private String query;
        private String queryFields;
        private String sort;

        private GetAllFolderVideosRequestBuilder(double projectId, double userId) {
            this.projectId = projectId;
            this.userId = userId;
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return GetAllFolderVideosRequestBuilder
         */
        public GetAllFolderVideosRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set filterTag
         * @param filterTag A comma-separated list of tags to filter on. All results must include at least one of these tags. The use of this parameter triggers a search. (optional)
         * @return GetAllFolderVideosRequestBuilder
         */
        public GetAllFolderVideosRequestBuilder filterTag(String filterTag) {
            this.filterTag = filterTag;
            return this;
        }
        
        /**
         * Set filterTagAllOf
         * @param filterTagAllOf A comma-separated list of tags to filter on. All results must include all of these tags. The use of this parameter triggers a search. (optional)
         * @return GetAllFolderVideosRequestBuilder
         */
        public GetAllFolderVideosRequestBuilder filterTagAllOf(String filterTagAllOf) {
            this.filterTagAllOf = filterTagAllOf;
            return this;
        }
        
        /**
         * Set filterTagExclude
         * @param filterTagExclude A comma-separated list of tags to exclude. The use of this parameter triggers a search. (optional)
         * @return GetAllFolderVideosRequestBuilder
         */
        public GetAllFolderVideosRequestBuilder filterTagExclude(String filterTagExclude) {
            this.filterTagExclude = filterTagExclude;
            return this;
        }
        
        /**
         * Set includeSubfolders
         * @param includeSubfolders Whether to include subfolders. (optional)
         * @return GetAllFolderVideosRequestBuilder
         */
        public GetAllFolderVideosRequestBuilder includeSubfolders(Boolean includeSubfolders) {
            this.includeSubfolders = includeSubfolders;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetAllFolderVideosRequestBuilder
         */
        public GetAllFolderVideosRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetAllFolderVideosRequestBuilder
         */
        public GetAllFolderVideosRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set query
         * @param query The search query to use to filter the results. (optional)
         * @return GetAllFolderVideosRequestBuilder
         */
        public GetAllFolderVideosRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set queryFields
         * @param queryFields A comma-separated list of fields to query over. The default value is &#x60;title,description,chapters,tags&#x60;. (optional)
         * @return GetAllFolderVideosRequestBuilder
         */
        public GetAllFolderVideosRequestBuilder queryFields(String queryFields) {
            this.queryFields = queryFields;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sort order.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by the date of the last user action.  (optional)
         * @return GetAllFolderVideosRequestBuilder
         */
        public GetAllFolderVideosRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getAllFolderVideos
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllFolderVideosCall(projectId, userId, direction, filterTag, filterTagAllOf, filterTagExclude, includeSubfolders, page, perPage, query, queryFields, sort, _callback);
        }


        /**
         * Execute getAllFolderVideos request
         * @return List&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Video> execute() throws ApiException {
            ApiResponse<List<Video>> localVarResp = getAllFolderVideosWithHttpInfo(projectId, userId, direction, filterTag, filterTagAllOf, filterTagExclude, includeSubfolders, page, perPage, query, queryFields, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllFolderVideos request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Video&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Video>> executeWithHttpInfo() throws ApiException {
            return getAllFolderVideosWithHttpInfo(projectId, userId, direction, filterTag, filterTagAllOf, filterTagExclude, includeSubfolders, page, perPage, query, queryFields, sort);
        }

        /**
         * Execute getAllFolderVideos request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Video>> _callback) throws ApiException {
            return getAllFolderVideosAsync(projectId, userId, direction, filterTag, filterTagAllOf, filterTagExclude, includeSubfolders, page, perPage, query, queryFields, sort, _callback);
        }
    }

    /**
     * Get all the videos in a folder
     * This method returns all the videos that belong to the specified folder.
     * @param projectId The ID of the folder. (required)
     * @param userId The ID of the user. (required)
     * @return GetAllFolderVideosRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllFolderVideosRequestBuilder getAllFolderVideos(double projectId, double userId) throws IllegalArgumentException {
        
        
        return new GetAllFolderVideosRequestBuilder(projectId, userId);
    }
    private okhttp3.Call getVideosInFolderCall(Double projectId, String direction, String filterTag, String filterTagAllOf, String filterTagExclude, Boolean includeSubfolders, Double page, Double perPage, String query, String queryFields, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/projects/{project_id}/videos"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filterTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_tag", filterTag));
        }

        if (filterTagAllOf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_tag_all_of", filterTagAllOf));
        }

        if (filterTagExclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_tag_exclude", filterTagExclude));
        }

        if (includeSubfolders != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_subfolders", includeSubfolders));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (queryFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query_fields", queryFields));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideosInFolderValidateBeforeCall(Double projectId, String direction, String filterTag, String filterTagAllOf, String filterTagExclude, Boolean includeSubfolders, Double page, Double perPage, String query, String queryFields, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getVideosInFolder(Async)");
        }

        return getVideosInFolderCall(projectId, direction, filterTag, filterTagAllOf, filterTagExclude, includeSubfolders, page, perPage, query, queryFields, sort, _callback);

    }


    private ApiResponse<List<Video>> getVideosInFolderWithHttpInfo(Double projectId, String direction, String filterTag, String filterTagAllOf, String filterTagExclude, Boolean includeSubfolders, Double page, Double perPage, String query, String queryFields, String sort) throws ApiException {
        okhttp3.Call localVarCall = getVideosInFolderValidateBeforeCall(projectId, direction, filterTag, filterTagAllOf, filterTagExclude, includeSubfolders, page, perPage, query, queryFields, sort, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getVideosInFolderAsync(Double projectId, String direction, String filterTag, String filterTagAllOf, String filterTagExclude, Boolean includeSubfolders, Double page, Double perPage, String query, String queryFields, String sort, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideosInFolderValidateBeforeCall(projectId, direction, filterTag, filterTagAllOf, filterTagExclude, includeSubfolders, page, perPage, query, queryFields, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetVideosInFolderRequestBuilder {
        private final Double projectId;
        private String direction;
        private String filterTag;
        private String filterTagAllOf;
        private String filterTagExclude;
        private Boolean includeSubfolders;
        private Double page;
        private Double perPage;
        private String query;
        private String queryFields;
        private String sort;

        private GetVideosInFolderRequestBuilder(double projectId) {
            this.projectId = projectId;
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return GetVideosInFolderRequestBuilder
         */
        public GetVideosInFolderRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set filterTag
         * @param filterTag A comma-separated list of tags to filter on. All results must include at least one of these tags. The use of this parameter triggers a search. (optional)
         * @return GetVideosInFolderRequestBuilder
         */
        public GetVideosInFolderRequestBuilder filterTag(String filterTag) {
            this.filterTag = filterTag;
            return this;
        }
        
        /**
         * Set filterTagAllOf
         * @param filterTagAllOf A comma-separated list of tags to filter on. All results must include all of these tags. The use of this parameter triggers a search. (optional)
         * @return GetVideosInFolderRequestBuilder
         */
        public GetVideosInFolderRequestBuilder filterTagAllOf(String filterTagAllOf) {
            this.filterTagAllOf = filterTagAllOf;
            return this;
        }
        
        /**
         * Set filterTagExclude
         * @param filterTagExclude A comma-separated list of tags to exclude. The use of this parameter triggers a search. (optional)
         * @return GetVideosInFolderRequestBuilder
         */
        public GetVideosInFolderRequestBuilder filterTagExclude(String filterTagExclude) {
            this.filterTagExclude = filterTagExclude;
            return this;
        }
        
        /**
         * Set includeSubfolders
         * @param includeSubfolders Whether to include subfolders. (optional)
         * @return GetVideosInFolderRequestBuilder
         */
        public GetVideosInFolderRequestBuilder includeSubfolders(Boolean includeSubfolders) {
            this.includeSubfolders = includeSubfolders;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetVideosInFolderRequestBuilder
         */
        public GetVideosInFolderRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetVideosInFolderRequestBuilder
         */
        public GetVideosInFolderRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set query
         * @param query The search query to use to filter the results. (optional)
         * @return GetVideosInFolderRequestBuilder
         */
        public GetVideosInFolderRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set queryFields
         * @param queryFields A comma-separated list of fields to query over. The default value is &#x60;title,description,chapters,tags&#x60;. (optional)
         * @return GetVideosInFolderRequestBuilder
         */
        public GetVideosInFolderRequestBuilder queryFields(String queryFields) {
            this.queryFields = queryFields;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sort order.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by the date of the last user action.  (optional)
         * @return GetVideosInFolderRequestBuilder
         */
        public GetVideosInFolderRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getVideosInFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getVideosInFolderCall(projectId, direction, filterTag, filterTagAllOf, filterTagExclude, includeSubfolders, page, perPage, query, queryFields, sort, _callback);
        }


        /**
         * Execute getVideosInFolder request
         * @return List&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Video> execute() throws ApiException {
            ApiResponse<List<Video>> localVarResp = getVideosInFolderWithHttpInfo(projectId, direction, filterTag, filterTagAllOf, filterTagExclude, includeSubfolders, page, perPage, query, queryFields, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getVideosInFolder request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Video&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Video>> executeWithHttpInfo() throws ApiException {
            return getVideosInFolderWithHttpInfo(projectId, direction, filterTag, filterTagAllOf, filterTagExclude, includeSubfolders, page, perPage, query, queryFields, sort);
        }

        /**
         * Execute getVideosInFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Video>> _callback) throws ApiException {
            return getVideosInFolderAsync(projectId, direction, filterTag, filterTagAllOf, filterTagExclude, includeSubfolders, page, perPage, query, queryFields, sort, _callback);
        }
    }

    /**
     * Get all the videos in a folder
     * This method returns all the videos that belong to the specified folder.
     * @param projectId The ID of the folder. (required)
     * @return GetVideosInFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetVideosInFolderRequestBuilder getVideosInFolder(double projectId) throws IllegalArgumentException {
        
        return new GetVideosInFolderRequestBuilder(projectId);
    }
    private okhttp3.Call removeFromFolderVideoCall(Double projectId, Double userId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/projects/{project_id}/videos/{video_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFromFolderVideoValidateBeforeCall(Double projectId, Double userId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling removeFromFolderVideo(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling removeFromFolderVideo(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling removeFromFolderVideo(Async)");
        }

        return removeFromFolderVideoCall(projectId, userId, videoId, _callback);

    }


    private ApiResponse<Void> removeFromFolderVideoWithHttpInfo(Double projectId, Double userId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = removeFromFolderVideoValidateBeforeCall(projectId, userId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeFromFolderVideoAsync(Double projectId, Double userId, Double videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFromFolderVideoValidateBeforeCall(projectId, userId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveFromFolderVideoRequestBuilder {
        private final Double projectId;
        private final Double userId;
        private final Double videoId;

        private RemoveFromFolderVideoRequestBuilder(double projectId, double userId, double videoId) {
            this.projectId = projectId;
            this.userId = userId;
            this.videoId = videoId;
        }

        /**
         * Build call for removeFromFolderVideo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeFromFolderVideoCall(projectId, userId, videoId, _callback);
        }


        /**
         * Execute removeFromFolderVideo request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeFromFolderVideoWithHttpInfo(projectId, userId, videoId);
        }

        /**
         * Execute removeFromFolderVideo request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeFromFolderVideoWithHttpInfo(projectId, userId, videoId);
        }

        /**
         * Execute removeFromFolderVideo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeFromFolderVideoAsync(projectId, userId, videoId, _callback);
        }
    }

    /**
     * Remove a video from a folder
     * This method removes a single video from the specified folder. Please note that this doesn&#39;t delete the video itself.
     * @param projectId The ID of the folder. (required)
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @return RemoveFromFolderVideoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFromFolderVideoRequestBuilder removeFromFolderVideo(double projectId, double userId, double videoId) throws IllegalArgumentException {
        
        
        
        return new RemoveFromFolderVideoRequestBuilder(projectId, userId, videoId);
    }
    private okhttp3.Call removeMultipleFromFolderCall(Double projectId, String uris, Boolean shouldDeleteClips, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/projects/{project_id}/videos"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shouldDeleteClips != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("should_delete_clips", shouldDeleteClips));
        }

        if (uris != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uris", uris));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeMultipleFromFolderValidateBeforeCall(Double projectId, String uris, Boolean shouldDeleteClips, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling removeMultipleFromFolder(Async)");
        }

        // verify the required parameter 'uris' is set
        if (uris == null) {
            throw new ApiException("Missing the required parameter 'uris' when calling removeMultipleFromFolder(Async)");
        }

        return removeMultipleFromFolderCall(projectId, uris, shouldDeleteClips, _callback);

    }


    private ApiResponse<Void> removeMultipleFromFolderWithHttpInfo(Double projectId, String uris, Boolean shouldDeleteClips) throws ApiException {
        okhttp3.Call localVarCall = removeMultipleFromFolderValidateBeforeCall(projectId, uris, shouldDeleteClips, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeMultipleFromFolderAsync(Double projectId, String uris, Boolean shouldDeleteClips, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeMultipleFromFolderValidateBeforeCall(projectId, uris, shouldDeleteClips, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveMultipleFromFolderRequestBuilder {
        private final Double projectId;
        private final String uris;
        private Boolean shouldDeleteClips;

        private RemoveMultipleFromFolderRequestBuilder(double projectId, String uris) {
            this.projectId = projectId;
            this.uris = uris;
        }

        /**
         * Set shouldDeleteClips
         * @param shouldDeleteClips Whether to delete the videos when removing them from the folder. (optional)
         * @return RemoveMultipleFromFolderRequestBuilder
         */
        public RemoveMultipleFromFolderRequestBuilder shouldDeleteClips(Boolean shouldDeleteClips) {
            this.shouldDeleteClips = shouldDeleteClips;
            return this;
        }
        
        /**
         * Build call for removeMultipleFromFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeMultipleFromFolderCall(projectId, uris, shouldDeleteClips, _callback);
        }


        /**
         * Execute removeMultipleFromFolder request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeMultipleFromFolderWithHttpInfo(projectId, uris, shouldDeleteClips);
        }

        /**
         * Execute removeMultipleFromFolder request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeMultipleFromFolderWithHttpInfo(projectId, uris, shouldDeleteClips);
        }

        /**
         * Execute removeMultipleFromFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeMultipleFromFolderAsync(projectId, uris, shouldDeleteClips, _callback);
        }
    }

    /**
     * Remove a list of videos from a folder
     * This method removes multiple videos from the specified folder. The authenticated user must be the owner of the folder.
     * @param projectId The ID of the folder. (required)
     * @param uris A comma-separated list of the video URIs to remove. (required)
     * @return RemoveMultipleFromFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveMultipleFromFolderRequestBuilder removeMultipleFromFolder(double projectId, String uris) throws IllegalArgumentException {
        
        if (uris == null) throw new IllegalArgumentException("\"uris\" is required but got null");
            

        return new RemoveMultipleFromFolderRequestBuilder(projectId, uris);
    }
    private okhttp3.Call removeMultipleVideosFromFolderCall(Double projectId, Double userId, String uris, Boolean shouldDeleteClips, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/projects/{project_id}/videos"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shouldDeleteClips != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("should_delete_clips", shouldDeleteClips));
        }

        if (uris != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uris", uris));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeMultipleVideosFromFolderValidateBeforeCall(Double projectId, Double userId, String uris, Boolean shouldDeleteClips, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling removeMultipleVideosFromFolder(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling removeMultipleVideosFromFolder(Async)");
        }

        // verify the required parameter 'uris' is set
        if (uris == null) {
            throw new ApiException("Missing the required parameter 'uris' when calling removeMultipleVideosFromFolder(Async)");
        }

        return removeMultipleVideosFromFolderCall(projectId, userId, uris, shouldDeleteClips, _callback);

    }


    private ApiResponse<Void> removeMultipleVideosFromFolderWithHttpInfo(Double projectId, Double userId, String uris, Boolean shouldDeleteClips) throws ApiException {
        okhttp3.Call localVarCall = removeMultipleVideosFromFolderValidateBeforeCall(projectId, userId, uris, shouldDeleteClips, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeMultipleVideosFromFolderAsync(Double projectId, Double userId, String uris, Boolean shouldDeleteClips, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeMultipleVideosFromFolderValidateBeforeCall(projectId, userId, uris, shouldDeleteClips, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveMultipleVideosFromFolderRequestBuilder {
        private final Double projectId;
        private final Double userId;
        private final String uris;
        private Boolean shouldDeleteClips;

        private RemoveMultipleVideosFromFolderRequestBuilder(double projectId, double userId, String uris) {
            this.projectId = projectId;
            this.userId = userId;
            this.uris = uris;
        }

        /**
         * Set shouldDeleteClips
         * @param shouldDeleteClips Whether to delete the videos when removing them from the folder. (optional)
         * @return RemoveMultipleVideosFromFolderRequestBuilder
         */
        public RemoveMultipleVideosFromFolderRequestBuilder shouldDeleteClips(Boolean shouldDeleteClips) {
            this.shouldDeleteClips = shouldDeleteClips;
            return this;
        }
        
        /**
         * Build call for removeMultipleVideosFromFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeMultipleVideosFromFolderCall(projectId, userId, uris, shouldDeleteClips, _callback);
        }


        /**
         * Execute removeMultipleVideosFromFolder request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeMultipleVideosFromFolderWithHttpInfo(projectId, userId, uris, shouldDeleteClips);
        }

        /**
         * Execute removeMultipleVideosFromFolder request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeMultipleVideosFromFolderWithHttpInfo(projectId, userId, uris, shouldDeleteClips);
        }

        /**
         * Execute removeMultipleVideosFromFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeMultipleVideosFromFolderAsync(projectId, userId, uris, shouldDeleteClips, _callback);
        }
    }

    /**
     * Remove a list of videos from a folder
     * This method removes multiple videos from the specified folder. The authenticated user must be the owner of the folder.
     * @param projectId The ID of the folder. (required)
     * @param userId The ID of the user. (required)
     * @param uris A comma-separated list of the video URIs to remove. (required)
     * @return RemoveMultipleVideosFromFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveMultipleVideosFromFolderRequestBuilder removeMultipleVideosFromFolder(double projectId, double userId, String uris) throws IllegalArgumentException {
        
        
        if (uris == null) throw new IllegalArgumentException("\"uris\" is required but got null");
            

        return new RemoveMultipleVideosFromFolderRequestBuilder(projectId, userId, uris);
    }
    private okhttp3.Call removeSingleVideoCall(Double projectId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/projects/{project_id}/videos/{video_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeSingleVideoValidateBeforeCall(Double projectId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling removeSingleVideo(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling removeSingleVideo(Async)");
        }

        return removeSingleVideoCall(projectId, videoId, _callback);

    }


    private ApiResponse<Void> removeSingleVideoWithHttpInfo(Double projectId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = removeSingleVideoValidateBeforeCall(projectId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeSingleVideoAsync(Double projectId, Double videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeSingleVideoValidateBeforeCall(projectId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveSingleVideoRequestBuilder {
        private final Double projectId;
        private final Double videoId;

        private RemoveSingleVideoRequestBuilder(double projectId, double videoId) {
            this.projectId = projectId;
            this.videoId = videoId;
        }

        /**
         * Build call for removeSingleVideo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeSingleVideoCall(projectId, videoId, _callback);
        }


        /**
         * Execute removeSingleVideo request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeSingleVideoWithHttpInfo(projectId, videoId);
        }

        /**
         * Execute removeSingleVideo request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeSingleVideoWithHttpInfo(projectId, videoId);
        }

        /**
         * Execute removeSingleVideo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeSingleVideoAsync(projectId, videoId, _callback);
        }
    }

    /**
     * Remove a video from a folder
     * This method removes a single video from the specified folder. Please note that this doesn&#39;t delete the video itself.
     * @param projectId The ID of the folder. (required)
     * @param videoId The ID of the video. (required)
     * @return RemoveSingleVideoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveSingleVideoRequestBuilder removeSingleVideo(double projectId, double videoId) throws IllegalArgumentException {
        
        
        return new RemoveSingleVideoRequestBuilder(projectId, videoId);
    }
}
