/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Comment;
import com.konfigthis.client.model.CreateCommentRequest;
import com.konfigthis.client.model.EditCommentRequest;
import com.konfigthis.client.model.VideosVideoCommentsAddNewCommentRequest;
import com.konfigthis.client.model.VideosVideoCommentsCreateReplyRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VideosVideoCommentsApi
 */
@Disabled
public class VideosVideoCommentsApiTest {

    private static VideosVideoCommentsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new VideosVideoCommentsApi(apiClient);
    }

    /**
     * Add a video comment to a video
     *
     * This method adds a video comment to the specified video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addNewCommentTest() throws ApiException {
        String text = null;
        Double channelId = null;
        Double videoId = null;
        Comment response = api.addNewComment(text, channelId, videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Add a video comment to a video
     *
     * This method adds a video comment to the specified video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void commentTest() throws ApiException {
        String text = null;
        Double videoId = null;
        Comment response = api.comment(text, videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a specific video comment
     *
     * This method returns the specified video comment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void comment_0Test() throws ApiException {
        Double commentId = null;
        Double videoId = null;
        Comment response = api.comment_0(commentId, videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a video comment
     *
     * This method deletes the specified video comment. The authenticated user must be the owner of the comment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void comment_1Test() throws ApiException {
        Double commentId = null;
        Double videoId = null;
        api.comment_1(commentId, videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Edit a video comment
     *
     * This method edits the specified video comment. The authenticated user must be the owner of the comment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void comment_2Test() throws ApiException {
        String text = null;
        Double commentId = null;
        Double videoId = null;
        Comment response = api.comment_2(text, commentId, videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the video comments on a video
     *
     * This method returns every video comment on the specified video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void commentsTest() throws ApiException {
        Double videoId = null;
        String direction = null;
        Double page = null;
        Double perPage = null;
        List<Comment> response = api.comments(videoId)
                .direction(direction)
                .page(page)
                .perPage(perPage)
                .execute();
        // TODO: test validations
    }

    /**
     * Add a reply to a video comment
     *
     * This method adds a reply to the specified video comment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createReplyTest() throws ApiException {
        String text = null;
        Double commentId = null;
        Double videoId = null;
        Comment response = api.createReply(text, commentId, videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the video comments on a video
     *
     * This method returns every video comment on the specified video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllRepliesTest() throws ApiException {
        Double channelId = null;
        Double videoId = null;
        String direction = null;
        Double page = null;
        Double perPage = null;
        List<Comment> response = api.getAllReplies(channelId, videoId)
                .direction(direction)
                .page(page)
                .perPage(perPage)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the replies to a video comment
     *
     * This method returns every reply to the specified video comment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllReplies_0Test() throws ApiException {
        Double commentId = null;
        Double videoId = null;
        Double page = null;
        Double perPage = null;
        List<Comment> response = api.getAllReplies_0(commentId, videoId)
                .page(page)
                .perPage(perPage)
                .execute();
        // TODO: test validations
    }

}
