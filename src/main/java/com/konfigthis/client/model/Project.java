/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ProjectMetadata;
import com.konfigthis.client.model.ProjectPrivacy;
import com.konfigthis.client.model.ProjectSettings;
import com.konfigthis.client.model.User;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Project
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Project {
  public static final String SERIALIZED_NAME_ACCESS_GRANT = "access_grant";
  @SerializedName(SERIALIZED_NAME_ACCESS_GRANT)
  private Object accessGrant;

  public static final String SERIALIZED_NAME_CREATED_TIME = "created_time";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private String createdTime;

  public static final String SERIALIZED_NAME_CREATOR_URI = "creator_uri";
  @SerializedName(SERIALIZED_NAME_CREATOR_URI)
  private String creatorUri;

  public static final String SERIALIZED_NAME_HAS_SUBFOLDER = "has_subfolder";
  @SerializedName(SERIALIZED_NAME_HAS_SUBFOLDER)
  private Boolean hasSubfolder;

  public static final String SERIALIZED_NAME_IS_PINNED = "is_pinned";
  @SerializedName(SERIALIZED_NAME_IS_PINNED)
  private Boolean isPinned;

  public static final String SERIALIZED_NAME_IS_PRIVATE_TO_USER = "is_private_to_user";
  @SerializedName(SERIALIZED_NAME_IS_PRIVATE_TO_USER)
  private Boolean isPrivateToUser;

  public static final String SERIALIZED_NAME_LAST_USER_ACTION_EVENT_DATE = "last_user_action_event_date";
  @SerializedName(SERIALIZED_NAME_LAST_USER_ACTION_EVENT_DATE)
  private String lastUserActionEventDate;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_MANAGE_LINK = "manage_link";
  @SerializedName(SERIALIZED_NAME_MANAGE_LINK)
  private String manageLink;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private ProjectMetadata metadata;

  public static final String SERIALIZED_NAME_MODIFIED_TIME = "modified_time";
  @SerializedName(SERIALIZED_NAME_MODIFIED_TIME)
  private String modifiedTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PINNED_ON = "pinned_on";
  @SerializedName(SERIALIZED_NAME_PINNED_ON)
  private String pinnedOn;

  public static final String SERIALIZED_NAME_PRIVACY = "privacy";
  @SerializedName(SERIALIZED_NAME_PRIVACY)
  private ProjectPrivacy privacy;

  public static final String SERIALIZED_NAME_RESOURCE_KEY = "resource_key";
  @SerializedName(SERIALIZED_NAME_RESOURCE_KEY)
  private String resourceKey;

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private ProjectSettings settings;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public Project() {
  }

  public Project accessGrant(Object accessGrant) {
    
    
    
    
    this.accessGrant = accessGrant;
    return this;
  }

   /**
   * The access grant response that applies to the team member. _This field is deprecated because grants are no longer exposed via API responses._
   * @return accessGrant
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The access grant response that applies to the team member. _This field is deprecated because grants are no longer exposed via API responses._")

  public Object getAccessGrant() {
    return accessGrant;
  }


  public void setAccessGrant(Object accessGrant) {
    
    
    
    this.accessGrant = accessGrant;
  }


  public Project createdTime(String createdTime) {
    
    
    
    
    this.createdTime = createdTime;
    return this;
  }

   /**
   * The time in ISO 8601 format when the folder was created.
   * @return createdTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2017-05-23T14:36:22+00:00", required = true, value = "The time in ISO 8601 format when the folder was created.")

  public String getCreatedTime() {
    return createdTime;
  }


  public void setCreatedTime(String createdTime) {
    
    
    
    this.createdTime = createdTime;
  }


  public Project creatorUri(String creatorUri) {
    
    
    
    
    this.creatorUri = creatorUri;
    return this;
  }

   /**
   * The URI for the user who created the folder.
   * @return creatorUri
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "/users/112233", required = true, value = "The URI for the user who created the folder.")

  public String getCreatorUri() {
    return creatorUri;
  }


  public void setCreatorUri(String creatorUri) {
    
    
    
    this.creatorUri = creatorUri;
  }


  public Project hasSubfolder(Boolean hasSubfolder) {
    
    
    
    
    this.hasSubfolder = hasSubfolder;
    return this;
  }

   /**
   * Whether this folder has at least one subfolder.
   * @return hasSubfolder
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether this folder has at least one subfolder.")

  public Boolean getHasSubfolder() {
    return hasSubfolder;
  }


  public void setHasSubfolder(Boolean hasSubfolder) {
    
    
    
    this.hasSubfolder = hasSubfolder;
  }


  public Project isPinned(Boolean isPinned) {
    
    
    
    
    this.isPinned = isPinned;
    return this;
  }

   /**
   * Whether the folder is pinned.
   * @return isPinned
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the folder is pinned.")

  public Boolean getIsPinned() {
    return isPinned;
  }


  public void setIsPinned(Boolean isPinned) {
    
    
    
    this.isPinned = isPinned;
  }


  public Project isPrivateToUser(Boolean isPrivateToUser) {
    
    
    
    
    this.isPrivateToUser = isPrivateToUser;
    return this;
  }

   /**
   * Whether the folder is a private-to-me folder for the user.
   * @return isPrivateToUser
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the folder is a private-to-me folder for the user.")

  public Boolean getIsPrivateToUser() {
    return isPrivateToUser;
  }


  public void setIsPrivateToUser(Boolean isPrivateToUser) {
    
    
    
    this.isPrivateToUser = isPrivateToUser;
  }


  public Project lastUserActionEventDate(String lastUserActionEventDate) {
    
    
    
    
    this.lastUserActionEventDate = lastUserActionEventDate;
    return this;
  }

   /**
   * The time in ISO 8601 format when a user last performed an action on the folder.
   * @return lastUserActionEventDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2018-03-21T23:08:22+00:00", required = true, value = "The time in ISO 8601 format when a user last performed an action on the folder.")

  public String getLastUserActionEventDate() {
    return lastUserActionEventDate;
  }


  public void setLastUserActionEventDate(String lastUserActionEventDate) {
    
    
    
    this.lastUserActionEventDate = lastUserActionEventDate;
  }


  public Project link(String link) {
    
    
    
    
    this.link = link;
    return this;
  }

   /**
   * The link to the folder on Vimeo.
   * @return link
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://vimeo.com/user/112233/folders/12345", required = true, value = "The link to the folder on Vimeo.")

  public String getLink() {
    return link;
  }


  public void setLink(String link) {
    
    
    
    this.link = link;
  }


  public Project manageLink(String manageLink) {
    
    
    
    
    this.manageLink = manageLink;
    return this;
  }

   /**
   * The link to the folder management page.
   * @return manageLink
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://vimeo.com/user/112233/folder/12345", required = true, value = "The link to the folder management page.")

  public String getManageLink() {
    return manageLink;
  }


  public void setManageLink(String manageLink) {
    
    
    
    this.manageLink = manageLink;
  }


  public Project metadata(ProjectMetadata metadata) {
    
    
    
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ProjectMetadata getMetadata() {
    return metadata;
  }


  public void setMetadata(ProjectMetadata metadata) {
    
    
    
    this.metadata = metadata;
  }


  public Project modifiedTime(String modifiedTime) {
    
    
    
    
    this.modifiedTime = modifiedTime;
    return this;
  }

   /**
   * The time in ISO 8601 format when the folder was last modified.
   * @return modifiedTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2017-05-23T14:36:22+00:00", required = true, value = "The time in ISO 8601 format when the folder was last modified.")

  public String getModifiedTime() {
    return modifiedTime;
  }


  public void setModifiedTime(String modifiedTime) {
    
    
    
    this.modifiedTime = modifiedTime;
  }


  public Project name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The name of the folder.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Rough cuts", required = true, value = "The name of the folder.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public Project pinnedOn(String pinnedOn) {
    
    
    
    
    this.pinnedOn = pinnedOn;
    return this;
  }

   /**
   * The time in ISO 8601 format when the folder was pinned.
   * @return pinnedOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-05-23T14:36:22+00:00", required = true, value = "The time in ISO 8601 format when the folder was pinned.")

  public String getPinnedOn() {
    return pinnedOn;
  }


  public void setPinnedOn(String pinnedOn) {
    
    
    
    this.pinnedOn = pinnedOn;
  }


  public Project privacy(ProjectPrivacy privacy) {
    
    
    
    
    this.privacy = privacy;
    return this;
  }

   /**
   * Get privacy
   * @return privacy
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ProjectPrivacy getPrivacy() {
    return privacy;
  }


  public void setPrivacy(ProjectPrivacy privacy) {
    
    
    
    this.privacy = privacy;
  }


  public Project resourceKey(String resourceKey) {
    
    
    
    
    this.resourceKey = resourceKey;
    return this;
  }

   /**
   * The resource key string of the folder.
   * @return resourceKey
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "dc724af18fbdd4e59189f5fe768a5f8311527050", required = true, value = "The resource key string of the folder.")

  public String getResourceKey() {
    return resourceKey;
  }


  public void setResourceKey(String resourceKey) {
    
    
    
    this.resourceKey = resourceKey;
  }


  public Project settings(ProjectSettings settings) {
    
    
    
    
    this.settings = settings;
    return this;
  }

   /**
   * Get settings
   * @return settings
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ProjectSettings getSettings() {
    return settings;
  }


  public void setSettings(ProjectSettings settings) {
    
    
    
    this.settings = settings;
  }


  public Project uri(String uri) {
    
    
    
    
    this.uri = uri;
    return this;
  }

   /**
   * The URI of the folder.
   * @return uri
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "/users/112233/projects/12345", required = true, value = "The URI of the folder.")

  public String getUri() {
    return uri;
  }


  public void setUri(String uri) {
    
    
    
    this.uri = uri;
  }


  public Project user(User user) {
    
    
    
    
    this.user = user;
    return this;
  }

   /**
   * The owner of the folder.
   * @return user
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The owner of the folder.")

  public User getUser() {
    return user;
  }


  public void setUser(User user) {
    
    
    
    this.user = user;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Project instance itself
   */
  public Project putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Project project = (Project) o;
    return Objects.equals(this.accessGrant, project.accessGrant) &&
        Objects.equals(this.createdTime, project.createdTime) &&
        Objects.equals(this.creatorUri, project.creatorUri) &&
        Objects.equals(this.hasSubfolder, project.hasSubfolder) &&
        Objects.equals(this.isPinned, project.isPinned) &&
        Objects.equals(this.isPrivateToUser, project.isPrivateToUser) &&
        Objects.equals(this.lastUserActionEventDate, project.lastUserActionEventDate) &&
        Objects.equals(this.link, project.link) &&
        Objects.equals(this.manageLink, project.manageLink) &&
        Objects.equals(this.metadata, project.metadata) &&
        Objects.equals(this.modifiedTime, project.modifiedTime) &&
        Objects.equals(this.name, project.name) &&
        Objects.equals(this.pinnedOn, project.pinnedOn) &&
        Objects.equals(this.privacy, project.privacy) &&
        Objects.equals(this.resourceKey, project.resourceKey) &&
        Objects.equals(this.settings, project.settings) &&
        Objects.equals(this.uri, project.uri) &&
        Objects.equals(this.user, project.user)&&
        Objects.equals(this.additionalProperties, project.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessGrant, createdTime, creatorUri, hasSubfolder, isPinned, isPrivateToUser, lastUserActionEventDate, link, manageLink, metadata, modifiedTime, name, pinnedOn, privacy, resourceKey, settings, uri, user, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Project {\n");
    sb.append("    accessGrant: ").append(toIndentedString(accessGrant)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    creatorUri: ").append(toIndentedString(creatorUri)).append("\n");
    sb.append("    hasSubfolder: ").append(toIndentedString(hasSubfolder)).append("\n");
    sb.append("    isPinned: ").append(toIndentedString(isPinned)).append("\n");
    sb.append("    isPrivateToUser: ").append(toIndentedString(isPrivateToUser)).append("\n");
    sb.append("    lastUserActionEventDate: ").append(toIndentedString(lastUserActionEventDate)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    manageLink: ").append(toIndentedString(manageLink)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    modifiedTime: ").append(toIndentedString(modifiedTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pinnedOn: ").append(toIndentedString(pinnedOn)).append("\n");
    sb.append("    privacy: ").append(toIndentedString(privacy)).append("\n");
    sb.append("    resourceKey: ").append(toIndentedString(resourceKey)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access_grant");
    openapiFields.add("created_time");
    openapiFields.add("creator_uri");
    openapiFields.add("has_subfolder");
    openapiFields.add("is_pinned");
    openapiFields.add("is_private_to_user");
    openapiFields.add("last_user_action_event_date");
    openapiFields.add("link");
    openapiFields.add("manage_link");
    openapiFields.add("metadata");
    openapiFields.add("modified_time");
    openapiFields.add("name");
    openapiFields.add("pinned_on");
    openapiFields.add("privacy");
    openapiFields.add("resource_key");
    openapiFields.add("settings");
    openapiFields.add("uri");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("access_grant");
    openapiRequiredFields.add("created_time");
    openapiRequiredFields.add("creator_uri");
    openapiRequiredFields.add("has_subfolder");
    openapiRequiredFields.add("is_pinned");
    openapiRequiredFields.add("is_private_to_user");
    openapiRequiredFields.add("last_user_action_event_date");
    openapiRequiredFields.add("link");
    openapiRequiredFields.add("manage_link");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("modified_time");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("pinned_on");
    openapiRequiredFields.add("privacy");
    openapiRequiredFields.add("resource_key");
    openapiRequiredFields.add("settings");
    openapiRequiredFields.add("uri");
    openapiRequiredFields.add("user");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Project
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Project.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Project is not found in the empty JSON string", Project.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Project.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("created_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_time").toString()));
      }
      if (!jsonObj.get("creator_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creator_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creator_uri").toString()));
      }
      if (!jsonObj.get("last_user_action_event_date").isJsonNull() && !jsonObj.get("last_user_action_event_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_user_action_event_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_user_action_event_date").toString()));
      }
      if (!jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if (!jsonObj.get("manage_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manage_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manage_link").toString()));
      }
      // validate the required field `metadata`
      ProjectMetadata.validateJsonObject(jsonObj.getAsJsonObject("metadata"));
      if (!jsonObj.get("modified_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modified_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modified_time").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("pinned_on").isJsonNull() && !jsonObj.get("pinned_on").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pinned_on` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pinned_on").toString()));
      }
      // validate the required field `privacy`
      ProjectPrivacy.validateJsonObject(jsonObj.getAsJsonObject("privacy"));
      if (!jsonObj.get("resource_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_key").toString()));
      }
      // validate the required field `settings`
      ProjectSettings.validateJsonObject(jsonObj.getAsJsonObject("settings"));
      if (!jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      // validate the required field `user`
      User.validateJsonObject(jsonObj.getAsJsonObject("user"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Project.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Project' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Project> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Project.class));

       return (TypeAdapter<T>) new TypeAdapter<Project>() {
           @Override
           public void write(JsonWriter out, Project value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Project read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Project instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Project given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Project
  * @throws IOException if the JSON string is invalid with respect to Project
  */
  public static Project fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Project.class);
  }

 /**
  * Convert an instance of Project to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

