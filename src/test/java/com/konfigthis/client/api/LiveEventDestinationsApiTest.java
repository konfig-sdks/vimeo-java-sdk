/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.LiveEventDestination;
import com.konfigthis.client.model.LiveEventDestinationsCreateDestinationRequest;
import com.konfigthis.client.model.LiveEventDestinationsCreateEventDestinationRequest;
import com.konfigthis.client.model.LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest;
import com.konfigthis.client.model.LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest1;
import com.konfigthis.client.model.LiveEventDestinationsUpdateDestinationRequest;
import com.konfigthis.client.model.OttDestination;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LiveEventDestinationsApi
 */
@Disabled
public class LiveEventDestinationsApiTest {

    private static LiveEventDestinationsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new LiveEventDestinationsApi(apiClient);
    }

    /**
     * Create a live event destination
     *
     * This method creates a destination for the specified event. The authenticated user must be the owner of the event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDestinationTest() throws ApiException {
        String displayName = null;
        String serviceName = null;
        String type = null;
        Double liveEventId = null;
        Boolean isEnabled = null;
        String privacy = null;
        String providerDestinationId = null;
        String providerVideoId = null;
        Double scheduledAt = null;
        String streamKey = null;
        String streamUrl = null;
        LiveEventDestination response = api.createDestination(displayName, serviceName, type, liveEventId)
                .isEnabled(isEnabled)
                .privacy(privacy)
                .providerDestinationId(providerDestinationId)
                .providerVideoId(providerVideoId)
                .scheduledAt(scheduledAt)
                .streamKey(streamKey)
                .streamUrl(streamUrl)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a live event destination
     *
     * This method creates a destination for the specified event. The authenticated user must be the owner of the event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEventDestinationTest() throws ApiException {
        String displayName = null;
        String serviceName = null;
        String type = null;
        Double liveEventId = null;
        Double userId = null;
        Boolean isEnabled = null;
        String privacy = null;
        String providerDestinationId = null;
        String providerVideoId = null;
        Double scheduledAt = null;
        String streamKey = null;
        String streamUrl = null;
        LiveEventDestination response = api.createEventDestination(displayName, serviceName, type, liveEventId, userId)
                .isEnabled(isEnabled)
                .privacy(privacy)
                .providerDestinationId(providerDestinationId)
                .providerVideoId(providerVideoId)
                .scheduledAt(scheduledAt)
                .streamKey(streamKey)
                .streamUrl(streamUrl)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a one-time live event destination
     *
     * This method creates a destination for the specified event. The authenticated user must be the owner of the event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOneTimeLiveEventDestinationTest() throws ApiException {
        String displayName = null;
        String serviceName = null;
        String type = null;
        Double videoId = null;
        Boolean isEnabled = null;
        String privacy = null;
        String providerDestinationId = null;
        String providerVideoId = null;
        Double scheduledAt = null;
        String streamKey = null;
        String streamUrl = null;
        api.createOneTimeLiveEventDestination(displayName, serviceName, type, videoId)
                .isEnabled(isEnabled)
                .privacy(privacy)
                .providerDestinationId(providerDestinationId)
                .providerVideoId(providerVideoId)
                .scheduledAt(scheduledAt)
                .streamKey(streamKey)
                .streamUrl(streamUrl)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a one-time live event destination
     *
     * This method creates a destination for the specified event. The authenticated user must be the owner of the event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOneTimeLiveEventDestination_0Test() throws ApiException {
        String displayName = null;
        String serviceName = null;
        String type = null;
        Double userId = null;
        Double videoId = null;
        Boolean isEnabled = null;
        String privacy = null;
        String providerDestinationId = null;
        String providerVideoId = null;
        Double scheduledAt = null;
        String streamKey = null;
        String streamUrl = null;
        api.createOneTimeLiveEventDestination_0(displayName, serviceName, type, userId, videoId)
                .isEnabled(isEnabled)
                .privacy(privacy)
                .providerDestinationId(providerDestinationId)
                .providerVideoId(providerVideoId)
                .scheduledAt(scheduledAt)
                .streamKey(streamKey)
                .streamUrl(streamUrl)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a live event OTT destination
     *
     * This method creates an OTT channel as the destination of the specified event. The authenticated user must be the owner of the event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOttDestinationTest() throws ApiException {
        Double liveEventId = null;
        Double userId = null;
        OttDestination response = api.createOttDestination(liveEventId, userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a live event destination
     *
     * This method deletes the specified event destination belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDestinationTest() throws ApiException {
        Double destinationId = null;
        api.deleteDestination(destinationId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a live event OTT destination
     *
     * This method deletes an OTT channel as the destination of the specified event. The authenticated user must be the owner of the event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOttDestinationTest() throws ApiException {
        Double liveEventId = null;
        Double userId = null;
        api.deleteOttDestination(liveEventId, userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all available live event destinations for the user to stream to
     *
     * This method returns every available event destination for the authenticated user to stream to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllAvailableDestinationsTest() throws ApiException {
        api.getAllAvailableDestinations()
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the destinations of a recurring live event
     *
     * This method returns every destination of the specified event. The authenticated user must be the owner of the event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllAvailableDestinations_0Test() throws ApiException {
        Double liveEventId = null;
        Double userId = null;
        List<LiveEventDestination> response = api.getAllAvailableDestinations_0(liveEventId, userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the destinations of a one-time live event
     *
     * This method returns every destination of the specified event. The authenticated user must be the owner of the event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllAvailableDestinations_1Test() throws ApiException {
        Double userId = null;
        Double videoId = null;
        List<LiveEventDestination> response = api.getAllAvailableDestinations_1(userId, videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the destinations of a one-time live event
     *
     * This method returns every destination of the specified event. The authenticated user must be the owner of the event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllDestinationsTest() throws ApiException {
        Double videoId = null;
        List<LiveEventDestination> response = api.getAllDestinations(videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the OTT destinations of a recurring live event
     *
     * This method returns every OTT destination of the specified event. The authenticated user must be the owner of the event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllOttDestinationsTest() throws ApiException {
        Double liveEventId = null;
        Double userId = null;
        List<OttDestination> response = api.getAllOttDestinations(liveEventId, userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a live event destination
     *
     * This method returns the specified event destination belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDestinationTest() throws ApiException {
        Double destinationId = null;
        LiveEventDestination response = api.getDestination(destinationId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the destinations of a recurring live event
     *
     * This method returns every destination of the specified event. The authenticated user must be the owner of the event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllAvailableDestinationsTest() throws ApiException {
        Double liveEventId = null;
        List<LiveEventDestination> response = api.listAllAvailableDestinations(liveEventId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all available live event destinations for the user to stream to
     *
     * This method returns every available event destination for the authenticated user to stream to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAvailableDestinationsTest() throws ApiException {
        Double userId = null;
        api.listAvailableDestinations(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a live event destination
     *
     * This method updates the specified event destination belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDestinationTest() throws ApiException {
        Double destinationId = null;
        String displayName = null;
        Boolean isEnabled = null;
        String privacy = null;
        String providerDestinationId = null;
        String serviceName = null;
        String streamKey = null;
        String streamUrl = null;
        String type = null;
        LiveEventDestination response = api.updateDestination(destinationId)
                .displayName(displayName)
                .isEnabled(isEnabled)
                .privacy(privacy)
                .providerDestinationId(providerDestinationId)
                .serviceName(serviceName)
                .streamKey(streamKey)
                .streamUrl(streamUrl)
                .type(type)
                .execute();
        // TODO: test validations
    }

}
