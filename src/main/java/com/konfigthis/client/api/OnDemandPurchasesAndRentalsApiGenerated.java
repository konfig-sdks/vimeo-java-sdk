/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.OnDemandPage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OnDemandPurchasesAndRentalsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OnDemandPurchasesAndRentalsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OnDemandPurchasesAndRentalsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call checkUserPurchasesAndRentalsCall(Double ondemandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/ondemand/purchases/{ondemand_id}"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.page+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkUserPurchasesAndRentalsValidateBeforeCall(Double ondemandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling checkUserPurchasesAndRentals(Async)");
        }

        return checkUserPurchasesAndRentalsCall(ondemandId, _callback);

    }


    private ApiResponse<OnDemandPage> checkUserPurchasesAndRentalsWithHttpInfo(Double ondemandId) throws ApiException {
        okhttp3.Call localVarCall = checkUserPurchasesAndRentalsValidateBeforeCall(ondemandId, null);
        Type localVarReturnType = new TypeToken<OnDemandPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkUserPurchasesAndRentalsAsync(Double ondemandId, final ApiCallback<OnDemandPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkUserPurchasesAndRentalsValidateBeforeCall(ondemandId, _callback);
        Type localVarReturnType = new TypeToken<OnDemandPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckUserPurchasesAndRentalsRequestBuilder {
        private final Double ondemandId;

        private CheckUserPurchasesAndRentalsRequestBuilder(double ondemandId) {
            this.ondemandId = ondemandId;
        }

        /**
         * Build call for checkUserPurchasesAndRentals
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The authenticated user has made this purchase. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkUserPurchasesAndRentalsCall(ondemandId, _callback);
        }


        /**
         * Execute checkUserPurchasesAndRentals request
         * @return OnDemandPage
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The authenticated user has made this purchase. </td><td>  -  </td></tr>
         </table>
         */
        public OnDemandPage execute() throws ApiException {
            ApiResponse<OnDemandPage> localVarResp = checkUserPurchasesAndRentalsWithHttpInfo(ondemandId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkUserPurchasesAndRentals request with HTTP info returned
         * @return ApiResponse&lt;OnDemandPage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The authenticated user has made this purchase. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OnDemandPage> executeWithHttpInfo() throws ApiException {
            return checkUserPurchasesAndRentalsWithHttpInfo(ondemandId);
        }

        /**
         * Execute checkUserPurchasesAndRentals request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The authenticated user has made this purchase. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OnDemandPage> _callback) throws ApiException {
            return checkUserPurchasesAndRentalsAsync(ondemandId, _callback);
        }
    }

    /**
     * Check if a user has made a purchase or rental from an On Demand page
     * This method determines whether the authenticated user has made a purchase or rental from the specified On Demand page.
     * @param ondemandId The ID of the On Demand page. (required)
     * @return CheckUserPurchasesAndRentalsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The authenticated user has made this purchase. </td><td>  -  </td></tr>
     </table>
     */
    public CheckUserPurchasesAndRentalsRequestBuilder checkUserPurchasesAndRentals(double ondemandId) throws IllegalArgumentException {
        
        return new CheckUserPurchasesAndRentalsRequestBuilder(ondemandId);
    }
    private okhttp3.Call getAllUserPurchasesAndRentalsCall(String direction, String filter, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/ondemand/purchases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.page+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllUserPurchasesAndRentalsValidateBeforeCall(String direction, String filter, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        return getAllUserPurchasesAndRentalsCall(direction, filter, page, perPage, sort, _callback);

    }


    private ApiResponse<List<OnDemandPage>> getAllUserPurchasesAndRentalsWithHttpInfo(String direction, String filter, Double page, Double perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = getAllUserPurchasesAndRentalsValidateBeforeCall(direction, filter, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<List<OnDemandPage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllUserPurchasesAndRentalsAsync(String direction, String filter, Double page, Double perPage, String sort, final ApiCallback<List<OnDemandPage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllUserPurchasesAndRentalsValidateBeforeCall(direction, filter, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<List<OnDemandPage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllUserPurchasesAndRentalsRequestBuilder {
        private String direction;
        private String filter;
        private Double page;
        private Double perPage;
        private String sort;

        private GetAllUserPurchasesAndRentalsRequestBuilder() {
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return GetAllUserPurchasesAndRentalsRequestBuilder
         */
        public GetAllUserPurchasesAndRentalsRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The type of the On Demand video to filter on.  Option descriptions:  * &#x60;all&#x60; - Filter by all video types.  * &#x60;expiring_soon&#x60; - Filter by videos that expire soon.  * &#x60;film&#x60; - Filter by film.  * &#x60;important&#x60; - Filter by pages that are about to expire.  * &#x60;purchased&#x60; - Filter by purchased videos.  * &#x60;rented&#x60; - Filter by rented videos.  * &#x60;series&#x60; - Filter by series.  * &#x60;subscription&#x60; - Filter by video subscription.  * &#x60;unwatched&#x60; - Filter by unwatched videos.  * &#x60;watched&#x60; - Filter by watched videos.  (optional)
         * @return GetAllUserPurchasesAndRentalsRequestBuilder
         */
        public GetAllUserPurchasesAndRentalsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetAllUserPurchasesAndRentalsRequestBuilder
         */
        public GetAllUserPurchasesAndRentalsRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetAllUserPurchasesAndRentalsRequestBuilder
         */
        public GetAllUserPurchasesAndRentalsRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;added&#x60; - Sort the results by most recently added video.  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;name&#x60; - Sort the results by video name.  * &#x60;purchase_time&#x60; - Sort the results by time of video purchase.  * &#x60;rating&#x60; - Sort the results by content rating.  * &#x60;release_date&#x60; - Sort the results by video release date.  (optional)
         * @return GetAllUserPurchasesAndRentalsRequestBuilder
         */
        public GetAllUserPurchasesAndRentalsRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getAllUserPurchasesAndRentals
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The purchases and rentals were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllUserPurchasesAndRentalsCall(direction, filter, page, perPage, sort, _callback);
        }


        /**
         * Execute getAllUserPurchasesAndRentals request
         * @return List&lt;OnDemandPage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The purchases and rentals were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<OnDemandPage> execute() throws ApiException {
            ApiResponse<List<OnDemandPage>> localVarResp = getAllUserPurchasesAndRentalsWithHttpInfo(direction, filter, page, perPage, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllUserPurchasesAndRentals request with HTTP info returned
         * @return ApiResponse&lt;List&lt;OnDemandPage&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The purchases and rentals were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<OnDemandPage>> executeWithHttpInfo() throws ApiException {
            return getAllUserPurchasesAndRentalsWithHttpInfo(direction, filter, page, perPage, sort);
        }

        /**
         * Execute getAllUserPurchasesAndRentals request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The purchases and rentals were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<OnDemandPage>> _callback) throws ApiException {
            return getAllUserPurchasesAndRentalsAsync(direction, filter, page, perPage, sort, _callback);
        }
    }

    /**
     * Get all of the user&#39;s On Demand purchases and rentals
     * This method returns every purchase and rental that the authenticated user has made across all On Demand pages.
     * @return GetAllUserPurchasesAndRentalsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The purchases and rentals were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllUserPurchasesAndRentalsRequestBuilder getAllUserPurchasesAndRentals() throws IllegalArgumentException {
        return new GetAllUserPurchasesAndRentalsRequestBuilder();
    }
    private okhttp3.Call listUserPurchasesAndRentalsCall(Double userId, String direction, String filter, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/ondemand/purchases"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.page+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUserPurchasesAndRentalsValidateBeforeCall(Double userId, String direction, String filter, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listUserPurchasesAndRentals(Async)");
        }

        return listUserPurchasesAndRentalsCall(userId, direction, filter, page, perPage, sort, _callback);

    }


    private ApiResponse<List<OnDemandPage>> listUserPurchasesAndRentalsWithHttpInfo(Double userId, String direction, String filter, Double page, Double perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = listUserPurchasesAndRentalsValidateBeforeCall(userId, direction, filter, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<List<OnDemandPage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listUserPurchasesAndRentalsAsync(Double userId, String direction, String filter, Double page, Double perPage, String sort, final ApiCallback<List<OnDemandPage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUserPurchasesAndRentalsValidateBeforeCall(userId, direction, filter, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<List<OnDemandPage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListUserPurchasesAndRentalsRequestBuilder {
        private final Double userId;
        private String direction;
        private String filter;
        private Double page;
        private Double perPage;
        private String sort;

        private ListUserPurchasesAndRentalsRequestBuilder(double userId) {
            this.userId = userId;
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return ListUserPurchasesAndRentalsRequestBuilder
         */
        public ListUserPurchasesAndRentalsRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The type of the On Demand video to filter on.  Option descriptions:  * &#x60;all&#x60; - Filter by all video types.  * &#x60;expiring_soon&#x60; - Filter by videos that expire soon.  * &#x60;film&#x60; - Filter by film.  * &#x60;important&#x60; - Filter by pages that are about to expire.  * &#x60;purchased&#x60; - Filter by purchased videos.  * &#x60;rented&#x60; - Filter by rented videos.  * &#x60;series&#x60; - Filter by series.  * &#x60;subscription&#x60; - Filter by video subscription.  * &#x60;unwatched&#x60; - Filter by unwatched videos.  * &#x60;watched&#x60; - Filter by watched videos.  (optional)
         * @return ListUserPurchasesAndRentalsRequestBuilder
         */
        public ListUserPurchasesAndRentalsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return ListUserPurchasesAndRentalsRequestBuilder
         */
        public ListUserPurchasesAndRentalsRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return ListUserPurchasesAndRentalsRequestBuilder
         */
        public ListUserPurchasesAndRentalsRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;added&#x60; - Sort the results by most recently added video.  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;name&#x60; - Sort the results by video name.  * &#x60;purchase_time&#x60; - Sort the results by time of video purchase.  * &#x60;rating&#x60; - Sort the results by content rating.  * &#x60;release_date&#x60; - Sort the results by video release date.  (optional)
         * @return ListUserPurchasesAndRentalsRequestBuilder
         */
        public ListUserPurchasesAndRentalsRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for listUserPurchasesAndRentals
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The purchases and rentals were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listUserPurchasesAndRentalsCall(userId, direction, filter, page, perPage, sort, _callback);
        }


        /**
         * Execute listUserPurchasesAndRentals request
         * @return List&lt;OnDemandPage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The purchases and rentals were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<OnDemandPage> execute() throws ApiException {
            ApiResponse<List<OnDemandPage>> localVarResp = listUserPurchasesAndRentalsWithHttpInfo(userId, direction, filter, page, perPage, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listUserPurchasesAndRentals request with HTTP info returned
         * @return ApiResponse&lt;List&lt;OnDemandPage&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The purchases and rentals were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<OnDemandPage>> executeWithHttpInfo() throws ApiException {
            return listUserPurchasesAndRentalsWithHttpInfo(userId, direction, filter, page, perPage, sort);
        }

        /**
         * Execute listUserPurchasesAndRentals request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The purchases and rentals were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<OnDemandPage>> _callback) throws ApiException {
            return listUserPurchasesAndRentalsAsync(userId, direction, filter, page, perPage, sort, _callback);
        }
    }

    /**
     * Get all of the user&#39;s On Demand purchases and rentals
     * This method returns every purchase and rental that the authenticated user has made across all On Demand pages.
     * @param userId The ID of the user. (required)
     * @return ListUserPurchasesAndRentalsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The purchases and rentals were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ListUserPurchasesAndRentalsRequestBuilder listUserPurchasesAndRentals(double userId) throws IllegalArgumentException {
        
        return new ListUserPurchasesAndRentalsRequestBuilder(userId);
    }
}
