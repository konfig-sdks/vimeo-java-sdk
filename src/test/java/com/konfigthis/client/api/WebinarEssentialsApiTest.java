/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CreateWebinarRequest;
import com.konfigthis.client.model.CreateWebinarRequestEmailSettings;
import com.konfigthis.client.model.CreateWebinarRequestPrivacy;
import com.konfigthis.client.model.CreateWebinarRequestSchedule;
import com.konfigthis.client.model.UpdateWebinarRequest;
import com.konfigthis.client.model.UpdateWebinarRequestEmailSettings;
import com.konfigthis.client.model.UpdateWebinarRequestPrivacy;
import com.konfigthis.client.model.UpdateWebinarRequestSchedule;
import com.konfigthis.client.model.Webinar;
import com.konfigthis.client.model.WebinarEssentialsCreateWebinarRequest;
import com.konfigthis.client.model.WebinarEssentialsCreateWebinarRequestEmailSettings;
import com.konfigthis.client.model.WebinarEssentialsCreateWebinarRequestPrivacy;
import com.konfigthis.client.model.WebinarEssentialsCreateWebinarRequestSchedule;
import com.konfigthis.client.model.WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest;
import com.konfigthis.client.model.WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequestEmailSettings;
import com.konfigthis.client.model.WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequestPrivacy;
import com.konfigthis.client.model.WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequestSchedule;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebinarEssentialsApi
 */
@Disabled
public class WebinarEssentialsApiTest {

    private static WebinarEssentialsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new WebinarEssentialsApi(apiClient);
    }

    /**
     * Create a webinar
     *
     * This method creates a new webinar for the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWebinarTest() throws ApiException {
        String title = null;
        String description = null;
        WebinarEssentialsCreateWebinarRequestEmailSettings emailSettings = null;
        Double folderUri = null;
        String password = null;
        WebinarEssentialsCreateWebinarRequestPrivacy privacy = null;
        WebinarEssentialsCreateWebinarRequestSchedule schedule = null;
        String timeZone = null;
        Webinar response = api.createWebinar(title)
                .description(description)
                .emailSettings(emailSettings)
                .folderUri(folderUri)
                .password(password)
                .privacy(privacy)
                .schedule(schedule)
                .timeZone(timeZone)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a specific webinar
     *
     * This method returns a single webinar belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSpecificWebinarTest() throws ApiException {
        String webinarId = null;
        Webinar response = api.getSpecificWebinar(webinarId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a specific webinar
     *
     * This method returns a single webinar belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSpecificWebinar_0Test() throws ApiException {
        String webinarId = null;
        Webinar response = api.getSpecificWebinar_0(webinarId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a webinar
     *
     * This method updates a webinar belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWebinarBelongingToAuthenticatedUserTest() throws ApiException {
        String webinarId = null;
        String title = null;
        String description = null;
        WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequestEmailSettings emailSettings = null;
        String password = null;
        WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequestPrivacy privacy = null;
        WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequestSchedule schedule = null;
        String status = null;
        String timeZone = null;
        Webinar response = api.updateWebinarBelongingToAuthenticatedUser(webinarId)
                .title(title)
                .description(description)
                .emailSettings(emailSettings)
                .password(password)
                .privacy(privacy)
                .schedule(schedule)
                .status(status)
                .timeZone(timeZone)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a webinar
     *
     * This method creates a new webinar for the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webinarTest() throws ApiException {
        String title = null;
        Double userId = null;
        String description = null;
        CreateWebinarRequestEmailSettings emailSettings = null;
        Double folderUri = null;
        String password = null;
        CreateWebinarRequestPrivacy privacy = null;
        CreateWebinarRequestSchedule schedule = null;
        String timeZone = null;
        Webinar response = api.webinar(title, userId)
                .description(description)
                .emailSettings(emailSettings)
                .folderUri(folderUri)
                .password(password)
                .privacy(privacy)
                .schedule(schedule)
                .timeZone(timeZone)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a specific webinar
     *
     * This method returns a single webinar belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webinar_0Test() throws ApiException {
        Double userId = null;
        String webinarId = null;
        Webinar response = api.webinar_0(userId, webinarId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a webinar
     *
     * This method updates a webinar belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webinar_1Test() throws ApiException {
        Double userId = null;
        String webinarId = null;
        String title = null;
        String description = null;
        UpdateWebinarRequestEmailSettings emailSettings = null;
        String password = null;
        UpdateWebinarRequestPrivacy privacy = null;
        UpdateWebinarRequestSchedule schedule = null;
        String status = null;
        String timeZone = null;
        Webinar response = api.webinar_1(userId, webinarId)
                .title(title)
                .description(description)
                .emailSettings(emailSettings)
                .password(password)
                .privacy(privacy)
                .schedule(schedule)
                .status(status)
                .timeZone(timeZone)
                .execute();
        // TODO: test validations
    }

}
