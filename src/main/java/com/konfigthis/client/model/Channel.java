/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Category;
import com.konfigthis.client.model.ChannelMetadata;
import com.konfigthis.client.model.ChannelPrivacy;
import com.konfigthis.client.model.Picture;
import com.konfigthis.client.model.Tag;
import com.konfigthis.client.model.User;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Channel
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Channel {
  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<Category> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_TIME = "created_time";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private String createdTime;

  public static final String SERIALIZED_NAME_HEADER = "header";
  @SerializedName(SERIALIZED_NAME_HEADER)
  private Picture header;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private ChannelMetadata metadata;

  public static final String SERIALIZED_NAME_MODIFIED_TIME = "modified_time";
  @SerializedName(SERIALIZED_NAME_MODIFIED_TIME)
  private String modifiedTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PICTURES = "pictures";
  @SerializedName(SERIALIZED_NAME_PICTURES)
  private Picture pictures;

  public static final String SERIALIZED_NAME_PRIVACY = "privacy";
  @SerializedName(SERIALIZED_NAME_PRIVACY)
  private ChannelPrivacy privacy;

  public static final String SERIALIZED_NAME_RESOURCE_KEY = "resource_key";
  @SerializedName(SERIALIZED_NAME_RESOURCE_KEY)
  private String resourceKey;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public Channel() {
  }

  public Channel tags(List<Tag> tags) {
    
    
    
    
    this.tags = tags;
    return this;
  }

  public Channel addTagsItem(Tag tagsItem) {
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * An array of all tags assigned to the channel.
   * @return tags
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An array of all tags assigned to the channel.")

  public List<Tag> getTags() {
    return tags;
  }


  public void setTags(List<Tag> tags) {
    
    
    
    this.tags = tags;
  }


  public Channel description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A brief explanation of the channel&#39;s content.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "We really love videos, and these are the videos we really, really love.", required = true, value = "A brief explanation of the channel's content.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public Channel categories(List<Category> categories) {
    
    
    
    
    this.categories = categories;
    return this;
  }

  public Channel addCategoriesItem(Category categoriesItem) {
    this.categories.add(categoriesItem);
    return this;
  }

   /**
   * The categories to which the channel belongs as specified by the channel moderators.
   * @return categories
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The categories to which the channel belongs as specified by the channel moderators.")

  public List<Category> getCategories() {
    return categories;
  }


  public void setCategories(List<Category> categories) {
    
    
    
    this.categories = categories;
  }


  public Channel createdTime(String createdTime) {
    
    
    
    
    this.createdTime = createdTime;
    return this;
  }

   /**
   * The time in ISO 8601 format when the channel was created.
   * @return createdTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2007-10-23T17:00:43+00:00", required = true, value = "The time in ISO 8601 format when the channel was created.")

  public String getCreatedTime() {
    return createdTime;
  }


  public void setCreatedTime(String createdTime) {
    
    
    
    this.createdTime = createdTime;
  }


  public Channel header(Picture header) {
    
    
    
    
    this.header = header;
    return this;
  }

   /**
   * The banner that appears by default at the top of the channel page.
   * @return header
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The banner that appears by default at the top of the channel page.")

  public Picture getHeader() {
    return header;
  }


  public void setHeader(Picture header) {
    
    
    
    this.header = header;
  }


  public Channel link(String link) {
    
    
    
    
    this.link = link;
    return this;
  }

   /**
   * The URL to access the channel in a browser.
   * @return link
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://vimeo.com/channels/staffpicks", required = true, value = "The URL to access the channel in a browser.")

  public String getLink() {
    return link;
  }


  public void setLink(String link) {
    
    
    
    this.link = link;
  }


  public Channel metadata(ChannelMetadata metadata) {
    
    
    
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ChannelMetadata getMetadata() {
    return metadata;
  }


  public void setMetadata(ChannelMetadata metadata) {
    
    
    
    this.metadata = metadata;
  }


  public Channel modifiedTime(String modifiedTime) {
    
    
    
    
    this.modifiedTime = modifiedTime;
    return this;
  }

   /**
   * The time in ISO 8601 format when the channel was last modified.
   * @return modifiedTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2018-03-21T22:52:29+00:00", required = true, value = "The time in ISO 8601 format when the channel was last modified.")

  public String getModifiedTime() {
    return modifiedTime;
  }


  public void setModifiedTime(String modifiedTime) {
    
    
    
    this.modifiedTime = modifiedTime;
  }


  public Channel name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The display name that identifies the channel.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Vimeo Staff Picks", required = true, value = "The display name that identifies the channel.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public Channel pictures(Picture pictures) {
    
    
    
    
    this.pictures = pictures;
    return this;
  }

   /**
   * The active image for the channel. The default is the thumbnail of the last video added to the channel.
   * @return pictures
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The active image for the channel. The default is the thumbnail of the last video added to the channel.")

  public Picture getPictures() {
    return pictures;
  }


  public void setPictures(Picture pictures) {
    
    
    
    this.pictures = pictures;
  }


  public Channel privacy(ChannelPrivacy privacy) {
    
    
    
    
    this.privacy = privacy;
    return this;
  }

   /**
   * Get privacy
   * @return privacy
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ChannelPrivacy getPrivacy() {
    return privacy;
  }


  public void setPrivacy(ChannelPrivacy privacy) {
    
    
    
    this.privacy = privacy;
  }


  public Channel resourceKey(String resourceKey) {
    
    
    
    
    this.resourceKey = resourceKey;
    return this;
  }

   /**
   * The channel resource key.
   * @return resourceKey
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "e5595241643259c658ed6c85ca82985a6341edc7", required = true, value = "The channel resource key.")

  public String getResourceKey() {
    return resourceKey;
  }


  public void setResourceKey(String resourceKey) {
    
    
    
    this.resourceKey = resourceKey;
  }


  public Channel uri(String uri) {
    
    
    
    
    this.uri = uri;
    return this;
  }

   /**
   * The unique identifier to access the channel resource.
   * @return uri
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "/channels/927", required = true, value = "The unique identifier to access the channel resource.")

  public String getUri() {
    return uri;
  }


  public void setUri(String uri) {
    
    
    
    this.uri = uri;
  }


  public Channel user(User user) {
    
    
    
    
    this.user = user;
    return this;
  }

   /**
   * The Vimeo user who owns the channel.
   * @return user
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The Vimeo user who owns the channel.")

  public User getUser() {
    return user;
  }


  public void setUser(User user) {
    
    
    
    this.user = user;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Channel instance itself
   */
  public Channel putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Channel channel = (Channel) o;
    return Objects.equals(this.tags, channel.tags) &&
        Objects.equals(this.description, channel.description) &&
        Objects.equals(this.categories, channel.categories) &&
        Objects.equals(this.createdTime, channel.createdTime) &&
        Objects.equals(this.header, channel.header) &&
        Objects.equals(this.link, channel.link) &&
        Objects.equals(this.metadata, channel.metadata) &&
        Objects.equals(this.modifiedTime, channel.modifiedTime) &&
        Objects.equals(this.name, channel.name) &&
        Objects.equals(this.pictures, channel.pictures) &&
        Objects.equals(this.privacy, channel.privacy) &&
        Objects.equals(this.resourceKey, channel.resourceKey) &&
        Objects.equals(this.uri, channel.uri) &&
        Objects.equals(this.user, channel.user)&&
        Objects.equals(this.additionalProperties, channel.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tags, description, categories, createdTime, header, link, metadata, modifiedTime, name, pictures, privacy, resourceKey, uri, user, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Channel {\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    modifiedTime: ").append(toIndentedString(modifiedTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pictures: ").append(toIndentedString(pictures)).append("\n");
    sb.append("    privacy: ").append(toIndentedString(privacy)).append("\n");
    sb.append("    resourceKey: ").append(toIndentedString(resourceKey)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tags");
    openapiFields.add("description");
    openapiFields.add("categories");
    openapiFields.add("created_time");
    openapiFields.add("header");
    openapiFields.add("link");
    openapiFields.add("metadata");
    openapiFields.add("modified_time");
    openapiFields.add("name");
    openapiFields.add("pictures");
    openapiFields.add("privacy");
    openapiFields.add("resource_key");
    openapiFields.add("uri");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("tags");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("categories");
    openapiRequiredFields.add("created_time");
    openapiRequiredFields.add("header");
    openapiRequiredFields.add("link");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("modified_time");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("pictures");
    openapiRequiredFields.add("privacy");
    openapiRequiredFields.add("resource_key");
    openapiRequiredFields.add("uri");
    openapiRequiredFields.add("user");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Channel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Channel.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Channel is not found in the empty JSON string", Channel.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Channel.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }

      JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
      // validate the required field `tags` (array)
      for (int i = 0; i < jsonArraytags.size(); i++) {
        Tag.validateJsonObject(jsonArraytags.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("description").isJsonNull() && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }

      JsonArray jsonArraycategories = jsonObj.getAsJsonArray("categories");
      // validate the required field `categories` (array)
      for (int i = 0; i < jsonArraycategories.size(); i++) {
        Category.validateJsonObject(jsonArraycategories.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("created_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_time").toString()));
      }
      // validate the required field `header`
      Picture.validateJsonObject(jsonObj.getAsJsonObject("header"));
      if (!jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      // validate the required field `metadata`
      ChannelMetadata.validateJsonObject(jsonObj.getAsJsonObject("metadata"));
      if (!jsonObj.get("modified_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modified_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modified_time").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `pictures`
      Picture.validateJsonObject(jsonObj.getAsJsonObject("pictures"));
      // validate the required field `privacy`
      ChannelPrivacy.validateJsonObject(jsonObj.getAsJsonObject("privacy"));
      if (!jsonObj.get("resource_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_key").toString()));
      }
      if (!jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      // validate the required field `user`
      User.validateJsonObject(jsonObj.getAsJsonObject("user"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Channel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Channel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Channel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Channel.class));

       return (TypeAdapter<T>) new TypeAdapter<Channel>() {
           @Override
           public void write(JsonWriter out, Channel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Channel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Channel instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Channel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Channel
  * @throws IOException if the JSON string is invalid with respect to Channel
  */
  public static Channel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Channel.class);
  }

 /**
  * Convert an instance of Channel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

