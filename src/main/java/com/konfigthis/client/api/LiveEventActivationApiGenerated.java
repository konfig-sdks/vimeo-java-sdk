/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.LiveEventActivationCreateRtmpLinksRequest;
import com.konfigthis.client.model.LiveEventActivationCreateRtmpLinksRequest1;
import com.konfigthis.client.model.LiveEventActivationCreateRtmpLinksRequest2;
import com.konfigthis.client.model.Video;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LiveEventActivationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LiveEventActivationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LiveEventActivationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createRtmpLinksCall(Double liveEventId, LiveEventActivationCreateRtmpLinksRequest liveEventActivationCreateRtmpLinksRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = liveEventActivationCreateRtmpLinksRequest;

        // create path and map variables
        String localVarPath = "/live_events/{live_event_id}/activate"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRtmpLinksValidateBeforeCall(Double liveEventId, LiveEventActivationCreateRtmpLinksRequest liveEventActivationCreateRtmpLinksRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling createRtmpLinks(Async)");
        }

        return createRtmpLinksCall(liveEventId, liveEventActivationCreateRtmpLinksRequest, _callback);

    }


    private ApiResponse<Video> createRtmpLinksWithHttpInfo(Double liveEventId, LiveEventActivationCreateRtmpLinksRequest liveEventActivationCreateRtmpLinksRequest) throws ApiException {
        okhttp3.Call localVarCall = createRtmpLinksValidateBeforeCall(liveEventId, liveEventActivationCreateRtmpLinksRequest, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createRtmpLinksAsync(Double liveEventId, LiveEventActivationCreateRtmpLinksRequest liveEventActivationCreateRtmpLinksRequest, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRtmpLinksValidateBeforeCall(liveEventId, liveEventActivationCreateRtmpLinksRequest, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRtmpLinksRequestBuilder {
        private final Double liveEventId;
        private Boolean cloudComposingStreaming;
        private Boolean streamingStartRequested;

        private CreateRtmpLinksRequestBuilder(double liveEventId) {
            this.liveEventId = liveEventId;
        }

        /**
         * Set cloudComposingStreaming
         * @param cloudComposingStreaming Whether the stream activates from the cloud composer. _This field is deprecated._ (optional)
         * @return CreateRtmpLinksRequestBuilder
         */
        public CreateRtmpLinksRequestBuilder cloudComposingStreaming(Boolean cloudComposingStreaming) {
            this.cloudComposingStreaming = cloudComposingStreaming;
            return this;
        }
        
        /**
         * Set streamingStartRequested
         * @param streamingStartRequested Whether the stream activates from the cloud composer. (optional)
         * @return CreateRtmpLinksRequestBuilder
         */
        public CreateRtmpLinksRequestBuilder streamingStartRequested(Boolean streamingStartRequested) {
            this.streamingStartRequested = streamingStartRequested;
            return this;
        }
        
        /**
         * Build call for createRtmpLinks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event was activated. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LiveEventActivationCreateRtmpLinksRequest liveEventActivationCreateRtmpLinksRequest = buildBodyParams();
            return createRtmpLinksCall(liveEventId, liveEventActivationCreateRtmpLinksRequest, _callback);
        }

        private LiveEventActivationCreateRtmpLinksRequest buildBodyParams() {
            LiveEventActivationCreateRtmpLinksRequest liveEventActivationCreateRtmpLinksRequest = new LiveEventActivationCreateRtmpLinksRequest();
            liveEventActivationCreateRtmpLinksRequest.cloudComposingStreaming(this.cloudComposingStreaming);
            liveEventActivationCreateRtmpLinksRequest.streamingStartRequested(this.streamingStartRequested);
            return liveEventActivationCreateRtmpLinksRequest;
        }

        /**
         * Execute createRtmpLinks request
         * @return Video
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event was activated. </td><td>  -  </td></tr>
         </table>
         */
        public Video execute() throws ApiException {
            LiveEventActivationCreateRtmpLinksRequest liveEventActivationCreateRtmpLinksRequest = buildBodyParams();
            ApiResponse<Video> localVarResp = createRtmpLinksWithHttpInfo(liveEventId, liveEventActivationCreateRtmpLinksRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createRtmpLinks request with HTTP info returned
         * @return ApiResponse&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event was activated. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Video> executeWithHttpInfo() throws ApiException {
            LiveEventActivationCreateRtmpLinksRequest liveEventActivationCreateRtmpLinksRequest = buildBodyParams();
            return createRtmpLinksWithHttpInfo(liveEventId, liveEventActivationCreateRtmpLinksRequest);
        }

        /**
         * Execute createRtmpLinks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event was activated. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Video> _callback) throws ApiException {
            LiveEventActivationCreateRtmpLinksRequest liveEventActivationCreateRtmpLinksRequest = buildBodyParams();
            return createRtmpLinksAsync(liveEventId, liveEventActivationCreateRtmpLinksRequest, _callback);
        }
    }

    /**
     * Activate a live event
     * This method creates the necessary RTMP links for the specified event. Begin streaming to these links to trigger the event on Vimeo. The authenticated user must be the owner of the event.
     * @param liveEventId The ID of the event. (required)
     * @return CreateRtmpLinksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The event was activated. </td><td>  -  </td></tr>
     </table>
     */
    public CreateRtmpLinksRequestBuilder createRtmpLinks(double liveEventId) throws IllegalArgumentException {
        
        return new CreateRtmpLinksRequestBuilder(liveEventId);
    }
    private okhttp3.Call createRtmpLinks_0Call(Double liveEventId, LiveEventActivationCreateRtmpLinksRequest1 liveEventActivationCreateRtmpLinksRequest1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = liveEventActivationCreateRtmpLinksRequest1;

        // create path and map variables
        String localVarPath = "/me/live_events/{live_event_id}/activate"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRtmpLinks_0ValidateBeforeCall(Double liveEventId, LiveEventActivationCreateRtmpLinksRequest1 liveEventActivationCreateRtmpLinksRequest1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling createRtmpLinks_0(Async)");
        }

        return createRtmpLinks_0Call(liveEventId, liveEventActivationCreateRtmpLinksRequest1, _callback);

    }


    private ApiResponse<Video> createRtmpLinks_0WithHttpInfo(Double liveEventId, LiveEventActivationCreateRtmpLinksRequest1 liveEventActivationCreateRtmpLinksRequest1) throws ApiException {
        okhttp3.Call localVarCall = createRtmpLinks_0ValidateBeforeCall(liveEventId, liveEventActivationCreateRtmpLinksRequest1, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createRtmpLinks_0Async(Double liveEventId, LiveEventActivationCreateRtmpLinksRequest1 liveEventActivationCreateRtmpLinksRequest1, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRtmpLinks_0ValidateBeforeCall(liveEventId, liveEventActivationCreateRtmpLinksRequest1, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRtmpLinks0RequestBuilder {
        private final Double liveEventId;
        private Boolean cloudComposingStreaming;
        private Boolean streamingStartRequested;

        private CreateRtmpLinks0RequestBuilder(double liveEventId) {
            this.liveEventId = liveEventId;
        }

        /**
         * Set cloudComposingStreaming
         * @param cloudComposingStreaming Whether the stream activates from the cloud composer. _This field is deprecated._ (optional)
         * @return CreateRtmpLinks0RequestBuilder
         */
        public CreateRtmpLinks0RequestBuilder cloudComposingStreaming(Boolean cloudComposingStreaming) {
            this.cloudComposingStreaming = cloudComposingStreaming;
            return this;
        }
        
        /**
         * Set streamingStartRequested
         * @param streamingStartRequested Whether the stream activates from the cloud composer. (optional)
         * @return CreateRtmpLinks0RequestBuilder
         */
        public CreateRtmpLinks0RequestBuilder streamingStartRequested(Boolean streamingStartRequested) {
            this.streamingStartRequested = streamingStartRequested;
            return this;
        }
        
        /**
         * Build call for createRtmpLinks_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event was activated. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LiveEventActivationCreateRtmpLinksRequest1 liveEventActivationCreateRtmpLinksRequest1 = buildBodyParams();
            return createRtmpLinks_0Call(liveEventId, liveEventActivationCreateRtmpLinksRequest1, _callback);
        }

        private LiveEventActivationCreateRtmpLinksRequest1 buildBodyParams() {
            LiveEventActivationCreateRtmpLinksRequest1 liveEventActivationCreateRtmpLinksRequest1 = new LiveEventActivationCreateRtmpLinksRequest1();
            liveEventActivationCreateRtmpLinksRequest1.cloudComposingStreaming(this.cloudComposingStreaming);
            liveEventActivationCreateRtmpLinksRequest1.streamingStartRequested(this.streamingStartRequested);
            return liveEventActivationCreateRtmpLinksRequest1;
        }

        /**
         * Execute createRtmpLinks_0 request
         * @return Video
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event was activated. </td><td>  -  </td></tr>
         </table>
         */
        public Video execute() throws ApiException {
            LiveEventActivationCreateRtmpLinksRequest1 liveEventActivationCreateRtmpLinksRequest1 = buildBodyParams();
            ApiResponse<Video> localVarResp = createRtmpLinks_0WithHttpInfo(liveEventId, liveEventActivationCreateRtmpLinksRequest1);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createRtmpLinks_0 request with HTTP info returned
         * @return ApiResponse&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event was activated. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Video> executeWithHttpInfo() throws ApiException {
            LiveEventActivationCreateRtmpLinksRequest1 liveEventActivationCreateRtmpLinksRequest1 = buildBodyParams();
            return createRtmpLinks_0WithHttpInfo(liveEventId, liveEventActivationCreateRtmpLinksRequest1);
        }

        /**
         * Execute createRtmpLinks_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event was activated. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Video> _callback) throws ApiException {
            LiveEventActivationCreateRtmpLinksRequest1 liveEventActivationCreateRtmpLinksRequest1 = buildBodyParams();
            return createRtmpLinks_0Async(liveEventId, liveEventActivationCreateRtmpLinksRequest1, _callback);
        }
    }

    /**
     * Activate a live event
     * This method creates the necessary RTMP links for the specified event. Begin streaming to these links to trigger the event on Vimeo. The authenticated user must be the owner of the event.
     * @param liveEventId The ID of the event. (required)
     * @return CreateRtmpLinks0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The event was activated. </td><td>  -  </td></tr>
     </table>
     */
    public CreateRtmpLinks0RequestBuilder createRtmpLinks_0(double liveEventId) throws IllegalArgumentException {
        
        return new CreateRtmpLinks0RequestBuilder(liveEventId);
    }
    private okhttp3.Call createRtmpLinks_1Call(Double liveEventId, Double userId, LiveEventActivationCreateRtmpLinksRequest2 liveEventActivationCreateRtmpLinksRequest2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = liveEventActivationCreateRtmpLinksRequest2;

        // create path and map variables
        String localVarPath = "/users/{user_id}/live_events/{live_event_id}/activate"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRtmpLinks_1ValidateBeforeCall(Double liveEventId, Double userId, LiveEventActivationCreateRtmpLinksRequest2 liveEventActivationCreateRtmpLinksRequest2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling createRtmpLinks_1(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createRtmpLinks_1(Async)");
        }

        return createRtmpLinks_1Call(liveEventId, userId, liveEventActivationCreateRtmpLinksRequest2, _callback);

    }


    private ApiResponse<Video> createRtmpLinks_1WithHttpInfo(Double liveEventId, Double userId, LiveEventActivationCreateRtmpLinksRequest2 liveEventActivationCreateRtmpLinksRequest2) throws ApiException {
        okhttp3.Call localVarCall = createRtmpLinks_1ValidateBeforeCall(liveEventId, userId, liveEventActivationCreateRtmpLinksRequest2, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createRtmpLinks_1Async(Double liveEventId, Double userId, LiveEventActivationCreateRtmpLinksRequest2 liveEventActivationCreateRtmpLinksRequest2, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRtmpLinks_1ValidateBeforeCall(liveEventId, userId, liveEventActivationCreateRtmpLinksRequest2, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRtmpLinks1RequestBuilder {
        private final Double liveEventId;
        private final Double userId;
        private Boolean cloudComposingStreaming;
        private Boolean streamingStartRequested;

        private CreateRtmpLinks1RequestBuilder(double liveEventId, double userId) {
            this.liveEventId = liveEventId;
            this.userId = userId;
        }

        /**
         * Set cloudComposingStreaming
         * @param cloudComposingStreaming Whether the stream activates from the cloud composer. _This field is deprecated._ (optional)
         * @return CreateRtmpLinks1RequestBuilder
         */
        public CreateRtmpLinks1RequestBuilder cloudComposingStreaming(Boolean cloudComposingStreaming) {
            this.cloudComposingStreaming = cloudComposingStreaming;
            return this;
        }
        
        /**
         * Set streamingStartRequested
         * @param streamingStartRequested Whether the stream activates from the cloud composer. (optional)
         * @return CreateRtmpLinks1RequestBuilder
         */
        public CreateRtmpLinks1RequestBuilder streamingStartRequested(Boolean streamingStartRequested) {
            this.streamingStartRequested = streamingStartRequested;
            return this;
        }
        
        /**
         * Build call for createRtmpLinks_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event was activated. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LiveEventActivationCreateRtmpLinksRequest2 liveEventActivationCreateRtmpLinksRequest2 = buildBodyParams();
            return createRtmpLinks_1Call(liveEventId, userId, liveEventActivationCreateRtmpLinksRequest2, _callback);
        }

        private LiveEventActivationCreateRtmpLinksRequest2 buildBodyParams() {
            LiveEventActivationCreateRtmpLinksRequest2 liveEventActivationCreateRtmpLinksRequest2 = new LiveEventActivationCreateRtmpLinksRequest2();
            liveEventActivationCreateRtmpLinksRequest2.cloudComposingStreaming(this.cloudComposingStreaming);
            liveEventActivationCreateRtmpLinksRequest2.streamingStartRequested(this.streamingStartRequested);
            return liveEventActivationCreateRtmpLinksRequest2;
        }

        /**
         * Execute createRtmpLinks_1 request
         * @return Video
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event was activated. </td><td>  -  </td></tr>
         </table>
         */
        public Video execute() throws ApiException {
            LiveEventActivationCreateRtmpLinksRequest2 liveEventActivationCreateRtmpLinksRequest2 = buildBodyParams();
            ApiResponse<Video> localVarResp = createRtmpLinks_1WithHttpInfo(liveEventId, userId, liveEventActivationCreateRtmpLinksRequest2);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createRtmpLinks_1 request with HTTP info returned
         * @return ApiResponse&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event was activated. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Video> executeWithHttpInfo() throws ApiException {
            LiveEventActivationCreateRtmpLinksRequest2 liveEventActivationCreateRtmpLinksRequest2 = buildBodyParams();
            return createRtmpLinks_1WithHttpInfo(liveEventId, userId, liveEventActivationCreateRtmpLinksRequest2);
        }

        /**
         * Execute createRtmpLinks_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The event was activated. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Video> _callback) throws ApiException {
            LiveEventActivationCreateRtmpLinksRequest2 liveEventActivationCreateRtmpLinksRequest2 = buildBodyParams();
            return createRtmpLinks_1Async(liveEventId, userId, liveEventActivationCreateRtmpLinksRequest2, _callback);
        }
    }

    /**
     * Activate a live event
     * This method creates the necessary RTMP links for the specified event. Begin streaming to these links to trigger the event on Vimeo. The authenticated user must be the owner of the event.
     * @param liveEventId The ID of the event. (required)
     * @param userId The ID of the user. (required)
     * @return CreateRtmpLinks1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The event was activated. </td><td>  -  </td></tr>
     </table>
     */
    public CreateRtmpLinks1RequestBuilder createRtmpLinks_1(double liveEventId, double userId) throws IllegalArgumentException {
        
        
        return new CreateRtmpLinks1RequestBuilder(liveEventId, userId);
    }
}
