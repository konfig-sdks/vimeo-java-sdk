/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Tag;
import com.konfigthis.client.model.Video;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class VideosTagsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VideosTagsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public VideosTagsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addMultipleCall(Double videoId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/tags"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.tag+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMultipleValidateBeforeCall(Double videoId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addMultiple(Async)");
        }

        return addMultipleCall(videoId, page, perPage, _callback);

    }


    private ApiResponse<List<Tag>> addMultipleWithHttpInfo(Double videoId, Double page, Double perPage) throws ApiException {
        okhttp3.Call localVarCall = addMultipleValidateBeforeCall(videoId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addMultipleAsync(Double videoId, Double page, Double perPage, final ApiCallback<List<Tag>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMultipleValidateBeforeCall(videoId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddMultipleRequestBuilder {
        private final Double videoId;
        private Double page;
        private Double perPage;

        private AddMultipleRequestBuilder(double videoId) {
            this.videoId = videoId;
        }

        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return AddMultipleRequestBuilder
         */
        public AddMultipleRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return AddMultipleRequestBuilder
         */
        public AddMultipleRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for addMultiple
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The tags were added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addMultipleCall(videoId, page, perPage, _callback);
        }


        /**
         * Execute addMultiple request
         * @return List&lt;Tag&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The tags were added. </td><td>  -  </td></tr>
         </table>
         */
        public List<Tag> execute() throws ApiException {
            ApiResponse<List<Tag>> localVarResp = addMultipleWithHttpInfo(videoId, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addMultiple request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Tag&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The tags were added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Tag>> executeWithHttpInfo() throws ApiException {
            return addMultipleWithHttpInfo(videoId, page, perPage);
        }

        /**
         * Execute addMultiple request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The tags were added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Tag>> _callback) throws ApiException {
            return addMultipleAsync(videoId, page, perPage, _callback);
        }
    }

    /**
     * Add a list of tags to a video
     * This method adds multiple tags to the specified video. Include the tags as a JSON array  as the body of the request with the  **name** field, like this: &#x60;[{ \&quot;name\&quot;: \&quot;funny\&quot;}, {\&quot;name\&quot;: \&quot;concert\&quot; }]&#x60;. The authenticated user must have edit access to the video. For more information on batch requests like this one, see [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).
     * @param videoId The ID of the video. (required)
     * @return AddMultipleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tags were added. </td><td>  -  </td></tr>
     </table>
     */
    public AddMultipleRequestBuilder addMultiple(double videoId) throws IllegalArgumentException {
        
        return new AddMultipleRequestBuilder(videoId);
    }
    private okhttp3.Call addTagToVideoCall(Double videoId, String word, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/tags/{word}"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()))
            .replace("{" + "word" + "}", localVarApiClient.escapeString(word.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.tag+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTagToVideoValidateBeforeCall(Double videoId, String word, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addTagToVideo(Async)");
        }

        // verify the required parameter 'word' is set
        if (word == null) {
            throw new ApiException("Missing the required parameter 'word' when calling addTagToVideo(Async)");
        }

        return addTagToVideoCall(videoId, word, _callback);

    }


    private ApiResponse<Tag> addTagToVideoWithHttpInfo(Double videoId, String word) throws ApiException {
        okhttp3.Call localVarCall = addTagToVideoValidateBeforeCall(videoId, word, null);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addTagToVideoAsync(Double videoId, String word, final ApiCallback<Tag> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTagToVideoValidateBeforeCall(videoId, word, _callback);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddTagToVideoRequestBuilder {
        private final Double videoId;
        private final String word;

        private AddTagToVideoRequestBuilder(double videoId, String word) {
            this.videoId = videoId;
            this.word = word;
        }

        /**
         * Build call for addTagToVideo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The tag was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addTagToVideoCall(videoId, word, _callback);
        }


        /**
         * Execute addTagToVideo request
         * @return Tag
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The tag was added. </td><td>  -  </td></tr>
         </table>
         */
        public Tag execute() throws ApiException {
            ApiResponse<Tag> localVarResp = addTagToVideoWithHttpInfo(videoId, word);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addTagToVideo request with HTTP info returned
         * @return ApiResponse&lt;Tag&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The tag was added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Tag> executeWithHttpInfo() throws ApiException {
            return addTagToVideoWithHttpInfo(videoId, word);
        }

        /**
         * Execute addTagToVideo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The tag was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Tag> _callback) throws ApiException {
            return addTagToVideoAsync(videoId, word, _callback);
        }
    }

    /**
     * Add a specific tag to a video
     * This method adds a single tag to the specified video. The authenticated user must be the owner of the video.
     * @param videoId The ID of the video. (required)
     * @param word The tag word. (required)
     * @return AddTagToVideoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tag was added. </td><td>  -  </td></tr>
     </table>
     */
    public AddTagToVideoRequestBuilder addTagToVideo(double videoId, String word) throws IllegalArgumentException {
        
        if (word == null) throw new IllegalArgumentException("\"word\" is required but got null");
            

        return new AddTagToVideoRequestBuilder(videoId, word);
    }
    private okhttp3.Call checkTagVideoCall(Double videoId, String word, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/tags/{word}"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()))
            .replace("{" + "word" + "}", localVarApiClient.escapeString(word.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.tag+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkTagVideoValidateBeforeCall(Double videoId, String word, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling checkTagVideo(Async)");
        }

        // verify the required parameter 'word' is set
        if (word == null) {
            throw new ApiException("Missing the required parameter 'word' when calling checkTagVideo(Async)");
        }

        return checkTagVideoCall(videoId, word, _callback);

    }


    private ApiResponse<Tag> checkTagVideoWithHttpInfo(Double videoId, String word) throws ApiException {
        okhttp3.Call localVarCall = checkTagVideoValidateBeforeCall(videoId, word, null);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkTagVideoAsync(Double videoId, String word, final ApiCallback<Tag> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkTagVideoValidateBeforeCall(videoId, word, _callback);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckTagVideoRequestBuilder {
        private final Double videoId;
        private final String word;

        private CheckTagVideoRequestBuilder(double videoId, String word) {
            this.videoId = videoId;
            this.word = word;
        }

        /**
         * Build call for checkTagVideo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The tag has been added to the video. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkTagVideoCall(videoId, word, _callback);
        }


        /**
         * Execute checkTagVideo request
         * @return Tag
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The tag has been added to the video. </td><td>  -  </td></tr>
         </table>
         */
        public Tag execute() throws ApiException {
            ApiResponse<Tag> localVarResp = checkTagVideoWithHttpInfo(videoId, word);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkTagVideo request with HTTP info returned
         * @return ApiResponse&lt;Tag&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The tag has been added to the video. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Tag> executeWithHttpInfo() throws ApiException {
            return checkTagVideoWithHttpInfo(videoId, word);
        }

        /**
         * Execute checkTagVideo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The tag has been added to the video. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Tag> _callback) throws ApiException {
            return checkTagVideoAsync(videoId, word, _callback);
        }
    }

    /**
     * Check if a tag has been added to a video
     * This method determines whether the specified tag has been added to a video. The authenticated user must be the owner of the video.
     * @param videoId The ID of the video. (required)
     * @param word The tag word. (required)
     * @return CheckTagVideoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tag has been added to the video. </td><td>  -  </td></tr>
     </table>
     */
    public CheckTagVideoRequestBuilder checkTagVideo(double videoId, String word) throws IllegalArgumentException {
        
        if (word == null) throw new IllegalArgumentException("\"word\" is required but got null");
            

        return new CheckTagVideoRequestBuilder(videoId, word);
    }
    private okhttp3.Call getAllByTagCall(String word, String direction, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags/{word}/videos"
            .replace("{" + "word" + "}", localVarApiClient.escapeString(word.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllByTagValidateBeforeCall(String word, String direction, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'word' is set
        if (word == null) {
            throw new ApiException("Missing the required parameter 'word' when calling getAllByTag(Async)");
        }

        return getAllByTagCall(word, direction, page, perPage, sort, _callback);

    }


    private ApiResponse<List<Video>> getAllByTagWithHttpInfo(String word, String direction, Double page, Double perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = getAllByTagValidateBeforeCall(word, direction, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllByTagAsync(String word, String direction, Double page, Double perPage, String sort, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllByTagValidateBeforeCall(word, direction, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllByTagRequestBuilder {
        private final String word;
        private String direction;
        private Double page;
        private Double perPage;
        private String sort;

        private GetAllByTagRequestBuilder(String word) {
            this.word = word;
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return GetAllByTagRequestBuilder
         */
        public GetAllByTagRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetAllByTagRequestBuilder
         */
        public GetAllByTagRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetAllByTagRequestBuilder
         */
        public GetAllByTagRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;created_time&#x60; - Sort the results by creation time.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;name&#x60; - Sort the results by name.  (optional)
         * @return GetAllByTagRequestBuilder
         */
        public GetAllByTagRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getAllByTag
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllByTagCall(word, direction, page, perPage, sort, _callback);
        }


        /**
         * Execute getAllByTag request
         * @return List&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Video> execute() throws ApiException {
            ApiResponse<List<Video>> localVarResp = getAllByTagWithHttpInfo(word, direction, page, perPage, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllByTag request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Video&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Video>> executeWithHttpInfo() throws ApiException {
            return getAllByTagWithHttpInfo(word, direction, page, perPage, sort);
        }

        /**
         * Execute getAllByTag request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Video>> _callback) throws ApiException {
            return getAllByTagAsync(word, direction, page, perPage, sort, _callback);
        }
    }

    /**
     * Get all the videos with a specific tag
     * This method returns all the public videos associated with the specified tag.
     * @param word The tag word. (required)
     * @return GetAllByTagRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllByTagRequestBuilder getAllByTag(String word) throws IllegalArgumentException {
        if (word == null) throw new IllegalArgumentException("\"word\" is required but got null");
            

        return new GetAllByTagRequestBuilder(word);
    }
    private okhttp3.Call getVideoTagsCall(Double videoId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/tags"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.tag+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoTagsValidateBeforeCall(Double videoId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getVideoTags(Async)");
        }

        return getVideoTagsCall(videoId, page, perPage, _callback);

    }


    private ApiResponse<List<Tag>> getVideoTagsWithHttpInfo(Double videoId, Double page, Double perPage) throws ApiException {
        okhttp3.Call localVarCall = getVideoTagsValidateBeforeCall(videoId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getVideoTagsAsync(Double videoId, Double page, Double perPage, final ApiCallback<List<Tag>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoTagsValidateBeforeCall(videoId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetVideoTagsRequestBuilder {
        private final Double videoId;
        private Double page;
        private Double perPage;

        private GetVideoTagsRequestBuilder(double videoId) {
            this.videoId = videoId;
        }

        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetVideoTagsRequestBuilder
         */
        public GetVideoTagsRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetVideoTagsRequestBuilder
         */
        public GetVideoTagsRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getVideoTags
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The tags were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getVideoTagsCall(videoId, page, perPage, _callback);
        }


        /**
         * Execute getVideoTags request
         * @return List&lt;Tag&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The tags were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Tag> execute() throws ApiException {
            ApiResponse<List<Tag>> localVarResp = getVideoTagsWithHttpInfo(videoId, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getVideoTags request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Tag&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The tags were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Tag>> executeWithHttpInfo() throws ApiException {
            return getVideoTagsWithHttpInfo(videoId, page, perPage);
        }

        /**
         * Execute getVideoTags request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The tags were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Tag>> _callback) throws ApiException {
            return getVideoTagsAsync(videoId, page, perPage, _callback);
        }
    }

    /**
     * Get all the tags of a video
     * This method returns all the tags associated with the specified video. The authenticated user must be the owner of the video.
     * @param videoId The ID of the video. (required)
     * @return GetVideoTagsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tags were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetVideoTagsRequestBuilder getVideoTags(double videoId) throws IllegalArgumentException {
        
        return new GetVideoTagsRequestBuilder(videoId);
    }
    private okhttp3.Call removeTagCall(Double videoId, String word, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/tags/{word}"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()))
            .replace("{" + "word" + "}", localVarApiClient.escapeString(word.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.tag+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeTagValidateBeforeCall(Double videoId, String word, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling removeTag(Async)");
        }

        // verify the required parameter 'word' is set
        if (word == null) {
            throw new ApiException("Missing the required parameter 'word' when calling removeTag(Async)");
        }

        return removeTagCall(videoId, word, _callback);

    }


    private ApiResponse<Void> removeTagWithHttpInfo(Double videoId, String word) throws ApiException {
        okhttp3.Call localVarCall = removeTagValidateBeforeCall(videoId, word, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeTagAsync(Double videoId, String word, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeTagValidateBeforeCall(videoId, word, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveTagRequestBuilder {
        private final Double videoId;
        private final String word;

        private RemoveTagRequestBuilder(double videoId, String word) {
            this.videoId = videoId;
            this.word = word;
        }

        /**
         * Build call for removeTag
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The tag was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeTagCall(videoId, word, _callback);
        }


        /**
         * Execute removeTag request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The tag was removed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeTagWithHttpInfo(videoId, word);
        }

        /**
         * Execute removeTag request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The tag was removed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeTagWithHttpInfo(videoId, word);
        }

        /**
         * Execute removeTag request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The tag was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeTagAsync(videoId, word, _callback);
        }
    }

    /**
     * Remove a tag from a video
     * This method removes the specified tag from a video. The authenticated user must have edit access to the video.
     * @param videoId The ID of the video. (required)
     * @param word The tag word. (required)
     * @return RemoveTagRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The tag was removed. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveTagRequestBuilder removeTag(double videoId, String word) throws IllegalArgumentException {
        
        if (word == null) throw new IllegalArgumentException("\"word\" is required but got null");
            

        return new RemoveTagRequestBuilder(videoId, word);
    }
}
