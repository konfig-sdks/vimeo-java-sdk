/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Credit;
import com.konfigthis.client.model.User;
import com.konfigthis.client.model.VideosCreditsAddUserCreditInVideoRequest;
import com.konfigthis.client.model.VideosCreditsAddUserCreditRequest;
import com.konfigthis.client.model.VideosCreditsEditUserCreditInVideoRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class VideosCreditsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VideosCreditsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public VideosCreditsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addUserCreditCall(Double videoId, VideosCreditsAddUserCreditRequest videosCreditsAddUserCreditRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = videosCreditsAddUserCreditRequest;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/credits"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.credit+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.credit+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addUserCreditValidateBeforeCall(Double videoId, VideosCreditsAddUserCreditRequest videosCreditsAddUserCreditRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addUserCredit(Async)");
        }

        // verify the required parameter 'videosCreditsAddUserCreditRequest' is set
        if (videosCreditsAddUserCreditRequest == null) {
            throw new ApiException("Missing the required parameter 'videosCreditsAddUserCreditRequest' when calling addUserCredit(Async)");
        }

        return addUserCreditCall(videoId, videosCreditsAddUserCreditRequest, _callback);

    }


    private ApiResponse<Credit> addUserCreditWithHttpInfo(Double videoId, VideosCreditsAddUserCreditRequest videosCreditsAddUserCreditRequest) throws ApiException {
        okhttp3.Call localVarCall = addUserCreditValidateBeforeCall(videoId, videosCreditsAddUserCreditRequest, null);
        Type localVarReturnType = new TypeToken<Credit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addUserCreditAsync(Double videoId, VideosCreditsAddUserCreditRequest videosCreditsAddUserCreditRequest, final ApiCallback<Credit> _callback) throws ApiException {

        okhttp3.Call localVarCall = addUserCreditValidateBeforeCall(videoId, videosCreditsAddUserCreditRequest, _callback);
        Type localVarReturnType = new TypeToken<Credit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddUserCreditRequestBuilder {
        private final String email;
        private final String name;
        private final String role;
        private final String userUri;
        private final Double videoId;

        private AddUserCreditRequestBuilder(String email, String name, String role, String userUri, double videoId) {
            this.email = email;
            this.name = name;
            this.role = role;
            this.userUri = userUri;
            this.videoId = videoId;
        }

        /**
         * Build call for addUserCredit
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The credit was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VideosCreditsAddUserCreditRequest videosCreditsAddUserCreditRequest = buildBodyParams();
            return addUserCreditCall(videoId, videosCreditsAddUserCreditRequest, _callback);
        }

        private VideosCreditsAddUserCreditRequest buildBodyParams() {
            VideosCreditsAddUserCreditRequest videosCreditsAddUserCreditRequest = new VideosCreditsAddUserCreditRequest();
            videosCreditsAddUserCreditRequest.email(this.email);
            videosCreditsAddUserCreditRequest.name(this.name);
            videosCreditsAddUserCreditRequest.role(this.role);
            videosCreditsAddUserCreditRequest.userUri(this.userUri);
            return videosCreditsAddUserCreditRequest;
        }

        /**
         * Execute addUserCredit request
         * @return Credit
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The credit was added. </td><td>  -  </td></tr>
         </table>
         */
        public Credit execute() throws ApiException {
            VideosCreditsAddUserCreditRequest videosCreditsAddUserCreditRequest = buildBodyParams();
            ApiResponse<Credit> localVarResp = addUserCreditWithHttpInfo(videoId, videosCreditsAddUserCreditRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addUserCredit request with HTTP info returned
         * @return ApiResponse&lt;Credit&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The credit was added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Credit> executeWithHttpInfo() throws ApiException {
            VideosCreditsAddUserCreditRequest videosCreditsAddUserCreditRequest = buildBodyParams();
            return addUserCreditWithHttpInfo(videoId, videosCreditsAddUserCreditRequest);
        }

        /**
         * Execute addUserCredit request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The credit was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Credit> _callback) throws ApiException {
            VideosCreditsAddUserCreditRequest videosCreditsAddUserCreditRequest = buildBodyParams();
            return addUserCreditAsync(videoId, videosCreditsAddUserCreditRequest, _callback);
        }
    }

    /**
     * Credit a user in a video
     * This method adds a user credit to the specified video.
     * @param videoId The ID of the video. (required)
     * @param videosCreditsAddUserCreditRequest  (required)
     * @return AddUserCreditRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The credit was added. </td><td>  -  </td></tr>
     </table>
     */
    public AddUserCreditRequestBuilder addUserCredit(String email, String name, String role, String userUri, double videoId) throws IllegalArgumentException {
        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (role == null) throw new IllegalArgumentException("\"role\" is required but got null");
            

        if (userUri == null) throw new IllegalArgumentException("\"userUri\" is required but got null");
            

        
        return new AddUserCreditRequestBuilder(email, name, role, userUri, videoId);
    }
    private okhttp3.Call addUserCreditInVideoCall(Double channelId, Double videoId, VideosCreditsAddUserCreditInVideoRequest videosCreditsAddUserCreditInVideoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = videosCreditsAddUserCreditInVideoRequest;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/videos/{video_id}/credits"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.credit+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.credit+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addUserCreditInVideoValidateBeforeCall(Double channelId, Double videoId, VideosCreditsAddUserCreditInVideoRequest videosCreditsAddUserCreditInVideoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling addUserCreditInVideo(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addUserCreditInVideo(Async)");
        }

        // verify the required parameter 'videosCreditsAddUserCreditInVideoRequest' is set
        if (videosCreditsAddUserCreditInVideoRequest == null) {
            throw new ApiException("Missing the required parameter 'videosCreditsAddUserCreditInVideoRequest' when calling addUserCreditInVideo(Async)");
        }

        return addUserCreditInVideoCall(channelId, videoId, videosCreditsAddUserCreditInVideoRequest, _callback);

    }


    private ApiResponse<Credit> addUserCreditInVideoWithHttpInfo(Double channelId, Double videoId, VideosCreditsAddUserCreditInVideoRequest videosCreditsAddUserCreditInVideoRequest) throws ApiException {
        okhttp3.Call localVarCall = addUserCreditInVideoValidateBeforeCall(channelId, videoId, videosCreditsAddUserCreditInVideoRequest, null);
        Type localVarReturnType = new TypeToken<Credit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addUserCreditInVideoAsync(Double channelId, Double videoId, VideosCreditsAddUserCreditInVideoRequest videosCreditsAddUserCreditInVideoRequest, final ApiCallback<Credit> _callback) throws ApiException {

        okhttp3.Call localVarCall = addUserCreditInVideoValidateBeforeCall(channelId, videoId, videosCreditsAddUserCreditInVideoRequest, _callback);
        Type localVarReturnType = new TypeToken<Credit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddUserCreditInVideoRequestBuilder {
        private final String email;
        private final String name;
        private final String role;
        private final String userUri;
        private final Double channelId;
        private final Double videoId;

        private AddUserCreditInVideoRequestBuilder(String email, String name, String role, String userUri, double channelId, double videoId) {
            this.email = email;
            this.name = name;
            this.role = role;
            this.userUri = userUri;
            this.channelId = channelId;
            this.videoId = videoId;
        }

        /**
         * Build call for addUserCreditInVideo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The credit was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VideosCreditsAddUserCreditInVideoRequest videosCreditsAddUserCreditInVideoRequest = buildBodyParams();
            return addUserCreditInVideoCall(channelId, videoId, videosCreditsAddUserCreditInVideoRequest, _callback);
        }

        private VideosCreditsAddUserCreditInVideoRequest buildBodyParams() {
            VideosCreditsAddUserCreditInVideoRequest videosCreditsAddUserCreditInVideoRequest = new VideosCreditsAddUserCreditInVideoRequest();
            videosCreditsAddUserCreditInVideoRequest.email(this.email);
            videosCreditsAddUserCreditInVideoRequest.name(this.name);
            videosCreditsAddUserCreditInVideoRequest.role(this.role);
            videosCreditsAddUserCreditInVideoRequest.userUri(this.userUri);
            return videosCreditsAddUserCreditInVideoRequest;
        }

        /**
         * Execute addUserCreditInVideo request
         * @return Credit
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The credit was added. </td><td>  -  </td></tr>
         </table>
         */
        public Credit execute() throws ApiException {
            VideosCreditsAddUserCreditInVideoRequest videosCreditsAddUserCreditInVideoRequest = buildBodyParams();
            ApiResponse<Credit> localVarResp = addUserCreditInVideoWithHttpInfo(channelId, videoId, videosCreditsAddUserCreditInVideoRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addUserCreditInVideo request with HTTP info returned
         * @return ApiResponse&lt;Credit&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The credit was added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Credit> executeWithHttpInfo() throws ApiException {
            VideosCreditsAddUserCreditInVideoRequest videosCreditsAddUserCreditInVideoRequest = buildBodyParams();
            return addUserCreditInVideoWithHttpInfo(channelId, videoId, videosCreditsAddUserCreditInVideoRequest);
        }

        /**
         * Execute addUserCreditInVideo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The credit was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Credit> _callback) throws ApiException {
            VideosCreditsAddUserCreditInVideoRequest videosCreditsAddUserCreditInVideoRequest = buildBodyParams();
            return addUserCreditInVideoAsync(channelId, videoId, videosCreditsAddUserCreditInVideoRequest, _callback);
        }
    }

    /**
     * Credit a user in a video
     * This method adds a user credit to the specified video.
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param videosCreditsAddUserCreditInVideoRequest  (required)
     * @return AddUserCreditInVideoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The credit was added. </td><td>  -  </td></tr>
     </table>
     */
    public AddUserCreditInVideoRequestBuilder addUserCreditInVideo(String email, String name, String role, String userUri, double channelId, double videoId) throws IllegalArgumentException {
        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (role == null) throw new IllegalArgumentException("\"role\" is required but got null");
            

        if (userUri == null) throw new IllegalArgumentException("\"userUri\" is required but got null");
            

        
        
        return new AddUserCreditInVideoRequestBuilder(email, name, role, userUri, channelId, videoId);
    }
    private okhttp3.Call deleteUserCreditCall(Double creditId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/credits/{credit_id}"
            .replace("{" + "credit_id" + "}", localVarApiClient.escapeString(creditId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserCreditValidateBeforeCall(Double creditId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditId' is set
        if (creditId == null) {
            throw new ApiException("Missing the required parameter 'creditId' when calling deleteUserCredit(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling deleteUserCredit(Async)");
        }

        return deleteUserCreditCall(creditId, videoId, _callback);

    }


    private ApiResponse<Void> deleteUserCreditWithHttpInfo(Double creditId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = deleteUserCreditValidateBeforeCall(creditId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteUserCreditAsync(Double creditId, Double videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserCreditValidateBeforeCall(creditId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteUserCreditRequestBuilder {
        private final Double creditId;
        private final Double videoId;

        private DeleteUserCreditRequestBuilder(double creditId, double videoId) {
            this.creditId = creditId;
            this.videoId = videoId;
        }

        /**
         * Build call for deleteUserCredit
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The credit was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteUserCreditCall(creditId, videoId, _callback);
        }


        /**
         * Execute deleteUserCredit request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The credit was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteUserCreditWithHttpInfo(creditId, videoId);
        }

        /**
         * Execute deleteUserCredit request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The credit was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteUserCreditWithHttpInfo(creditId, videoId);
        }

        /**
         * Execute deleteUserCredit request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The credit was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteUserCreditAsync(creditId, videoId, _callback);
        }
    }

    /**
     * Delete the credit for a user in a video
     * This method deletes the specified user credit from a video. The authenticated user must be the creator of the credit or the credited user.
     * @param creditId The ID of the credit. (required)
     * @param videoId The ID of the video. (required)
     * @return DeleteUserCreditRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The credit was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteUserCreditRequestBuilder deleteUserCredit(double creditId, double videoId) throws IllegalArgumentException {
        
        
        return new DeleteUserCreditRequestBuilder(creditId, videoId);
    }
    private okhttp3.Call editUserCreditInVideoCall(Double creditId, Double videoId, VideosCreditsEditUserCreditInVideoRequest videosCreditsEditUserCreditInVideoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = videosCreditsEditUserCreditInVideoRequest;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/credits/{credit_id}"
            .replace("{" + "credit_id" + "}", localVarApiClient.escapeString(creditId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.credit+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.credit+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editUserCreditInVideoValidateBeforeCall(Double creditId, Double videoId, VideosCreditsEditUserCreditInVideoRequest videosCreditsEditUserCreditInVideoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditId' is set
        if (creditId == null) {
            throw new ApiException("Missing the required parameter 'creditId' when calling editUserCreditInVideo(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling editUserCreditInVideo(Async)");
        }

        return editUserCreditInVideoCall(creditId, videoId, videosCreditsEditUserCreditInVideoRequest, _callback);

    }


    private ApiResponse<Credit> editUserCreditInVideoWithHttpInfo(Double creditId, Double videoId, VideosCreditsEditUserCreditInVideoRequest videosCreditsEditUserCreditInVideoRequest) throws ApiException {
        okhttp3.Call localVarCall = editUserCreditInVideoValidateBeforeCall(creditId, videoId, videosCreditsEditUserCreditInVideoRequest, null);
        Type localVarReturnType = new TypeToken<Credit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call editUserCreditInVideoAsync(Double creditId, Double videoId, VideosCreditsEditUserCreditInVideoRequest videosCreditsEditUserCreditInVideoRequest, final ApiCallback<Credit> _callback) throws ApiException {

        okhttp3.Call localVarCall = editUserCreditInVideoValidateBeforeCall(creditId, videoId, videosCreditsEditUserCreditInVideoRequest, _callback);
        Type localVarReturnType = new TypeToken<Credit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EditUserCreditInVideoRequestBuilder {
        private final Double creditId;
        private final Double videoId;
        private String name;
        private String role;

        private EditUserCreditInVideoRequestBuilder(double creditId, double videoId) {
            this.creditId = creditId;
            this.videoId = videoId;
        }

        /**
         * Set name
         * @param name The name of the credited person. (optional)
         * @return EditUserCreditInVideoRequestBuilder
         */
        public EditUserCreditInVideoRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set role
         * @param role The role of the credited person. (optional)
         * @return EditUserCreditInVideoRequestBuilder
         */
        public EditUserCreditInVideoRequestBuilder role(String role) {
            this.role = role;
            return this;
        }
        
        /**
         * Build call for editUserCreditInVideo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The credit was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VideosCreditsEditUserCreditInVideoRequest videosCreditsEditUserCreditInVideoRequest = buildBodyParams();
            return editUserCreditInVideoCall(creditId, videoId, videosCreditsEditUserCreditInVideoRequest, _callback);
        }

        private VideosCreditsEditUserCreditInVideoRequest buildBodyParams() {
            VideosCreditsEditUserCreditInVideoRequest videosCreditsEditUserCreditInVideoRequest = new VideosCreditsEditUserCreditInVideoRequest();
            videosCreditsEditUserCreditInVideoRequest.name(this.name);
            videosCreditsEditUserCreditInVideoRequest.role(this.role);
            return videosCreditsEditUserCreditInVideoRequest;
        }

        /**
         * Execute editUserCreditInVideo request
         * @return Credit
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The credit was edited. </td><td>  -  </td></tr>
         </table>
         */
        public Credit execute() throws ApiException {
            VideosCreditsEditUserCreditInVideoRequest videosCreditsEditUserCreditInVideoRequest = buildBodyParams();
            ApiResponse<Credit> localVarResp = editUserCreditInVideoWithHttpInfo(creditId, videoId, videosCreditsEditUserCreditInVideoRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute editUserCreditInVideo request with HTTP info returned
         * @return ApiResponse&lt;Credit&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The credit was edited. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Credit> executeWithHttpInfo() throws ApiException {
            VideosCreditsEditUserCreditInVideoRequest videosCreditsEditUserCreditInVideoRequest = buildBodyParams();
            return editUserCreditInVideoWithHttpInfo(creditId, videoId, videosCreditsEditUserCreditInVideoRequest);
        }

        /**
         * Execute editUserCreditInVideo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The credit was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Credit> _callback) throws ApiException {
            VideosCreditsEditUserCreditInVideoRequest videosCreditsEditUserCreditInVideoRequest = buildBodyParams();
            return editUserCreditInVideoAsync(creditId, videoId, videosCreditsEditUserCreditInVideoRequest, _callback);
        }
    }

    /**
     * Edit the credit for a user in a video
     * This method edits the specified user credit in a video.
     * @param creditId The ID of the credit. (required)
     * @param videoId The ID of the video. (required)
     * @return EditUserCreditInVideoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The credit was edited. </td><td>  -  </td></tr>
     </table>
     */
    public EditUserCreditInVideoRequestBuilder editUserCreditInVideo(double creditId, double videoId) throws IllegalArgumentException {
        
        
        return new EditUserCreditInVideoRequestBuilder(creditId, videoId);
    }
    private okhttp3.Call getAllCreditedUsersInVideoCall(Double channelId, Double videoId, String direction, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/videos/{video_id}/credits"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.credit+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllCreditedUsersInVideoValidateBeforeCall(Double channelId, Double videoId, String direction, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getAllCreditedUsersInVideo(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getAllCreditedUsersInVideo(Async)");
        }

        return getAllCreditedUsersInVideoCall(channelId, videoId, direction, page, perPage, query, sort, _callback);

    }


    private ApiResponse<List<Credit>> getAllCreditedUsersInVideoWithHttpInfo(Double channelId, Double videoId, String direction, Double page, Double perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = getAllCreditedUsersInVideoValidateBeforeCall(channelId, videoId, direction, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<Credit>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllCreditedUsersInVideoAsync(Double channelId, Double videoId, String direction, Double page, Double perPage, String query, String sort, final ApiCallback<List<Credit>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllCreditedUsersInVideoValidateBeforeCall(channelId, videoId, direction, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Credit>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllCreditedUsersInVideoRequestBuilder {
        private final Double channelId;
        private final Double videoId;
        private String direction;
        private Double page;
        private Double perPage;
        private String query;
        private String sort;

        private GetAllCreditedUsersInVideoRequestBuilder(double channelId, double videoId) {
            this.channelId = channelId;
            this.videoId = videoId;
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return GetAllCreditedUsersInVideoRequestBuilder
         */
        public GetAllCreditedUsersInVideoRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetAllCreditedUsersInVideoRequestBuilder
         */
        public GetAllCreditedUsersInVideoRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetAllCreditedUsersInVideoRequestBuilder
         */
        public GetAllCreditedUsersInVideoRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set query
         * @param query The search query to use to filter the results. (optional)
         * @return GetAllCreditedUsersInVideoRequestBuilder
         */
        public GetAllCreditedUsersInVideoRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  (optional)
         * @return GetAllCreditedUsersInVideoRequestBuilder
         */
        public GetAllCreditedUsersInVideoRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getAllCreditedUsersInVideo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The credited users were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCreditedUsersInVideoCall(channelId, videoId, direction, page, perPage, query, sort, _callback);
        }


        /**
         * Execute getAllCreditedUsersInVideo request
         * @return List&lt;Credit&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The credited users were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Credit> execute() throws ApiException {
            ApiResponse<List<Credit>> localVarResp = getAllCreditedUsersInVideoWithHttpInfo(channelId, videoId, direction, page, perPage, query, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllCreditedUsersInVideo request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Credit&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The credited users were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Credit>> executeWithHttpInfo() throws ApiException {
            return getAllCreditedUsersInVideoWithHttpInfo(channelId, videoId, direction, page, perPage, query, sort);
        }

        /**
         * Execute getAllCreditedUsersInVideo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The credited users were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Credit>> _callback) throws ApiException {
            return getAllCreditedUsersInVideoAsync(channelId, videoId, direction, page, perPage, query, sort, _callback);
        }
    }

    /**
     * Get all the credited users in a video
     * This method returns every credited user in a video.
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @return GetAllCreditedUsersInVideoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The credited users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllCreditedUsersInVideoRequestBuilder getAllCreditedUsersInVideo(double channelId, double videoId) throws IllegalArgumentException {
        
        
        return new GetAllCreditedUsersInVideoRequestBuilder(channelId, videoId);
    }
    private okhttp3.Call getAllCreditedUsersInVideo_0Call(Double videoId, String direction, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/credits"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.credit+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllCreditedUsersInVideo_0ValidateBeforeCall(Double videoId, String direction, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getAllCreditedUsersInVideo_0(Async)");
        }

        return getAllCreditedUsersInVideo_0Call(videoId, direction, page, perPage, query, sort, _callback);

    }


    private ApiResponse<List<Credit>> getAllCreditedUsersInVideo_0WithHttpInfo(Double videoId, String direction, Double page, Double perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = getAllCreditedUsersInVideo_0ValidateBeforeCall(videoId, direction, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<Credit>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllCreditedUsersInVideo_0Async(Double videoId, String direction, Double page, Double perPage, String query, String sort, final ApiCallback<List<Credit>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllCreditedUsersInVideo_0ValidateBeforeCall(videoId, direction, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Credit>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllCreditedUsersInVideo0RequestBuilder {
        private final Double videoId;
        private String direction;
        private Double page;
        private Double perPage;
        private String query;
        private String sort;

        private GetAllCreditedUsersInVideo0RequestBuilder(double videoId) {
            this.videoId = videoId;
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return GetAllCreditedUsersInVideo0RequestBuilder
         */
        public GetAllCreditedUsersInVideo0RequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetAllCreditedUsersInVideo0RequestBuilder
         */
        public GetAllCreditedUsersInVideo0RequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetAllCreditedUsersInVideo0RequestBuilder
         */
        public GetAllCreditedUsersInVideo0RequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set query
         * @param query The search query to use to filter the results. (optional)
         * @return GetAllCreditedUsersInVideo0RequestBuilder
         */
        public GetAllCreditedUsersInVideo0RequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  (optional)
         * @return GetAllCreditedUsersInVideo0RequestBuilder
         */
        public GetAllCreditedUsersInVideo0RequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getAllCreditedUsersInVideo_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The credited users were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCreditedUsersInVideo_0Call(videoId, direction, page, perPage, query, sort, _callback);
        }


        /**
         * Execute getAllCreditedUsersInVideo_0 request
         * @return List&lt;Credit&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The credited users were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Credit> execute() throws ApiException {
            ApiResponse<List<Credit>> localVarResp = getAllCreditedUsersInVideo_0WithHttpInfo(videoId, direction, page, perPage, query, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllCreditedUsersInVideo_0 request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Credit&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The credited users were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Credit>> executeWithHttpInfo() throws ApiException {
            return getAllCreditedUsersInVideo_0WithHttpInfo(videoId, direction, page, perPage, query, sort);
        }

        /**
         * Execute getAllCreditedUsersInVideo_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The credited users were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Credit>> _callback) throws ApiException {
            return getAllCreditedUsersInVideo_0Async(videoId, direction, page, perPage, query, sort, _callback);
        }
    }

    /**
     * Get all the credited users in a video
     * This method returns every credited user in a video.
     * @param videoId The ID of the video. (required)
     * @return GetAllCreditedUsersInVideo0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The credited users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllCreditedUsersInVideo0RequestBuilder getAllCreditedUsersInVideo_0(double videoId) throws IllegalArgumentException {
        
        return new GetAllCreditedUsersInVideo0RequestBuilder(videoId);
    }
    private okhttp3.Call getSpecificCreditedUserCall(Double creditId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/credits/{credit_id}"
            .replace("{" + "credit_id" + "}", localVarApiClient.escapeString(creditId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.credit+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificCreditedUserValidateBeforeCall(Double creditId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditId' is set
        if (creditId == null) {
            throw new ApiException("Missing the required parameter 'creditId' when calling getSpecificCreditedUser(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getSpecificCreditedUser(Async)");
        }

        return getSpecificCreditedUserCall(creditId, videoId, _callback);

    }


    private ApiResponse<Credit> getSpecificCreditedUserWithHttpInfo(Double creditId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = getSpecificCreditedUserValidateBeforeCall(creditId, videoId, null);
        Type localVarReturnType = new TypeToken<Credit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificCreditedUserAsync(Double creditId, Double videoId, final ApiCallback<Credit> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificCreditedUserValidateBeforeCall(creditId, videoId, _callback);
        Type localVarReturnType = new TypeToken<Credit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificCreditedUserRequestBuilder {
        private final Double creditId;
        private final Double videoId;

        private GetSpecificCreditedUserRequestBuilder(double creditId, double videoId) {
            this.creditId = creditId;
            this.videoId = videoId;
        }

        /**
         * Build call for getSpecificCreditedUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The credit was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificCreditedUserCall(creditId, videoId, _callback);
        }


        /**
         * Execute getSpecificCreditedUser request
         * @return Credit
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The credit was returned. </td><td>  -  </td></tr>
         </table>
         */
        public Credit execute() throws ApiException {
            ApiResponse<Credit> localVarResp = getSpecificCreditedUserWithHttpInfo(creditId, videoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificCreditedUser request with HTTP info returned
         * @return ApiResponse&lt;Credit&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The credit was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Credit> executeWithHttpInfo() throws ApiException {
            return getSpecificCreditedUserWithHttpInfo(creditId, videoId);
        }

        /**
         * Execute getSpecificCreditedUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The credit was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Credit> _callback) throws ApiException {
            return getSpecificCreditedUserAsync(creditId, videoId, _callback);
        }
    }

    /**
     * Get a specific credited user in a video
     * This method returns a single credited user in a video.
     * @param creditId The ID of the credit. (required)
     * @param videoId The ID of the video. (required)
     * @return GetSpecificCreditedUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The credit was returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificCreditedUserRequestBuilder getSpecificCreditedUser(double creditId, double videoId) throws IllegalArgumentException {
        
        
        return new GetSpecificCreditedUserRequestBuilder(creditId, videoId);
    }
    private okhttp3.Call usersCall(Double videoId, String direction, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/credits/available_users"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersValidateBeforeCall(Double videoId, String direction, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling users(Async)");
        }

        return usersCall(videoId, direction, page, perPage, query, sort, _callback);

    }


    private ApiResponse<List<User>> usersWithHttpInfo(Double videoId, String direction, Double page, Double perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = usersValidateBeforeCall(videoId, direction, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call usersAsync(Double videoId, String direction, Double page, Double perPage, String query, String sort, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersValidateBeforeCall(videoId, direction, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UsersRequestBuilder {
        private final Double videoId;
        private String direction;
        private Double page;
        private Double perPage;
        private String query;
        private String sort;

        private UsersRequestBuilder(double videoId) {
            this.videoId = videoId;
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return UsersRequestBuilder
         */
        public UsersRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return UsersRequestBuilder
         */
        public UsersRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return UsersRequestBuilder
         */
        public UsersRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set query
         * @param query The search query to use to filter the results. (optional)
         * @return UsersRequestBuilder
         */
        public UsersRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)
         * @return UsersRequestBuilder
         */
        public UsersRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for users
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The users who can be credited were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return usersCall(videoId, direction, page, perPage, query, sort, _callback);
        }


        /**
         * Execute users request
         * @return List&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The users who can be credited were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<User> execute() throws ApiException {
            ApiResponse<List<User>> localVarResp = usersWithHttpInfo(videoId, direction, page, perPage, query, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute users request with HTTP info returned
         * @return ApiResponse&lt;List&lt;User&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The users who can be credited were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<User>> executeWithHttpInfo() throws ApiException {
            return usersWithHttpInfo(videoId, direction, page, perPage, query, sort);
        }

        /**
         * Execute users request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The users who can be credited were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<User>> _callback) throws ApiException {
            return usersAsync(videoId, direction, page, perPage, query, sort, _callback);
        }
    }

    /**
     * Get users who can be credited on a video
     * This method returns the users who can be credited on the specified video.
     * @param videoId The ID of the video. (required)
     * @return UsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users who can be credited were returned. </td><td>  -  </td></tr>
     </table>
     */
    public UsersRequestBuilder users(double videoId) throws IllegalArgumentException {
        
        return new UsersRequestBuilder(videoId);
    }
}
