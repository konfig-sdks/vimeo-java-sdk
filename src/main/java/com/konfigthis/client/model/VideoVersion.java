/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ApiApp;
import com.konfigthis.client.model.Play;
import com.konfigthis.client.model.User;
import com.konfigthis.client.model.VideoVersionMetadata;
import com.konfigthis.client.model.VideoVersionTranscode;
import com.konfigthis.client.model.VideoVersionUpload;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * VideoVersion
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class VideoVersion {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_APP = "app";
  @SerializedName(SERIALIZED_NAME_APP)
  private ApiApp app;

  public static final String SERIALIZED_NAME_CAN_RESTORE_CREATE = "can_restore_create";
  @SerializedName(SERIALIZED_NAME_CAN_RESTORE_CREATE)
  private Boolean canRestoreCreate;

  public static final String SERIALIZED_NAME_CREATE_STORYBOARD_ID = "create_storyboard_id";
  @SerializedName(SERIALIZED_NAME_CREATE_STORYBOARD_ID)
  private String createStoryboardId;

  public static final String SERIALIZED_NAME_CREATED_TIME = "created_time";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private String createdTime;

  public static final String SERIALIZED_NAME_DOWNLOAD_CONFIG = "download_config";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_CONFIG)
  private Object downloadConfig;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Double duration;

  public static final String SERIALIZED_NAME_FILENAME = "filename";
  @SerializedName(SERIALIZED_NAME_FILENAME)
  private String filename;

  public static final String SERIALIZED_NAME_FILESIZE = "filesize";
  @SerializedName(SERIALIZED_NAME_FILESIZE)
  private Double filesize;

  public static final String SERIALIZED_NAME_HAS_INTERACTIVE = "has_interactive";
  @SerializedName(SERIALIZED_NAME_HAS_INTERACTIVE)
  private Boolean hasInteractive;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private VideoVersionMetadata metadata;

  public static final String SERIALIZED_NAME_MODIFIED_TIME = "modified_time";
  @SerializedName(SERIALIZED_NAME_MODIFIED_TIME)
  private String modifiedTime;

  public static final String SERIALIZED_NAME_ORIGIN_VARIABLE_FRAME_RESOLUTION = "origin_variable_frame_resolution";
  @SerializedName(SERIALIZED_NAME_ORIGIN_VARIABLE_FRAME_RESOLUTION)
  private Boolean originVariableFrameResolution;

  public static final String SERIALIZED_NAME_PLAY = "play";
  @SerializedName(SERIALIZED_NAME_PLAY)
  private Play play;

  public static final String SERIALIZED_NAME_TRANSCODE = "transcode";
  @SerializedName(SERIALIZED_NAME_TRANSCODE)
  private VideoVersionTranscode transcode;

  public static final String SERIALIZED_NAME_UPLOAD = "upload";
  @SerializedName(SERIALIZED_NAME_UPLOAD)
  private VideoVersionUpload upload;

  public static final String SERIALIZED_NAME_UPLOAD_DATE = "upload_date";
  @SerializedName(SERIALIZED_NAME_UPLOAD_DATE)
  private String uploadDate;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public VideoVersion() {
  }

  public VideoVersion description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description of the video version. This description can make use of the full unicode character set. This field appears in the response only when a corresponding value is present.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "description with emoji", value = "A description of the video version. This description can make use of the full unicode character set. This field appears in the response only when a corresponding value is present.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public VideoVersion active(Boolean active) {
    
    
    
    
    this.active = active;
    return this;
  }

   /**
   * Whether the video version is currently active.
   * @return active
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the video version is currently active.")

  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    
    
    
    this.active = active;
  }


  public VideoVersion app(ApiApp app) {
    
    
    
    
    this.app = app;
    return this;
  }

   /**
   * The API app associated with the video version.
   * @return app
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The API app associated with the video version.")

  public ApiApp getApp() {
    return app;
  }


  public void setApp(ApiApp app) {
    
    
    
    this.app = app;
  }


  public VideoVersion canRestoreCreate(Boolean canRestoreCreate) {
    
    
    
    
    this.canRestoreCreate = canRestoreCreate;
    return this;
  }

   /**
   * Whether the version can be restored.
   * @return canRestoreCreate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "Whether the version can be restored.")

  public Boolean getCanRestoreCreate() {
    return canRestoreCreate;
  }


  public void setCanRestoreCreate(Boolean canRestoreCreate) {
    
    
    
    this.canRestoreCreate = canRestoreCreate;
  }


  public VideoVersion createStoryboardId(String createStoryboardId) {
    
    
    
    
    this.createStoryboardId = createStoryboardId;
    return this;
  }

   /**
   * The storyboard ID of the video version.
   * @return createStoryboardId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "storyboard_123456_1000", required = true, value = "The storyboard ID of the video version.")

  public String getCreateStoryboardId() {
    return createStoryboardId;
  }


  public void setCreateStoryboardId(String createStoryboardId) {
    
    
    
    this.createStoryboardId = createStoryboardId;
  }


  public VideoVersion createdTime(String createdTime) {
    
    
    
    
    this.createdTime = createdTime;
    return this;
  }

   /**
   * The time in ISO 8601 format when the video version was created.
   * @return createdTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2018-03-05T21:04:47+00:00", required = true, value = "The time in ISO 8601 format when the video version was created.")

  public String getCreatedTime() {
    return createdTime;
  }


  public void setCreatedTime(String createdTime) {
    
    
    
    this.createdTime = createdTime;
  }


  public VideoVersion downloadConfig(Object downloadConfig) {
    
    
    
    
    this.downloadConfig = downloadConfig;
    return this;
  }

   /**
   * The download config associated with the version.
   * @return downloadConfig
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The download config associated with the version.")

  public Object getDownloadConfig() {
    return downloadConfig;
  }


  public void setDownloadConfig(Object downloadConfig) {
    
    
    
    this.downloadConfig = downloadConfig;
  }


  public VideoVersion duration(Double duration) {
    
    
    
    
    this.duration = duration;
    return this;
  }

  public VideoVersion duration(Integer duration) {
    
    
    
    
    this.duration = duration.doubleValue();
    return this;
  }

   /**
   * The duration in seconds of the video version.
   * @return duration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "81", required = true, value = "The duration in seconds of the video version.")

  public Double getDuration() {
    return duration;
  }


  public void setDuration(Double duration) {
    
    
    
    this.duration = duration;
  }


  public VideoVersion filename(String filename) {
    
    
    
    
    this.filename = filename;
    return this;
  }

   /**
   * The file name of the video version.
   * @return filename
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "rev2.mp4", required = true, value = "The file name of the video version.")

  public String getFilename() {
    return filename;
  }


  public void setFilename(String filename) {
    
    
    
    this.filename = filename;
  }


  public VideoVersion filesize(Double filesize) {
    
    
    
    
    this.filesize = filesize;
    return this;
  }

  public VideoVersion filesize(Integer filesize) {
    
    
    
    
    this.filesize = filesize.doubleValue();
    return this;
  }

   /**
   * The size in byes of the video version file.
   * @return filesize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4025322521", required = true, value = "The size in byes of the video version file.")

  public Double getFilesize() {
    return filesize;
  }


  public void setFilesize(Double filesize) {
    
    
    
    this.filesize = filesize;
  }


  public VideoVersion hasInteractive(Boolean hasInteractive) {
    
    
    
    
    this.hasInteractive = hasInteractive;
    return this;
  }

   /**
   * Whether the video has interactive capability.
   * @return hasInteractive
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "Whether the video has interactive capability.")

  public Boolean getHasInteractive() {
    return hasInteractive;
  }


  public void setHasInteractive(Boolean hasInteractive) {
    
    
    
    this.hasInteractive = hasInteractive;
  }


  public VideoVersion metadata(VideoVersionMetadata metadata) {
    
    
    
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public VideoVersionMetadata getMetadata() {
    return metadata;
  }


  public void setMetadata(VideoVersionMetadata metadata) {
    
    
    
    this.metadata = metadata;
  }


  public VideoVersion modifiedTime(String modifiedTime) {
    
    
    
    
    this.modifiedTime = modifiedTime;
    return this;
  }

   /**
   * The time in ISO 8601 format when the video version was last modified.
   * @return modifiedTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2018-09-16T09:02:40+00:00", required = true, value = "The time in ISO 8601 format when the video version was last modified.")

  public String getModifiedTime() {
    return modifiedTime;
  }


  public void setModifiedTime(String modifiedTime) {
    
    
    
    this.modifiedTime = modifiedTime;
  }


  public VideoVersion originVariableFrameResolution(Boolean originVariableFrameResolution) {
    
    
    
    
    this.originVariableFrameResolution = originVariableFrameResolution;
    return this;
  }

   /**
   * Whether the video has unified resolution. If the value of this field is &#x60;false&#x60;, the video requires transcoding.
   * @return originVariableFrameResolution
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "Whether the video has unified resolution. If the value of this field is `false`, the video requires transcoding.")

  public Boolean getOriginVariableFrameResolution() {
    return originVariableFrameResolution;
  }


  public void setOriginVariableFrameResolution(Boolean originVariableFrameResolution) {
    
    
    
    this.originVariableFrameResolution = originVariableFrameResolution;
  }


  public VideoVersion play(Play play) {
    
    
    
    
    this.play = play;
    return this;
  }

   /**
   * The &#x60;Play&#x60; representation.
   * @return play
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The `Play` representation.")

  public Play getPlay() {
    return play;
  }


  public void setPlay(Play play) {
    
    
    
    this.play = play;
  }


  public VideoVersion transcode(VideoVersionTranscode transcode) {
    
    
    
    
    this.transcode = transcode;
    return this;
  }

   /**
   * Get transcode
   * @return transcode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public VideoVersionTranscode getTranscode() {
    return transcode;
  }


  public void setTranscode(VideoVersionTranscode transcode) {
    
    
    
    this.transcode = transcode;
  }


  public VideoVersion upload(VideoVersionUpload upload) {
    
    
    
    
    this.upload = upload;
    return this;
  }

   /**
   * Get upload
   * @return upload
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public VideoVersionUpload getUpload() {
    return upload;
  }


  public void setUpload(VideoVersionUpload upload) {
    
    
    
    this.upload = upload;
  }


  public VideoVersion uploadDate(String uploadDate) {
    
    
    
    
    this.uploadDate = uploadDate;
    return this;
  }

   /**
   * The time in ISO 8601 format when the video version was uploaded.
   * @return uploadDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2018-09-16T09:02:40+00:00", required = true, value = "The time in ISO 8601 format when the video version was uploaded.")

  public String getUploadDate() {
    return uploadDate;
  }


  public void setUploadDate(String uploadDate) {
    
    
    
    this.uploadDate = uploadDate;
  }


  public VideoVersion uri(String uri) {
    
    
    
    
    this.uri = uri;
    return this;
  }

   /**
   * The version&#39;s canonical relative URI.
   * @return uri
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "/videos/258684937/versions/12345", required = true, value = "The version's canonical relative URI.")

  public String getUri() {
    return uri;
  }


  public void setUri(String uri) {
    
    
    
    this.uri = uri;
  }


  public VideoVersion user(User user) {
    
    
    
    
    this.user = user;
    return this;
  }

   /**
   * The owner of the video version.
   * @return user
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The owner of the video version.")

  public User getUser() {
    return user;
  }


  public void setUser(User user) {
    
    
    
    this.user = user;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the VideoVersion instance itself
   */
  public VideoVersion putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoVersion videoVersion = (VideoVersion) o;
    return Objects.equals(this.description, videoVersion.description) &&
        Objects.equals(this.active, videoVersion.active) &&
        Objects.equals(this.app, videoVersion.app) &&
        Objects.equals(this.canRestoreCreate, videoVersion.canRestoreCreate) &&
        Objects.equals(this.createStoryboardId, videoVersion.createStoryboardId) &&
        Objects.equals(this.createdTime, videoVersion.createdTime) &&
        Objects.equals(this.downloadConfig, videoVersion.downloadConfig) &&
        Objects.equals(this.duration, videoVersion.duration) &&
        Objects.equals(this.filename, videoVersion.filename) &&
        Objects.equals(this.filesize, videoVersion.filesize) &&
        Objects.equals(this.hasInteractive, videoVersion.hasInteractive) &&
        Objects.equals(this.metadata, videoVersion.metadata) &&
        Objects.equals(this.modifiedTime, videoVersion.modifiedTime) &&
        Objects.equals(this.originVariableFrameResolution, videoVersion.originVariableFrameResolution) &&
        Objects.equals(this.play, videoVersion.play) &&
        Objects.equals(this.transcode, videoVersion.transcode) &&
        Objects.equals(this.upload, videoVersion.upload) &&
        Objects.equals(this.uploadDate, videoVersion.uploadDate) &&
        Objects.equals(this.uri, videoVersion.uri) &&
        Objects.equals(this.user, videoVersion.user)&&
        Objects.equals(this.additionalProperties, videoVersion.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, active, app, canRestoreCreate, createStoryboardId, createdTime, downloadConfig, duration, filename, filesize, hasInteractive, metadata, modifiedTime, originVariableFrameResolution, play, transcode, upload, uploadDate, uri, user, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoVersion {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    app: ").append(toIndentedString(app)).append("\n");
    sb.append("    canRestoreCreate: ").append(toIndentedString(canRestoreCreate)).append("\n");
    sb.append("    createStoryboardId: ").append(toIndentedString(createStoryboardId)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    downloadConfig: ").append(toIndentedString(downloadConfig)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    filesize: ").append(toIndentedString(filesize)).append("\n");
    sb.append("    hasInteractive: ").append(toIndentedString(hasInteractive)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    modifiedTime: ").append(toIndentedString(modifiedTime)).append("\n");
    sb.append("    originVariableFrameResolution: ").append(toIndentedString(originVariableFrameResolution)).append("\n");
    sb.append("    play: ").append(toIndentedString(play)).append("\n");
    sb.append("    transcode: ").append(toIndentedString(transcode)).append("\n");
    sb.append("    upload: ").append(toIndentedString(upload)).append("\n");
    sb.append("    uploadDate: ").append(toIndentedString(uploadDate)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("active");
    openapiFields.add("app");
    openapiFields.add("can_restore_create");
    openapiFields.add("create_storyboard_id");
    openapiFields.add("created_time");
    openapiFields.add("download_config");
    openapiFields.add("duration");
    openapiFields.add("filename");
    openapiFields.add("filesize");
    openapiFields.add("has_interactive");
    openapiFields.add("metadata");
    openapiFields.add("modified_time");
    openapiFields.add("origin_variable_frame_resolution");
    openapiFields.add("play");
    openapiFields.add("transcode");
    openapiFields.add("upload");
    openapiFields.add("upload_date");
    openapiFields.add("uri");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("active");
    openapiRequiredFields.add("app");
    openapiRequiredFields.add("can_restore_create");
    openapiRequiredFields.add("create_storyboard_id");
    openapiRequiredFields.add("created_time");
    openapiRequiredFields.add("download_config");
    openapiRequiredFields.add("duration");
    openapiRequiredFields.add("filename");
    openapiRequiredFields.add("filesize");
    openapiRequiredFields.add("has_interactive");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("modified_time");
    openapiRequiredFields.add("origin_variable_frame_resolution");
    openapiRequiredFields.add("transcode");
    openapiRequiredFields.add("upload");
    openapiRequiredFields.add("upload_date");
    openapiRequiredFields.add("uri");
    openapiRequiredFields.add("user");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VideoVersion
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!VideoVersion.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoVersion is not found in the empty JSON string", VideoVersion.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VideoVersion.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the required field `app`
      ApiApp.validateJsonObject(jsonObj.getAsJsonObject("app"));
      if (!jsonObj.get("create_storyboard_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `create_storyboard_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("create_storyboard_id").toString()));
      }
      if (!jsonObj.get("created_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_time").toString()));
      }
      if (!jsonObj.get("filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filename").toString()));
      }
      // validate the required field `metadata`
      VideoVersionMetadata.validateJsonObject(jsonObj.getAsJsonObject("metadata"));
      if (!jsonObj.get("modified_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modified_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modified_time").toString()));
      }
      // validate the optional field `play`
      if (jsonObj.get("play") != null && !jsonObj.get("play").isJsonNull()) {
        Play.validateJsonObject(jsonObj.getAsJsonObject("play"));
      }
      // validate the required field `transcode`
      VideoVersionTranscode.validateJsonObject(jsonObj.getAsJsonObject("transcode"));
      // validate the required field `upload`
      VideoVersionUpload.validateJsonObject(jsonObj.getAsJsonObject("upload"));
      if (!jsonObj.get("upload_date").isJsonNull() && !jsonObj.get("upload_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upload_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upload_date").toString()));
      }
      if (!jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      // validate the required field `user`
      User.validateJsonObject(jsonObj.getAsJsonObject("user"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoVersion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoVersion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoVersion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoVersion.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoVersion>() {
           @Override
           public void write(JsonWriter out, VideoVersion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoVersion read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             VideoVersion instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VideoVersion given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VideoVersion
  * @throws IOException if the JSON string is invalid with respect to VideoVersion
  */
  public static VideoVersion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoVersion.class);
  }

 /**
  * Convert an instance of VideoVersion to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

