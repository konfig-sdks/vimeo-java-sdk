/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.OnDemandPostersUpdatePosterRequest;
import com.konfigthis.client.model.Picture;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OnDemandPostersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OnDemandPostersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OnDemandPostersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addPosterToPageCall(Double ondemandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/pictures"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPosterToPageValidateBeforeCall(Double ondemandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling addPosterToPage(Async)");
        }

        return addPosterToPageCall(ondemandId, _callback);

    }


    private ApiResponse<Picture> addPosterToPageWithHttpInfo(Double ondemandId) throws ApiException {
        okhttp3.Call localVarCall = addPosterToPageValidateBeforeCall(ondemandId, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addPosterToPageAsync(Double ondemandId, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPosterToPageValidateBeforeCall(ondemandId, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddPosterToPageRequestBuilder {
        private final Double ondemandId;

        private AddPosterToPageRequestBuilder(double ondemandId) {
            this.ondemandId = ondemandId;
        }

        /**
         * Build call for addPosterToPage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The poster was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addPosterToPageCall(ondemandId, _callback);
        }


        /**
         * Execute addPosterToPage request
         * @return Picture
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The poster was added. </td><td>  -  </td></tr>
         </table>
         */
        public Picture execute() throws ApiException {
            ApiResponse<Picture> localVarResp = addPosterToPageWithHttpInfo(ondemandId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addPosterToPage request with HTTP info returned
         * @return ApiResponse&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The poster was added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Picture> executeWithHttpInfo() throws ApiException {
            return addPosterToPageWithHttpInfo(ondemandId);
        }

        /**
         * Execute addPosterToPage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The poster was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Picture> _callback) throws ApiException {
            return addPosterToPageAsync(ondemandId, _callback);
        }
    }

    /**
     * Add a poster to an On Demand page
     * This method adds a poster image to the specified On Demand page. The authenticated user must be the owner of the page.
     * @param ondemandId The ID of the On Demand page. (required)
     * @return AddPosterToPageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The poster was added. </td><td>  -  </td></tr>
     </table>
     */
    public AddPosterToPageRequestBuilder addPosterToPage(double ondemandId) throws IllegalArgumentException {
        
        return new AddPosterToPageRequestBuilder(ondemandId);
    }
    private okhttp3.Call getOnDemandPagePostersCall(Double ondemandId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/pictures"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOnDemandPagePostersValidateBeforeCall(Double ondemandId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling getOnDemandPagePosters(Async)");
        }

        return getOnDemandPagePostersCall(ondemandId, page, perPage, _callback);

    }


    private ApiResponse<List<Picture>> getOnDemandPagePostersWithHttpInfo(Double ondemandId, Double page, Double perPage) throws ApiException {
        okhttp3.Call localVarCall = getOnDemandPagePostersValidateBeforeCall(ondemandId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOnDemandPagePostersAsync(Double ondemandId, Double page, Double perPage, final ApiCallback<List<Picture>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOnDemandPagePostersValidateBeforeCall(ondemandId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOnDemandPagePostersRequestBuilder {
        private final Double ondemandId;
        private Double page;
        private Double perPage;

        private GetOnDemandPagePostersRequestBuilder(double ondemandId) {
            this.ondemandId = ondemandId;
        }

        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetOnDemandPagePostersRequestBuilder
         */
        public GetOnDemandPagePostersRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetOnDemandPagePostersRequestBuilder
         */
        public GetOnDemandPagePostersRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getOnDemandPagePosters
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The posters were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOnDemandPagePostersCall(ondemandId, page, perPage, _callback);
        }


        /**
         * Execute getOnDemandPagePosters request
         * @return List&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The posters were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Picture> execute() throws ApiException {
            ApiResponse<List<Picture>> localVarResp = getOnDemandPagePostersWithHttpInfo(ondemandId, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOnDemandPagePosters request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Picture&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The posters were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Picture>> executeWithHttpInfo() throws ApiException {
            return getOnDemandPagePostersWithHttpInfo(ondemandId, page, perPage);
        }

        /**
         * Execute getOnDemandPagePosters request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The posters were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Picture>> _callback) throws ApiException {
            return getOnDemandPagePostersAsync(ondemandId, page, perPage, _callback);
        }
    }

    /**
     * Get all the posters on an On Demand page
     * This method returns every poster on the specified On Demand page.
     * @param ondemandId The ID of the On Demand page. (required)
     * @return GetOnDemandPagePostersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The posters were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetOnDemandPagePostersRequestBuilder getOnDemandPagePosters(double ondemandId) throws IllegalArgumentException {
        
        return new GetOnDemandPagePostersRequestBuilder(ondemandId);
    }
    private okhttp3.Call getSpecificPosterCall(Double ondemandId, Double posterId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/pictures/{poster_id}"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()))
            .replace("{" + "poster_id" + "}", localVarApiClient.escapeString(posterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificPosterValidateBeforeCall(Double ondemandId, Double posterId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling getSpecificPoster(Async)");
        }

        // verify the required parameter 'posterId' is set
        if (posterId == null) {
            throw new ApiException("Missing the required parameter 'posterId' when calling getSpecificPoster(Async)");
        }

        return getSpecificPosterCall(ondemandId, posterId, _callback);

    }


    private ApiResponse<Picture> getSpecificPosterWithHttpInfo(Double ondemandId, Double posterId) throws ApiException {
        okhttp3.Call localVarCall = getSpecificPosterValidateBeforeCall(ondemandId, posterId, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificPosterAsync(Double ondemandId, Double posterId, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificPosterValidateBeforeCall(ondemandId, posterId, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificPosterRequestBuilder {
        private final Double ondemandId;
        private final Double posterId;

        private GetSpecificPosterRequestBuilder(double ondemandId, double posterId) {
            this.ondemandId = ondemandId;
            this.posterId = posterId;
        }

        /**
         * Build call for getSpecificPoster
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The poster was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificPosterCall(ondemandId, posterId, _callback);
        }


        /**
         * Execute getSpecificPoster request
         * @return Picture
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The poster was returned. </td><td>  -  </td></tr>
         </table>
         */
        public Picture execute() throws ApiException {
            ApiResponse<Picture> localVarResp = getSpecificPosterWithHttpInfo(ondemandId, posterId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificPoster request with HTTP info returned
         * @return ApiResponse&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The poster was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Picture> executeWithHttpInfo() throws ApiException {
            return getSpecificPosterWithHttpInfo(ondemandId, posterId);
        }

        /**
         * Execute getSpecificPoster request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The poster was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Picture> _callback) throws ApiException {
            return getSpecificPosterAsync(ondemandId, posterId, _callback);
        }
    }

    /**
     * Get a specific poster on an On Demand page
     * This method returns a single poster on the specified On Demand page.
     * @param ondemandId The ID of the On Demand page. (required)
     * @param posterId The ID of the poster. (required)
     * @return GetSpecificPosterRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The poster was returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificPosterRequestBuilder getSpecificPoster(double ondemandId, double posterId) throws IllegalArgumentException {
        
        
        return new GetSpecificPosterRequestBuilder(ondemandId, posterId);
    }
    private okhttp3.Call updatePosterCall(Double ondemandId, Double posterId, OnDemandPostersUpdatePosterRequest onDemandPostersUpdatePosterRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = onDemandPostersUpdatePosterRequest;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/pictures/{poster_id}"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()))
            .replace("{" + "poster_id" + "}", localVarApiClient.escapeString(posterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePosterValidateBeforeCall(Double ondemandId, Double posterId, OnDemandPostersUpdatePosterRequest onDemandPostersUpdatePosterRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling updatePoster(Async)");
        }

        // verify the required parameter 'posterId' is set
        if (posterId == null) {
            throw new ApiException("Missing the required parameter 'posterId' when calling updatePoster(Async)");
        }

        return updatePosterCall(ondemandId, posterId, onDemandPostersUpdatePosterRequest, _callback);

    }


    private ApiResponse<Picture> updatePosterWithHttpInfo(Double ondemandId, Double posterId, OnDemandPostersUpdatePosterRequest onDemandPostersUpdatePosterRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePosterValidateBeforeCall(ondemandId, posterId, onDemandPostersUpdatePosterRequest, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePosterAsync(Double ondemandId, Double posterId, OnDemandPostersUpdatePosterRequest onDemandPostersUpdatePosterRequest, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePosterValidateBeforeCall(ondemandId, posterId, onDemandPostersUpdatePosterRequest, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePosterRequestBuilder {
        private final Double ondemandId;
        private final Double posterId;
        private Boolean active;

        private UpdatePosterRequestBuilder(double ondemandId, double posterId) {
            this.ondemandId = ondemandId;
            this.posterId = posterId;
        }

        /**
         * Set active
         * @param active Whether this poster is the one that appears on the On Demand page. (optional)
         * @return UpdatePosterRequestBuilder
         */
        public UpdatePosterRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Build call for updatePoster
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The poster was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OnDemandPostersUpdatePosterRequest onDemandPostersUpdatePosterRequest = buildBodyParams();
            return updatePosterCall(ondemandId, posterId, onDemandPostersUpdatePosterRequest, _callback);
        }

        private OnDemandPostersUpdatePosterRequest buildBodyParams() {
            OnDemandPostersUpdatePosterRequest onDemandPostersUpdatePosterRequest = new OnDemandPostersUpdatePosterRequest();
            onDemandPostersUpdatePosterRequest.active(this.active);
            return onDemandPostersUpdatePosterRequest;
        }

        /**
         * Execute updatePoster request
         * @return Picture
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The poster was edited. </td><td>  -  </td></tr>
         </table>
         */
        public Picture execute() throws ApiException {
            OnDemandPostersUpdatePosterRequest onDemandPostersUpdatePosterRequest = buildBodyParams();
            ApiResponse<Picture> localVarResp = updatePosterWithHttpInfo(ondemandId, posterId, onDemandPostersUpdatePosterRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePoster request with HTTP info returned
         * @return ApiResponse&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The poster was edited. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Picture> executeWithHttpInfo() throws ApiException {
            OnDemandPostersUpdatePosterRequest onDemandPostersUpdatePosterRequest = buildBodyParams();
            return updatePosterWithHttpInfo(ondemandId, posterId, onDemandPostersUpdatePosterRequest);
        }

        /**
         * Execute updatePoster request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The poster was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Picture> _callback) throws ApiException {
            OnDemandPostersUpdatePosterRequest onDemandPostersUpdatePosterRequest = buildBodyParams();
            return updatePosterAsync(ondemandId, posterId, onDemandPostersUpdatePosterRequest, _callback);
        }
    }

    /**
     * Edit a poster on an On Demand page
     * This method edits a poster image on the specified On Demand page. The authenticated user must be the owner of the page.
     * @param ondemandId The ID of the On Demand page. (required)
     * @param posterId The ID of the poster. (required)
     * @return UpdatePosterRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The poster was edited. </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePosterRequestBuilder updatePoster(double ondemandId, double posterId) throws IllegalArgumentException {
        
        
        return new UpdatePosterRequestBuilder(ondemandId, posterId);
    }
}
