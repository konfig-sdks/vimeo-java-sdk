/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.LiveEventSessionStatusArchive;
import com.konfigthis.client.model.LiveEventSessionStatusIngest;
import com.konfigthis.client.model.LiveEventSessionStatusMetering;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * LiveEventSessionStatus
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LiveEventSessionStatus {
  public static final String SERIALIZED_NAME_ARCHIVE = "archive";
  @SerializedName(SERIALIZED_NAME_ARCHIVE)
  private LiveEventSessionStatusArchive archive;

  public static final String SERIALIZED_NAME_CAN_MANAGE = "can_manage";
  @SerializedName(SERIALIZED_NAME_CAN_MANAGE)
  private Boolean canManage;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Double id;

  public static final String SERIALIZED_NAME_INGEST = "ingest";
  @SerializedName(SERIALIZED_NAME_INGEST)
  private LiveEventSessionStatusIngest ingest;

  public static final String SERIALIZED_NAME_METERING = "metering";
  @SerializedName(SERIALIZED_NAME_METERING)
  private LiveEventSessionStatusMetering metering;

  /**
   * The status of the live event.  Option descriptions:  * &#x60;ended&#x60; - The live event has ended.  * &#x60;started&#x60; - The live event has started. 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    ENDED("ended"),
    
    STARTED("started");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * The stream mode of the event.  Option descriptions:  * &#x60;live&#x60; - The stream is live playback.  * &#x60;record&#x60; - The stream is in record mode.  * &#x60;simulive&#x60; - The stream is scheduled media playback. 
   */
  @JsonAdapter(StreamModeEnum.Adapter.class)
 public enum StreamModeEnum {
    LIVE("live"),
    
    RECORD("record"),
    
    SIMULIVE("simulive");

    private String value;

    StreamModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StreamModeEnum fromValue(String value) {
      for (StreamModeEnum b : StreamModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StreamModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StreamModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StreamModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StreamModeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STREAM_MODE = "stream_mode";
  @SerializedName(SERIALIZED_NAME_STREAM_MODE)
  private StreamModeEnum streamMode;

  public LiveEventSessionStatus() {
  }

  public LiveEventSessionStatus archive(LiveEventSessionStatusArchive archive) {
    
    
    
    
    this.archive = archive;
    return this;
  }

   /**
   * Get archive
   * @return archive
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public LiveEventSessionStatusArchive getArchive() {
    return archive;
  }


  public void setArchive(LiveEventSessionStatusArchive archive) {
    
    
    
    this.archive = archive;
  }


  public LiveEventSessionStatus canManage(Boolean canManage) {
    
    
    
    
    this.canManage = canManage;
    return this;
  }

   /**
   * Whether the current user can manage the event.
   * @return canManage
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the current user can manage the event.")

  public Boolean getCanManage() {
    return canManage;
  }


  public void setCanManage(Boolean canManage) {
    
    
    
    this.canManage = canManage;
  }


  public LiveEventSessionStatus id(Double id) {
    
    
    
    
    this.id = id;
    return this;
  }

  public LiveEventSessionStatus id(Integer id) {
    
    
    
    
    this.id = id.doubleValue();
    return this;
  }

   /**
   * The ID of the live video.
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1111", required = true, value = "The ID of the live video.")

  public Double getId() {
    return id;
  }


  public void setId(Double id) {
    
    
    
    this.id = id;
  }


  public LiveEventSessionStatus ingest(LiveEventSessionStatusIngest ingest) {
    
    
    
    
    this.ingest = ingest;
    return this;
  }

   /**
   * Get ingest
   * @return ingest
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public LiveEventSessionStatusIngest getIngest() {
    return ingest;
  }


  public void setIngest(LiveEventSessionStatusIngest ingest) {
    
    
    
    this.ingest = ingest;
  }


  public LiveEventSessionStatus metering(LiveEventSessionStatusMetering metering) {
    
    
    
    
    this.metering = metering;
    return this;
  }

   /**
   * Get metering
   * @return metering
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public LiveEventSessionStatusMetering getMetering() {
    return metering;
  }


  public void setMetering(LiveEventSessionStatusMetering metering) {
    
    
    
    this.metering = metering;
  }


  public LiveEventSessionStatus status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The status of the live event.  Option descriptions:  * &#x60;ended&#x60; - The live event has ended.  * &#x60;started&#x60; - The live event has started. 
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "STARTED", required = true, value = "The status of the live event.  Option descriptions:  * `ended` - The live event has ended.  * `started` - The live event has started. ")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public LiveEventSessionStatus streamMode(StreamModeEnum streamMode) {
    
    
    
    
    this.streamMode = streamMode;
    return this;
  }

   /**
   * The stream mode of the event.  Option descriptions:  * &#x60;live&#x60; - The stream is live playback.  * &#x60;record&#x60; - The stream is in record mode.  * &#x60;simulive&#x60; - The stream is scheduled media playback. 
   * @return streamMode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "LIVE", required = true, value = "The stream mode of the event.  Option descriptions:  * `live` - The stream is live playback.  * `record` - The stream is in record mode.  * `simulive` - The stream is scheduled media playback. ")

  public StreamModeEnum getStreamMode() {
    return streamMode;
  }


  public void setStreamMode(StreamModeEnum streamMode) {
    
    
    
    this.streamMode = streamMode;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LiveEventSessionStatus instance itself
   */
  public LiveEventSessionStatus putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveEventSessionStatus liveEventSessionStatus = (LiveEventSessionStatus) o;
    return Objects.equals(this.archive, liveEventSessionStatus.archive) &&
        Objects.equals(this.canManage, liveEventSessionStatus.canManage) &&
        Objects.equals(this.id, liveEventSessionStatus.id) &&
        Objects.equals(this.ingest, liveEventSessionStatus.ingest) &&
        Objects.equals(this.metering, liveEventSessionStatus.metering) &&
        Objects.equals(this.status, liveEventSessionStatus.status) &&
        Objects.equals(this.streamMode, liveEventSessionStatus.streamMode)&&
        Objects.equals(this.additionalProperties, liveEventSessionStatus.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(archive, canManage, id, ingest, metering, status, streamMode, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveEventSessionStatus {\n");
    sb.append("    archive: ").append(toIndentedString(archive)).append("\n");
    sb.append("    canManage: ").append(toIndentedString(canManage)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ingest: ").append(toIndentedString(ingest)).append("\n");
    sb.append("    metering: ").append(toIndentedString(metering)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    streamMode: ").append(toIndentedString(streamMode)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("archive");
    openapiFields.add("can_manage");
    openapiFields.add("id");
    openapiFields.add("ingest");
    openapiFields.add("metering");
    openapiFields.add("status");
    openapiFields.add("stream_mode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("archive");
    openapiRequiredFields.add("can_manage");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("ingest");
    openapiRequiredFields.add("metering");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("stream_mode");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LiveEventSessionStatus
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LiveEventSessionStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiveEventSessionStatus is not found in the empty JSON string", LiveEventSessionStatus.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LiveEventSessionStatus.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `archive`
      LiveEventSessionStatusArchive.validateJsonObject(jsonObj.getAsJsonObject("archive"));
      // validate the required field `ingest`
      LiveEventSessionStatusIngest.validateJsonObject(jsonObj.getAsJsonObject("ingest"));
      // validate the required field `metering`
      LiveEventSessionStatusMetering.validateJsonObject(jsonObj.getAsJsonObject("metering"));
      if (!jsonObj.get("status").isJsonNull() && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("stream_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stream_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stream_mode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiveEventSessionStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiveEventSessionStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiveEventSessionStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiveEventSessionStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<LiveEventSessionStatus>() {
           @Override
           public void write(JsonWriter out, LiveEventSessionStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LiveEventSessionStatus read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LiveEventSessionStatus instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LiveEventSessionStatus given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LiveEventSessionStatus
  * @throws IOException if the JSON string is invalid with respect to LiveEventSessionStatus
  */
  public static LiveEventSessionStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiveEventSessionStatus.class);
  }

 /**
  * Convert an instance of LiveEventSessionStatus to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

