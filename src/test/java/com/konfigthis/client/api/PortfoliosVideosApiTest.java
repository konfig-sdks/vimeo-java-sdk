/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Video;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PortfoliosVideosApi
 */
@Disabled
public class PortfoliosVideosApiTest {

    private static PortfoliosVideosApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PortfoliosVideosApi(apiClient);
    }

    /**
     * Add a video to a portfolio
     *
     * This method adds a video to the specified portfolio belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addVideoToPortfolioTest() throws ApiException {
        Double portfolioId = null;
        Double userId = null;
        Double videoId = null;
        api.addVideoToPortfolio(portfolioId, userId, videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the videos in a portfolio
     *
     * This method returns every video from the specified portfolio belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPortfolioVideosTest() throws ApiException {
        Double portfolioId = null;
        String containingUri = null;
        String filter = null;
        Boolean filterEmbeddable = null;
        Double page = null;
        Double perPage = null;
        String sort = null;
        List<Video> response = api.getAllPortfolioVideos(portfolioId)
                .containingUri(containingUri)
                .filter(filter)
                .filterEmbeddable(filterEmbeddable)
                .page(page)
                .perPage(perPage)
                .sort(sort)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the videos in a portfolio
     *
     * This method returns every video from the specified portfolio belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPortfolioVideos_0Test() throws ApiException {
        Double portfolioId = null;
        Double userId = null;
        String containingUri = null;
        String filter = null;
        Boolean filterEmbeddable = null;
        Double page = null;
        Double perPage = null;
        String sort = null;
        List<Video> response = api.getAllPortfolioVideos_0(portfolioId, userId)
                .containingUri(containingUri)
                .filter(filter)
                .filterEmbeddable(filterEmbeddable)
                .page(page)
                .perPage(perPage)
                .sort(sort)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a specific video in a portfolio
     *
     * This method returns a single video from the specified portfolio belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSpecificVideoTest() throws ApiException {
        Double portfolioId = null;
        Double videoId = null;
        Video response = api.getSpecificVideo(portfolioId, videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a specific video in a portfolio
     *
     * This method returns a single video from the specified portfolio belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSpecificVideo_0Test() throws ApiException {
        Double portfolioId = null;
        Double userId = null;
        Double videoId = null;
        Video response = api.getSpecificVideo_0(portfolioId, userId, videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Add a video to a portfolio
     *
     * This method adds a video to the specified portfolio belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putVideoToPortfolioTest() throws ApiException {
        Double portfolioId = null;
        Double videoId = null;
        api.putVideoToPortfolio(portfolioId, videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove a video from a portfolio
     *
     * This method removes a video from the specified portfolio belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeFromPortfolioTest() throws ApiException {
        Double portfolioId = null;
        Double videoId = null;
        api.removeFromPortfolio(portfolioId, videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove a video from a portfolio
     *
     * This method removes a video from the specified portfolio belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeFromPortfolioVideoTest() throws ApiException {
        Double portfolioId = null;
        Double userId = null;
        Double videoId = null;
        api.removeFromPortfolioVideo(portfolioId, userId, videoId)
                .execute();
        // TODO: test validations
    }

}
