/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.User;
import com.konfigthis.client.model.Video;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LikesEssentialsApi
 */
@Disabled
public class LikesEssentialsApiTest {

    private static LikesEssentialsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new LikesEssentialsApi(apiClient);
    }

    /**
     * Check if the user has liked a video
     *
     * This method checks if the authenticated user has liked the specified video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkUserLikedVideoTest() throws ApiException {
        Double videoId = null;
        api.checkUserLikedVideo(videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Check if the user has liked a video
     *
     * This method checks if the authenticated user has liked the specified video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkVideoLikedByUserTest() throws ApiException {
        Double userId = null;
        Double videoId = null;
        api.checkVideoLikedByUser(userId, videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the users who have liked a video on an On Demand page
     *
     * This method returns every user who has liked the specified video on an On Demand page.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllUserLikesTest() throws ApiException {
        Double ondemandId = null;
        String direction = null;
        String filter = null;
        Double page = null;
        Double perPage = null;
        String sort = null;
        List<User> response = api.getAllUserLikes(ondemandId)
                .direction(direction)
                .filter(filter)
                .page(page)
                .perPage(perPage)
                .sort(sort)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the videos that a user has liked
     *
     * This method returns every video that the authenticated user has liked.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserLikedVideosTest() throws ApiException {
        String filter = null;
        Boolean filterEmbeddable = null;
        Double page = null;
        Double perPage = null;
        String query = null;
        String sort = null;
        List<Video> response = api.getUserLikedVideos()
                .filter(filter)
                .filterEmbeddable(filterEmbeddable)
                .page(page)
                .perPage(perPage)
                .query(query)
                .sort(sort)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the users who have liked a video
     *
     * This method returns every user who has liked the specified video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserLikesTest() throws ApiException {
        Double videoId = null;
        String direction = null;
        Double page = null;
        Double perPage = null;
        String sort = null;
        List<User> response = api.getUserLikes(videoId)
                .direction(direction)
                .page(page)
                .perPage(perPage)
                .sort(sort)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the users who have liked a video
     *
     * This method returns every user who has liked the specified video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersWhoLikedVideoTest() throws ApiException {
        Double channelId = null;
        Double videoId = null;
        String direction = null;
        Double page = null;
        Double perPage = null;
        String sort = null;
        List<User> response = api.getUsersWhoLikedVideo(channelId, videoId)
                .direction(direction)
                .page(page)
                .perPage(perPage)
                .sort(sort)
                .execute();
        // TODO: test validations
    }

    /**
     * Cause the user to like a video
     *
     * This method causes the authenticated user to like the specified video. The user can&#39;t like their own video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void likeVideoTest() throws ApiException {
        Double videoId = null;
        api.likeVideo(videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the videos that a user has liked
     *
     * This method returns every video that the authenticated user has liked.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void likesTest() throws ApiException {
        Double userId = null;
        String filter = null;
        Boolean filterEmbeddable = null;
        Double page = null;
        Double perPage = null;
        String query = null;
        String sort = null;
        List<Video> response = api.likes(userId)
                .filter(filter)
                .filterEmbeddable(filterEmbeddable)
                .page(page)
                .perPage(perPage)
                .query(query)
                .sort(sort)
                .execute();
        // TODO: test validations
    }

    /**
     * Cause a user to unlike a video
     *
     * This method causes the authenticated user to unlike the specified video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unlikeVideoTest() throws ApiException {
        Double videoId = null;
        api.unlikeVideo(videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Cause the user to like a video
     *
     * This method causes the authenticated user to like the specified video. The user can&#39;t like their own video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void videoTest() throws ApiException {
        Double userId = null;
        Double videoId = null;
        api.video(userId, videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Cause a user to unlike a video
     *
     * This method causes the authenticated user to unlike the specified video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void video_0Test() throws ApiException {
        Double userId = null;
        Double videoId = null;
        api.video_0(userId, videoId)
                .execute();
        // TODO: test validations
    }

}
