/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.User;
import com.konfigthis.client.model.Video;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LikesEssentialsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LikesEssentialsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LikesEssentialsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call checkUserLikedVideoCall(Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/likes/{video_id}"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkUserLikedVideoValidateBeforeCall(Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling checkUserLikedVideo(Async)");
        }

        return checkUserLikedVideoCall(videoId, _callback);

    }


    private ApiResponse<Void> checkUserLikedVideoWithHttpInfo(Double videoId) throws ApiException {
        okhttp3.Call localVarCall = checkUserLikedVideoValidateBeforeCall(videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call checkUserLikedVideoAsync(Double videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkUserLikedVideoValidateBeforeCall(videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CheckUserLikedVideoRequestBuilder {
        private final Double videoId;

        private CheckUserLikedVideoRequestBuilder(double videoId) {
            this.videoId = videoId;
        }

        /**
         * Build call for checkUserLikedVideo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user has liked the video. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkUserLikedVideoCall(videoId, _callback);
        }


        /**
         * Execute checkUserLikedVideo request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user has liked the video. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            checkUserLikedVideoWithHttpInfo(videoId);
        }

        /**
         * Execute checkUserLikedVideo request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user has liked the video. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return checkUserLikedVideoWithHttpInfo(videoId);
        }

        /**
         * Execute checkUserLikedVideo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user has liked the video. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return checkUserLikedVideoAsync(videoId, _callback);
        }
    }

    /**
     * Check if the user has liked a video
     * This method checks if the authenticated user has liked the specified video.
     * @param videoId The ID of the video. (required)
     * @return CheckUserLikedVideoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user has liked the video. </td><td>  -  </td></tr>
     </table>
     */
    public CheckUserLikedVideoRequestBuilder checkUserLikedVideo(double videoId) throws IllegalArgumentException {
        
        return new CheckUserLikedVideoRequestBuilder(videoId);
    }
    private okhttp3.Call checkVideoLikedByUserCall(Double userId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/likes/{video_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkVideoLikedByUserValidateBeforeCall(Double userId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling checkVideoLikedByUser(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling checkVideoLikedByUser(Async)");
        }

        return checkVideoLikedByUserCall(userId, videoId, _callback);

    }


    private ApiResponse<Void> checkVideoLikedByUserWithHttpInfo(Double userId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = checkVideoLikedByUserValidateBeforeCall(userId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call checkVideoLikedByUserAsync(Double userId, Double videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkVideoLikedByUserValidateBeforeCall(userId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CheckVideoLikedByUserRequestBuilder {
        private final Double userId;
        private final Double videoId;

        private CheckVideoLikedByUserRequestBuilder(double userId, double videoId) {
            this.userId = userId;
            this.videoId = videoId;
        }

        /**
         * Build call for checkVideoLikedByUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user has liked the video. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkVideoLikedByUserCall(userId, videoId, _callback);
        }


        /**
         * Execute checkVideoLikedByUser request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user has liked the video. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            checkVideoLikedByUserWithHttpInfo(userId, videoId);
        }

        /**
         * Execute checkVideoLikedByUser request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user has liked the video. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return checkVideoLikedByUserWithHttpInfo(userId, videoId);
        }

        /**
         * Execute checkVideoLikedByUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user has liked the video. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return checkVideoLikedByUserAsync(userId, videoId, _callback);
        }
    }

    /**
     * Check if the user has liked a video
     * This method checks if the authenticated user has liked the specified video.
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @return CheckVideoLikedByUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user has liked the video. </td><td>  -  </td></tr>
     </table>
     */
    public CheckVideoLikedByUserRequestBuilder checkVideoLikedByUser(double userId, double videoId) throws IllegalArgumentException {
        
        
        return new CheckVideoLikedByUserRequestBuilder(userId, videoId);
    }
    private okhttp3.Call getAllUserLikesCall(Double ondemandId, String direction, String filter, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/likes"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllUserLikesValidateBeforeCall(Double ondemandId, String direction, String filter, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling getAllUserLikes(Async)");
        }

        return getAllUserLikesCall(ondemandId, direction, filter, page, perPage, sort, _callback);

    }


    private ApiResponse<List<User>> getAllUserLikesWithHttpInfo(Double ondemandId, String direction, String filter, Double page, Double perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = getAllUserLikesValidateBeforeCall(ondemandId, direction, filter, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllUserLikesAsync(Double ondemandId, String direction, String filter, Double page, Double perPage, String sort, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllUserLikesValidateBeforeCall(ondemandId, direction, filter, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllUserLikesRequestBuilder {
        private final Double ondemandId;
        private String direction;
        private String filter;
        private Double page;
        private Double perPage;
        private String sort;

        private GetAllUserLikesRequestBuilder(double ondemandId) {
            this.ondemandId = ondemandId;
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return GetAllUserLikesRequestBuilder
         */
        public GetAllUserLikesRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The attribute by which to filter the results.  Option descriptions:  * &#x60;extra&#x60; - Consider extra content only.  * &#x60;main&#x60; - Consider main content only.  * &#x60;trailer&#x60; - Consider trailer content only.  (optional)
         * @return GetAllUserLikesRequestBuilder
         */
        public GetAllUserLikesRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetAllUserLikesRequestBuilder
         */
        public GetAllUserLikesRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetAllUserLikesRequestBuilder
         */
        public GetAllUserLikesRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by join date.  (optional)
         * @return GetAllUserLikesRequestBuilder
         */
        public GetAllUserLikesRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getAllUserLikes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllUserLikesCall(ondemandId, direction, filter, page, perPage, sort, _callback);
        }


        /**
         * Execute getAllUserLikes request
         * @return List&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<User> execute() throws ApiException {
            ApiResponse<List<User>> localVarResp = getAllUserLikesWithHttpInfo(ondemandId, direction, filter, page, perPage, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllUserLikes request with HTTP info returned
         * @return ApiResponse&lt;List&lt;User&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<User>> executeWithHttpInfo() throws ApiException {
            return getAllUserLikesWithHttpInfo(ondemandId, direction, filter, page, perPage, sort);
        }

        /**
         * Execute getAllUserLikes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<User>> _callback) throws ApiException {
            return getAllUserLikesAsync(ondemandId, direction, filter, page, perPage, sort, _callback);
        }
    }

    /**
     * Get all the users who have liked a video on an On Demand page
     * This method returns every user who has liked the specified video on an On Demand page.
     * @param ondemandId The ID of the On Demand page. (required)
     * @return GetAllUserLikesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllUserLikesRequestBuilder getAllUserLikes(double ondemandId) throws IllegalArgumentException {
        
        return new GetAllUserLikesRequestBuilder(ondemandId);
    }
    private okhttp3.Call getUserLikedVideosCall(String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/likes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (filterEmbeddable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_embeddable", filterEmbeddable));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserLikedVideosValidateBeforeCall(String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        return getUserLikedVideosCall(filter, filterEmbeddable, page, perPage, query, sort, _callback);

    }


    private ApiResponse<List<Video>> getUserLikedVideosWithHttpInfo(String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = getUserLikedVideosValidateBeforeCall(filter, filterEmbeddable, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserLikedVideosAsync(String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserLikedVideosValidateBeforeCall(filter, filterEmbeddable, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserLikedVideosRequestBuilder {
        private String filter;
        private Boolean filterEmbeddable;
        private Double page;
        private Double perPage;
        private String query;
        private String sort;

        private GetUserLikedVideosRequestBuilder() {
        }

        /**
         * Set filter
         * @param filter The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)
         * @return GetUserLikedVideosRequestBuilder
         */
        public GetUserLikedVideosRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set filterEmbeddable
         * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)
         * @return GetUserLikedVideosRequestBuilder
         */
        public GetUserLikedVideosRequestBuilder filterEmbeddable(Boolean filterEmbeddable) {
            this.filterEmbeddable = filterEmbeddable;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetUserLikedVideosRequestBuilder
         */
        public GetUserLikedVideosRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetUserLikedVideosRequestBuilder
         */
        public GetUserLikedVideosRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set query
         * @param query The search query to use to filter the results. (optional)
         * @return GetUserLikedVideosRequestBuilder
         */
        public GetUserLikedVideosRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)
         * @return GetUserLikedVideosRequestBuilder
         */
        public GetUserLikedVideosRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getUserLikedVideos
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserLikedVideosCall(filter, filterEmbeddable, page, perPage, query, sort, _callback);
        }


        /**
         * Execute getUserLikedVideos request
         * @return List&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Video> execute() throws ApiException {
            ApiResponse<List<Video>> localVarResp = getUserLikedVideosWithHttpInfo(filter, filterEmbeddable, page, perPage, query, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserLikedVideos request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Video&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Video>> executeWithHttpInfo() throws ApiException {
            return getUserLikedVideosWithHttpInfo(filter, filterEmbeddable, page, perPage, query, sort);
        }

        /**
         * Execute getUserLikedVideos request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Video>> _callback) throws ApiException {
            return getUserLikedVideosAsync(filter, filterEmbeddable, page, perPage, query, sort, _callback);
        }
    }

    /**
     * Get all the videos that a user has liked
     * This method returns every video that the authenticated user has liked.
     * @return GetUserLikedVideosRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetUserLikedVideosRequestBuilder getUserLikedVideos() throws IllegalArgumentException {
        return new GetUserLikedVideosRequestBuilder();
    }
    private okhttp3.Call getUserLikesCall(Double videoId, String direction, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/likes"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserLikesValidateBeforeCall(Double videoId, String direction, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getUserLikes(Async)");
        }

        return getUserLikesCall(videoId, direction, page, perPage, sort, _callback);

    }


    private ApiResponse<List<User>> getUserLikesWithHttpInfo(Double videoId, String direction, Double page, Double perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = getUserLikesValidateBeforeCall(videoId, direction, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserLikesAsync(Double videoId, String direction, Double page, Double perPage, String sort, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserLikesValidateBeforeCall(videoId, direction, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserLikesRequestBuilder {
        private final Double videoId;
        private String direction;
        private Double page;
        private Double perPage;
        private String sort;

        private GetUserLikesRequestBuilder(double videoId) {
            this.videoId = videoId;
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return GetUserLikesRequestBuilder
         */
        public GetUserLikesRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetUserLikesRequestBuilder
         */
        public GetUserLikesRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetUserLikesRequestBuilder
         */
        public GetUserLikesRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by join date.  (optional)
         * @return GetUserLikesRequestBuilder
         */
        public GetUserLikesRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getUserLikes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserLikesCall(videoId, direction, page, perPage, sort, _callback);
        }


        /**
         * Execute getUserLikes request
         * @return List&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<User> execute() throws ApiException {
            ApiResponse<List<User>> localVarResp = getUserLikesWithHttpInfo(videoId, direction, page, perPage, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserLikes request with HTTP info returned
         * @return ApiResponse&lt;List&lt;User&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<User>> executeWithHttpInfo() throws ApiException {
            return getUserLikesWithHttpInfo(videoId, direction, page, perPage, sort);
        }

        /**
         * Execute getUserLikes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<User>> _callback) throws ApiException {
            return getUserLikesAsync(videoId, direction, page, perPage, sort, _callback);
        }
    }

    /**
     * Get all the users who have liked a video
     * This method returns every user who has liked the specified video.
     * @param videoId The ID of the video. (required)
     * @return GetUserLikesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetUserLikesRequestBuilder getUserLikes(double videoId) throws IllegalArgumentException {
        
        return new GetUserLikesRequestBuilder(videoId);
    }
    private okhttp3.Call getUsersWhoLikedVideoCall(Double channelId, Double videoId, String direction, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/videos/{video_id}/likes"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersWhoLikedVideoValidateBeforeCall(Double channelId, Double videoId, String direction, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getUsersWhoLikedVideo(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getUsersWhoLikedVideo(Async)");
        }

        return getUsersWhoLikedVideoCall(channelId, videoId, direction, page, perPage, sort, _callback);

    }


    private ApiResponse<List<User>> getUsersWhoLikedVideoWithHttpInfo(Double channelId, Double videoId, String direction, Double page, Double perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = getUsersWhoLikedVideoValidateBeforeCall(channelId, videoId, direction, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUsersWhoLikedVideoAsync(Double channelId, Double videoId, String direction, Double page, Double perPage, String sort, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersWhoLikedVideoValidateBeforeCall(channelId, videoId, direction, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUsersWhoLikedVideoRequestBuilder {
        private final Double channelId;
        private final Double videoId;
        private String direction;
        private Double page;
        private Double perPage;
        private String sort;

        private GetUsersWhoLikedVideoRequestBuilder(double channelId, double videoId) {
            this.channelId = channelId;
            this.videoId = videoId;
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return GetUsersWhoLikedVideoRequestBuilder
         */
        public GetUsersWhoLikedVideoRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetUsersWhoLikedVideoRequestBuilder
         */
        public GetUsersWhoLikedVideoRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetUsersWhoLikedVideoRequestBuilder
         */
        public GetUsersWhoLikedVideoRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by join date.  (optional)
         * @return GetUsersWhoLikedVideoRequestBuilder
         */
        public GetUsersWhoLikedVideoRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getUsersWhoLikedVideo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUsersWhoLikedVideoCall(channelId, videoId, direction, page, perPage, sort, _callback);
        }


        /**
         * Execute getUsersWhoLikedVideo request
         * @return List&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<User> execute() throws ApiException {
            ApiResponse<List<User>> localVarResp = getUsersWhoLikedVideoWithHttpInfo(channelId, videoId, direction, page, perPage, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUsersWhoLikedVideo request with HTTP info returned
         * @return ApiResponse&lt;List&lt;User&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<User>> executeWithHttpInfo() throws ApiException {
            return getUsersWhoLikedVideoWithHttpInfo(channelId, videoId, direction, page, perPage, sort);
        }

        /**
         * Execute getUsersWhoLikedVideo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<User>> _callback) throws ApiException {
            return getUsersWhoLikedVideoAsync(channelId, videoId, direction, page, perPage, sort, _callback);
        }
    }

    /**
     * Get all the users who have liked a video
     * This method returns every user who has liked the specified video.
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @return GetUsersWhoLikedVideoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetUsersWhoLikedVideoRequestBuilder getUsersWhoLikedVideo(double channelId, double videoId) throws IllegalArgumentException {
        
        
        return new GetUsersWhoLikedVideoRequestBuilder(channelId, videoId);
    }
    private okhttp3.Call likeVideoCall(Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/likes/{video_id}"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call likeVideoValidateBeforeCall(Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling likeVideo(Async)");
        }

        return likeVideoCall(videoId, _callback);

    }


    private ApiResponse<Void> likeVideoWithHttpInfo(Double videoId) throws ApiException {
        okhttp3.Call localVarCall = likeVideoValidateBeforeCall(videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call likeVideoAsync(Double videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = likeVideoValidateBeforeCall(videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class LikeVideoRequestBuilder {
        private final Double videoId;

        private LikeVideoRequestBuilder(double videoId) {
            this.videoId = videoId;
        }

        /**
         * Build call for likeVideo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was liked. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return likeVideoCall(videoId, _callback);
        }


        /**
         * Execute likeVideo request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was liked. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            likeVideoWithHttpInfo(videoId);
        }

        /**
         * Execute likeVideo request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was liked. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return likeVideoWithHttpInfo(videoId);
        }

        /**
         * Execute likeVideo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was liked. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return likeVideoAsync(videoId, _callback);
        }
    }

    /**
     * Cause the user to like a video
     * This method causes the authenticated user to like the specified video. The user can&#39;t like their own video.
     * @param videoId The ID of the video. (required)
     * @return LikeVideoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was liked. </td><td>  -  </td></tr>
     </table>
     */
    public LikeVideoRequestBuilder likeVideo(double videoId) throws IllegalArgumentException {
        
        return new LikeVideoRequestBuilder(videoId);
    }
    private okhttp3.Call likesCall(Double userId, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/likes"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (filterEmbeddable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_embeddable", filterEmbeddable));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call likesValidateBeforeCall(Double userId, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling likes(Async)");
        }

        return likesCall(userId, filter, filterEmbeddable, page, perPage, query, sort, _callback);

    }


    private ApiResponse<List<Video>> likesWithHttpInfo(Double userId, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = likesValidateBeforeCall(userId, filter, filterEmbeddable, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call likesAsync(Double userId, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = likesValidateBeforeCall(userId, filter, filterEmbeddable, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LikesRequestBuilder {
        private final Double userId;
        private String filter;
        private Boolean filterEmbeddable;
        private Double page;
        private Double perPage;
        private String query;
        private String sort;

        private LikesRequestBuilder(double userId) {
            this.userId = userId;
        }

        /**
         * Set filter
         * @param filter The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)
         * @return LikesRequestBuilder
         */
        public LikesRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set filterEmbeddable
         * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)
         * @return LikesRequestBuilder
         */
        public LikesRequestBuilder filterEmbeddable(Boolean filterEmbeddable) {
            this.filterEmbeddable = filterEmbeddable;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return LikesRequestBuilder
         */
        public LikesRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return LikesRequestBuilder
         */
        public LikesRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set query
         * @param query The search query to use to filter the results. (optional)
         * @return LikesRequestBuilder
         */
        public LikesRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)
         * @return LikesRequestBuilder
         */
        public LikesRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for likes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return likesCall(userId, filter, filterEmbeddable, page, perPage, query, sort, _callback);
        }


        /**
         * Execute likes request
         * @return List&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Video> execute() throws ApiException {
            ApiResponse<List<Video>> localVarResp = likesWithHttpInfo(userId, filter, filterEmbeddable, page, perPage, query, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute likes request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Video&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Video>> executeWithHttpInfo() throws ApiException {
            return likesWithHttpInfo(userId, filter, filterEmbeddable, page, perPage, query, sort);
        }

        /**
         * Execute likes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Video>> _callback) throws ApiException {
            return likesAsync(userId, filter, filterEmbeddable, page, perPage, query, sort, _callback);
        }
    }

    /**
     * Get all the videos that a user has liked
     * This method returns every video that the authenticated user has liked.
     * @param userId The ID of the user. (required)
     * @return LikesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public LikesRequestBuilder likes(double userId) throws IllegalArgumentException {
        
        return new LikesRequestBuilder(userId);
    }
    private okhttp3.Call unlikeVideoCall(Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/likes/{video_id}"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unlikeVideoValidateBeforeCall(Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling unlikeVideo(Async)");
        }

        return unlikeVideoCall(videoId, _callback);

    }


    private ApiResponse<Void> unlikeVideoWithHttpInfo(Double videoId) throws ApiException {
        okhttp3.Call localVarCall = unlikeVideoValidateBeforeCall(videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call unlikeVideoAsync(Double videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unlikeVideoValidateBeforeCall(videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UnlikeVideoRequestBuilder {
        private final Double videoId;

        private UnlikeVideoRequestBuilder(double videoId) {
            this.videoId = videoId;
        }

        /**
         * Build call for unlikeVideo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was unliked. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unlikeVideoCall(videoId, _callback);
        }


        /**
         * Execute unlikeVideo request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was unliked. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            unlikeVideoWithHttpInfo(videoId);
        }

        /**
         * Execute unlikeVideo request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was unliked. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return unlikeVideoWithHttpInfo(videoId);
        }

        /**
         * Execute unlikeVideo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was unliked. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return unlikeVideoAsync(videoId, _callback);
        }
    }

    /**
     * Cause a user to unlike a video
     * This method causes the authenticated user to unlike the specified video.
     * @param videoId The ID of the video. (required)
     * @return UnlikeVideoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was unliked. </td><td>  -  </td></tr>
     </table>
     */
    public UnlikeVideoRequestBuilder unlikeVideo(double videoId) throws IllegalArgumentException {
        
        return new UnlikeVideoRequestBuilder(videoId);
    }
    private okhttp3.Call videoCall(Double userId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/likes/{video_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call videoValidateBeforeCall(Double userId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling video(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling video(Async)");
        }

        return videoCall(userId, videoId, _callback);

    }


    private ApiResponse<Void> videoWithHttpInfo(Double userId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = videoValidateBeforeCall(userId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call videoAsync(Double userId, Double videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = videoValidateBeforeCall(userId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class VideoRequestBuilder {
        private final Double userId;
        private final Double videoId;

        private VideoRequestBuilder(double userId, double videoId) {
            this.userId = userId;
            this.videoId = videoId;
        }

        /**
         * Build call for video
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was liked. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return videoCall(userId, videoId, _callback);
        }


        /**
         * Execute video request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was liked. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            videoWithHttpInfo(userId, videoId);
        }

        /**
         * Execute video request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was liked. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return videoWithHttpInfo(userId, videoId);
        }

        /**
         * Execute video request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was liked. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return videoAsync(userId, videoId, _callback);
        }
    }

    /**
     * Cause the user to like a video
     * This method causes the authenticated user to like the specified video. The user can&#39;t like their own video.
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @return VideoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was liked. </td><td>  -  </td></tr>
     </table>
     */
    public VideoRequestBuilder video(double userId, double videoId) throws IllegalArgumentException {
        
        
        return new VideoRequestBuilder(userId, videoId);
    }
    private okhttp3.Call video_0Call(Double userId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/likes/{video_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call video_0ValidateBeforeCall(Double userId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling video_0(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling video_0(Async)");
        }

        return video_0Call(userId, videoId, _callback);

    }


    private ApiResponse<Void> video_0WithHttpInfo(Double userId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = video_0ValidateBeforeCall(userId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call video_0Async(Double userId, Double videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = video_0ValidateBeforeCall(userId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class Video0RequestBuilder {
        private final Double userId;
        private final Double videoId;

        private Video0RequestBuilder(double userId, double videoId) {
            this.userId = userId;
            this.videoId = videoId;
        }

        /**
         * Build call for video_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was unliked. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return video_0Call(userId, videoId, _callback);
        }


        /**
         * Execute video_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was unliked. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            video_0WithHttpInfo(userId, videoId);
        }

        /**
         * Execute video_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was unliked. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return video_0WithHttpInfo(userId, videoId);
        }

        /**
         * Execute video_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was unliked. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return video_0Async(userId, videoId, _callback);
        }
    }

    /**
     * Cause a user to unlike a video
     * This method causes the authenticated user to unlike the specified video.
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @return Video0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was unliked. </td><td>  -  </td></tr>
     </table>
     */
    public Video0RequestBuilder video_0(double userId, double videoId) throws IllegalArgumentException {
        
        
        return new Video0RequestBuilder(userId, videoId);
    }
}
