/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.VideoFileLog;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * VideoFile
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class VideoFile {
  /**
   * The codec of the video file.  Option descriptions:  * &#x60;AV1&#x60; - The codec is AV1.  * &#x60;H264&#x60; - The codec is H264.  * &#x60;HEVC&#x60; - The codec is HEVC. 
   */
  @JsonAdapter(CodecEnum.Adapter.class)
 public enum CodecEnum {
    AV1("AV1"),
    
    H264("H264"),
    
    HEVC("HEVC");

    private String value;

    CodecEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CodecEnum fromValue(String value) {
      for (CodecEnum b : CodecEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CodecEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CodecEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CodecEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CodecEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CODEC = "codec";
  @SerializedName(SERIALIZED_NAME_CODEC)
  private CodecEnum codec;

  public static final String SERIALIZED_NAME_CREATED_TIME = "created_time";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private String createdTime;

  public static final String SERIALIZED_NAME_EXPIRES = "expires";
  @SerializedName(SERIALIZED_NAME_EXPIRES)
  private String expires;

  public static final String SERIALIZED_NAME_FPS = "fps";
  @SerializedName(SERIALIZED_NAME_FPS)
  private Double fps;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Double height;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_LOG = "log";
  @SerializedName(SERIALIZED_NAME_LOG)
  private VideoFileLog log;

  public static final String SERIALIZED_NAME_MD5 = "md5";
  @SerializedName(SERIALIZED_NAME_MD5)
  private String md5;

  public static final String SERIALIZED_NAME_PUBLIC_NAME = "public_name";
  @SerializedName(SERIALIZED_NAME_PUBLIC_NAME)
  private String publicName;

  /**
   * The video quality as determined by height and width.  Option descriptions:  * &#x60;hd&#x60; - The video is in high definition.  * &#x60;hls&#x60; - The video is suitable for HTTP live streaming.  * &#x60;mobile&#x60; - The video is mobile quality.  * &#x60;sd&#x60; - The video is in standard definition.  * &#x60;source&#x60; - The video&#39;s source file.  * &#x60;uhd&#x60; - The video resolution is 2K or higher. 
   */
  @JsonAdapter(QualityEnum.Adapter.class)
 public enum QualityEnum {
    HD("hd"),
    
    HLS("hls"),
    
    MOBILE("mobile"),
    
    SD("sd"),
    
    SOURCE("source"),
    
    UHD("uhd");

    private String value;

    QualityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QualityEnum fromValue(String value) {
      for (QualityEnum b : QualityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<QualityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QualityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QualityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return QualityEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_QUALITY = "quality";
  @SerializedName(SERIALIZED_NAME_QUALITY)
  private QualityEnum quality;

  /**
   * The video rendition.  Option descriptions:  * &#x60;1080p&#x60; - The video has 1080p resolution.  * &#x60;240p&#x60; - The video has 240p resolution.  * &#x60;2k&#x60; - The video has 2K resolution.  * &#x60;360p&#x60; - The video has 360p resolution.  * &#x60;480p&#x60; - The video has 480p resolution.  * &#x60;4k&#x60; - The video has 4K resolution.  * &#x60;540p&#x60; - The video has 540p resolution.  * &#x60;5k&#x60; - The video has 5K resolution.  * &#x60;6k&#x60; - The video has 6K resolution.  * &#x60;720p&#x60; - The video has 720p resolution.  * &#x60;7k&#x60; - The video has 7K resolution.  * &#x60;8k&#x60; - The video has 8K resolution.  * &#x60;adaptive&#x60; - The video rendition is adaptive (for example, HLS or DASH).  * &#x60;source&#x60; - The video is the source file. 
   */
  @JsonAdapter(RenditionEnum.Adapter.class)
 public enum RenditionEnum {
    _1080P("1080p"),
    
    _240P("240p"),
    
    _2K("2k"),
    
    _360P("360p"),
    
    _480P("480p"),
    
    _4K("4k"),
    
    _540P("540p"),
    
    _5K("5k"),
    
    _6K("6k"),
    
    _720P("720p"),
    
    _7K("7k"),
    
    _8K("8k"),
    
    ADAPTIVE("adaptive"),
    
    SOURCE("source");

    private String value;

    RenditionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RenditionEnum fromValue(String value) {
      for (RenditionEnum b : RenditionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RenditionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RenditionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RenditionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RenditionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RENDITION = "rendition";
  @SerializedName(SERIALIZED_NAME_RENDITION)
  private RenditionEnum rendition;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Double size;

  public static final String SERIALIZED_NAME_SIZE_SHORT = "size_short";
  @SerializedName(SERIALIZED_NAME_SIZE_SHORT)
  private String sizeShort;

  public static final String SERIALIZED_NAME_SOURCE_LINK = "source_link";
  @SerializedName(SERIALIZED_NAME_SOURCE_LINK)
  private String sourceLink;

  /**
   * The type of video file.  Option descriptions:  * &#x60;source&#x60; - The video file is a source file.  * &#x60;video/mp4&#x60; - The video file is in MP4 format.  * &#x60;video/webm&#x60; - The video file is in WebM format.  * &#x60;vp6/x-video&#x60; - The video file is in VP6 format. 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    SOURCE("source"),
    
    VIDEO_MP4("video/mp4"),
    
    VIDEO_WEBM("video/webm"),
    
    VP6_X_VIDEO("vp6/x-video");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VIDEO_FILE_ID = "video_file_id";
  @SerializedName(SERIALIZED_NAME_VIDEO_FILE_ID)
  private String videoFileId;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Double width;

  public VideoFile() {
  }

  public VideoFile codec(CodecEnum codec) {
    
    
    
    
    this.codec = codec;
    return this;
  }

   /**
   * The codec of the video file.  Option descriptions:  * &#x60;AV1&#x60; - The codec is AV1.  * &#x60;H264&#x60; - The codec is H264.  * &#x60;HEVC&#x60; - The codec is HEVC. 
   * @return codec
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "AV1", required = true, value = "The codec of the video file.  Option descriptions:  * `AV1` - The codec is AV1.  * `H264` - The codec is H264.  * `HEVC` - The codec is HEVC. ")

  public CodecEnum getCodec() {
    return codec;
  }


  public void setCodec(CodecEnum codec) {
    
    
    
    this.codec = codec;
  }


  public VideoFile createdTime(String createdTime) {
    
    
    
    
    this.createdTime = createdTime;
    return this;
  }

   /**
   * The time in ISO 8601 format when the video file was created.
   * @return createdTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2017-05-16T15:41:36+00:00", required = true, value = "The time in ISO 8601 format when the video file was created.")

  public String getCreatedTime() {
    return createdTime;
  }


  public void setCreatedTime(String createdTime) {
    
    
    
    this.createdTime = createdTime;
  }


  public VideoFile expires(String expires) {
    
    
    
    
    this.expires = expires;
    return this;
  }

   /**
   * The time in ISO 8601 format when the video file expires.
   * @return expires
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-05-17T15:41:00+00:00", value = "The time in ISO 8601 format when the video file expires.")

  public String getExpires() {
    return expires;
  }


  public void setExpires(String expires) {
    
    
    
    this.expires = expires;
  }


  public VideoFile fps(Double fps) {
    
    
    
    
    this.fps = fps;
    return this;
  }

  public VideoFile fps(Integer fps) {
    
    
    
    
    this.fps = fps.doubleValue();
    return this;
  }

   /**
   * The frames per second of the video.
   * @return fps
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "30", required = true, value = "The frames per second of the video.")

  public Double getFps() {
    return fps;
  }


  public void setFps(Double fps) {
    
    
    
    this.fps = fps;
  }


  public VideoFile height(Double height) {
    
    
    
    
    this.height = height;
    return this;
  }

  public VideoFile height(Integer height) {
    
    
    
    
    this.height = height.doubleValue();
    return this;
  }

   /**
   * The height of the video in pixels.
   * @return height
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1080", required = true, value = "The height of the video in pixels.")

  public Double getHeight() {
    return height;
  }


  public void setHeight(Double height) {
    
    
    
    this.height = height;
  }


  public VideoFile link(String link) {
    
    
    
    
    this.link = link;
    return this;
  }

   /**
   * The direct link to the video file.
   * @return link
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://player.vimeo.com/play/965853365?s=258684937_1537148280_a749040a9205", required = true, value = "The direct link to the video file.")

  public String getLink() {
    return link;
  }


  public void setLink(String link) {
    
    
    
    this.link = link;
  }


  public VideoFile log(VideoFileLog log) {
    
    
    
    
    this.log = log;
    return this;
  }

   /**
   * Get log
   * @return log
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public VideoFileLog getLog() {
    return log;
  }


  public void setLog(VideoFileLog log) {
    
    
    
    this.log = log;
  }


  public VideoFile md5(String md5) {
    
    
    
    
    this.md5 = md5;
    return this;
  }

   /**
   * The MD5 hash of the video file.
   * @return md5
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1bc29b36f623ba82aaf6724fd3b16718", required = true, value = "The MD5 hash of the video file.")

  public String getMd5() {
    return md5;
  }


  public void setMd5(String md5) {
    
    
    
    this.md5 = md5;
  }


  public VideoFile publicName(String publicName) {
    
    
    
    
    this.publicName = publicName;
    return this;
  }

   /**
   * The public name of the video file.
   * @return publicName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "HD 720p", required = true, value = "The public name of the video file.")

  public String getPublicName() {
    return publicName;
  }


  public void setPublicName(String publicName) {
    
    
    
    this.publicName = publicName;
  }


  public VideoFile quality(QualityEnum quality) {
    
    
    
    
    this.quality = quality;
    return this;
  }

   /**
   * The video quality as determined by height and width.  Option descriptions:  * &#x60;hd&#x60; - The video is in high definition.  * &#x60;hls&#x60; - The video is suitable for HTTP live streaming.  * &#x60;mobile&#x60; - The video is mobile quality.  * &#x60;sd&#x60; - The video is in standard definition.  * &#x60;source&#x60; - The video&#39;s source file.  * &#x60;uhd&#x60; - The video resolution is 2K or higher. 
   * @return quality
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "HD", required = true, value = "The video quality as determined by height and width.  Option descriptions:  * `hd` - The video is in high definition.  * `hls` - The video is suitable for HTTP live streaming.  * `mobile` - The video is mobile quality.  * `sd` - The video is in standard definition.  * `source` - The video's source file.  * `uhd` - The video resolution is 2K or higher. ")

  public QualityEnum getQuality() {
    return quality;
  }


  public void setQuality(QualityEnum quality) {
    
    
    
    this.quality = quality;
  }


  public VideoFile rendition(RenditionEnum rendition) {
    
    
    
    
    this.rendition = rendition;
    return this;
  }

   /**
   * The video rendition.  Option descriptions:  * &#x60;1080p&#x60; - The video has 1080p resolution.  * &#x60;240p&#x60; - The video has 240p resolution.  * &#x60;2k&#x60; - The video has 2K resolution.  * &#x60;360p&#x60; - The video has 360p resolution.  * &#x60;480p&#x60; - The video has 480p resolution.  * &#x60;4k&#x60; - The video has 4K resolution.  * &#x60;540p&#x60; - The video has 540p resolution.  * &#x60;5k&#x60; - The video has 5K resolution.  * &#x60;6k&#x60; - The video has 6K resolution.  * &#x60;720p&#x60; - The video has 720p resolution.  * &#x60;7k&#x60; - The video has 7K resolution.  * &#x60;8k&#x60; - The video has 8K resolution.  * &#x60;adaptive&#x60; - The video rendition is adaptive (for example, HLS or DASH).  * &#x60;source&#x60; - The video is the source file. 
   * @return rendition
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "_1080P", required = true, value = "The video rendition.  Option descriptions:  * `1080p` - The video has 1080p resolution.  * `240p` - The video has 240p resolution.  * `2k` - The video has 2K resolution.  * `360p` - The video has 360p resolution.  * `480p` - The video has 480p resolution.  * `4k` - The video has 4K resolution.  * `540p` - The video has 540p resolution.  * `5k` - The video has 5K resolution.  * `6k` - The video has 6K resolution.  * `720p` - The video has 720p resolution.  * `7k` - The video has 7K resolution.  * `8k` - The video has 8K resolution.  * `adaptive` - The video rendition is adaptive (for example, HLS or DASH).  * `source` - The video is the source file. ")

  public RenditionEnum getRendition() {
    return rendition;
  }


  public void setRendition(RenditionEnum rendition) {
    
    
    
    this.rendition = rendition;
  }


  public VideoFile size(Double size) {
    
    
    
    
    this.size = size;
    return this;
  }

  public VideoFile size(Integer size) {
    
    
    
    
    this.size = size.doubleValue();
    return this;
  }

   /**
   * The approximate size in bytes of the video file.
   * @return size
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "9932503", required = true, value = "The approximate size in bytes of the video file.")

  public Double getSize() {
    return size;
  }


  public void setSize(Double size) {
    
    
    
    this.size = size;
  }


  public VideoFile sizeShort(String sizeShort) {
    
    
    
    
    this.sizeShort = sizeShort;
    return this;
  }

   /**
   * The converted size of the video file rounded to two decimal places.
   * @return sizeShort
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "17.89MB", required = true, value = "The converted size of the video file rounded to two decimal places.")

  public String getSizeShort() {
    return sizeShort;
  }


  public void setSizeShort(String sizeShort) {
    
    
    
    this.sizeShort = sizeShort;
  }


  public VideoFile sourceLink(String sourceLink) {
    
    
    
    
    this.sourceLink = sourceLink;
    return this;
  }

   /**
   * The source link of the video file.
   * @return sourceLink
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://player.vimeo.com/source/965853365?s=258684937", value = "The source link of the video file.")

  public String getSourceLink() {
    return sourceLink;
  }


  public void setSourceLink(String sourceLink) {
    
    
    
    this.sourceLink = sourceLink;
  }


  public VideoFile type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * The type of video file.  Option descriptions:  * &#x60;source&#x60; - The video file is a source file.  * &#x60;video/mp4&#x60; - The video file is in MP4 format.  * &#x60;video/webm&#x60; - The video file is in WebM format.  * &#x60;vp6/x-video&#x60; - The video file is in VP6 format. 
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SOURCE", required = true, value = "The type of video file.  Option descriptions:  * `source` - The video file is a source file.  * `video/mp4` - The video file is in MP4 format.  * `video/webm` - The video file is in WebM format.  * `vp6/x-video` - The video file is in VP6 format. ")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public VideoFile videoFileId(String videoFileId) {
    
    
    
    
    this.videoFileId = videoFileId;
    return this;
  }

   /**
   * The ID of the video file.
   * @return videoFileId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "b9ec9728-aa28-4fcd-9cc8-02944798c712", value = "The ID of the video file.")

  public String getVideoFileId() {
    return videoFileId;
  }


  public void setVideoFileId(String videoFileId) {
    
    
    
    this.videoFileId = videoFileId;
  }


  public VideoFile width(Double width) {
    
    
    
    
    this.width = width;
    return this;
  }

  public VideoFile width(Integer width) {
    
    
    
    
    this.width = width.doubleValue();
    return this;
  }

   /**
   * The width of the video in pixels.
   * @return width
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1920", required = true, value = "The width of the video in pixels.")

  public Double getWidth() {
    return width;
  }


  public void setWidth(Double width) {
    
    
    
    this.width = width;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the VideoFile instance itself
   */
  public VideoFile putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoFile videoFile = (VideoFile) o;
    return Objects.equals(this.codec, videoFile.codec) &&
        Objects.equals(this.createdTime, videoFile.createdTime) &&
        Objects.equals(this.expires, videoFile.expires) &&
        Objects.equals(this.fps, videoFile.fps) &&
        Objects.equals(this.height, videoFile.height) &&
        Objects.equals(this.link, videoFile.link) &&
        Objects.equals(this.log, videoFile.log) &&
        Objects.equals(this.md5, videoFile.md5) &&
        Objects.equals(this.publicName, videoFile.publicName) &&
        Objects.equals(this.quality, videoFile.quality) &&
        Objects.equals(this.rendition, videoFile.rendition) &&
        Objects.equals(this.size, videoFile.size) &&
        Objects.equals(this.sizeShort, videoFile.sizeShort) &&
        Objects.equals(this.sourceLink, videoFile.sourceLink) &&
        Objects.equals(this.type, videoFile.type) &&
        Objects.equals(this.videoFileId, videoFile.videoFileId) &&
        Objects.equals(this.width, videoFile.width)&&
        Objects.equals(this.additionalProperties, videoFile.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(codec, createdTime, expires, fps, height, link, log, md5, publicName, quality, rendition, size, sizeShort, sourceLink, type, videoFileId, width, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoFile {\n");
    sb.append("    codec: ").append(toIndentedString(codec)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("    fps: ").append(toIndentedString(fps)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    log: ").append(toIndentedString(log)).append("\n");
    sb.append("    md5: ").append(toIndentedString(md5)).append("\n");
    sb.append("    publicName: ").append(toIndentedString(publicName)).append("\n");
    sb.append("    quality: ").append(toIndentedString(quality)).append("\n");
    sb.append("    rendition: ").append(toIndentedString(rendition)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    sizeShort: ").append(toIndentedString(sizeShort)).append("\n");
    sb.append("    sourceLink: ").append(toIndentedString(sourceLink)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    videoFileId: ").append(toIndentedString(videoFileId)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("codec");
    openapiFields.add("created_time");
    openapiFields.add("expires");
    openapiFields.add("fps");
    openapiFields.add("height");
    openapiFields.add("link");
    openapiFields.add("log");
    openapiFields.add("md5");
    openapiFields.add("public_name");
    openapiFields.add("quality");
    openapiFields.add("rendition");
    openapiFields.add("size");
    openapiFields.add("size_short");
    openapiFields.add("source_link");
    openapiFields.add("type");
    openapiFields.add("video_file_id");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("codec");
    openapiRequiredFields.add("created_time");
    openapiRequiredFields.add("fps");
    openapiRequiredFields.add("height");
    openapiRequiredFields.add("link");
    openapiRequiredFields.add("md5");
    openapiRequiredFields.add("public_name");
    openapiRequiredFields.add("quality");
    openapiRequiredFields.add("rendition");
    openapiRequiredFields.add("size");
    openapiRequiredFields.add("size_short");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("width");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VideoFile
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!VideoFile.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoFile is not found in the empty JSON string", VideoFile.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VideoFile.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("codec").isJsonNull() && !jsonObj.get("codec").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `codec` to be a primitive type in the JSON string but got `%s`", jsonObj.get("codec").toString()));
      }
      if (!jsonObj.get("created_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_time").toString()));
      }
      if ((jsonObj.get("expires") != null && !jsonObj.get("expires").isJsonNull()) && !jsonObj.get("expires").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expires` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expires").toString()));
      }
      if (!jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      // validate the optional field `log`
      if (jsonObj.get("log") != null && !jsonObj.get("log").isJsonNull()) {
        VideoFileLog.validateJsonObject(jsonObj.getAsJsonObject("log"));
      }
      if (!jsonObj.get("md5").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `md5` to be a primitive type in the JSON string but got `%s`", jsonObj.get("md5").toString()));
      }
      if (!jsonObj.get("public_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public_name").toString()));
      }
      if (!jsonObj.get("quality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quality").toString()));
      }
      if (!jsonObj.get("rendition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rendition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rendition").toString()));
      }
      if (!jsonObj.get("size_short").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `size_short` to be a primitive type in the JSON string but got `%s`", jsonObj.get("size_short").toString()));
      }
      if (!jsonObj.get("source_link").isJsonNull() && (jsonObj.get("source_link") != null && !jsonObj.get("source_link").isJsonNull()) && !jsonObj.get("source_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_link").toString()));
      }
      if (!jsonObj.get("type").isJsonNull() && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("video_file_id") != null && !jsonObj.get("video_file_id").isJsonNull()) && !jsonObj.get("video_file_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `video_file_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("video_file_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoFile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoFile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoFile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoFile.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoFile>() {
           @Override
           public void write(JsonWriter out, VideoFile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoFile read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             VideoFile instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VideoFile given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VideoFile
  * @throws IOException if the JSON string is invalid with respect to VideoFile
  */
  public static VideoFile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoFile.class);
  }

 /**
  * Convert an instance of VideoFile to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

