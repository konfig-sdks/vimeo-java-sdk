/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.EditUserRequest;
import com.konfigthis.client.model.EditUserRequestVideos;
import com.konfigthis.client.model.User;
import com.konfigthis.client.model.UsersEssentialsEditVimeoAccountRequest;
import com.konfigthis.client.model.UsersEssentialsEditVimeoAccountRequestVideos;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersEssentialsApi
 */
@Disabled
public class UsersEssentialsApiTest {

    private static UsersEssentialsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new UsersEssentialsApi(apiClient);
    }

    /**
     * Edit the user
     *
     * This method edits the Vimeo account of the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void editVimeoAccountTest() throws ApiException {
        String bio = null;
        List<String> contentFilter = null;
        String gender = null;
        String link = null;
        String location = null;
        String name = null;
        String password = null;
        UsersEssentialsEditVimeoAccountRequestVideos videos = null;
        User response = api.editVimeoAccount()
                .bio(bio)
                .contentFilter(contentFilter)
                .gender(gender)
                .link(link)
                .location(location)
                .name(name)
                .password(password)
                .videos(videos)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the user
     *
     * This method returns the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        User response = api.getUser()
                .execute();
        // TODO: test validations
    }

    /**
     * Get the user
     *
     * This method returns the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userTest() throws ApiException {
        Double userId = null;
        User response = api.user(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Edit the user
     *
     * This method edits the Vimeo account of the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void user_0Test() throws ApiException {
        Double userId = null;
        String bio = null;
        List<String> contentFilter = null;
        String gender = null;
        String link = null;
        String location = null;
        String name = null;
        String password = null;
        EditUserRequestVideos videos = null;
        User response = api.user_0(userId)
                .bio(bio)
                .contentFilter(contentFilter)
                .gender(gender)
                .link(link)
                .location(location)
                .name(name)
                .password(password)
                .videos(videos)
                .execute();
        // TODO: test validations
    }

}
