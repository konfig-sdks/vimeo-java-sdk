/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Album;
import com.konfigthis.client.model.VideosShowcasesAddToMultipleShowcasesRequest;
import com.konfigthis.client.model.VideosShowcasesAddToMultipleShowcasesRequestAddInner;
import com.konfigthis.client.model.VideosShowcasesAddToMultipleShowcasesRequestRemoveInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class VideosShowcasesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VideosShowcasesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public VideosShowcasesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addToMultipleShowcasesCall(Double videoId, VideosShowcasesAddToMultipleShowcasesRequest videosShowcasesAddToMultipleShowcasesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = videosShowcasesAddToMultipleShowcasesRequest;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/albums"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.album+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.album+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addToMultipleShowcasesValidateBeforeCall(Double videoId, VideosShowcasesAddToMultipleShowcasesRequest videosShowcasesAddToMultipleShowcasesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addToMultipleShowcases(Async)");
        }

        return addToMultipleShowcasesCall(videoId, videosShowcasesAddToMultipleShowcasesRequest, _callback);

    }


    private ApiResponse<List<Album>> addToMultipleShowcasesWithHttpInfo(Double videoId, VideosShowcasesAddToMultipleShowcasesRequest videosShowcasesAddToMultipleShowcasesRequest) throws ApiException {
        okhttp3.Call localVarCall = addToMultipleShowcasesValidateBeforeCall(videoId, videosShowcasesAddToMultipleShowcasesRequest, null);
        Type localVarReturnType = new TypeToken<List<Album>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addToMultipleShowcasesAsync(Double videoId, VideosShowcasesAddToMultipleShowcasesRequest videosShowcasesAddToMultipleShowcasesRequest, final ApiCallback<List<Album>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addToMultipleShowcasesValidateBeforeCall(videoId, videosShowcasesAddToMultipleShowcasesRequest, _callback);
        Type localVarReturnType = new TypeToken<List<Album>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddToMultipleShowcasesRequestBuilder {
        private final Double videoId;
        private List<VideosShowcasesAddToMultipleShowcasesRequestAddInner> add;
        private List<VideosShowcasesAddToMultipleShowcasesRequestRemoveInner> remove;

        private AddToMultipleShowcasesRequestBuilder(double videoId) {
            this.videoId = videoId;
        }

        /**
         * Set add
         * @param add The array of showcases to add the video to. Specify these with a batch request; see our [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests) guide for more information. (optional)
         * @return AddToMultipleShowcasesRequestBuilder
         */
        public AddToMultipleShowcasesRequestBuilder add(List<VideosShowcasesAddToMultipleShowcasesRequestAddInner> add) {
            this.add = add;
            return this;
        }
        
        /**
         * Set remove
         * @param remove The array of showcases to remove the video from. Specify these with a batch request; see our [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests) guide for more information. (optional)
         * @return AddToMultipleShowcasesRequestBuilder
         */
        public AddToMultipleShowcasesRequestBuilder remove(List<VideosShowcasesAddToMultipleShowcasesRequestRemoveInner> remove) {
            this.remove = remove;
            return this;
        }
        
        /**
         * Build call for addToMultipleShowcases
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were added or removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VideosShowcasesAddToMultipleShowcasesRequest videosShowcasesAddToMultipleShowcasesRequest = buildBodyParams();
            return addToMultipleShowcasesCall(videoId, videosShowcasesAddToMultipleShowcasesRequest, _callback);
        }

        private VideosShowcasesAddToMultipleShowcasesRequest buildBodyParams() {
            VideosShowcasesAddToMultipleShowcasesRequest videosShowcasesAddToMultipleShowcasesRequest = new VideosShowcasesAddToMultipleShowcasesRequest();
            videosShowcasesAddToMultipleShowcasesRequest.add(this.add);
            videosShowcasesAddToMultipleShowcasesRequest.remove(this.remove);
            return videosShowcasesAddToMultipleShowcasesRequest;
        }

        /**
         * Execute addToMultipleShowcases request
         * @return List&lt;Album&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were added or removed. </td><td>  -  </td></tr>
         </table>
         */
        public List<Album> execute() throws ApiException {
            VideosShowcasesAddToMultipleShowcasesRequest videosShowcasesAddToMultipleShowcasesRequest = buildBodyParams();
            ApiResponse<List<Album>> localVarResp = addToMultipleShowcasesWithHttpInfo(videoId, videosShowcasesAddToMultipleShowcasesRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addToMultipleShowcases request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Album&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were added or removed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Album>> executeWithHttpInfo() throws ApiException {
            VideosShowcasesAddToMultipleShowcasesRequest videosShowcasesAddToMultipleShowcasesRequest = buildBodyParams();
            return addToMultipleShowcasesWithHttpInfo(videoId, videosShowcasesAddToMultipleShowcasesRequest);
        }

        /**
         * Execute addToMultipleShowcases request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were added or removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Album>> _callback) throws ApiException {
            VideosShowcasesAddToMultipleShowcasesRequest videosShowcasesAddToMultipleShowcasesRequest = buildBodyParams();
            return addToMultipleShowcasesAsync(videoId, videosShowcasesAddToMultipleShowcasesRequest, _callback);
        }
    }

    /**
     * Add or remove a video from a list of showcases
     * This method adds or removes the specified video to or from multiple showcases.
     * @param videoId The ID of the video. (required)
     * @return AddToMultipleShowcasesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were added or removed. </td><td>  -  </td></tr>
     </table>
     */
    public AddToMultipleShowcasesRequestBuilder addToMultipleShowcases(double videoId) throws IllegalArgumentException {
        
        return new AddToMultipleShowcasesRequestBuilder(videoId);
    }
    private okhttp3.Call getAllContShowcasesCall(Double videoId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/albums"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.album+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllContShowcasesValidateBeforeCall(Double videoId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getAllContShowcases(Async)");
        }

        return getAllContShowcasesCall(videoId, page, perPage, _callback);

    }


    private ApiResponse<List<Album>> getAllContShowcasesWithHttpInfo(Double videoId, Double page, Double perPage) throws ApiException {
        okhttp3.Call localVarCall = getAllContShowcasesValidateBeforeCall(videoId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Album>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllContShowcasesAsync(Double videoId, Double page, Double perPage, final ApiCallback<List<Album>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllContShowcasesValidateBeforeCall(videoId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Album>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllContShowcasesRequestBuilder {
        private final Double videoId;
        private Double page;
        private Double perPage;

        private GetAllContShowcasesRequestBuilder(double videoId) {
            this.videoId = videoId;
        }

        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetAllContShowcasesRequestBuilder
         */
        public GetAllContShowcasesRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetAllContShowcasesRequestBuilder
         */
        public GetAllContShowcasesRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getAllContShowcases
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcases were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllContShowcasesCall(videoId, page, perPage, _callback);
        }


        /**
         * Execute getAllContShowcases request
         * @return List&lt;Album&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcases were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Album> execute() throws ApiException {
            ApiResponse<List<Album>> localVarResp = getAllContShowcasesWithHttpInfo(videoId, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllContShowcases request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Album&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcases were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Album>> executeWithHttpInfo() throws ApiException {
            return getAllContShowcasesWithHttpInfo(videoId, page, perPage);
        }

        /**
         * Execute getAllContShowcases request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The showcases were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Album>> _callback) throws ApiException {
            return getAllContShowcasesAsync(videoId, page, perPage, _callback);
        }
    }

    /**
     * Get all the showcases that contain a video
     * This method returns all the showcases that contain the specified video.
     * @param videoId The ID of the video. (required)
     * @return GetAllContShowcasesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The showcases were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllContShowcasesRequestBuilder getAllContShowcases(double videoId) throws IllegalArgumentException {
        
        return new GetAllContShowcasesRequestBuilder(videoId);
    }
}
