/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * LiveEventDestination
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LiveEventDestination {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "display_name";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Double id;

  public static final String SERIALIZED_NAME_IS_ENABLED = "is_enabled";
  @SerializedName(SERIALIZED_NAME_IS_ENABLED)
  private Boolean isEnabled;

  public static final String SERIALIZED_NAME_LIVE_CLIP_ID = "live_clip_id";
  @SerializedName(SERIALIZED_NAME_LIVE_CLIP_ID)
  private Double liveClipId;

  /**
   * The privacy setting of the destination.  Option descriptions:  * &#x60;CONNECTIONS&#x60; - The privacy setting is &#x60;CONNECTIONS&#x60; for LinkedIn.  * &#x60;PUBLIC&#x60; - The privacy setting is &#x60;PUBLIC&#x60; for LinkedIn.  * &#x60;all_friends&#x60; - The privacy setting is &#x60;all_friends&#x60; for Facebook.  * &#x60;everyone&#x60; - The privacy setting is &#x60;everyone&#x60; for Facebook.  * &#x60;private&#x60; - The privacy setting is &#x60;private&#x60; for YouTube.  * &#x60;public&#x60; - The privacy setting is &#x60;public&#x60; for YouTube.  * &#x60;self&#x60; - The privacy setting is &#x60;self&#x60; for Facebook.  * &#x60;unlisted&#x60; - The privacy setting is &#x60;unlisted&#x60; for YouTube. 
   */
  @JsonAdapter(PrivacyEnum.Adapter.class)
 public enum PrivacyEnum {
    CONNECTIONS("CONNECTIONS"),
    
    PUBLIC("PUBLIC"),
    
    ALL_FRIENDS("all_friends"),
    
    EVERYONE("everyone"),
    
    PRIVATE("private"),
    
    PUBLIC("public"),
    
    SELF("self"),
    
    UNLISTED("unlisted");

    private String value;

    PrivacyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PrivacyEnum fromValue(String value) {
      for (PrivacyEnum b : PrivacyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PrivacyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrivacyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrivacyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PrivacyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PRIVACY = "privacy";
  @SerializedName(SERIALIZED_NAME_PRIVACY)
  private PrivacyEnum privacy;

  public static final String SERIALIZED_NAME_PROVIDER_BROADCAST_ID = "provider_broadcast_id";
  @SerializedName(SERIALIZED_NAME_PROVIDER_BROADCAST_ID)
  private String providerBroadcastId;

  public static final String SERIALIZED_NAME_PROVIDER_DESTINATION_ID = "provider_destination_id";
  @SerializedName(SERIALIZED_NAME_PROVIDER_DESTINATION_ID)
  private String providerDestinationId;

  public static final String SERIALIZED_NAME_PROVIDER_USER_ID = "provider_user_id";
  @SerializedName(SERIALIZED_NAME_PROVIDER_USER_ID)
  private String providerUserId;

  public static final String SERIALIZED_NAME_PROVIDER_VIDEO_ID = "provider_video_id";
  @SerializedName(SERIALIZED_NAME_PROVIDER_VIDEO_ID)
  private String providerVideoId;

  public static final String SERIALIZED_NAME_SCHEDULED_AT = "scheduled_at";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_AT)
  private Double scheduledAt;

  /**
   * The name of the destination service.  Option descriptions:  * &#x60;custom_rtmp&#x60; - The destination service is custom RTMP.  * &#x60;facebook&#x60; - The destination service is Facebook Live.  * &#x60;linkedin&#x60; - The destination service is LinkedIn Live.  * &#x60;youtube&#x60; - The destination service is YouTube Live. 
   */
  @JsonAdapter(ServiceNameEnum.Adapter.class)
 public enum ServiceNameEnum {
    CUSTOM_RTMP("custom_rtmp"),
    
    FACEBOOK("facebook"),
    
    LINKEDIN("linkedin"),
    
    YOUTUBE("youtube");

    private String value;

    ServiceNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServiceNameEnum fromValue(String value) {
      for (ServiceNameEnum b : ServiceNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ServiceNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServiceNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServiceNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ServiceNameEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SERVICE_NAME = "service_name";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
  private ServiceNameEnum serviceName;

  /**
   * The status of the destination.  Option descriptions:  * &#x60;0&#x60; - The status is OK.  * &#x60;1&#x60; - An error occurred. Check the &#x60;state_message&#x60; field for details. 
   */
  @JsonAdapter(StateEnum.Adapter.class)
 public enum StateEnum {
    _0("0"),
    
    _1("1");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATE_MESSAGE = "state_message";
  @SerializedName(SERIALIZED_NAME_STATE_MESSAGE)
  private String stateMessage;

  public static final String SERIALIZED_NAME_STREAM_KEY = "stream_key";
  @SerializedName(SERIALIZED_NAME_STREAM_KEY)
  private String streamKey;

  public static final String SERIALIZED_NAME_STREAM_URL = "stream_url";
  @SerializedName(SERIALIZED_NAME_STREAM_URL)
  private String streamUrl;

  /**
   * The type of the simulcast destination.  Option descriptions:  * &#x60;channel&#x60; - The destination is a YouTube channel.  * &#x60;custom&#x60; - The destination is custom.  * &#x60;organization&#x60; - The destination is a LinkedIn organization.  * &#x60;page&#x60; - The destination is a Facebook page.  * &#x60;profile&#x60; - The destination is a Facebook or LinkedIn profile. 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    CHANNEL("channel"),
    
    CUSTOM("custom"),
    
    ORGANIZATION("organization"),
    
    PAGE("page"),
    
    PROFILE("profile");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Double userId;

  public LiveEventDestination() {
  }

  public LiveEventDestination displayName(String displayName) {
    
    
    
    
    this.displayName = displayName;
    return this;
  }

   /**
   * The name of the destination target, whether a page, profile name, or the like.
   * @return displayName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Test page", required = true, value = "The name of the destination target, whether a page, profile name, or the like.")

  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    
    
    
    this.displayName = displayName;
  }


  public LiveEventDestination id(Double id) {
    
    
    
    
    this.id = id;
    return this;
  }

  public LiveEventDestination id(Integer id) {
    
    
    
    
    this.id = id.doubleValue();
    return this;
  }

   /**
   * The ID of the destination.
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1234", required = true, value = "The ID of the destination.")

  public Double getId() {
    return id;
  }


  public void setId(Double id) {
    
    
    
    this.id = id;
  }


  public LiveEventDestination isEnabled(Boolean isEnabled) {
    
    
    
    
    this.isEnabled = isEnabled;
    return this;
  }

   /**
   * Whether the destination is enabled.
   * @return isEnabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the destination is enabled.")

  public Boolean getIsEnabled() {
    return isEnabled;
  }


  public void setIsEnabled(Boolean isEnabled) {
    
    
    
    this.isEnabled = isEnabled;
  }


  public LiveEventDestination liveClipId(Double liveClipId) {
    
    
    
    
    this.liveClipId = liveClipId;
    return this;
  }

  public LiveEventDestination liveClipId(Integer liveClipId) {
    
    
    
    
    this.liveClipId = liveClipId.doubleValue();
    return this;
  }

   /**
   * The ID of the live video.
   * @return liveClipId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "123456", required = true, value = "The ID of the live video.")

  public Double getLiveClipId() {
    return liveClipId;
  }


  public void setLiveClipId(Double liveClipId) {
    
    
    
    this.liveClipId = liveClipId;
  }


  public LiveEventDestination privacy(PrivacyEnum privacy) {
    
    
    
    
    this.privacy = privacy;
    return this;
  }

   /**
   * The privacy setting of the destination.  Option descriptions:  * &#x60;CONNECTIONS&#x60; - The privacy setting is &#x60;CONNECTIONS&#x60; for LinkedIn.  * &#x60;PUBLIC&#x60; - The privacy setting is &#x60;PUBLIC&#x60; for LinkedIn.  * &#x60;all_friends&#x60; - The privacy setting is &#x60;all_friends&#x60; for Facebook.  * &#x60;everyone&#x60; - The privacy setting is &#x60;everyone&#x60; for Facebook.  * &#x60;private&#x60; - The privacy setting is &#x60;private&#x60; for YouTube.  * &#x60;public&#x60; - The privacy setting is &#x60;public&#x60; for YouTube.  * &#x60;self&#x60; - The privacy setting is &#x60;self&#x60; for Facebook.  * &#x60;unlisted&#x60; - The privacy setting is &#x60;unlisted&#x60; for YouTube. 
   * @return privacy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "PUBLIC", required = true, value = "The privacy setting of the destination.  Option descriptions:  * `CONNECTIONS` - The privacy setting is `CONNECTIONS` for LinkedIn.  * `PUBLIC` - The privacy setting is `PUBLIC` for LinkedIn.  * `all_friends` - The privacy setting is `all_friends` for Facebook.  * `everyone` - The privacy setting is `everyone` for Facebook.  * `private` - The privacy setting is `private` for YouTube.  * `public` - The privacy setting is `public` for YouTube.  * `self` - The privacy setting is `self` for Facebook.  * `unlisted` - The privacy setting is `unlisted` for YouTube. ")

  public PrivacyEnum getPrivacy() {
    return privacy;
  }


  public void setPrivacy(PrivacyEnum privacy) {
    
    
    
    this.privacy = privacy;
  }


  public LiveEventDestination providerBroadcastId(String providerBroadcastId) {
    
    
    
    
    this.providerBroadcastId = providerBroadcastId;
    return this;
  }

   /**
   * The destination ID of the destination service.
   * @return providerBroadcastId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "9fe254b7d55e7542da9fbd46a5deb947", required = true, value = "The destination ID of the destination service.")

  public String getProviderBroadcastId() {
    return providerBroadcastId;
  }


  public void setProviderBroadcastId(String providerBroadcastId) {
    
    
    
    this.providerBroadcastId = providerBroadcastId;
  }


  public LiveEventDestination providerDestinationId(String providerDestinationId) {
    
    
    
    
    this.providerDestinationId = providerDestinationId;
    return this;
  }

   /**
   * The broadcast ID of the destination service.
   * @return providerDestinationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "fm4m34gm5oirbkjfkfnkkdhgfi45v3df34oz", required = true, value = "The broadcast ID of the destination service.")

  public String getProviderDestinationId() {
    return providerDestinationId;
  }


  public void setProviderDestinationId(String providerDestinationId) {
    
    
    
    this.providerDestinationId = providerDestinationId;
  }


  public LiveEventDestination providerUserId(String providerUserId) {
    
    
    
    
    this.providerUserId = providerUserId;
    return this;
  }

   /**
   * The user ID of the destination service.
   * @return providerUserId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "a6378de4995a", required = true, value = "The user ID of the destination service.")

  public String getProviderUserId() {
    return providerUserId;
  }


  public void setProviderUserId(String providerUserId) {
    
    
    
    this.providerUserId = providerUserId;
  }


  public LiveEventDestination providerVideoId(String providerVideoId) {
    
    
    
    
    this.providerVideoId = providerVideoId;
    return this;
  }

   /**
   * The ID of the scheduled live video.
   * @return providerVideoId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "6817807391346708000", required = true, value = "The ID of the scheduled live video.")

  public String getProviderVideoId() {
    return providerVideoId;
  }


  public void setProviderVideoId(String providerVideoId) {
    
    
    
    this.providerVideoId = providerVideoId;
  }


  public LiveEventDestination scheduledAt(Double scheduledAt) {
    
    
    
    
    this.scheduledAt = scheduledAt;
    return this;
  }

  public LiveEventDestination scheduledAt(Integer scheduledAt) {
    
    
    
    
    this.scheduledAt = scheduledAt.doubleValue();
    return this;
  }

   /**
   * The time in Unix timestamp format when live streaming is scheduled to start.
   * @return scheduledAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1625754461", required = true, value = "The time in Unix timestamp format when live streaming is scheduled to start.")

  public Double getScheduledAt() {
    return scheduledAt;
  }


  public void setScheduledAt(Double scheduledAt) {
    
    
    
    this.scheduledAt = scheduledAt;
  }


  public LiveEventDestination serviceName(ServiceNameEnum serviceName) {
    
    
    
    
    this.serviceName = serviceName;
    return this;
  }

   /**
   * The name of the destination service.  Option descriptions:  * &#x60;custom_rtmp&#x60; - The destination service is custom RTMP.  * &#x60;facebook&#x60; - The destination service is Facebook Live.  * &#x60;linkedin&#x60; - The destination service is LinkedIn Live.  * &#x60;youtube&#x60; - The destination service is YouTube Live. 
   * @return serviceName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "FACEBOOK", required = true, value = "The name of the destination service.  Option descriptions:  * `custom_rtmp` - The destination service is custom RTMP.  * `facebook` - The destination service is Facebook Live.  * `linkedin` - The destination service is LinkedIn Live.  * `youtube` - The destination service is YouTube Live. ")

  public ServiceNameEnum getServiceName() {
    return serviceName;
  }


  public void setServiceName(ServiceNameEnum serviceName) {
    
    
    
    this.serviceName = serviceName;
  }


  public LiveEventDestination state(StateEnum state) {
    
    
    
    
    this.state = state;
    return this;
  }

   /**
   * The status of the destination.  Option descriptions:  * &#x60;0&#x60; - The status is OK.  * &#x60;1&#x60; - An error occurred. Check the &#x60;state_message&#x60; field for details. 
   * @return state
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The status of the destination.  Option descriptions:  * `0` - The status is OK.  * `1` - An error occurred. Check the `state_message` field for details. ")

  public StateEnum getState() {
    return state;
  }


  public void setState(StateEnum state) {
    
    
    
    this.state = state;
  }


  public LiveEventDestination stateMessage(String stateMessage) {
    
    
    
    
    this.stateMessage = stateMessage;
    return this;
  }

   /**
   * The message that describes the state of the destination.
   * @return stateMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "\"Couldn't connect to rtmp://1.2.3.4/live\"", required = true, value = "The message that describes the state of the destination.")

  public String getStateMessage() {
    return stateMessage;
  }


  public void setStateMessage(String stateMessage) {
    
    
    
    this.stateMessage = stateMessage;
  }


  public LiveEventDestination streamKey(String streamKey) {
    
    
    
    
    this.streamKey = streamKey;
    return this;
  }

   /**
   * The stream key for the simulcast destination.
   * @return streamKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "b624fa1e-23d8-4d27-90f9-fe7d0ad700ed", required = true, value = "The stream key for the simulcast destination.")

  public String getStreamKey() {
    return streamKey;
  }


  public void setStreamKey(String streamKey) {
    
    
    
    this.streamKey = streamKey;
  }


  public LiveEventDestination streamUrl(String streamUrl) {
    
    
    
    
    this.streamUrl = streamUrl;
    return this;
  }

   /**
   * The RTMP URL to stream to.
   * @return streamUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "rtmp://cooldomain.com/live", required = true, value = "The RTMP URL to stream to.")

  public String getStreamUrl() {
    return streamUrl;
  }


  public void setStreamUrl(String streamUrl) {
    
    
    
    this.streamUrl = streamUrl;
  }


  public LiveEventDestination type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * The type of the simulcast destination.  Option descriptions:  * &#x60;channel&#x60; - The destination is a YouTube channel.  * &#x60;custom&#x60; - The destination is custom.  * &#x60;organization&#x60; - The destination is a LinkedIn organization.  * &#x60;page&#x60; - The destination is a Facebook page.  * &#x60;profile&#x60; - The destination is a Facebook or LinkedIn profile. 
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "CHANNEL", required = true, value = "The type of the simulcast destination.  Option descriptions:  * `channel` - The destination is a YouTube channel.  * `custom` - The destination is custom.  * `organization` - The destination is a LinkedIn organization.  * `page` - The destination is a Facebook page.  * `profile` - The destination is a Facebook or LinkedIn profile. ")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public LiveEventDestination userId(Double userId) {
    
    
    
    
    this.userId = userId;
    return this;
  }

  public LiveEventDestination userId(Integer userId) {
    
    
    
    
    this.userId = userId.doubleValue();
    return this;
  }

   /**
   * The ID of the destination&#39;s owner.
   * @return userId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "123456", required = true, value = "The ID of the destination's owner.")

  public Double getUserId() {
    return userId;
  }


  public void setUserId(Double userId) {
    
    
    
    this.userId = userId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LiveEventDestination instance itself
   */
  public LiveEventDestination putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveEventDestination liveEventDestination = (LiveEventDestination) o;
    return Objects.equals(this.displayName, liveEventDestination.displayName) &&
        Objects.equals(this.id, liveEventDestination.id) &&
        Objects.equals(this.isEnabled, liveEventDestination.isEnabled) &&
        Objects.equals(this.liveClipId, liveEventDestination.liveClipId) &&
        Objects.equals(this.privacy, liveEventDestination.privacy) &&
        Objects.equals(this.providerBroadcastId, liveEventDestination.providerBroadcastId) &&
        Objects.equals(this.providerDestinationId, liveEventDestination.providerDestinationId) &&
        Objects.equals(this.providerUserId, liveEventDestination.providerUserId) &&
        Objects.equals(this.providerVideoId, liveEventDestination.providerVideoId) &&
        Objects.equals(this.scheduledAt, liveEventDestination.scheduledAt) &&
        Objects.equals(this.serviceName, liveEventDestination.serviceName) &&
        Objects.equals(this.state, liveEventDestination.state) &&
        Objects.equals(this.stateMessage, liveEventDestination.stateMessage) &&
        Objects.equals(this.streamKey, liveEventDestination.streamKey) &&
        Objects.equals(this.streamUrl, liveEventDestination.streamUrl) &&
        Objects.equals(this.type, liveEventDestination.type) &&
        Objects.equals(this.userId, liveEventDestination.userId)&&
        Objects.equals(this.additionalProperties, liveEventDestination.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, id, isEnabled, liveClipId, privacy, providerBroadcastId, providerDestinationId, providerUserId, providerVideoId, scheduledAt, serviceName, state, stateMessage, streamKey, streamUrl, type, userId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveEventDestination {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("    liveClipId: ").append(toIndentedString(liveClipId)).append("\n");
    sb.append("    privacy: ").append(toIndentedString(privacy)).append("\n");
    sb.append("    providerBroadcastId: ").append(toIndentedString(providerBroadcastId)).append("\n");
    sb.append("    providerDestinationId: ").append(toIndentedString(providerDestinationId)).append("\n");
    sb.append("    providerUserId: ").append(toIndentedString(providerUserId)).append("\n");
    sb.append("    providerVideoId: ").append(toIndentedString(providerVideoId)).append("\n");
    sb.append("    scheduledAt: ").append(toIndentedString(scheduledAt)).append("\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateMessage: ").append(toIndentedString(stateMessage)).append("\n");
    sb.append("    streamKey: ").append(toIndentedString(streamKey)).append("\n");
    sb.append("    streamUrl: ").append(toIndentedString(streamUrl)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("display_name");
    openapiFields.add("id");
    openapiFields.add("is_enabled");
    openapiFields.add("live_clip_id");
    openapiFields.add("privacy");
    openapiFields.add("provider_broadcast_id");
    openapiFields.add("provider_destination_id");
    openapiFields.add("provider_user_id");
    openapiFields.add("provider_video_id");
    openapiFields.add("scheduled_at");
    openapiFields.add("service_name");
    openapiFields.add("state");
    openapiFields.add("state_message");
    openapiFields.add("stream_key");
    openapiFields.add("stream_url");
    openapiFields.add("type");
    openapiFields.add("user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("display_name");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("is_enabled");
    openapiRequiredFields.add("live_clip_id");
    openapiRequiredFields.add("privacy");
    openapiRequiredFields.add("provider_broadcast_id");
    openapiRequiredFields.add("provider_destination_id");
    openapiRequiredFields.add("provider_user_id");
    openapiRequiredFields.add("provider_video_id");
    openapiRequiredFields.add("scheduled_at");
    openapiRequiredFields.add("service_name");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("state_message");
    openapiRequiredFields.add("stream_key");
    openapiRequiredFields.add("stream_url");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("user_id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LiveEventDestination
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LiveEventDestination.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiveEventDestination is not found in the empty JSON string", LiveEventDestination.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LiveEventDestination.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_name").toString()));
      }
      if (!jsonObj.get("privacy").isJsonNull() && !jsonObj.get("privacy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privacy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privacy").toString()));
      }
      if (!jsonObj.get("provider_broadcast_id").isJsonNull() && !jsonObj.get("provider_broadcast_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider_broadcast_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider_broadcast_id").toString()));
      }
      if (!jsonObj.get("provider_destination_id").isJsonNull() && !jsonObj.get("provider_destination_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider_destination_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider_destination_id").toString()));
      }
      if (!jsonObj.get("provider_user_id").isJsonNull() && !jsonObj.get("provider_user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider_user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider_user_id").toString()));
      }
      if (!jsonObj.get("provider_video_id").isJsonNull() && !jsonObj.get("provider_video_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider_video_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider_video_id").toString()));
      }
      if (!jsonObj.get("service_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_name").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if (!jsonObj.get("state_message").isJsonNull() && !jsonObj.get("state_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state_message").toString()));
      }
      if (!jsonObj.get("stream_key").isJsonNull() && !jsonObj.get("stream_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stream_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stream_key").toString()));
      }
      if (!jsonObj.get("stream_url").isJsonNull() && !jsonObj.get("stream_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stream_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stream_url").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiveEventDestination.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiveEventDestination' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiveEventDestination> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiveEventDestination.class));

       return (TypeAdapter<T>) new TypeAdapter<LiveEventDestination>() {
           @Override
           public void write(JsonWriter out, LiveEventDestination value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LiveEventDestination read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LiveEventDestination instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LiveEventDestination given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LiveEventDestination
  * @throws IOException if the JSON string is invalid with respect to LiveEventDestination
  */
  public static LiveEventDestination fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiveEventDestination.class);
  }

 /**
  * Convert an instance of LiveEventDestination to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

