/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateWebinarRequest;
import com.konfigthis.client.model.CreateWebinarRequestEmailSettings;
import com.konfigthis.client.model.CreateWebinarRequestPrivacy;
import com.konfigthis.client.model.CreateWebinarRequestSchedule;
import com.konfigthis.client.model.UpdateWebinarRequest;
import com.konfigthis.client.model.UpdateWebinarRequestEmailSettings;
import com.konfigthis.client.model.UpdateWebinarRequestPrivacy;
import com.konfigthis.client.model.UpdateWebinarRequestSchedule;
import com.konfigthis.client.model.Webinar;
import com.konfigthis.client.model.WebinarEssentialsCreateWebinarRequest;
import com.konfigthis.client.model.WebinarEssentialsCreateWebinarRequestEmailSettings;
import com.konfigthis.client.model.WebinarEssentialsCreateWebinarRequestPrivacy;
import com.konfigthis.client.model.WebinarEssentialsCreateWebinarRequestSchedule;
import com.konfigthis.client.model.WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest;
import com.konfigthis.client.model.WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequestEmailSettings;
import com.konfigthis.client.model.WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequestPrivacy;
import com.konfigthis.client.model.WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequestSchedule;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WebinarEssentialsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebinarEssentialsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WebinarEssentialsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createWebinarCall(WebinarEssentialsCreateWebinarRequest webinarEssentialsCreateWebinarRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webinarEssentialsCreateWebinarRequest;

        // create path and map variables
        String localVarPath = "/me/webinars";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.webinars+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.webinars+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWebinarValidateBeforeCall(WebinarEssentialsCreateWebinarRequest webinarEssentialsCreateWebinarRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarEssentialsCreateWebinarRequest' is set
        if (webinarEssentialsCreateWebinarRequest == null) {
            throw new ApiException("Missing the required parameter 'webinarEssentialsCreateWebinarRequest' when calling createWebinar(Async)");
        }

        return createWebinarCall(webinarEssentialsCreateWebinarRequest, _callback);

    }


    private ApiResponse<Webinar> createWebinarWithHttpInfo(WebinarEssentialsCreateWebinarRequest webinarEssentialsCreateWebinarRequest) throws ApiException {
        okhttp3.Call localVarCall = createWebinarValidateBeforeCall(webinarEssentialsCreateWebinarRequest, null);
        Type localVarReturnType = new TypeToken<Webinar>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createWebinarAsync(WebinarEssentialsCreateWebinarRequest webinarEssentialsCreateWebinarRequest, final ApiCallback<Webinar> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWebinarValidateBeforeCall(webinarEssentialsCreateWebinarRequest, _callback);
        Type localVarReturnType = new TypeToken<Webinar>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateWebinarRequestBuilder {
        private final String title;
        private String description;
        private WebinarEssentialsCreateWebinarRequestEmailSettings emailSettings;
        private Double folderUri;
        private String password;
        private WebinarEssentialsCreateWebinarRequestPrivacy privacy;
        private WebinarEssentialsCreateWebinarRequestSchedule schedule;
        private String timeZone;

        private CreateWebinarRequestBuilder(String title) {
            this.title = title;
        }

        /**
         * Set description
         * @param description The description of the webinar. (optional)
         * @return CreateWebinarRequestBuilder
         */
        public CreateWebinarRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set emailSettings
         * @param emailSettings  (optional)
         * @return CreateWebinarRequestBuilder
         */
        public CreateWebinarRequestBuilder emailSettings(WebinarEssentialsCreateWebinarRequestEmailSettings emailSettings) {
            this.emailSettings = emailSettings;
            return this;
        }
        
        /**
         * Set folderUri
         * @param folderUri The URI of the webinar&#39;s folder. (optional)
         * @return CreateWebinarRequestBuilder
         */
        public CreateWebinarRequestBuilder folderUri(Double folderUri) {
            this.folderUri = folderUri;
            return this;
        }
        
        /**
         * Set password
         * @param password The password when **privacy.view** is &#x60;password&#x60;. Anyone with the password can view the videos generated by streaming to the webinar event. (optional)
         * @return CreateWebinarRequestBuilder
         */
        public CreateWebinarRequestBuilder password(String password) {
            this.password = password;
            return this;
        }
        
        /**
         * Set privacy
         * @param privacy  (optional)
         * @return CreateWebinarRequestBuilder
         */
        public CreateWebinarRequestBuilder privacy(WebinarEssentialsCreateWebinarRequestPrivacy privacy) {
            this.privacy = privacy;
            return this;
        }
        
        /**
         * Set schedule
         * @param schedule  (optional)
         * @return CreateWebinarRequestBuilder
         */
        public CreateWebinarRequestBuilder schedule(WebinarEssentialsCreateWebinarRequestSchedule schedule) {
            this.schedule = schedule;
            return this;
        }
        
        /**
         * Set timeZone
         * @param timeZone The time zone used in resolving the timestamps that are included in the automatically generated video titles for the webinar. (optional)
         * @return CreateWebinarRequestBuilder
         */
        public CreateWebinarRequestBuilder timeZone(String timeZone) {
            this.timeZone = timeZone;
            return this;
        }
        
        /**
         * Build call for createWebinar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebinarEssentialsCreateWebinarRequest webinarEssentialsCreateWebinarRequest = buildBodyParams();
            return createWebinarCall(webinarEssentialsCreateWebinarRequest, _callback);
        }

        private WebinarEssentialsCreateWebinarRequest buildBodyParams() {
            WebinarEssentialsCreateWebinarRequest webinarEssentialsCreateWebinarRequest = new WebinarEssentialsCreateWebinarRequest();
            webinarEssentialsCreateWebinarRequest.title(this.title);
            webinarEssentialsCreateWebinarRequest.description(this.description);
            webinarEssentialsCreateWebinarRequest.emailSettings(this.emailSettings);
            webinarEssentialsCreateWebinarRequest.folderUri(this.folderUri);
            webinarEssentialsCreateWebinarRequest.password(this.password);
            webinarEssentialsCreateWebinarRequest.privacy(this.privacy);
            webinarEssentialsCreateWebinarRequest.schedule(this.schedule);
            webinarEssentialsCreateWebinarRequest.timeZone(this.timeZone);
            return webinarEssentialsCreateWebinarRequest;
        }

        /**
         * Execute createWebinar request
         * @return Webinar
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar was created. </td><td>  -  </td></tr>
         </table>
         */
        public Webinar execute() throws ApiException {
            WebinarEssentialsCreateWebinarRequest webinarEssentialsCreateWebinarRequest = buildBodyParams();
            ApiResponse<Webinar> localVarResp = createWebinarWithHttpInfo(webinarEssentialsCreateWebinarRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createWebinar request with HTTP info returned
         * @return ApiResponse&lt;Webinar&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar was created. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Webinar> executeWithHttpInfo() throws ApiException {
            WebinarEssentialsCreateWebinarRequest webinarEssentialsCreateWebinarRequest = buildBodyParams();
            return createWebinarWithHttpInfo(webinarEssentialsCreateWebinarRequest);
        }

        /**
         * Execute createWebinar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Webinar> _callback) throws ApiException {
            WebinarEssentialsCreateWebinarRequest webinarEssentialsCreateWebinarRequest = buildBodyParams();
            return createWebinarAsync(webinarEssentialsCreateWebinarRequest, _callback);
        }
    }

    /**
     * Create a webinar
     * This method creates a new webinar for the authenticated user.
     * @param webinarEssentialsCreateWebinarRequest  (required)
     * @return CreateWebinarRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The webinar was created. </td><td>  -  </td></tr>
     </table>
     */
    public CreateWebinarRequestBuilder createWebinar(String title) throws IllegalArgumentException {
        if (title == null) throw new IllegalArgumentException("\"title\" is required but got null");
            

        return new CreateWebinarRequestBuilder(title);
    }
    private okhttp3.Call getSpecificWebinarCall(String webinarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/webinars/{webinar_id}"
            .replace("{" + "webinar_id" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.webinars+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificWebinarValidateBeforeCall(String webinarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling getSpecificWebinar(Async)");
        }

        return getSpecificWebinarCall(webinarId, _callback);

    }


    private ApiResponse<Webinar> getSpecificWebinarWithHttpInfo(String webinarId) throws ApiException {
        okhttp3.Call localVarCall = getSpecificWebinarValidateBeforeCall(webinarId, null);
        Type localVarReturnType = new TypeToken<Webinar>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificWebinarAsync(String webinarId, final ApiCallback<Webinar> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificWebinarValidateBeforeCall(webinarId, _callback);
        Type localVarReturnType = new TypeToken<Webinar>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificWebinarRequestBuilder {
        private final String webinarId;

        private GetSpecificWebinarRequestBuilder(String webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Build call for getSpecificWebinar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar was returned. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificWebinarCall(webinarId, _callback);
        }


        /**
         * Execute getSpecificWebinar request
         * @return Webinar
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar was returned. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public Webinar execute() throws ApiException {
            ApiResponse<Webinar> localVarResp = getSpecificWebinarWithHttpInfo(webinarId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificWebinar request with HTTP info returned
         * @return ApiResponse&lt;Webinar&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar was returned. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<Webinar> executeWithHttpInfo() throws ApiException {
            return getSpecificWebinarWithHttpInfo(webinarId);
        }

        /**
         * Execute getSpecificWebinar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar was returned. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<Webinar> _callback) throws ApiException {
            return getSpecificWebinarAsync(webinarId, _callback);
        }
    }

    /**
     * Get a specific webinar
     * This method returns a single webinar belonging to the authenticated user.
     * @param webinarId The ID of the webinar. (required)
     * @return GetSpecificWebinarRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The webinar was returned. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetSpecificWebinarRequestBuilder getSpecificWebinar(String webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
            

        return new GetSpecificWebinarRequestBuilder(webinarId);
    }
    private okhttp3.Call getSpecificWebinar_0Call(String webinarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webinars/{webinar_id}"
            .replace("{" + "webinar_id" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.webinars+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificWebinar_0ValidateBeforeCall(String webinarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling getSpecificWebinar_0(Async)");
        }

        return getSpecificWebinar_0Call(webinarId, _callback);

    }


    private ApiResponse<Webinar> getSpecificWebinar_0WithHttpInfo(String webinarId) throws ApiException {
        okhttp3.Call localVarCall = getSpecificWebinar_0ValidateBeforeCall(webinarId, null);
        Type localVarReturnType = new TypeToken<Webinar>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificWebinar_0Async(String webinarId, final ApiCallback<Webinar> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificWebinar_0ValidateBeforeCall(webinarId, _callback);
        Type localVarReturnType = new TypeToken<Webinar>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificWebinar0RequestBuilder {
        private final String webinarId;

        private GetSpecificWebinar0RequestBuilder(String webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Build call for getSpecificWebinar_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar was returned. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificWebinar_0Call(webinarId, _callback);
        }


        /**
         * Execute getSpecificWebinar_0 request
         * @return Webinar
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar was returned. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public Webinar execute() throws ApiException {
            ApiResponse<Webinar> localVarResp = getSpecificWebinar_0WithHttpInfo(webinarId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificWebinar_0 request with HTTP info returned
         * @return ApiResponse&lt;Webinar&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar was returned. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<Webinar> executeWithHttpInfo() throws ApiException {
            return getSpecificWebinar_0WithHttpInfo(webinarId);
        }

        /**
         * Execute getSpecificWebinar_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar was returned. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<Webinar> _callback) throws ApiException {
            return getSpecificWebinar_0Async(webinarId, _callback);
        }
    }

    /**
     * Get a specific webinar
     * This method returns a single webinar belonging to the authenticated user.
     * @param webinarId The ID of the webinar. (required)
     * @return GetSpecificWebinar0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The webinar was returned. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetSpecificWebinar0RequestBuilder getSpecificWebinar_0(String webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
            

        return new GetSpecificWebinar0RequestBuilder(webinarId);
    }
    private okhttp3.Call updateWebinarBelongingToAuthenticatedUserCall(String webinarId, WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest webinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest;

        // create path and map variables
        String localVarPath = "/me/webinars/{webinar_id}"
            .replace("{" + "webinar_id" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.webinars+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.webinars+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWebinarBelongingToAuthenticatedUserValidateBeforeCall(String webinarId, WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest webinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling updateWebinarBelongingToAuthenticatedUser(Async)");
        }

        return updateWebinarBelongingToAuthenticatedUserCall(webinarId, webinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest, _callback);

    }


    private ApiResponse<Webinar> updateWebinarBelongingToAuthenticatedUserWithHttpInfo(String webinarId, WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest webinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest) throws ApiException {
        okhttp3.Call localVarCall = updateWebinarBelongingToAuthenticatedUserValidateBeforeCall(webinarId, webinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest, null);
        Type localVarReturnType = new TypeToken<Webinar>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateWebinarBelongingToAuthenticatedUserAsync(String webinarId, WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest webinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest, final ApiCallback<Webinar> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWebinarBelongingToAuthenticatedUserValidateBeforeCall(webinarId, webinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest, _callback);
        Type localVarReturnType = new TypeToken<Webinar>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateWebinarBelongingToAuthenticatedUserRequestBuilder {
        private final String webinarId;
        private String title;
        private String description;
        private WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequestEmailSettings emailSettings;
        private String password;
        private WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequestPrivacy privacy;
        private WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequestSchedule schedule;
        private String status;
        private String timeZone;

        private UpdateWebinarBelongingToAuthenticatedUserRequestBuilder(String webinarId) {
            this.webinarId = webinarId;
        }

        /**
         * Set title
         * @param title The title of the webinar. (optional)
         * @return UpdateWebinarBelongingToAuthenticatedUserRequestBuilder
         */
        public UpdateWebinarBelongingToAuthenticatedUserRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set description
         * @param description The description of the webinar. (optional)
         * @return UpdateWebinarBelongingToAuthenticatedUserRequestBuilder
         */
        public UpdateWebinarBelongingToAuthenticatedUserRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set emailSettings
         * @param emailSettings  (optional)
         * @return UpdateWebinarBelongingToAuthenticatedUserRequestBuilder
         */
        public UpdateWebinarBelongingToAuthenticatedUserRequestBuilder emailSettings(WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequestEmailSettings emailSettings) {
            this.emailSettings = emailSettings;
            return this;
        }
        
        /**
         * Set password
         * @param password The password when **privacy.view** is &#x60;password&#x60;. Anyone with the password can view the videos generated by streaming to the webinar event. (optional)
         * @return UpdateWebinarBelongingToAuthenticatedUserRequestBuilder
         */
        public UpdateWebinarBelongingToAuthenticatedUserRequestBuilder password(String password) {
            this.password = password;
            return this;
        }
        
        /**
         * Set privacy
         * @param privacy  (optional)
         * @return UpdateWebinarBelongingToAuthenticatedUserRequestBuilder
         */
        public UpdateWebinarBelongingToAuthenticatedUserRequestBuilder privacy(WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequestPrivacy privacy) {
            this.privacy = privacy;
            return this;
        }
        
        /**
         * Set schedule
         * @param schedule  (optional)
         * @return UpdateWebinarBelongingToAuthenticatedUserRequestBuilder
         */
        public UpdateWebinarBelongingToAuthenticatedUserRequestBuilder schedule(WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequestSchedule schedule) {
            this.schedule = schedule;
            return this;
        }
        
        /**
         * Set status
         * @param status The status of the webinar.  Option descriptions:  * &#x60;ended&#x60; - The webinar has ended.  * &#x60;started&#x60; - The webinar has started.  (optional)
         * @return UpdateWebinarBelongingToAuthenticatedUserRequestBuilder
         */
        public UpdateWebinarBelongingToAuthenticatedUserRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set timeZone
         * @param timeZone The time zone used in resolving the timestamps that are included in the automatically generated video titles for the webinar. (optional)
         * @return UpdateWebinarBelongingToAuthenticatedUserRequestBuilder
         */
        public UpdateWebinarBelongingToAuthenticatedUserRequestBuilder timeZone(String timeZone) {
            this.timeZone = timeZone;
            return this;
        }
        
        /**
         * Build call for updateWebinarBelongingToAuthenticatedUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar was updated. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest webinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest = buildBodyParams();
            return updateWebinarBelongingToAuthenticatedUserCall(webinarId, webinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest, _callback);
        }

        private WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest buildBodyParams() {
            WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest webinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest = new WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest();
            webinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest.title(this.title);
            webinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest.description(this.description);
            webinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest.emailSettings(this.emailSettings);
            webinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest.password(this.password);
            webinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest.privacy(this.privacy);
            webinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest.schedule(this.schedule);
            if (this.status != null)
            webinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest.status(WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest.StatusEnum.fromValue(this.status));
            webinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest.timeZone(this.timeZone);
            return webinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest;
        }

        /**
         * Execute updateWebinarBelongingToAuthenticatedUser request
         * @return Webinar
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar was updated. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public Webinar execute() throws ApiException {
            WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest webinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest = buildBodyParams();
            ApiResponse<Webinar> localVarResp = updateWebinarBelongingToAuthenticatedUserWithHttpInfo(webinarId, webinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateWebinarBelongingToAuthenticatedUser request with HTTP info returned
         * @return ApiResponse&lt;Webinar&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar was updated. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<Webinar> executeWithHttpInfo() throws ApiException {
            WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest webinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest = buildBodyParams();
            return updateWebinarBelongingToAuthenticatedUserWithHttpInfo(webinarId, webinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest);
        }

        /**
         * Execute updateWebinarBelongingToAuthenticatedUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar was updated. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<Webinar> _callback) throws ApiException {
            WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest webinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest = buildBodyParams();
            return updateWebinarBelongingToAuthenticatedUserAsync(webinarId, webinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest, _callback);
        }
    }

    /**
     * Update a webinar
     * This method updates a webinar belonging to the authenticated user.
     * @param webinarId The ID of the webinar. (required)
     * @return UpdateWebinarBelongingToAuthenticatedUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The webinar was updated. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public UpdateWebinarBelongingToAuthenticatedUserRequestBuilder updateWebinarBelongingToAuthenticatedUser(String webinarId) throws IllegalArgumentException {
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
            

        return new UpdateWebinarBelongingToAuthenticatedUserRequestBuilder(webinarId);
    }
    private okhttp3.Call webinarCall(Double userId, CreateWebinarRequest createWebinarRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createWebinarRequest;

        // create path and map variables
        String localVarPath = "/users/{user_id}/webinars"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.webinars+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.webinars+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webinarValidateBeforeCall(Double userId, CreateWebinarRequest createWebinarRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling webinar(Async)");
        }

        // verify the required parameter 'createWebinarRequest' is set
        if (createWebinarRequest == null) {
            throw new ApiException("Missing the required parameter 'createWebinarRequest' when calling webinar(Async)");
        }

        return webinarCall(userId, createWebinarRequest, _callback);

    }


    private ApiResponse<Webinar> webinarWithHttpInfo(Double userId, CreateWebinarRequest createWebinarRequest) throws ApiException {
        okhttp3.Call localVarCall = webinarValidateBeforeCall(userId, createWebinarRequest, null);
        Type localVarReturnType = new TypeToken<Webinar>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call webinarAsync(Double userId, CreateWebinarRequest createWebinarRequest, final ApiCallback<Webinar> _callback) throws ApiException {

        okhttp3.Call localVarCall = webinarValidateBeforeCall(userId, createWebinarRequest, _callback);
        Type localVarReturnType = new TypeToken<Webinar>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class WebinarRequestBuilder {
        private final String title;
        private final Double userId;
        private String description;
        private CreateWebinarRequestEmailSettings emailSettings;
        private Double folderUri;
        private String password;
        private CreateWebinarRequestPrivacy privacy;
        private CreateWebinarRequestSchedule schedule;
        private String timeZone;

        private WebinarRequestBuilder(String title, double userId) {
            this.title = title;
            this.userId = userId;
        }

        /**
         * Set description
         * @param description The description of the webinar. (optional)
         * @return WebinarRequestBuilder
         */
        public WebinarRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set emailSettings
         * @param emailSettings  (optional)
         * @return WebinarRequestBuilder
         */
        public WebinarRequestBuilder emailSettings(CreateWebinarRequestEmailSettings emailSettings) {
            this.emailSettings = emailSettings;
            return this;
        }
        
        /**
         * Set folderUri
         * @param folderUri The URI of the webinar&#39;s folder. (optional)
         * @return WebinarRequestBuilder
         */
        public WebinarRequestBuilder folderUri(Double folderUri) {
            this.folderUri = folderUri;
            return this;
        }
        
        /**
         * Set password
         * @param password The password when **privacy.view** is &#x60;password&#x60;. Anyone with the password can view the videos generated by streaming to the webinar event. (optional)
         * @return WebinarRequestBuilder
         */
        public WebinarRequestBuilder password(String password) {
            this.password = password;
            return this;
        }
        
        /**
         * Set privacy
         * @param privacy  (optional)
         * @return WebinarRequestBuilder
         */
        public WebinarRequestBuilder privacy(CreateWebinarRequestPrivacy privacy) {
            this.privacy = privacy;
            return this;
        }
        
        /**
         * Set schedule
         * @param schedule  (optional)
         * @return WebinarRequestBuilder
         */
        public WebinarRequestBuilder schedule(CreateWebinarRequestSchedule schedule) {
            this.schedule = schedule;
            return this;
        }
        
        /**
         * Set timeZone
         * @param timeZone The time zone used in resolving the timestamps that are included in the automatically generated video titles for the webinar. (optional)
         * @return WebinarRequestBuilder
         */
        public WebinarRequestBuilder timeZone(String timeZone) {
            this.timeZone = timeZone;
            return this;
        }
        
        /**
         * Build call for webinar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateWebinarRequest createWebinarRequest = buildBodyParams();
            return webinarCall(userId, createWebinarRequest, _callback);
        }

        private CreateWebinarRequest buildBodyParams() {
            CreateWebinarRequest createWebinarRequest = new CreateWebinarRequest();
            createWebinarRequest.title(this.title);
            createWebinarRequest.description(this.description);
            createWebinarRequest.emailSettings(this.emailSettings);
            createWebinarRequest.folderUri(this.folderUri);
            createWebinarRequest.password(this.password);
            createWebinarRequest.privacy(this.privacy);
            createWebinarRequest.schedule(this.schedule);
            createWebinarRequest.timeZone(this.timeZone);
            return createWebinarRequest;
        }

        /**
         * Execute webinar request
         * @return Webinar
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar was created. </td><td>  -  </td></tr>
         </table>
         */
        public Webinar execute() throws ApiException {
            CreateWebinarRequest createWebinarRequest = buildBodyParams();
            ApiResponse<Webinar> localVarResp = webinarWithHttpInfo(userId, createWebinarRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute webinar request with HTTP info returned
         * @return ApiResponse&lt;Webinar&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar was created. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Webinar> executeWithHttpInfo() throws ApiException {
            CreateWebinarRequest createWebinarRequest = buildBodyParams();
            return webinarWithHttpInfo(userId, createWebinarRequest);
        }

        /**
         * Execute webinar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Webinar> _callback) throws ApiException {
            CreateWebinarRequest createWebinarRequest = buildBodyParams();
            return webinarAsync(userId, createWebinarRequest, _callback);
        }
    }

    /**
     * Create a webinar
     * This method creates a new webinar for the authenticated user.
     * @param userId The ID of the user. (required)
     * @param createWebinarRequest  (required)
     * @return WebinarRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The webinar was created. </td><td>  -  </td></tr>
     </table>
     */
    public WebinarRequestBuilder webinar(String title, double userId) throws IllegalArgumentException {
        if (title == null) throw new IllegalArgumentException("\"title\" is required but got null");
            

        
        return new WebinarRequestBuilder(title, userId);
    }
    private okhttp3.Call webinar_0Call(Double userId, String webinarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/webinars/{webinar_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "webinar_id" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.webinars+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call webinar_0ValidateBeforeCall(Double userId, String webinarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling webinar_0(Async)");
        }

        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling webinar_0(Async)");
        }

        return webinar_0Call(userId, webinarId, _callback);

    }


    private ApiResponse<Webinar> webinar_0WithHttpInfo(Double userId, String webinarId) throws ApiException {
        okhttp3.Call localVarCall = webinar_0ValidateBeforeCall(userId, webinarId, null);
        Type localVarReturnType = new TypeToken<Webinar>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call webinar_0Async(Double userId, String webinarId, final ApiCallback<Webinar> _callback) throws ApiException {

        okhttp3.Call localVarCall = webinar_0ValidateBeforeCall(userId, webinarId, _callback);
        Type localVarReturnType = new TypeToken<Webinar>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Webinar0RequestBuilder {
        private final Double userId;
        private final String webinarId;

        private Webinar0RequestBuilder(double userId, String webinarId) {
            this.userId = userId;
            this.webinarId = webinarId;
        }

        /**
         * Build call for webinar_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar was returned. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return webinar_0Call(userId, webinarId, _callback);
        }


        /**
         * Execute webinar_0 request
         * @return Webinar
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar was returned. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public Webinar execute() throws ApiException {
            ApiResponse<Webinar> localVarResp = webinar_0WithHttpInfo(userId, webinarId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute webinar_0 request with HTTP info returned
         * @return ApiResponse&lt;Webinar&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar was returned. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<Webinar> executeWithHttpInfo() throws ApiException {
            return webinar_0WithHttpInfo(userId, webinarId);
        }

        /**
         * Execute webinar_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar was returned. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<Webinar> _callback) throws ApiException {
            return webinar_0Async(userId, webinarId, _callback);
        }
    }

    /**
     * Get a specific webinar
     * This method returns a single webinar belonging to the authenticated user.
     * @param userId The ID of the user. (required)
     * @param webinarId The ID of the webinar. (required)
     * @return Webinar0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The webinar was returned. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Webinar0RequestBuilder webinar_0(double userId, String webinarId) throws IllegalArgumentException {
        
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
            

        return new Webinar0RequestBuilder(userId, webinarId);
    }
    private okhttp3.Call webinar_1Call(Double userId, String webinarId, UpdateWebinarRequest updateWebinarRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateWebinarRequest;

        // create path and map variables
        String localVarPath = "/users/{user_id}/webinars/{webinar_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "webinar_id" + "}", localVarApiClient.escapeString(webinarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.webinars+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.webinars+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call webinar_1ValidateBeforeCall(Double userId, String webinarId, UpdateWebinarRequest updateWebinarRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling webinar_1(Async)");
        }

        // verify the required parameter 'webinarId' is set
        if (webinarId == null) {
            throw new ApiException("Missing the required parameter 'webinarId' when calling webinar_1(Async)");
        }

        return webinar_1Call(userId, webinarId, updateWebinarRequest, _callback);

    }


    private ApiResponse<Webinar> webinar_1WithHttpInfo(Double userId, String webinarId, UpdateWebinarRequest updateWebinarRequest) throws ApiException {
        okhttp3.Call localVarCall = webinar_1ValidateBeforeCall(userId, webinarId, updateWebinarRequest, null);
        Type localVarReturnType = new TypeToken<Webinar>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call webinar_1Async(Double userId, String webinarId, UpdateWebinarRequest updateWebinarRequest, final ApiCallback<Webinar> _callback) throws ApiException {

        okhttp3.Call localVarCall = webinar_1ValidateBeforeCall(userId, webinarId, updateWebinarRequest, _callback);
        Type localVarReturnType = new TypeToken<Webinar>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Webinar1RequestBuilder {
        private final Double userId;
        private final String webinarId;
        private String title;
        private String description;
        private UpdateWebinarRequestEmailSettings emailSettings;
        private String password;
        private UpdateWebinarRequestPrivacy privacy;
        private UpdateWebinarRequestSchedule schedule;
        private String status;
        private String timeZone;

        private Webinar1RequestBuilder(double userId, String webinarId) {
            this.userId = userId;
            this.webinarId = webinarId;
        }

        /**
         * Set title
         * @param title The title of the webinar. (optional)
         * @return Webinar1RequestBuilder
         */
        public Webinar1RequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set description
         * @param description The description of the webinar. (optional)
         * @return Webinar1RequestBuilder
         */
        public Webinar1RequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set emailSettings
         * @param emailSettings  (optional)
         * @return Webinar1RequestBuilder
         */
        public Webinar1RequestBuilder emailSettings(UpdateWebinarRequestEmailSettings emailSettings) {
            this.emailSettings = emailSettings;
            return this;
        }
        
        /**
         * Set password
         * @param password The password when **privacy.view** is &#x60;password&#x60;. Anyone with the password can view the videos generated by streaming to the webinar event. (optional)
         * @return Webinar1RequestBuilder
         */
        public Webinar1RequestBuilder password(String password) {
            this.password = password;
            return this;
        }
        
        /**
         * Set privacy
         * @param privacy  (optional)
         * @return Webinar1RequestBuilder
         */
        public Webinar1RequestBuilder privacy(UpdateWebinarRequestPrivacy privacy) {
            this.privacy = privacy;
            return this;
        }
        
        /**
         * Set schedule
         * @param schedule  (optional)
         * @return Webinar1RequestBuilder
         */
        public Webinar1RequestBuilder schedule(UpdateWebinarRequestSchedule schedule) {
            this.schedule = schedule;
            return this;
        }
        
        /**
         * Set status
         * @param status The status of the webinar.  Option descriptions:  * &#x60;ended&#x60; - The webinar has ended.  * &#x60;started&#x60; - The webinar has started.  (optional)
         * @return Webinar1RequestBuilder
         */
        public Webinar1RequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set timeZone
         * @param timeZone The time zone used in resolving the timestamps that are included in the automatically generated video titles for the webinar. (optional)
         * @return Webinar1RequestBuilder
         */
        public Webinar1RequestBuilder timeZone(String timeZone) {
            this.timeZone = timeZone;
            return this;
        }
        
        /**
         * Build call for webinar_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar was updated. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateWebinarRequest updateWebinarRequest = buildBodyParams();
            return webinar_1Call(userId, webinarId, updateWebinarRequest, _callback);
        }

        private UpdateWebinarRequest buildBodyParams() {
            UpdateWebinarRequest updateWebinarRequest = new UpdateWebinarRequest();
            updateWebinarRequest.title(this.title);
            updateWebinarRequest.description(this.description);
            updateWebinarRequest.emailSettings(this.emailSettings);
            updateWebinarRequest.password(this.password);
            updateWebinarRequest.privacy(this.privacy);
            updateWebinarRequest.schedule(this.schedule);
            if (this.status != null)
            updateWebinarRequest.status(UpdateWebinarRequest.StatusEnum.fromValue(this.status));
            updateWebinarRequest.timeZone(this.timeZone);
            return updateWebinarRequest;
        }

        /**
         * Execute webinar_1 request
         * @return Webinar
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar was updated. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public Webinar execute() throws ApiException {
            UpdateWebinarRequest updateWebinarRequest = buildBodyParams();
            ApiResponse<Webinar> localVarResp = webinar_1WithHttpInfo(userId, webinarId, updateWebinarRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute webinar_1 request with HTTP info returned
         * @return ApiResponse&lt;Webinar&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar was updated. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<Webinar> executeWithHttpInfo() throws ApiException {
            UpdateWebinarRequest updateWebinarRequest = buildBodyParams();
            return webinar_1WithHttpInfo(userId, webinarId, updateWebinarRequest);
        }

        /**
         * Execute webinar_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The webinar was updated. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<Webinar> _callback) throws ApiException {
            UpdateWebinarRequest updateWebinarRequest = buildBodyParams();
            return webinar_1Async(userId, webinarId, updateWebinarRequest, _callback);
        }
    }

    /**
     * Update a webinar
     * This method updates a webinar belonging to the authenticated user.
     * @param userId The ID of the user. (required)
     * @param webinarId The ID of the webinar. (required)
     * @return Webinar1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The webinar was updated. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Webinar1RequestBuilder webinar_1(double userId, String webinarId) throws IllegalArgumentException {
        
        if (webinarId == null) throw new IllegalArgumentException("\"webinarId\" is required but got null");
            

        return new Webinar1RequestBuilder(userId, webinarId);
    }
}
