/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.LiveEventVideosAddMultipleRequest;
import com.konfigthis.client.model.LiveEventVideosAddMultipleRequestVideosInner;
import com.konfigthis.client.model.LiveEventVideosAddMultipleVideosRequest;
import com.konfigthis.client.model.LiveEventVideosAddMultipleVideosRequestVideosInner;
import com.konfigthis.client.model.LiveEventVideosRemoveMultipleRequest;
import com.konfigthis.client.model.LiveEventVideosRemoveMultipleRequest1;
import com.konfigthis.client.model.LiveEventVideosRemoveMultipleRequest1VideosInner;
import com.konfigthis.client.model.LiveEventVideosRemoveMultipleRequestVideosInner;
import com.konfigthis.client.model.LiveEventVideosRemoveMultipleVideosRequest;
import com.konfigthis.client.model.LiveEventVideosRemoveMultipleVideosRequestVideosInner;
import com.konfigthis.client.model.LiveEventVideosUploadMultipleRequest;
import com.konfigthis.client.model.LiveEventVideosUploadMultipleRequestVideosInner;
import com.konfigthis.client.model.Video;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LiveEventVideosApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LiveEventVideosApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LiveEventVideosApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addMultipleCall(Double liveEventId, LiveEventVideosAddMultipleRequest liveEventVideosAddMultipleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = liveEventVideosAddMultipleRequest;

        // create path and map variables
        String localVarPath = "/live_events/{live_event_id}/videos"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMultipleValidateBeforeCall(Double liveEventId, LiveEventVideosAddMultipleRequest liveEventVideosAddMultipleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling addMultiple(Async)");
        }

        return addMultipleCall(liveEventId, liveEventVideosAddMultipleRequest, _callback);

    }


    private ApiResponse<Void> addMultipleWithHttpInfo(Double liveEventId, LiveEventVideosAddMultipleRequest liveEventVideosAddMultipleRequest) throws ApiException {
        okhttp3.Call localVarCall = addMultipleValidateBeforeCall(liveEventId, liveEventVideosAddMultipleRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addMultipleAsync(Double liveEventId, LiveEventVideosAddMultipleRequest liveEventVideosAddMultipleRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMultipleValidateBeforeCall(liveEventId, liveEventVideosAddMultipleRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddMultipleRequestBuilder {
        private final Double liveEventId;
        private List<LiveEventVideosAddMultipleRequestVideosInner> videos;

        private AddMultipleRequestBuilder(double liveEventId) {
            this.liveEventId = liveEventId;
        }

        /**
         * Set videos
         * @param videos An array of video objects. (optional)
         * @return AddMultipleRequestBuilder
         */
        public AddMultipleRequestBuilder videos(List<LiveEventVideosAddMultipleRequestVideosInner> videos) {
            this.videos = videos;
            return this;
        }
        
        /**
         * Build call for addMultiple
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LiveEventVideosAddMultipleRequest liveEventVideosAddMultipleRequest = buildBodyParams();
            return addMultipleCall(liveEventId, liveEventVideosAddMultipleRequest, _callback);
        }

        private LiveEventVideosAddMultipleRequest buildBodyParams() {
            LiveEventVideosAddMultipleRequest liveEventVideosAddMultipleRequest = new LiveEventVideosAddMultipleRequest();
            liveEventVideosAddMultipleRequest.videos(this.videos);
            return liveEventVideosAddMultipleRequest;
        }

        /**
         * Execute addMultiple request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were added. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            LiveEventVideosAddMultipleRequest liveEventVideosAddMultipleRequest = buildBodyParams();
            addMultipleWithHttpInfo(liveEventId, liveEventVideosAddMultipleRequest);
        }

        /**
         * Execute addMultiple request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            LiveEventVideosAddMultipleRequest liveEventVideosAddMultipleRequest = buildBodyParams();
            return addMultipleWithHttpInfo(liveEventId, liveEventVideosAddMultipleRequest);
        }

        /**
         * Execute addMultiple request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            LiveEventVideosAddMultipleRequest liveEventVideosAddMultipleRequest = buildBodyParams();
            return addMultipleAsync(liveEventId, liveEventVideosAddMultipleRequest, _callback);
        }
    }

    /**
     * Add a list of videos to a live event
     * This method adds multiple videos to the specified event.
     * @param liveEventId The ID of the event. (required)
     * @return AddMultipleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The videos were added. </td><td>  -  </td></tr>
     </table>
     */
    public AddMultipleRequestBuilder addMultiple(double liveEventId) throws IllegalArgumentException {
        
        return new AddMultipleRequestBuilder(liveEventId);
    }
    private okhttp3.Call addMultipleVideosCall(Double liveEventId, Double userId, LiveEventVideosAddMultipleVideosRequest liveEventVideosAddMultipleVideosRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = liveEventVideosAddMultipleVideosRequest;

        // create path and map variables
        String localVarPath = "/users/{user_id}/live_events/{live_event_id}/videos"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMultipleVideosValidateBeforeCall(Double liveEventId, Double userId, LiveEventVideosAddMultipleVideosRequest liveEventVideosAddMultipleVideosRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling addMultipleVideos(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling addMultipleVideos(Async)");
        }

        return addMultipleVideosCall(liveEventId, userId, liveEventVideosAddMultipleVideosRequest, _callback);

    }


    private ApiResponse<Void> addMultipleVideosWithHttpInfo(Double liveEventId, Double userId, LiveEventVideosAddMultipleVideosRequest liveEventVideosAddMultipleVideosRequest) throws ApiException {
        okhttp3.Call localVarCall = addMultipleVideosValidateBeforeCall(liveEventId, userId, liveEventVideosAddMultipleVideosRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addMultipleVideosAsync(Double liveEventId, Double userId, LiveEventVideosAddMultipleVideosRequest liveEventVideosAddMultipleVideosRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMultipleVideosValidateBeforeCall(liveEventId, userId, liveEventVideosAddMultipleVideosRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddMultipleVideosRequestBuilder {
        private final Double liveEventId;
        private final Double userId;
        private List<LiveEventVideosAddMultipleVideosRequestVideosInner> videos;

        private AddMultipleVideosRequestBuilder(double liveEventId, double userId) {
            this.liveEventId = liveEventId;
            this.userId = userId;
        }

        /**
         * Set videos
         * @param videos An array of video objects. (optional)
         * @return AddMultipleVideosRequestBuilder
         */
        public AddMultipleVideosRequestBuilder videos(List<LiveEventVideosAddMultipleVideosRequestVideosInner> videos) {
            this.videos = videos;
            return this;
        }
        
        /**
         * Build call for addMultipleVideos
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LiveEventVideosAddMultipleVideosRequest liveEventVideosAddMultipleVideosRequest = buildBodyParams();
            return addMultipleVideosCall(liveEventId, userId, liveEventVideosAddMultipleVideosRequest, _callback);
        }

        private LiveEventVideosAddMultipleVideosRequest buildBodyParams() {
            LiveEventVideosAddMultipleVideosRequest liveEventVideosAddMultipleVideosRequest = new LiveEventVideosAddMultipleVideosRequest();
            liveEventVideosAddMultipleVideosRequest.videos(this.videos);
            return liveEventVideosAddMultipleVideosRequest;
        }

        /**
         * Execute addMultipleVideos request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were added. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            LiveEventVideosAddMultipleVideosRequest liveEventVideosAddMultipleVideosRequest = buildBodyParams();
            addMultipleVideosWithHttpInfo(liveEventId, userId, liveEventVideosAddMultipleVideosRequest);
        }

        /**
         * Execute addMultipleVideos request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            LiveEventVideosAddMultipleVideosRequest liveEventVideosAddMultipleVideosRequest = buildBodyParams();
            return addMultipleVideosWithHttpInfo(liveEventId, userId, liveEventVideosAddMultipleVideosRequest);
        }

        /**
         * Execute addMultipleVideos request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            LiveEventVideosAddMultipleVideosRequest liveEventVideosAddMultipleVideosRequest = buildBodyParams();
            return addMultipleVideosAsync(liveEventId, userId, liveEventVideosAddMultipleVideosRequest, _callback);
        }
    }

    /**
     * Add a list of videos to a live event
     * This method adds multiple videos to the specified event.
     * @param liveEventId The ID of the event. (required)
     * @param userId The ID of the user. (required)
     * @return AddMultipleVideosRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The videos were added. </td><td>  -  </td></tr>
     </table>
     */
    public AddMultipleVideosRequestBuilder addMultipleVideos(double liveEventId, double userId) throws IllegalArgumentException {
        
        
        return new AddMultipleVideosRequestBuilder(liveEventId, userId);
    }
    private okhttp3.Call getAllCall(Double liveEventId, String containingUri, String direction, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/live_events/{live_event_id}/videos"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (containingUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("containing_uri", containingUri));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (filterEmbeddable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_embeddable", filterEmbeddable));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(Double liveEventId, String containingUri, String direction, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling getAll(Async)");
        }

        return getAllCall(liveEventId, containingUri, direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);

    }


    private ApiResponse<List<Video>> getAllWithHttpInfo(Double liveEventId, String containingUri, String direction, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(liveEventId, containingUri, direction, filter, filterEmbeddable, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(Double liveEventId, String containingUri, String direction, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(liveEventId, containingUri, direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {
        private final Double liveEventId;
        private String containingUri;
        private String direction;
        private String filter;
        private Boolean filterEmbeddable;
        private Double page;
        private Double perPage;
        private String query;
        private String sort;

        private GetAllRequestBuilder(double liveEventId) {
            this.liveEventId = liveEventId;
        }

        /**
         * Set containingUri
         * @param containingUri The page that contains the video URI. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder containingUri(String containingUri) {
            this.containingUri = containingUri;
            return this;
        }
        
        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable events.  (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set filterEmbeddable
         * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder filterEmbeddable(Boolean filterEmbeddable) {
            this.filterEmbeddable = filterEmbeddable;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set query
         * @param query The search query to use to filter the results. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;added&#x60; - Sort the results by most recently added videos.  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;arranged&#x60; - Sort the results in the order that the user has arranged the videos.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(liveEventId, containingUri, direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);
        }


        /**
         * Execute getAll request
         * @return List&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Video> execute() throws ApiException {
            ApiResponse<List<Video>> localVarResp = getAllWithHttpInfo(liveEventId, containingUri, direction, filter, filterEmbeddable, page, perPage, query, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Video&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Video>> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo(liveEventId, containingUri, direction, filter, filterEmbeddable, page, perPage, query, sort);
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Video>> _callback) throws ApiException {
            return getAllAsync(liveEventId, containingUri, direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);
        }
    }

    /**
     * Get all the videos in a live event
     * This method returns every video in the specified event.
     * @param liveEventId The ID of the event. (required)
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll(double liveEventId) throws IllegalArgumentException {
        
        return new GetAllRequestBuilder(liveEventId);
    }
    private okhttp3.Call getSpecificVideoCall(Double liveEventId, Double userId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/live_events/{live_event_id}/videos/{video_id}"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificVideoValidateBeforeCall(Double liveEventId, Double userId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling getSpecificVideo(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getSpecificVideo(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getSpecificVideo(Async)");
        }

        return getSpecificVideoCall(liveEventId, userId, videoId, _callback);

    }


    private ApiResponse<Video> getSpecificVideoWithHttpInfo(Double liveEventId, Double userId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = getSpecificVideoValidateBeforeCall(liveEventId, userId, videoId, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificVideoAsync(Double liveEventId, Double userId, Double videoId, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificVideoValidateBeforeCall(liveEventId, userId, videoId, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificVideoRequestBuilder {
        private final Double liveEventId;
        private final Double userId;
        private final Double videoId;

        private GetSpecificVideoRequestBuilder(double liveEventId, double userId, double videoId) {
            this.liveEventId = liveEventId;
            this.userId = userId;
            this.videoId = videoId;
        }

        /**
         * Build call for getSpecificVideo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificVideoCall(liveEventId, userId, videoId, _callback);
        }


        /**
         * Execute getSpecificVideo request
         * @return Video
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public Video execute() throws ApiException {
            ApiResponse<Video> localVarResp = getSpecificVideoWithHttpInfo(liveEventId, userId, videoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificVideo request with HTTP info returned
         * @return ApiResponse&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Video> executeWithHttpInfo() throws ApiException {
            return getSpecificVideoWithHttpInfo(liveEventId, userId, videoId);
        }

        /**
         * Execute getSpecificVideo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Video> _callback) throws ApiException {
            return getSpecificVideoAsync(liveEventId, userId, videoId, _callback);
        }
    }

    /**
     * Get a specific video in a live event
     * This method returns a single video in the specified event.
     * @param liveEventId The ID of the event. (required)
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @return GetSpecificVideoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificVideoRequestBuilder getSpecificVideo(double liveEventId, double userId, double videoId) throws IllegalArgumentException {
        
        
        
        return new GetSpecificVideoRequestBuilder(liveEventId, userId, videoId);
    }
    private okhttp3.Call listAllVideosInEventCall(Double liveEventId, Double userId, String containingUri, String direction, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/live_events/{live_event_id}/videos"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (containingUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("containing_uri", containingUri));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (filterEmbeddable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_embeddable", filterEmbeddable));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllVideosInEventValidateBeforeCall(Double liveEventId, Double userId, String containingUri, String direction, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling listAllVideosInEvent(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listAllVideosInEvent(Async)");
        }

        return listAllVideosInEventCall(liveEventId, userId, containingUri, direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);

    }


    private ApiResponse<List<Video>> listAllVideosInEventWithHttpInfo(Double liveEventId, Double userId, String containingUri, String direction, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = listAllVideosInEventValidateBeforeCall(liveEventId, userId, containingUri, direction, filter, filterEmbeddable, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllVideosInEventAsync(Double liveEventId, Double userId, String containingUri, String direction, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllVideosInEventValidateBeforeCall(liveEventId, userId, containingUri, direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllVideosInEventRequestBuilder {
        private final Double liveEventId;
        private final Double userId;
        private String containingUri;
        private String direction;
        private String filter;
        private Boolean filterEmbeddable;
        private Double page;
        private Double perPage;
        private String query;
        private String sort;

        private ListAllVideosInEventRequestBuilder(double liveEventId, double userId) {
            this.liveEventId = liveEventId;
            this.userId = userId;
        }

        /**
         * Set containingUri
         * @param containingUri The page that contains the video URI. (optional)
         * @return ListAllVideosInEventRequestBuilder
         */
        public ListAllVideosInEventRequestBuilder containingUri(String containingUri) {
            this.containingUri = containingUri;
            return this;
        }
        
        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return ListAllVideosInEventRequestBuilder
         */
        public ListAllVideosInEventRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable events.  (optional)
         * @return ListAllVideosInEventRequestBuilder
         */
        public ListAllVideosInEventRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set filterEmbeddable
         * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)
         * @return ListAllVideosInEventRequestBuilder
         */
        public ListAllVideosInEventRequestBuilder filterEmbeddable(Boolean filterEmbeddable) {
            this.filterEmbeddable = filterEmbeddable;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return ListAllVideosInEventRequestBuilder
         */
        public ListAllVideosInEventRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return ListAllVideosInEventRequestBuilder
         */
        public ListAllVideosInEventRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set query
         * @param query The search query to use to filter the results. (optional)
         * @return ListAllVideosInEventRequestBuilder
         */
        public ListAllVideosInEventRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;added&#x60; - Sort the results by most recently added videos.  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;arranged&#x60; - Sort the results in the order that the user has arranged the videos.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)
         * @return ListAllVideosInEventRequestBuilder
         */
        public ListAllVideosInEventRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for listAllVideosInEvent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllVideosInEventCall(liveEventId, userId, containingUri, direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);
        }


        /**
         * Execute listAllVideosInEvent request
         * @return List&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Video> execute() throws ApiException {
            ApiResponse<List<Video>> localVarResp = listAllVideosInEventWithHttpInfo(liveEventId, userId, containingUri, direction, filter, filterEmbeddable, page, perPage, query, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllVideosInEvent request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Video&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Video>> executeWithHttpInfo() throws ApiException {
            return listAllVideosInEventWithHttpInfo(liveEventId, userId, containingUri, direction, filter, filterEmbeddable, page, perPage, query, sort);
        }

        /**
         * Execute listAllVideosInEvent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Video>> _callback) throws ApiException {
            return listAllVideosInEventAsync(liveEventId, userId, containingUri, direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);
        }
    }

    /**
     * Get all the videos in a live event
     * This method returns every video in the specified event.
     * @param liveEventId The ID of the event. (required)
     * @param userId The ID of the user. (required)
     * @return ListAllVideosInEventRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ListAllVideosInEventRequestBuilder listAllVideosInEvent(double liveEventId, double userId) throws IllegalArgumentException {
        
        
        return new ListAllVideosInEventRequestBuilder(liveEventId, userId);
    }
    private okhttp3.Call listLiveEventVideosCall(Double liveEventId, String containingUri, String direction, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/live_events/{live_event_id}/videos"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (containingUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("containing_uri", containingUri));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (filterEmbeddable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_embeddable", filterEmbeddable));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLiveEventVideosValidateBeforeCall(Double liveEventId, String containingUri, String direction, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling listLiveEventVideos(Async)");
        }

        return listLiveEventVideosCall(liveEventId, containingUri, direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);

    }


    private ApiResponse<List<Video>> listLiveEventVideosWithHttpInfo(Double liveEventId, String containingUri, String direction, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = listLiveEventVideosValidateBeforeCall(liveEventId, containingUri, direction, filter, filterEmbeddable, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listLiveEventVideosAsync(Double liveEventId, String containingUri, String direction, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLiveEventVideosValidateBeforeCall(liveEventId, containingUri, direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListLiveEventVideosRequestBuilder {
        private final Double liveEventId;
        private String containingUri;
        private String direction;
        private String filter;
        private Boolean filterEmbeddable;
        private Double page;
        private Double perPage;
        private String query;
        private String sort;

        private ListLiveEventVideosRequestBuilder(double liveEventId) {
            this.liveEventId = liveEventId;
        }

        /**
         * Set containingUri
         * @param containingUri The page that contains the video URI. (optional)
         * @return ListLiveEventVideosRequestBuilder
         */
        public ListLiveEventVideosRequestBuilder containingUri(String containingUri) {
            this.containingUri = containingUri;
            return this;
        }
        
        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return ListLiveEventVideosRequestBuilder
         */
        public ListLiveEventVideosRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable events.  (optional)
         * @return ListLiveEventVideosRequestBuilder
         */
        public ListLiveEventVideosRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set filterEmbeddable
         * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)
         * @return ListLiveEventVideosRequestBuilder
         */
        public ListLiveEventVideosRequestBuilder filterEmbeddable(Boolean filterEmbeddable) {
            this.filterEmbeddable = filterEmbeddable;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return ListLiveEventVideosRequestBuilder
         */
        public ListLiveEventVideosRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return ListLiveEventVideosRequestBuilder
         */
        public ListLiveEventVideosRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set query
         * @param query The search query to use to filter the results. (optional)
         * @return ListLiveEventVideosRequestBuilder
         */
        public ListLiveEventVideosRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;added&#x60; - Sort the results by most recently added videos.  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;arranged&#x60; - Sort the results in the order that the user has arranged the videos.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)
         * @return ListLiveEventVideosRequestBuilder
         */
        public ListLiveEventVideosRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for listLiveEventVideos
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listLiveEventVideosCall(liveEventId, containingUri, direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);
        }


        /**
         * Execute listLiveEventVideos request
         * @return List&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Video> execute() throws ApiException {
            ApiResponse<List<Video>> localVarResp = listLiveEventVideosWithHttpInfo(liveEventId, containingUri, direction, filter, filterEmbeddable, page, perPage, query, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listLiveEventVideos request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Video&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Video>> executeWithHttpInfo() throws ApiException {
            return listLiveEventVideosWithHttpInfo(liveEventId, containingUri, direction, filter, filterEmbeddable, page, perPage, query, sort);
        }

        /**
         * Execute listLiveEventVideos request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Video>> _callback) throws ApiException {
            return listLiveEventVideosAsync(liveEventId, containingUri, direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);
        }
    }

    /**
     * Get all the videos in a live event
     * This method returns every video in the specified event.
     * @param liveEventId The ID of the event. (required)
     * @return ListLiveEventVideosRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ListLiveEventVideosRequestBuilder listLiveEventVideos(double liveEventId) throws IllegalArgumentException {
        
        return new ListLiveEventVideosRequestBuilder(liveEventId);
    }
    private okhttp3.Call removeMultipleCall(Double liveEventId, LiveEventVideosRemoveMultipleRequest liveEventVideosRemoveMultipleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = liveEventVideosRemoveMultipleRequest;

        // create path and map variables
        String localVarPath = "/me/live_events/{live_event_id}/videos"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeMultipleValidateBeforeCall(Double liveEventId, LiveEventVideosRemoveMultipleRequest liveEventVideosRemoveMultipleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling removeMultiple(Async)");
        }

        return removeMultipleCall(liveEventId, liveEventVideosRemoveMultipleRequest, _callback);

    }


    private ApiResponse<Void> removeMultipleWithHttpInfo(Double liveEventId, LiveEventVideosRemoveMultipleRequest liveEventVideosRemoveMultipleRequest) throws ApiException {
        okhttp3.Call localVarCall = removeMultipleValidateBeforeCall(liveEventId, liveEventVideosRemoveMultipleRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeMultipleAsync(Double liveEventId, LiveEventVideosRemoveMultipleRequest liveEventVideosRemoveMultipleRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeMultipleValidateBeforeCall(liveEventId, liveEventVideosRemoveMultipleRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveMultipleRequestBuilder {
        private final Double liveEventId;
        private List<LiveEventVideosRemoveMultipleRequestVideosInner> videos;

        private RemoveMultipleRequestBuilder(double liveEventId) {
            this.liveEventId = liveEventId;
        }

        /**
         * Set videos
         * @param videos An array of video objects. (optional)
         * @return RemoveMultipleRequestBuilder
         */
        public RemoveMultipleRequestBuilder videos(List<LiveEventVideosRemoveMultipleRequestVideosInner> videos) {
            this.videos = videos;
            return this;
        }
        
        /**
         * Build call for removeMultiple
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LiveEventVideosRemoveMultipleRequest liveEventVideosRemoveMultipleRequest = buildBodyParams();
            return removeMultipleCall(liveEventId, liveEventVideosRemoveMultipleRequest, _callback);
        }

        private LiveEventVideosRemoveMultipleRequest buildBodyParams() {
            LiveEventVideosRemoveMultipleRequest liveEventVideosRemoveMultipleRequest = new LiveEventVideosRemoveMultipleRequest();
            liveEventVideosRemoveMultipleRequest.videos(this.videos);
            return liveEventVideosRemoveMultipleRequest;
        }

        /**
         * Execute removeMultiple request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            LiveEventVideosRemoveMultipleRequest liveEventVideosRemoveMultipleRequest = buildBodyParams();
            removeMultipleWithHttpInfo(liveEventId, liveEventVideosRemoveMultipleRequest);
        }

        /**
         * Execute removeMultiple request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            LiveEventVideosRemoveMultipleRequest liveEventVideosRemoveMultipleRequest = buildBodyParams();
            return removeMultipleWithHttpInfo(liveEventId, liveEventVideosRemoveMultipleRequest);
        }

        /**
         * Execute removeMultiple request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            LiveEventVideosRemoveMultipleRequest liveEventVideosRemoveMultipleRequest = buildBodyParams();
            return removeMultipleAsync(liveEventId, liveEventVideosRemoveMultipleRequest, _callback);
        }
    }

    /**
     * Remove a list of videos from a live event
     * This method removes multiple videos from the specified event.
     * @param liveEventId The ID of the event. (required)
     * @return RemoveMultipleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveMultipleRequestBuilder removeMultiple(double liveEventId) throws IllegalArgumentException {
        
        return new RemoveMultipleRequestBuilder(liveEventId);
    }
    private okhttp3.Call removeMultipleVideosCall(Double liveEventId, LiveEventVideosRemoveMultipleVideosRequest liveEventVideosRemoveMultipleVideosRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = liveEventVideosRemoveMultipleVideosRequest;

        // create path and map variables
        String localVarPath = "/live_events/{live_event_id}/videos"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeMultipleVideosValidateBeforeCall(Double liveEventId, LiveEventVideosRemoveMultipleVideosRequest liveEventVideosRemoveMultipleVideosRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling removeMultipleVideos(Async)");
        }

        return removeMultipleVideosCall(liveEventId, liveEventVideosRemoveMultipleVideosRequest, _callback);

    }


    private ApiResponse<Void> removeMultipleVideosWithHttpInfo(Double liveEventId, LiveEventVideosRemoveMultipleVideosRequest liveEventVideosRemoveMultipleVideosRequest) throws ApiException {
        okhttp3.Call localVarCall = removeMultipleVideosValidateBeforeCall(liveEventId, liveEventVideosRemoveMultipleVideosRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeMultipleVideosAsync(Double liveEventId, LiveEventVideosRemoveMultipleVideosRequest liveEventVideosRemoveMultipleVideosRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeMultipleVideosValidateBeforeCall(liveEventId, liveEventVideosRemoveMultipleVideosRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveMultipleVideosRequestBuilder {
        private final Double liveEventId;
        private List<LiveEventVideosRemoveMultipleVideosRequestVideosInner> videos;

        private RemoveMultipleVideosRequestBuilder(double liveEventId) {
            this.liveEventId = liveEventId;
        }

        /**
         * Set videos
         * @param videos An array of video objects. (optional)
         * @return RemoveMultipleVideosRequestBuilder
         */
        public RemoveMultipleVideosRequestBuilder videos(List<LiveEventVideosRemoveMultipleVideosRequestVideosInner> videos) {
            this.videos = videos;
            return this;
        }
        
        /**
         * Build call for removeMultipleVideos
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LiveEventVideosRemoveMultipleVideosRequest liveEventVideosRemoveMultipleVideosRequest = buildBodyParams();
            return removeMultipleVideosCall(liveEventId, liveEventVideosRemoveMultipleVideosRequest, _callback);
        }

        private LiveEventVideosRemoveMultipleVideosRequest buildBodyParams() {
            LiveEventVideosRemoveMultipleVideosRequest liveEventVideosRemoveMultipleVideosRequest = new LiveEventVideosRemoveMultipleVideosRequest();
            liveEventVideosRemoveMultipleVideosRequest.videos(this.videos);
            return liveEventVideosRemoveMultipleVideosRequest;
        }

        /**
         * Execute removeMultipleVideos request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            LiveEventVideosRemoveMultipleVideosRequest liveEventVideosRemoveMultipleVideosRequest = buildBodyParams();
            removeMultipleVideosWithHttpInfo(liveEventId, liveEventVideosRemoveMultipleVideosRequest);
        }

        /**
         * Execute removeMultipleVideos request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            LiveEventVideosRemoveMultipleVideosRequest liveEventVideosRemoveMultipleVideosRequest = buildBodyParams();
            return removeMultipleVideosWithHttpInfo(liveEventId, liveEventVideosRemoveMultipleVideosRequest);
        }

        /**
         * Execute removeMultipleVideos request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            LiveEventVideosRemoveMultipleVideosRequest liveEventVideosRemoveMultipleVideosRequest = buildBodyParams();
            return removeMultipleVideosAsync(liveEventId, liveEventVideosRemoveMultipleVideosRequest, _callback);
        }
    }

    /**
     * Remove a list of videos from a live event
     * This method removes multiple videos from the specified event.
     * @param liveEventId The ID of the event. (required)
     * @return RemoveMultipleVideosRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveMultipleVideosRequestBuilder removeMultipleVideos(double liveEventId) throws IllegalArgumentException {
        
        return new RemoveMultipleVideosRequestBuilder(liveEventId);
    }
    private okhttp3.Call removeMultiple_0Call(Double liveEventId, Double userId, LiveEventVideosRemoveMultipleRequest1 liveEventVideosRemoveMultipleRequest1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = liveEventVideosRemoveMultipleRequest1;

        // create path and map variables
        String localVarPath = "/users/{user_id}/live_events/{live_event_id}/videos"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeMultiple_0ValidateBeforeCall(Double liveEventId, Double userId, LiveEventVideosRemoveMultipleRequest1 liveEventVideosRemoveMultipleRequest1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling removeMultiple_0(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling removeMultiple_0(Async)");
        }

        return removeMultiple_0Call(liveEventId, userId, liveEventVideosRemoveMultipleRequest1, _callback);

    }


    private ApiResponse<Void> removeMultiple_0WithHttpInfo(Double liveEventId, Double userId, LiveEventVideosRemoveMultipleRequest1 liveEventVideosRemoveMultipleRequest1) throws ApiException {
        okhttp3.Call localVarCall = removeMultiple_0ValidateBeforeCall(liveEventId, userId, liveEventVideosRemoveMultipleRequest1, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeMultiple_0Async(Double liveEventId, Double userId, LiveEventVideosRemoveMultipleRequest1 liveEventVideosRemoveMultipleRequest1, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeMultiple_0ValidateBeforeCall(liveEventId, userId, liveEventVideosRemoveMultipleRequest1, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveMultiple0RequestBuilder {
        private final Double liveEventId;
        private final Double userId;
        private List<LiveEventVideosRemoveMultipleRequest1VideosInner> videos;

        private RemoveMultiple0RequestBuilder(double liveEventId, double userId) {
            this.liveEventId = liveEventId;
            this.userId = userId;
        }

        /**
         * Set videos
         * @param videos An array of video objects. (optional)
         * @return RemoveMultiple0RequestBuilder
         */
        public RemoveMultiple0RequestBuilder videos(List<LiveEventVideosRemoveMultipleRequest1VideosInner> videos) {
            this.videos = videos;
            return this;
        }
        
        /**
         * Build call for removeMultiple_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LiveEventVideosRemoveMultipleRequest1 liveEventVideosRemoveMultipleRequest1 = buildBodyParams();
            return removeMultiple_0Call(liveEventId, userId, liveEventVideosRemoveMultipleRequest1, _callback);
        }

        private LiveEventVideosRemoveMultipleRequest1 buildBodyParams() {
            LiveEventVideosRemoveMultipleRequest1 liveEventVideosRemoveMultipleRequest1 = new LiveEventVideosRemoveMultipleRequest1();
            liveEventVideosRemoveMultipleRequest1.videos(this.videos);
            return liveEventVideosRemoveMultipleRequest1;
        }

        /**
         * Execute removeMultiple_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            LiveEventVideosRemoveMultipleRequest1 liveEventVideosRemoveMultipleRequest1 = buildBodyParams();
            removeMultiple_0WithHttpInfo(liveEventId, userId, liveEventVideosRemoveMultipleRequest1);
        }

        /**
         * Execute removeMultiple_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            LiveEventVideosRemoveMultipleRequest1 liveEventVideosRemoveMultipleRequest1 = buildBodyParams();
            return removeMultiple_0WithHttpInfo(liveEventId, userId, liveEventVideosRemoveMultipleRequest1);
        }

        /**
         * Execute removeMultiple_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            LiveEventVideosRemoveMultipleRequest1 liveEventVideosRemoveMultipleRequest1 = buildBodyParams();
            return removeMultiple_0Async(liveEventId, userId, liveEventVideosRemoveMultipleRequest1, _callback);
        }
    }

    /**
     * Remove a list of videos from a live event
     * This method removes multiple videos from the specified event.
     * @param liveEventId The ID of the event. (required)
     * @param userId The ID of the user. (required)
     * @return RemoveMultiple0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveMultiple0RequestBuilder removeMultiple_0(double liveEventId, double userId) throws IllegalArgumentException {
        
        
        return new RemoveMultiple0RequestBuilder(liveEventId, userId);
    }
    private okhttp3.Call specificEventVideoCall(Double liveEventId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/live_events/{live_event_id}/videos/{video_id}"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call specificEventVideoValidateBeforeCall(Double liveEventId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling specificEventVideo(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling specificEventVideo(Async)");
        }

        return specificEventVideoCall(liveEventId, videoId, _callback);

    }


    private ApiResponse<Video> specificEventVideoWithHttpInfo(Double liveEventId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = specificEventVideoValidateBeforeCall(liveEventId, videoId, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call specificEventVideoAsync(Double liveEventId, Double videoId, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = specificEventVideoValidateBeforeCall(liveEventId, videoId, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SpecificEventVideoRequestBuilder {
        private final Double liveEventId;
        private final Double videoId;

        private SpecificEventVideoRequestBuilder(double liveEventId, double videoId) {
            this.liveEventId = liveEventId;
            this.videoId = videoId;
        }

        /**
         * Build call for specificEventVideo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return specificEventVideoCall(liveEventId, videoId, _callback);
        }


        /**
         * Execute specificEventVideo request
         * @return Video
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public Video execute() throws ApiException {
            ApiResponse<Video> localVarResp = specificEventVideoWithHttpInfo(liveEventId, videoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute specificEventVideo request with HTTP info returned
         * @return ApiResponse&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Video> executeWithHttpInfo() throws ApiException {
            return specificEventVideoWithHttpInfo(liveEventId, videoId);
        }

        /**
         * Execute specificEventVideo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Video> _callback) throws ApiException {
            return specificEventVideoAsync(liveEventId, videoId, _callback);
        }
    }

    /**
     * Get a specific video in a live event
     * This method returns a single video in the specified event.
     * @param liveEventId The ID of the event. (required)
     * @param videoId The ID of the video. (required)
     * @return SpecificEventVideoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
     </table>
     */
    public SpecificEventVideoRequestBuilder specificEventVideo(double liveEventId, double videoId) throws IllegalArgumentException {
        
        
        return new SpecificEventVideoRequestBuilder(liveEventId, videoId);
    }
    private okhttp3.Call specificVideoCall(Double liveEventId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/live_events/{live_event_id}/videos/{video_id}"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call specificVideoValidateBeforeCall(Double liveEventId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling specificVideo(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling specificVideo(Async)");
        }

        return specificVideoCall(liveEventId, videoId, _callback);

    }


    private ApiResponse<Video> specificVideoWithHttpInfo(Double liveEventId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = specificVideoValidateBeforeCall(liveEventId, videoId, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call specificVideoAsync(Double liveEventId, Double videoId, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = specificVideoValidateBeforeCall(liveEventId, videoId, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SpecificVideoRequestBuilder {
        private final Double liveEventId;
        private final Double videoId;

        private SpecificVideoRequestBuilder(double liveEventId, double videoId) {
            this.liveEventId = liveEventId;
            this.videoId = videoId;
        }

        /**
         * Build call for specificVideo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return specificVideoCall(liveEventId, videoId, _callback);
        }


        /**
         * Execute specificVideo request
         * @return Video
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public Video execute() throws ApiException {
            ApiResponse<Video> localVarResp = specificVideoWithHttpInfo(liveEventId, videoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute specificVideo request with HTTP info returned
         * @return ApiResponse&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Video> executeWithHttpInfo() throws ApiException {
            return specificVideoWithHttpInfo(liveEventId, videoId);
        }

        /**
         * Execute specificVideo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Video> _callback) throws ApiException {
            return specificVideoAsync(liveEventId, videoId, _callback);
        }
    }

    /**
     * Get a specific video in a live event
     * This method returns a single video in the specified event.
     * @param liveEventId The ID of the event. (required)
     * @param videoId The ID of the video. (required)
     * @return SpecificVideoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
     </table>
     */
    public SpecificVideoRequestBuilder specificVideo(double liveEventId, double videoId) throws IllegalArgumentException {
        
        
        return new SpecificVideoRequestBuilder(liveEventId, videoId);
    }
    private okhttp3.Call uploadMultipleCall(Double liveEventId, LiveEventVideosUploadMultipleRequest liveEventVideosUploadMultipleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = liveEventVideosUploadMultipleRequest;

        // create path and map variables
        String localVarPath = "/me/live_events/{live_event_id}/videos"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadMultipleValidateBeforeCall(Double liveEventId, LiveEventVideosUploadMultipleRequest liveEventVideosUploadMultipleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling uploadMultiple(Async)");
        }

        return uploadMultipleCall(liveEventId, liveEventVideosUploadMultipleRequest, _callback);

    }


    private ApiResponse<Void> uploadMultipleWithHttpInfo(Double liveEventId, LiveEventVideosUploadMultipleRequest liveEventVideosUploadMultipleRequest) throws ApiException {
        okhttp3.Call localVarCall = uploadMultipleValidateBeforeCall(liveEventId, liveEventVideosUploadMultipleRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call uploadMultipleAsync(Double liveEventId, LiveEventVideosUploadMultipleRequest liveEventVideosUploadMultipleRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadMultipleValidateBeforeCall(liveEventId, liveEventVideosUploadMultipleRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UploadMultipleRequestBuilder {
        private final Double liveEventId;
        private List<LiveEventVideosUploadMultipleRequestVideosInner> videos;

        private UploadMultipleRequestBuilder(double liveEventId) {
            this.liveEventId = liveEventId;
        }

        /**
         * Set videos
         * @param videos An array of video objects. (optional)
         * @return UploadMultipleRequestBuilder
         */
        public UploadMultipleRequestBuilder videos(List<LiveEventVideosUploadMultipleRequestVideosInner> videos) {
            this.videos = videos;
            return this;
        }
        
        /**
         * Build call for uploadMultiple
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LiveEventVideosUploadMultipleRequest liveEventVideosUploadMultipleRequest = buildBodyParams();
            return uploadMultipleCall(liveEventId, liveEventVideosUploadMultipleRequest, _callback);
        }

        private LiveEventVideosUploadMultipleRequest buildBodyParams() {
            LiveEventVideosUploadMultipleRequest liveEventVideosUploadMultipleRequest = new LiveEventVideosUploadMultipleRequest();
            liveEventVideosUploadMultipleRequest.videos(this.videos);
            return liveEventVideosUploadMultipleRequest;
        }

        /**
         * Execute uploadMultiple request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were added. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            LiveEventVideosUploadMultipleRequest liveEventVideosUploadMultipleRequest = buildBodyParams();
            uploadMultipleWithHttpInfo(liveEventId, liveEventVideosUploadMultipleRequest);
        }

        /**
         * Execute uploadMultiple request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            LiveEventVideosUploadMultipleRequest liveEventVideosUploadMultipleRequest = buildBodyParams();
            return uploadMultipleWithHttpInfo(liveEventId, liveEventVideosUploadMultipleRequest);
        }

        /**
         * Execute uploadMultiple request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            LiveEventVideosUploadMultipleRequest liveEventVideosUploadMultipleRequest = buildBodyParams();
            return uploadMultipleAsync(liveEventId, liveEventVideosUploadMultipleRequest, _callback);
        }
    }

    /**
     * Add a list of videos to a live event
     * This method adds multiple videos to the specified event.
     * @param liveEventId The ID of the event. (required)
     * @return UploadMultipleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The videos were added. </td><td>  -  </td></tr>
     </table>
     */
    public UploadMultipleRequestBuilder uploadMultiple(double liveEventId) throws IllegalArgumentException {
        
        return new UploadMultipleRequestBuilder(liveEventId);
    }
}
