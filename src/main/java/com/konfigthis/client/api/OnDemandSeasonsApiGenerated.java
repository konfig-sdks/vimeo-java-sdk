/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.OnDemandSeason;
import com.konfigthis.client.model.Video;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OnDemandSeasonsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OnDemandSeasonsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OnDemandSeasonsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAllVideosInSeasonCall(Double ondemandId, Double seasonId, String filter, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/seasons/{season_id}/videos"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()))
            .replace("{" + "season_id" + "}", localVarApiClient.escapeString(seasonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllVideosInSeasonValidateBeforeCall(Double ondemandId, Double seasonId, String filter, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling getAllVideosInSeason(Async)");
        }

        // verify the required parameter 'seasonId' is set
        if (seasonId == null) {
            throw new ApiException("Missing the required parameter 'seasonId' when calling getAllVideosInSeason(Async)");
        }

        return getAllVideosInSeasonCall(ondemandId, seasonId, filter, page, perPage, sort, _callback);

    }


    private ApiResponse<List<Video>> getAllVideosInSeasonWithHttpInfo(Double ondemandId, Double seasonId, String filter, Double page, Double perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = getAllVideosInSeasonValidateBeforeCall(ondemandId, seasonId, filter, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllVideosInSeasonAsync(Double ondemandId, Double seasonId, String filter, Double page, Double perPage, String sort, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllVideosInSeasonValidateBeforeCall(ondemandId, seasonId, filter, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllVideosInSeasonRequestBuilder {
        private final Double ondemandId;
        private final Double seasonId;
        private String filter;
        private Double page;
        private Double perPage;
        private String sort;

        private GetAllVideosInSeasonRequestBuilder(double ondemandId, double seasonId) {
            this.ondemandId = ondemandId;
            this.seasonId = seasonId;
        }

        /**
         * Set filter
         * @param filter The attribute by which to filter the results.  Option descriptions:  * &#x60;viewable&#x60; - Filter by viewable videos.  (optional)
         * @return GetAllVideosInSeasonRequestBuilder
         */
        public GetAllVideosInSeasonRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetAllVideosInSeasonRequestBuilder
         */
        public GetAllVideosInSeasonRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetAllVideosInSeasonRequestBuilder
         */
        public GetAllVideosInSeasonRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sorting method.  * &#x60;manual&#x60; - Sort the results manually.  * &#x60;name&#x60; - Sort the results by name.  * &#x60;purchase_time&#x60; - Sort the results by time of purchase.  * &#x60;release_date&#x60; - Sort the results by release date.  (optional)
         * @return GetAllVideosInSeasonRequestBuilder
         */
        public GetAllVideosInSeasonRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getAllVideosInSeason
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllVideosInSeasonCall(ondemandId, seasonId, filter, page, perPage, sort, _callback);
        }


        /**
         * Execute getAllVideosInSeason request
         * @return List&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Video> execute() throws ApiException {
            ApiResponse<List<Video>> localVarResp = getAllVideosInSeasonWithHttpInfo(ondemandId, seasonId, filter, page, perPage, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllVideosInSeason request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Video&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Video>> executeWithHttpInfo() throws ApiException {
            return getAllVideosInSeasonWithHttpInfo(ondemandId, seasonId, filter, page, perPage, sort);
        }

        /**
         * Execute getAllVideosInSeason request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Video>> _callback) throws ApiException {
            return getAllVideosInSeasonAsync(ondemandId, seasonId, filter, page, perPage, sort, _callback);
        }
    }

    /**
     * Get all the videos in a season on an On Demand page
     * This method returns every video in the specified season on an On Demand page.
     * @param ondemandId The ID of the On Demand page. (required)
     * @param seasonId The ID of the season. (required)
     * @return GetAllVideosInSeasonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllVideosInSeasonRequestBuilder getAllVideosInSeason(double ondemandId, double seasonId) throws IllegalArgumentException {
        
        
        return new GetAllVideosInSeasonRequestBuilder(ondemandId, seasonId);
    }
    private okhttp3.Call listAllCall(Double ondemandId, String direction, String filter, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/seasons"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.season+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllValidateBeforeCall(Double ondemandId, String direction, String filter, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling listAll(Async)");
        }

        return listAllCall(ondemandId, direction, filter, page, perPage, sort, _callback);

    }


    private ApiResponse<List<OnDemandSeason>> listAllWithHttpInfo(Double ondemandId, String direction, String filter, Double page, Double perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = listAllValidateBeforeCall(ondemandId, direction, filter, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<List<OnDemandSeason>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllAsync(Double ondemandId, String direction, String filter, Double page, Double perPage, String sort, final ApiCallback<List<OnDemandSeason>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllValidateBeforeCall(ondemandId, direction, filter, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<List<OnDemandSeason>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllRequestBuilder {
        private final Double ondemandId;
        private String direction;
        private String filter;
        private Double page;
        private Double perPage;
        private String sort;

        private ListAllRequestBuilder(double ondemandId) {
            this.ondemandId = ondemandId;
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The attribute by which to filter the results.  Option descriptions:  * &#x60;viewable&#x60; - Filter by viewable seasons.  (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;date&#x60; - Sort the results by date.  * &#x60;manual&#x60; - Sort the results manually.  (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for listAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The seasons were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllCall(ondemandId, direction, filter, page, perPage, sort, _callback);
        }


        /**
         * Execute listAll request
         * @return List&lt;OnDemandSeason&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The seasons were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<OnDemandSeason> execute() throws ApiException {
            ApiResponse<List<OnDemandSeason>> localVarResp = listAllWithHttpInfo(ondemandId, direction, filter, page, perPage, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAll request with HTTP info returned
         * @return ApiResponse&lt;List&lt;OnDemandSeason&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The seasons were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<OnDemandSeason>> executeWithHttpInfo() throws ApiException {
            return listAllWithHttpInfo(ondemandId, direction, filter, page, perPage, sort);
        }

        /**
         * Execute listAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The seasons were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<OnDemandSeason>> _callback) throws ApiException {
            return listAllAsync(ondemandId, direction, filter, page, perPage, sort, _callback);
        }
    }

    /**
     * Get all the seasons on an On Demand page
     * This method returns every season on the specified On Demand page.
     * @param ondemandId The ID of the On Demand page. (required)
     * @return ListAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The seasons were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ListAllRequestBuilder listAll(double ondemandId) throws IllegalArgumentException {
        
        return new ListAllRequestBuilder(ondemandId);
    }
    private okhttp3.Call specificGetCall(Double ondemandId, Double seasonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/seasons/{season_id}"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()))
            .replace("{" + "season_id" + "}", localVarApiClient.escapeString(seasonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.season+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call specificGetValidateBeforeCall(Double ondemandId, Double seasonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling specificGet(Async)");
        }

        // verify the required parameter 'seasonId' is set
        if (seasonId == null) {
            throw new ApiException("Missing the required parameter 'seasonId' when calling specificGet(Async)");
        }

        return specificGetCall(ondemandId, seasonId, _callback);

    }


    private ApiResponse<OnDemandSeason> specificGetWithHttpInfo(Double ondemandId, Double seasonId) throws ApiException {
        okhttp3.Call localVarCall = specificGetValidateBeforeCall(ondemandId, seasonId, null);
        Type localVarReturnType = new TypeToken<OnDemandSeason>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call specificGetAsync(Double ondemandId, Double seasonId, final ApiCallback<OnDemandSeason> _callback) throws ApiException {

        okhttp3.Call localVarCall = specificGetValidateBeforeCall(ondemandId, seasonId, _callback);
        Type localVarReturnType = new TypeToken<OnDemandSeason>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SpecificGetRequestBuilder {
        private final Double ondemandId;
        private final Double seasonId;

        private SpecificGetRequestBuilder(double ondemandId, double seasonId) {
            this.ondemandId = ondemandId;
            this.seasonId = seasonId;
        }

        /**
         * Build call for specificGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The season was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return specificGetCall(ondemandId, seasonId, _callback);
        }


        /**
         * Execute specificGet request
         * @return OnDemandSeason
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The season was returned. </td><td>  -  </td></tr>
         </table>
         */
        public OnDemandSeason execute() throws ApiException {
            ApiResponse<OnDemandSeason> localVarResp = specificGetWithHttpInfo(ondemandId, seasonId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute specificGet request with HTTP info returned
         * @return ApiResponse&lt;OnDemandSeason&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The season was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OnDemandSeason> executeWithHttpInfo() throws ApiException {
            return specificGetWithHttpInfo(ondemandId, seasonId);
        }

        /**
         * Execute specificGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The season was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OnDemandSeason> _callback) throws ApiException {
            return specificGetAsync(ondemandId, seasonId, _callback);
        }
    }

    /**
     * Get a specific season on an On Demand page
     * This method returns a single season on the specified On Demand page.
     * @param ondemandId The ID of the On Demand page. (required)
     * @param seasonId The ID of the season. (required)
     * @return SpecificGetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The season was returned. </td><td>  -  </td></tr>
     </table>
     */
    public SpecificGetRequestBuilder specificGet(double ondemandId, double seasonId) throws IllegalArgumentException {
        
        
        return new SpecificGetRequestBuilder(ondemandId, seasonId);
    }
}
