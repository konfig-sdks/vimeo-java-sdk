/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * UploadVideoRequestUpload
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class UploadVideoRequestUpload {
  /**
   * The upload approach.  Option descriptions:  * &#x60;post&#x60; - Use the &#x60;post&#x60; approach.  * &#x60;pull&#x60; - Use the &#x60;pull&#x60; approach.  * &#x60;tus&#x60; - Use the &#x60;tus&#x60; approach. 
   */
  @JsonAdapter(ApproachEnum.Adapter.class)
 public enum ApproachEnum {
    POST("post"),
    
    PULL("pull"),
    
    TUS("tus");

    private String value;

    ApproachEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApproachEnum fromValue(String value) {
      for (ApproachEnum b : ApproachEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApproachEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApproachEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApproachEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApproachEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_APPROACH = "approach";
  @SerializedName(SERIALIZED_NAME_APPROACH)
  private ApproachEnum approach;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_REDIRECT_URL = "redirect_url";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URL)
  private String redirectUrl;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private String size;

  public UploadVideoRequestUpload() {
  }

  public UploadVideoRequestUpload approach(ApproachEnum approach) {
    
    
    
    
    this.approach = approach;
    return this;
  }

   /**
   * The upload approach.  Option descriptions:  * &#x60;post&#x60; - Use the &#x60;post&#x60; approach.  * &#x60;pull&#x60; - Use the &#x60;pull&#x60; approach.  * &#x60;tus&#x60; - Use the &#x60;tus&#x60; approach. 
   * @return approach
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The upload approach.  Option descriptions:  * `post` - Use the `post` approach.  * `pull` - Use the `pull` approach.  * `tus` - Use the `tus` approach. ")

  public ApproachEnum getApproach() {
    return approach;
  }


  public void setApproach(ApproachEnum approach) {
    
    
    
    this.approach = approach;
  }


  public UploadVideoRequestUpload link(String link) {
    
    
    
    
    this.link = link;
    return this;
  }

   /**
   * The public URL at which the video is hosted. The URL must be valid for at least 24 hours. Use this parameter when **approach** is &#x60;pull&#x60;.
   * @return link
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://example.com/video.mp4", value = "The public URL at which the video is hosted. The URL must be valid for at least 24 hours. Use this parameter when **approach** is `pull`.")

  public String getLink() {
    return link;
  }


  public void setLink(String link) {
    
    
    
    this.link = link;
  }


  public UploadVideoRequestUpload redirectUrl(String redirectUrl) {
    
    
    
    
    this.redirectUrl = redirectUrl;
    return this;
  }

   /**
   * The app&#39;s redirect URL. Use this parameter when **approach** is &#x60;post&#x60;.
   * @return redirectUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://example.com", value = "The app's redirect URL. Use this parameter when **approach** is `post`.")

  public String getRedirectUrl() {
    return redirectUrl;
  }


  public void setRedirectUrl(String redirectUrl) {
    
    
    
    this.redirectUrl = redirectUrl;
  }


  public UploadVideoRequestUpload size(String size) {
    
    
    
    
    this.size = size;
    return this;
  }

   /**
   * The size in bytes of the video to upload. The maximum value of this field is &#x60;268435456000&#x60;, which corresponds to 250 GB.
   * @return size
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "13623861", value = "The size in bytes of the video to upload. The maximum value of this field is `268435456000`, which corresponds to 250 GB.")

  public String getSize() {
    return size;
  }


  public void setSize(String size) {
    
    
    
    this.size = size;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the UploadVideoRequestUpload instance itself
   */
  public UploadVideoRequestUpload putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UploadVideoRequestUpload uploadVideoRequestUpload = (UploadVideoRequestUpload) o;
    return Objects.equals(this.approach, uploadVideoRequestUpload.approach) &&
        Objects.equals(this.link, uploadVideoRequestUpload.link) &&
        Objects.equals(this.redirectUrl, uploadVideoRequestUpload.redirectUrl) &&
        Objects.equals(this.size, uploadVideoRequestUpload.size)&&
        Objects.equals(this.additionalProperties, uploadVideoRequestUpload.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(approach, link, redirectUrl, size, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UploadVideoRequestUpload {\n");
    sb.append("    approach: ").append(toIndentedString(approach)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("approach");
    openapiFields.add("link");
    openapiFields.add("redirect_url");
    openapiFields.add("size");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("approach");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UploadVideoRequestUpload
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UploadVideoRequestUpload.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UploadVideoRequestUpload is not found in the empty JSON string", UploadVideoRequestUpload.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UploadVideoRequestUpload.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("approach").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approach` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approach").toString()));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("redirect_url") != null && !jsonObj.get("redirect_url").isJsonNull()) && !jsonObj.get("redirect_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirect_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirect_url").toString()));
      }
      if ((jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) && !jsonObj.get("size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("size").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UploadVideoRequestUpload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UploadVideoRequestUpload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UploadVideoRequestUpload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UploadVideoRequestUpload.class));

       return (TypeAdapter<T>) new TypeAdapter<UploadVideoRequestUpload>() {
           @Override
           public void write(JsonWriter out, UploadVideoRequestUpload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public UploadVideoRequestUpload read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             UploadVideoRequestUpload instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UploadVideoRequestUpload given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UploadVideoRequestUpload
  * @throws IOException if the JSON string is invalid with respect to UploadVideoRequestUpload
  */
  public static UploadVideoRequestUpload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UploadVideoRequestUpload.class);
  }

 /**
  * Convert an instance of UploadVideoRequestUpload to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

