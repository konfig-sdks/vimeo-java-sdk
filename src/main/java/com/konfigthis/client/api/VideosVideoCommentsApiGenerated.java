/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Comment;
import com.konfigthis.client.model.CreateCommentRequest;
import com.konfigthis.client.model.EditCommentRequest;
import com.konfigthis.client.model.VideosVideoCommentsAddNewCommentRequest;
import com.konfigthis.client.model.VideosVideoCommentsCreateReplyRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class VideosVideoCommentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VideosVideoCommentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public VideosVideoCommentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewCommentCall(Double channelId, Double videoId, VideosVideoCommentsAddNewCommentRequest videosVideoCommentsAddNewCommentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = videosVideoCommentsAddNewCommentRequest;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/videos/{video_id}/comments"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.comment+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.comment+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewCommentValidateBeforeCall(Double channelId, Double videoId, VideosVideoCommentsAddNewCommentRequest videosVideoCommentsAddNewCommentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling addNewComment(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addNewComment(Async)");
        }

        // verify the required parameter 'videosVideoCommentsAddNewCommentRequest' is set
        if (videosVideoCommentsAddNewCommentRequest == null) {
            throw new ApiException("Missing the required parameter 'videosVideoCommentsAddNewCommentRequest' when calling addNewComment(Async)");
        }

        return addNewCommentCall(channelId, videoId, videosVideoCommentsAddNewCommentRequest, _callback);

    }


    private ApiResponse<Comment> addNewCommentWithHttpInfo(Double channelId, Double videoId, VideosVideoCommentsAddNewCommentRequest videosVideoCommentsAddNewCommentRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewCommentValidateBeforeCall(channelId, videoId, videosVideoCommentsAddNewCommentRequest, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewCommentAsync(Double channelId, Double videoId, VideosVideoCommentsAddNewCommentRequest videosVideoCommentsAddNewCommentRequest, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewCommentValidateBeforeCall(channelId, videoId, videosVideoCommentsAddNewCommentRequest, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewCommentRequestBuilder {
        private final String text;
        private final Double channelId;
        private final Double videoId;

        private AddNewCommentRequestBuilder(String text, double channelId, double videoId) {
            this.text = text;
            this.channelId = channelId;
            this.videoId = videoId;
        }

        /**
         * Build call for addNewComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The comment was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VideosVideoCommentsAddNewCommentRequest videosVideoCommentsAddNewCommentRequest = buildBodyParams();
            return addNewCommentCall(channelId, videoId, videosVideoCommentsAddNewCommentRequest, _callback);
        }

        private VideosVideoCommentsAddNewCommentRequest buildBodyParams() {
            VideosVideoCommentsAddNewCommentRequest videosVideoCommentsAddNewCommentRequest = new VideosVideoCommentsAddNewCommentRequest();
            videosVideoCommentsAddNewCommentRequest.text(this.text);
            return videosVideoCommentsAddNewCommentRequest;
        }

        /**
         * Execute addNewComment request
         * @return Comment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The comment was added. </td><td>  -  </td></tr>
         </table>
         */
        public Comment execute() throws ApiException {
            VideosVideoCommentsAddNewCommentRequest videosVideoCommentsAddNewCommentRequest = buildBodyParams();
            ApiResponse<Comment> localVarResp = addNewCommentWithHttpInfo(channelId, videoId, videosVideoCommentsAddNewCommentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewComment request with HTTP info returned
         * @return ApiResponse&lt;Comment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The comment was added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Comment> executeWithHttpInfo() throws ApiException {
            VideosVideoCommentsAddNewCommentRequest videosVideoCommentsAddNewCommentRequest = buildBodyParams();
            return addNewCommentWithHttpInfo(channelId, videoId, videosVideoCommentsAddNewCommentRequest);
        }

        /**
         * Execute addNewComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The comment was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Comment> _callback) throws ApiException {
            VideosVideoCommentsAddNewCommentRequest videosVideoCommentsAddNewCommentRequest = buildBodyParams();
            return addNewCommentAsync(channelId, videoId, videosVideoCommentsAddNewCommentRequest, _callback);
        }
    }

    /**
     * Add a video comment to a video
     * This method adds a video comment to the specified video.
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param videosVideoCommentsAddNewCommentRequest  (required)
     * @return AddNewCommentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The comment was added. </td><td>  -  </td></tr>
     </table>
     */
    public AddNewCommentRequestBuilder addNewComment(String text, double channelId, double videoId) throws IllegalArgumentException {
        if (text == null) throw new IllegalArgumentException("\"text\" is required but got null");
            

        
        
        return new AddNewCommentRequestBuilder(text, channelId, videoId);
    }
    private okhttp3.Call commentCall(Double videoId, CreateCommentRequest createCommentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCommentRequest;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/comments"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.comment+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.comment+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call commentValidateBeforeCall(Double videoId, CreateCommentRequest createCommentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling comment(Async)");
        }

        // verify the required parameter 'createCommentRequest' is set
        if (createCommentRequest == null) {
            throw new ApiException("Missing the required parameter 'createCommentRequest' when calling comment(Async)");
        }

        return commentCall(videoId, createCommentRequest, _callback);

    }


    private ApiResponse<Comment> commentWithHttpInfo(Double videoId, CreateCommentRequest createCommentRequest) throws ApiException {
        okhttp3.Call localVarCall = commentValidateBeforeCall(videoId, createCommentRequest, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call commentAsync(Double videoId, CreateCommentRequest createCommentRequest, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = commentValidateBeforeCall(videoId, createCommentRequest, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CommentRequestBuilder {
        private final String text;
        private final Double videoId;

        private CommentRequestBuilder(String text, double videoId) {
            this.text = text;
            this.videoId = videoId;
        }

        /**
         * Build call for comment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The comment was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateCommentRequest createCommentRequest = buildBodyParams();
            return commentCall(videoId, createCommentRequest, _callback);
        }

        private CreateCommentRequest buildBodyParams() {
            CreateCommentRequest createCommentRequest = new CreateCommentRequest();
            createCommentRequest.text(this.text);
            return createCommentRequest;
        }

        /**
         * Execute comment request
         * @return Comment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The comment was added. </td><td>  -  </td></tr>
         </table>
         */
        public Comment execute() throws ApiException {
            CreateCommentRequest createCommentRequest = buildBodyParams();
            ApiResponse<Comment> localVarResp = commentWithHttpInfo(videoId, createCommentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute comment request with HTTP info returned
         * @return ApiResponse&lt;Comment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The comment was added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Comment> executeWithHttpInfo() throws ApiException {
            CreateCommentRequest createCommentRequest = buildBodyParams();
            return commentWithHttpInfo(videoId, createCommentRequest);
        }

        /**
         * Execute comment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The comment was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Comment> _callback) throws ApiException {
            CreateCommentRequest createCommentRequest = buildBodyParams();
            return commentAsync(videoId, createCommentRequest, _callback);
        }
    }

    /**
     * Add a video comment to a video
     * This method adds a video comment to the specified video.
     * @param videoId The ID of the video. (required)
     * @param createCommentRequest  (required)
     * @return CommentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The comment was added. </td><td>  -  </td></tr>
     </table>
     */
    public CommentRequestBuilder comment(String text, double videoId) throws IllegalArgumentException {
        if (text == null) throw new IllegalArgumentException("\"text\" is required but got null");
            

        
        return new CommentRequestBuilder(text, videoId);
    }
    private okhttp3.Call comment_0Call(Double commentId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/comments/{comment_id}"
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.comment+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call comment_0ValidateBeforeCall(Double commentId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling comment_0(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling comment_0(Async)");
        }

        return comment_0Call(commentId, videoId, _callback);

    }


    private ApiResponse<Comment> comment_0WithHttpInfo(Double commentId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = comment_0ValidateBeforeCall(commentId, videoId, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call comment_0Async(Double commentId, Double videoId, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = comment_0ValidateBeforeCall(commentId, videoId, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Comment0RequestBuilder {
        private final Double commentId;
        private final Double videoId;

        private Comment0RequestBuilder(double commentId, double videoId) {
            this.commentId = commentId;
            this.videoId = videoId;
        }

        /**
         * Build call for comment_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The comment was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return comment_0Call(commentId, videoId, _callback);
        }


        /**
         * Execute comment_0 request
         * @return Comment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The comment was returned. </td><td>  -  </td></tr>
         </table>
         */
        public Comment execute() throws ApiException {
            ApiResponse<Comment> localVarResp = comment_0WithHttpInfo(commentId, videoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute comment_0 request with HTTP info returned
         * @return ApiResponse&lt;Comment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The comment was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Comment> executeWithHttpInfo() throws ApiException {
            return comment_0WithHttpInfo(commentId, videoId);
        }

        /**
         * Execute comment_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The comment was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Comment> _callback) throws ApiException {
            return comment_0Async(commentId, videoId, _callback);
        }
    }

    /**
     * Get a specific video comment
     * This method returns the specified video comment.
     * @param commentId The ID of the comment. (required)
     * @param videoId The ID of the video. (required)
     * @return Comment0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comment was returned. </td><td>  -  </td></tr>
     </table>
     */
    public Comment0RequestBuilder comment_0(double commentId, double videoId) throws IllegalArgumentException {
        
        
        return new Comment0RequestBuilder(commentId, videoId);
    }
    private okhttp3.Call comment_1Call(Double commentId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/comments/{comment_id}"
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call comment_1ValidateBeforeCall(Double commentId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling comment_1(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling comment_1(Async)");
        }

        return comment_1Call(commentId, videoId, _callback);

    }


    private ApiResponse<Void> comment_1WithHttpInfo(Double commentId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = comment_1ValidateBeforeCall(commentId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call comment_1Async(Double commentId, Double videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = comment_1ValidateBeforeCall(commentId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class Comment1RequestBuilder {
        private final Double commentId;
        private final Double videoId;

        private Comment1RequestBuilder(double commentId, double videoId) {
            this.commentId = commentId;
            this.videoId = videoId;
        }

        /**
         * Build call for comment_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The comment was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return comment_1Call(commentId, videoId, _callback);
        }


        /**
         * Execute comment_1 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The comment was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            comment_1WithHttpInfo(commentId, videoId);
        }

        /**
         * Execute comment_1 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The comment was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return comment_1WithHttpInfo(commentId, videoId);
        }

        /**
         * Execute comment_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The comment was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return comment_1Async(commentId, videoId, _callback);
        }
    }

    /**
     * Delete a video comment
     * This method deletes the specified video comment. The authenticated user must be the owner of the comment.
     * @param commentId The ID of the comment. (required)
     * @param videoId The ID of the video. (required)
     * @return Comment1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The comment was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public Comment1RequestBuilder comment_1(double commentId, double videoId) throws IllegalArgumentException {
        
        
        return new Comment1RequestBuilder(commentId, videoId);
    }
    private okhttp3.Call comment_2Call(Double commentId, Double videoId, EditCommentRequest editCommentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editCommentRequest;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/comments/{comment_id}"
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.comment+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.comment+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call comment_2ValidateBeforeCall(Double commentId, Double videoId, EditCommentRequest editCommentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling comment_2(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling comment_2(Async)");
        }

        // verify the required parameter 'editCommentRequest' is set
        if (editCommentRequest == null) {
            throw new ApiException("Missing the required parameter 'editCommentRequest' when calling comment_2(Async)");
        }

        return comment_2Call(commentId, videoId, editCommentRequest, _callback);

    }


    private ApiResponse<Comment> comment_2WithHttpInfo(Double commentId, Double videoId, EditCommentRequest editCommentRequest) throws ApiException {
        okhttp3.Call localVarCall = comment_2ValidateBeforeCall(commentId, videoId, editCommentRequest, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call comment_2Async(Double commentId, Double videoId, EditCommentRequest editCommentRequest, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = comment_2ValidateBeforeCall(commentId, videoId, editCommentRequest, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Comment2RequestBuilder {
        private final String text;
        private final Double commentId;
        private final Double videoId;

        private Comment2RequestBuilder(String text, double commentId, double videoId) {
            this.text = text;
            this.commentId = commentId;
            this.videoId = videoId;
        }

        /**
         * Build call for comment_2
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The comment was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EditCommentRequest editCommentRequest = buildBodyParams();
            return comment_2Call(commentId, videoId, editCommentRequest, _callback);
        }

        private EditCommentRequest buildBodyParams() {
            EditCommentRequest editCommentRequest = new EditCommentRequest();
            editCommentRequest.text(this.text);
            return editCommentRequest;
        }

        /**
         * Execute comment_2 request
         * @return Comment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The comment was edited. </td><td>  -  </td></tr>
         </table>
         */
        public Comment execute() throws ApiException {
            EditCommentRequest editCommentRequest = buildBodyParams();
            ApiResponse<Comment> localVarResp = comment_2WithHttpInfo(commentId, videoId, editCommentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute comment_2 request with HTTP info returned
         * @return ApiResponse&lt;Comment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The comment was edited. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Comment> executeWithHttpInfo() throws ApiException {
            EditCommentRequest editCommentRequest = buildBodyParams();
            return comment_2WithHttpInfo(commentId, videoId, editCommentRequest);
        }

        /**
         * Execute comment_2 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The comment was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Comment> _callback) throws ApiException {
            EditCommentRequest editCommentRequest = buildBodyParams();
            return comment_2Async(commentId, videoId, editCommentRequest, _callback);
        }
    }

    /**
     * Edit a video comment
     * This method edits the specified video comment. The authenticated user must be the owner of the comment.
     * @param commentId The ID of the comment. (required)
     * @param videoId The ID of the video. (required)
     * @param editCommentRequest  (required)
     * @return Comment2RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comment was edited. </td><td>  -  </td></tr>
     </table>
     */
    public Comment2RequestBuilder comment_2(String text, double commentId, double videoId) throws IllegalArgumentException {
        if (text == null) throw new IllegalArgumentException("\"text\" is required but got null");
            

        
        
        return new Comment2RequestBuilder(text, commentId, videoId);
    }
    private okhttp3.Call commentsCall(Double videoId, String direction, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/comments"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.comment+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call commentsValidateBeforeCall(Double videoId, String direction, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling comments(Async)");
        }

        return commentsCall(videoId, direction, page, perPage, _callback);

    }


    private ApiResponse<List<Comment>> commentsWithHttpInfo(Double videoId, String direction, Double page, Double perPage) throws ApiException {
        okhttp3.Call localVarCall = commentsValidateBeforeCall(videoId, direction, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Comment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call commentsAsync(Double videoId, String direction, Double page, Double perPage, final ApiCallback<List<Comment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = commentsValidateBeforeCall(videoId, direction, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Comment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CommentsRequestBuilder {
        private final Double videoId;
        private String direction;
        private Double page;
        private Double perPage;

        private CommentsRequestBuilder(double videoId) {
            this.videoId = videoId;
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return CommentsRequestBuilder
         */
        public CommentsRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return CommentsRequestBuilder
         */
        public CommentsRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return CommentsRequestBuilder
         */
        public CommentsRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for comments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The comments were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return commentsCall(videoId, direction, page, perPage, _callback);
        }


        /**
         * Execute comments request
         * @return List&lt;Comment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The comments were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Comment> execute() throws ApiException {
            ApiResponse<List<Comment>> localVarResp = commentsWithHttpInfo(videoId, direction, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute comments request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Comment&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The comments were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Comment>> executeWithHttpInfo() throws ApiException {
            return commentsWithHttpInfo(videoId, direction, page, perPage);
        }

        /**
         * Execute comments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The comments were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Comment>> _callback) throws ApiException {
            return commentsAsync(videoId, direction, page, perPage, _callback);
        }
    }

    /**
     * Get all the video comments on a video
     * This method returns every video comment on the specified video.
     * @param videoId The ID of the video. (required)
     * @return CommentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comments were returned. </td><td>  -  </td></tr>
     </table>
     */
    public CommentsRequestBuilder comments(double videoId) throws IllegalArgumentException {
        
        return new CommentsRequestBuilder(videoId);
    }
    private okhttp3.Call createReplyCall(Double commentId, Double videoId, VideosVideoCommentsCreateReplyRequest videosVideoCommentsCreateReplyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = videosVideoCommentsCreateReplyRequest;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/comments/{comment_id}/replies"
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.comment+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.comment+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReplyValidateBeforeCall(Double commentId, Double videoId, VideosVideoCommentsCreateReplyRequest videosVideoCommentsCreateReplyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling createReply(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling createReply(Async)");
        }

        // verify the required parameter 'videosVideoCommentsCreateReplyRequest' is set
        if (videosVideoCommentsCreateReplyRequest == null) {
            throw new ApiException("Missing the required parameter 'videosVideoCommentsCreateReplyRequest' when calling createReply(Async)");
        }

        return createReplyCall(commentId, videoId, videosVideoCommentsCreateReplyRequest, _callback);

    }


    private ApiResponse<Comment> createReplyWithHttpInfo(Double commentId, Double videoId, VideosVideoCommentsCreateReplyRequest videosVideoCommentsCreateReplyRequest) throws ApiException {
        okhttp3.Call localVarCall = createReplyValidateBeforeCall(commentId, videoId, videosVideoCommentsCreateReplyRequest, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createReplyAsync(Double commentId, Double videoId, VideosVideoCommentsCreateReplyRequest videosVideoCommentsCreateReplyRequest, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReplyValidateBeforeCall(commentId, videoId, videosVideoCommentsCreateReplyRequest, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateReplyRequestBuilder {
        private final String text;
        private final Double commentId;
        private final Double videoId;

        private CreateReplyRequestBuilder(String text, double commentId, double videoId) {
            this.text = text;
            this.commentId = commentId;
            this.videoId = videoId;
        }

        /**
         * Build call for createReply
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The reply was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VideosVideoCommentsCreateReplyRequest videosVideoCommentsCreateReplyRequest = buildBodyParams();
            return createReplyCall(commentId, videoId, videosVideoCommentsCreateReplyRequest, _callback);
        }

        private VideosVideoCommentsCreateReplyRequest buildBodyParams() {
            VideosVideoCommentsCreateReplyRequest videosVideoCommentsCreateReplyRequest = new VideosVideoCommentsCreateReplyRequest();
            videosVideoCommentsCreateReplyRequest.text(this.text);
            return videosVideoCommentsCreateReplyRequest;
        }

        /**
         * Execute createReply request
         * @return Comment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The reply was added. </td><td>  -  </td></tr>
         </table>
         */
        public Comment execute() throws ApiException {
            VideosVideoCommentsCreateReplyRequest videosVideoCommentsCreateReplyRequest = buildBodyParams();
            ApiResponse<Comment> localVarResp = createReplyWithHttpInfo(commentId, videoId, videosVideoCommentsCreateReplyRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createReply request with HTTP info returned
         * @return ApiResponse&lt;Comment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The reply was added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Comment> executeWithHttpInfo() throws ApiException {
            VideosVideoCommentsCreateReplyRequest videosVideoCommentsCreateReplyRequest = buildBodyParams();
            return createReplyWithHttpInfo(commentId, videoId, videosVideoCommentsCreateReplyRequest);
        }

        /**
         * Execute createReply request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The reply was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Comment> _callback) throws ApiException {
            VideosVideoCommentsCreateReplyRequest videosVideoCommentsCreateReplyRequest = buildBodyParams();
            return createReplyAsync(commentId, videoId, videosVideoCommentsCreateReplyRequest, _callback);
        }
    }

    /**
     * Add a reply to a video comment
     * This method adds a reply to the specified video comment.
     * @param commentId The ID of the comment. (required)
     * @param videoId The ID of the video. (required)
     * @param videosVideoCommentsCreateReplyRequest  (required)
     * @return CreateReplyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The reply was added. </td><td>  -  </td></tr>
     </table>
     */
    public CreateReplyRequestBuilder createReply(String text, double commentId, double videoId) throws IllegalArgumentException {
        if (text == null) throw new IllegalArgumentException("\"text\" is required but got null");
            

        
        
        return new CreateReplyRequestBuilder(text, commentId, videoId);
    }
    private okhttp3.Call getAllRepliesCall(Double channelId, Double videoId, String direction, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/videos/{video_id}/comments"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.comment+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllRepliesValidateBeforeCall(Double channelId, Double videoId, String direction, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getAllReplies(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getAllReplies(Async)");
        }

        return getAllRepliesCall(channelId, videoId, direction, page, perPage, _callback);

    }


    private ApiResponse<List<Comment>> getAllRepliesWithHttpInfo(Double channelId, Double videoId, String direction, Double page, Double perPage) throws ApiException {
        okhttp3.Call localVarCall = getAllRepliesValidateBeforeCall(channelId, videoId, direction, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Comment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllRepliesAsync(Double channelId, Double videoId, String direction, Double page, Double perPage, final ApiCallback<List<Comment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllRepliesValidateBeforeCall(channelId, videoId, direction, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Comment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRepliesRequestBuilder {
        private final Double channelId;
        private final Double videoId;
        private String direction;
        private Double page;
        private Double perPage;

        private GetAllRepliesRequestBuilder(double channelId, double videoId) {
            this.channelId = channelId;
            this.videoId = videoId;
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return GetAllRepliesRequestBuilder
         */
        public GetAllRepliesRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetAllRepliesRequestBuilder
         */
        public GetAllRepliesRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetAllRepliesRequestBuilder
         */
        public GetAllRepliesRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getAllReplies
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The comments were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllRepliesCall(channelId, videoId, direction, page, perPage, _callback);
        }


        /**
         * Execute getAllReplies request
         * @return List&lt;Comment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The comments were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Comment> execute() throws ApiException {
            ApiResponse<List<Comment>> localVarResp = getAllRepliesWithHttpInfo(channelId, videoId, direction, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllReplies request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Comment&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The comments were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Comment>> executeWithHttpInfo() throws ApiException {
            return getAllRepliesWithHttpInfo(channelId, videoId, direction, page, perPage);
        }

        /**
         * Execute getAllReplies request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The comments were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Comment>> _callback) throws ApiException {
            return getAllRepliesAsync(channelId, videoId, direction, page, perPage, _callback);
        }
    }

    /**
     * Get all the video comments on a video
     * This method returns every video comment on the specified video.
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @return GetAllRepliesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comments were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRepliesRequestBuilder getAllReplies(double channelId, double videoId) throws IllegalArgumentException {
        
        
        return new GetAllRepliesRequestBuilder(channelId, videoId);
    }
    private okhttp3.Call getAllReplies_0Call(Double commentId, Double videoId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/comments/{comment_id}/replies"
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.comment+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllReplies_0ValidateBeforeCall(Double commentId, Double videoId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling getAllReplies_0(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getAllReplies_0(Async)");
        }

        return getAllReplies_0Call(commentId, videoId, page, perPage, _callback);

    }


    private ApiResponse<List<Comment>> getAllReplies_0WithHttpInfo(Double commentId, Double videoId, Double page, Double perPage) throws ApiException {
        okhttp3.Call localVarCall = getAllReplies_0ValidateBeforeCall(commentId, videoId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Comment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllReplies_0Async(Double commentId, Double videoId, Double page, Double perPage, final ApiCallback<List<Comment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllReplies_0ValidateBeforeCall(commentId, videoId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Comment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllReplies0RequestBuilder {
        private final Double commentId;
        private final Double videoId;
        private Double page;
        private Double perPage;

        private GetAllReplies0RequestBuilder(double commentId, double videoId) {
            this.commentId = commentId;
            this.videoId = videoId;
        }

        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetAllReplies0RequestBuilder
         */
        public GetAllReplies0RequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetAllReplies0RequestBuilder
         */
        public GetAllReplies0RequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getAllReplies_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The replies were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllReplies_0Call(commentId, videoId, page, perPage, _callback);
        }


        /**
         * Execute getAllReplies_0 request
         * @return List&lt;Comment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The replies were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Comment> execute() throws ApiException {
            ApiResponse<List<Comment>> localVarResp = getAllReplies_0WithHttpInfo(commentId, videoId, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllReplies_0 request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Comment&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The replies were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Comment>> executeWithHttpInfo() throws ApiException {
            return getAllReplies_0WithHttpInfo(commentId, videoId, page, perPage);
        }

        /**
         * Execute getAllReplies_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The replies were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Comment>> _callback) throws ApiException {
            return getAllReplies_0Async(commentId, videoId, page, perPage, _callback);
        }
    }

    /**
     * Get all the replies to a video comment
     * This method returns every reply to the specified video comment.
     * @param commentId The ID of the comment. (required)
     * @param videoId The ID of the video. (required)
     * @return GetAllReplies0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The replies were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllReplies0RequestBuilder getAllReplies_0(double commentId, double videoId) throws IllegalArgumentException {
        
        
        return new GetAllReplies0RequestBuilder(commentId, videoId);
    }
}
