/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Channel;
import com.konfigthis.client.model.CreateChannelRequest;
import com.konfigthis.client.model.EditChannelRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ChannelsEssentialsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChannelsEssentialsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ChannelsEssentialsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call channelCall(CreateChannelRequest createChannelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createChannelRequest;

        // create path and map variables
        String localVarPath = "/channels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.channel+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.channel+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call channelValidateBeforeCall(CreateChannelRequest createChannelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createChannelRequest' is set
        if (createChannelRequest == null) {
            throw new ApiException("Missing the required parameter 'createChannelRequest' when calling channel(Async)");
        }

        return channelCall(createChannelRequest, _callback);

    }


    private ApiResponse<Channel> channelWithHttpInfo(CreateChannelRequest createChannelRequest) throws ApiException {
        okhttp3.Call localVarCall = channelValidateBeforeCall(createChannelRequest, null);
        Type localVarReturnType = new TypeToken<Channel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call channelAsync(CreateChannelRequest createChannelRequest, final ApiCallback<Channel> _callback) throws ApiException {

        okhttp3.Call localVarCall = channelValidateBeforeCall(createChannelRequest, _callback);
        Type localVarReturnType = new TypeToken<Channel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ChannelRequestBuilder {
        private final String name;
        private final String privacy;
        private String description;
        private String link;

        private ChannelRequestBuilder(String name, String privacy) {
            this.name = name;
            this.privacy = privacy;
        }

        /**
         * Set description
         * @param description The description of the channel. (optional)
         * @return ChannelRequestBuilder
         */
        public ChannelRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set link
         * @param link The link to access the channel. You can use a custom name in the URL in place of a numeric channel ID, as in &#x60;/channels/{url_custom}&#x60;. (optional)
         * @return ChannelRequestBuilder
         */
        public ChannelRequestBuilder link(String link) {
            this.link = link;
            return this;
        }
        
        /**
         * Build call for channel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The channel was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateChannelRequest createChannelRequest = buildBodyParams();
            return channelCall(createChannelRequest, _callback);
        }

        private CreateChannelRequest buildBodyParams() {
            CreateChannelRequest createChannelRequest = new CreateChannelRequest();
            createChannelRequest.description(this.description);
            createChannelRequest.link(this.link);
            createChannelRequest.name(this.name);
            if (this.privacy != null)
            createChannelRequest.privacy(CreateChannelRequest.PrivacyEnum.fromValue(this.privacy));
            return createChannelRequest;
        }

        /**
         * Execute channel request
         * @return Channel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The channel was created. </td><td>  -  </td></tr>
         </table>
         */
        public Channel execute() throws ApiException {
            CreateChannelRequest createChannelRequest = buildBodyParams();
            ApiResponse<Channel> localVarResp = channelWithHttpInfo(createChannelRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute channel request with HTTP info returned
         * @return ApiResponse&lt;Channel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The channel was created. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Channel> executeWithHttpInfo() throws ApiException {
            CreateChannelRequest createChannelRequest = buildBodyParams();
            return channelWithHttpInfo(createChannelRequest);
        }

        /**
         * Execute channel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The channel was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Channel> _callback) throws ApiException {
            CreateChannelRequest createChannelRequest = buildBodyParams();
            return channelAsync(createChannelRequest, _callback);
        }
    }

    /**
     * Create a channel
     * This method creates a new channel.
     * @param createChannelRequest  (required)
     * @return ChannelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The channel was created. </td><td>  -  </td></tr>
     </table>
     */
    public ChannelRequestBuilder channel(String name, String privacy) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (privacy == null) throw new IllegalArgumentException("\"privacy\" is required but got null");
            

        return new ChannelRequestBuilder(name, privacy);
    }
    private okhttp3.Call channel_0Call(Double channelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.channel+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call channel_0ValidateBeforeCall(Double channelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling channel_0(Async)");
        }

        return channel_0Call(channelId, _callback);

    }


    private ApiResponse<Channel> channel_0WithHttpInfo(Double channelId) throws ApiException {
        okhttp3.Call localVarCall = channel_0ValidateBeforeCall(channelId, null);
        Type localVarReturnType = new TypeToken<Channel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call channel_0Async(Double channelId, final ApiCallback<Channel> _callback) throws ApiException {

        okhttp3.Call localVarCall = channel_0ValidateBeforeCall(channelId, _callback);
        Type localVarReturnType = new TypeToken<Channel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Channel0RequestBuilder {
        private final Double channelId;

        private Channel0RequestBuilder(double channelId) {
            this.channelId = channelId;
        }

        /**
         * Build call for channel_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The channel was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return channel_0Call(channelId, _callback);
        }


        /**
         * Execute channel_0 request
         * @return Channel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The channel was returned. </td><td>  -  </td></tr>
         </table>
         */
        public Channel execute() throws ApiException {
            ApiResponse<Channel> localVarResp = channel_0WithHttpInfo(channelId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute channel_0 request with HTTP info returned
         * @return ApiResponse&lt;Channel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The channel was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Channel> executeWithHttpInfo() throws ApiException {
            return channel_0WithHttpInfo(channelId);
        }

        /**
         * Execute channel_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The channel was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Channel> _callback) throws ApiException {
            return channel_0Async(channelId, _callback);
        }
    }

    /**
     * Get a specific channel
     * This method returns a single channel.
     * @param channelId The ID of the channel. (required)
     * @return Channel0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The channel was returned. </td><td>  -  </td></tr>
     </table>
     */
    public Channel0RequestBuilder channel_0(double channelId) throws IllegalArgumentException {
        
        return new Channel0RequestBuilder(channelId);
    }
    private okhttp3.Call channel_1Call(Double channelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call channel_1ValidateBeforeCall(Double channelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling channel_1(Async)");
        }

        return channel_1Call(channelId, _callback);

    }


    private ApiResponse<Void> channel_1WithHttpInfo(Double channelId) throws ApiException {
        okhttp3.Call localVarCall = channel_1ValidateBeforeCall(channelId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call channel_1Async(Double channelId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = channel_1ValidateBeforeCall(channelId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class Channel1RequestBuilder {
        private final Double channelId;

        private Channel1RequestBuilder(double channelId) {
            this.channelId = channelId;
        }

        /**
         * Build call for channel_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The channel was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return channel_1Call(channelId, _callback);
        }


        /**
         * Execute channel_1 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The channel was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            channel_1WithHttpInfo(channelId);
        }

        /**
         * Execute channel_1 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The channel was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return channel_1WithHttpInfo(channelId);
        }

        /**
         * Execute channel_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The channel was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return channel_1Async(channelId, _callback);
        }
    }

    /**
     * Delete a channel
     * This method deletes the specified channel.
     * @param channelId The ID of the channel. (required)
     * @return Channel1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The channel was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public Channel1RequestBuilder channel_1(double channelId) throws IllegalArgumentException {
        
        return new Channel1RequestBuilder(channelId);
    }
    private okhttp3.Call channel_2Call(Double channelId, EditChannelRequest editChannelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editChannelRequest;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.channel+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.channel+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call channel_2ValidateBeforeCall(Double channelId, EditChannelRequest editChannelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling channel_2(Async)");
        }

        return channel_2Call(channelId, editChannelRequest, _callback);

    }


    private ApiResponse<Channel> channel_2WithHttpInfo(Double channelId, EditChannelRequest editChannelRequest) throws ApiException {
        okhttp3.Call localVarCall = channel_2ValidateBeforeCall(channelId, editChannelRequest, null);
        Type localVarReturnType = new TypeToken<Channel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call channel_2Async(Double channelId, EditChannelRequest editChannelRequest, final ApiCallback<Channel> _callback) throws ApiException {

        okhttp3.Call localVarCall = channel_2ValidateBeforeCall(channelId, editChannelRequest, _callback);
        Type localVarReturnType = new TypeToken<Channel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Channel2RequestBuilder {
        private final Double channelId;
        private String description;
        private String link;
        private String name;
        private String privacy;

        private Channel2RequestBuilder(double channelId) {
            this.channelId = channelId;
        }

        /**
         * Set description
         * @param description The description of the channel. (optional)
         * @return Channel2RequestBuilder
         */
        public Channel2RequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set link
         * @param link The link to access the channel. You can use a custom name in the URL in place of a numeric channel ID, as in &#x60;/channels/{url_custom}&#x60;. Submitting &#x60;\\\&quot;\\\&quot;&#x60; for this field removes the link alias. (optional)
         * @return Channel2RequestBuilder
         */
        public Channel2RequestBuilder link(String link) {
            this.link = link;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the channel. (optional)
         * @return Channel2RequestBuilder
         */
        public Channel2RequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set privacy
         * @param privacy The privacy level of the channel.  Option descriptions:  * &#x60;anybody&#x60; - Anyone can access the channel.  * &#x60;moderators&#x60; - Only moderators can access the channel.  * &#x60;users&#x60; - Only moderators and designated users can access the channel.  (optional)
         * @return Channel2RequestBuilder
         */
        public Channel2RequestBuilder privacy(String privacy) {
            this.privacy = privacy;
            return this;
        }
        
        /**
         * Build call for channel_2
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The channel was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EditChannelRequest editChannelRequest = buildBodyParams();
            return channel_2Call(channelId, editChannelRequest, _callback);
        }

        private EditChannelRequest buildBodyParams() {
            EditChannelRequest editChannelRequest = new EditChannelRequest();
            editChannelRequest.description(this.description);
            editChannelRequest.link(this.link);
            editChannelRequest.name(this.name);
            if (this.privacy != null)
            editChannelRequest.privacy(EditChannelRequest.PrivacyEnum.fromValue(this.privacy));
            return editChannelRequest;
        }

        /**
         * Execute channel_2 request
         * @return Channel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The channel was edited. </td><td>  -  </td></tr>
         </table>
         */
        public Channel execute() throws ApiException {
            EditChannelRequest editChannelRequest = buildBodyParams();
            ApiResponse<Channel> localVarResp = channel_2WithHttpInfo(channelId, editChannelRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute channel_2 request with HTTP info returned
         * @return ApiResponse&lt;Channel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The channel was edited. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Channel> executeWithHttpInfo() throws ApiException {
            EditChannelRequest editChannelRequest = buildBodyParams();
            return channel_2WithHttpInfo(channelId, editChannelRequest);
        }

        /**
         * Execute channel_2 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The channel was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Channel> _callback) throws ApiException {
            EditChannelRequest editChannelRequest = buildBodyParams();
            return channel_2Async(channelId, editChannelRequest, _callback);
        }
    }

    /**
     * Edit a channel
     * This method edits the specified channel.
     * @param channelId The ID of the channel. (required)
     * @return Channel2RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The channel was edited. </td><td>  -  </td></tr>
     </table>
     */
    public Channel2RequestBuilder channel_2(double channelId) throws IllegalArgumentException {
        
        return new Channel2RequestBuilder(channelId);
    }
    private okhttp3.Call channelsCall(String direction, String filter, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.channel+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call channelsValidateBeforeCall(String direction, String filter, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        return channelsCall(direction, filter, page, perPage, query, sort, _callback);

    }


    private ApiResponse<List<Channel>> channelsWithHttpInfo(String direction, String filter, Double page, Double perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = channelsValidateBeforeCall(direction, filter, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<Channel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call channelsAsync(String direction, String filter, Double page, Double perPage, String query, String sort, final ApiCallback<List<Channel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = channelsValidateBeforeCall(direction, filter, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Channel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ChannelsRequestBuilder {
        private String direction;
        private String filter;
        private Double page;
        private Double perPage;
        private String query;
        private String sort;

        private ChannelsRequestBuilder() {
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return ChannelsRequestBuilder
         */
        public ChannelsRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The attribute by which to filter the results.  Option descriptions:  * &#x60;featured&#x60; - Return featured channels.  (optional)
         * @return ChannelsRequestBuilder
         */
        public ChannelsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return ChannelsRequestBuilder
         */
        public ChannelsRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return ChannelsRequestBuilder
         */
        public ChannelsRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set query
         * @param query The search query to use to filter the results. (optional)
         * @return ChannelsRequestBuilder
         */
        public ChannelsRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;default&#x60; - Sort the results by creation date.  * &#x60;followers&#x60; - Sort the results by number of followers.  * &#x60;relevant&#x60; - Sort the results by relevance. This option is available for search queries only.  * &#x60;videos&#x60; - Sort the results by number of videos.  (optional)
         * @return ChannelsRequestBuilder
         */
        public ChannelsRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for channels
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The channels were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return channelsCall(direction, filter, page, perPage, query, sort, _callback);
        }


        /**
         * Execute channels request
         * @return List&lt;Channel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The channels were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Channel> execute() throws ApiException {
            ApiResponse<List<Channel>> localVarResp = channelsWithHttpInfo(direction, filter, page, perPage, query, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute channels request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Channel&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The channels were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Channel>> executeWithHttpInfo() throws ApiException {
            return channelsWithHttpInfo(direction, filter, page, perPage, query, sort);
        }

        /**
         * Execute channels request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The channels were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Channel>> _callback) throws ApiException {
            return channelsAsync(direction, filter, page, perPage, query, sort, _callback);
        }
    }

    /**
     * Get all channels
     * This method returns all available channels.
     * @return ChannelsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The channels were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ChannelsRequestBuilder channels() throws IllegalArgumentException {
        return new ChannelsRequestBuilder();
    }
    private okhttp3.Call getUserSubscriptionsCall(String direction, String filter, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/channels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.channel+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserSubscriptionsValidateBeforeCall(String direction, String filter, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        return getUserSubscriptionsCall(direction, filter, page, perPage, query, sort, _callback);

    }


    private ApiResponse<List<Channel>> getUserSubscriptionsWithHttpInfo(String direction, String filter, Double page, Double perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = getUserSubscriptionsValidateBeforeCall(direction, filter, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<Channel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserSubscriptionsAsync(String direction, String filter, Double page, Double perPage, String query, String sort, final ApiCallback<List<Channel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserSubscriptionsValidateBeforeCall(direction, filter, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Channel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserSubscriptionsRequestBuilder {
        private String direction;
        private String filter;
        private Double page;
        private Double perPage;
        private String query;
        private String sort;

        private GetUserSubscriptionsRequestBuilder() {
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return GetUserSubscriptionsRequestBuilder
         */
        public GetUserSubscriptionsRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The attribute by which to filter the results.  Option descriptions:  * &#x60;moderated&#x60; - Return moderated channels.  (optional)
         * @return GetUserSubscriptionsRequestBuilder
         */
        public GetUserSubscriptionsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetUserSubscriptionsRequestBuilder
         */
        public GetUserSubscriptionsRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetUserSubscriptionsRequestBuilder
         */
        public GetUserSubscriptionsRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set query
         * @param query The search query to use to filter the results. (optional)
         * @return GetUserSubscriptionsRequestBuilder
         */
        public GetUserSubscriptionsRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;followers&#x60; - Sort the results by number of followers.  * &#x60;videos&#x60; - Sort the results by number of videos.  (optional)
         * @return GetUserSubscriptionsRequestBuilder
         */
        public GetUserSubscriptionsRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getUserSubscriptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The channels were returned. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> No channel has been followed since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserSubscriptionsCall(direction, filter, page, perPage, query, sort, _callback);
        }


        /**
         * Execute getUserSubscriptions request
         * @return List&lt;Channel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The channels were returned. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> No channel has been followed since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
         </table>
         */
        public List<Channel> execute() throws ApiException {
            ApiResponse<List<Channel>> localVarResp = getUserSubscriptionsWithHttpInfo(direction, filter, page, perPage, query, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserSubscriptions request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Channel&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The channels were returned. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> No channel has been followed since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Channel>> executeWithHttpInfo() throws ApiException {
            return getUserSubscriptionsWithHttpInfo(direction, filter, page, perPage, query, sort);
        }

        /**
         * Execute getUserSubscriptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The channels were returned. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> No channel has been followed since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Channel>> _callback) throws ApiException {
            return getUserSubscriptionsAsync(direction, filter, page, perPage, query, sort, _callback);
        }
    }

    /**
     * Get all the channels to which a user subscribes
     * This method returns all the channels to which the specified user subscribes.
     * @return GetUserSubscriptionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The channels were returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> No channel has been followed since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
     </table>
     */
    public GetUserSubscriptionsRequestBuilder getUserSubscriptions() throws IllegalArgumentException {
        return new GetUserSubscriptionsRequestBuilder();
    }
    private okhttp3.Call getUserSubscriptions_0Call(Double userId, String direction, String filter, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/channels"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.channel+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserSubscriptions_0ValidateBeforeCall(Double userId, String direction, String filter, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserSubscriptions_0(Async)");
        }

        return getUserSubscriptions_0Call(userId, direction, filter, page, perPage, query, sort, _callback);

    }


    private ApiResponse<List<Channel>> getUserSubscriptions_0WithHttpInfo(Double userId, String direction, String filter, Double page, Double perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = getUserSubscriptions_0ValidateBeforeCall(userId, direction, filter, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<Channel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserSubscriptions_0Async(Double userId, String direction, String filter, Double page, Double perPage, String query, String sort, final ApiCallback<List<Channel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserSubscriptions_0ValidateBeforeCall(userId, direction, filter, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Channel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserSubscriptions0RequestBuilder {
        private final Double userId;
        private String direction;
        private String filter;
        private Double page;
        private Double perPage;
        private String query;
        private String sort;

        private GetUserSubscriptions0RequestBuilder(double userId) {
            this.userId = userId;
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return GetUserSubscriptions0RequestBuilder
         */
        public GetUserSubscriptions0RequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The attribute by which to filter the results.  Option descriptions:  * &#x60;moderated&#x60; - Return moderated channels.  (optional)
         * @return GetUserSubscriptions0RequestBuilder
         */
        public GetUserSubscriptions0RequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetUserSubscriptions0RequestBuilder
         */
        public GetUserSubscriptions0RequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetUserSubscriptions0RequestBuilder
         */
        public GetUserSubscriptions0RequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set query
         * @param query The search query to use to filter the results. (optional)
         * @return GetUserSubscriptions0RequestBuilder
         */
        public GetUserSubscriptions0RequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;followers&#x60; - Sort the results by number of followers.  * &#x60;videos&#x60; - Sort the results by number of videos.  (optional)
         * @return GetUserSubscriptions0RequestBuilder
         */
        public GetUserSubscriptions0RequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getUserSubscriptions_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The channels were returned. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> No channel has been followed since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserSubscriptions_0Call(userId, direction, filter, page, perPage, query, sort, _callback);
        }


        /**
         * Execute getUserSubscriptions_0 request
         * @return List&lt;Channel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The channels were returned. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> No channel has been followed since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
         </table>
         */
        public List<Channel> execute() throws ApiException {
            ApiResponse<List<Channel>> localVarResp = getUserSubscriptions_0WithHttpInfo(userId, direction, filter, page, perPage, query, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserSubscriptions_0 request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Channel&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The channels were returned. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> No channel has been followed since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Channel>> executeWithHttpInfo() throws ApiException {
            return getUserSubscriptions_0WithHttpInfo(userId, direction, filter, page, perPage, query, sort);
        }

        /**
         * Execute getUserSubscriptions_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The channels were returned. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> No channel has been followed since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Channel>> _callback) throws ApiException {
            return getUserSubscriptions_0Async(userId, direction, filter, page, perPage, query, sort, _callback);
        }
    }

    /**
     * Get all the channels to which a user subscribes
     * This method returns all the channels to which the specified user subscribes.
     * @param userId The ID of the user. (required)
     * @return GetUserSubscriptions0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The channels were returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> No channel has been followed since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
     </table>
     */
    public GetUserSubscriptions0RequestBuilder getUserSubscriptions_0(double userId) throws IllegalArgumentException {
        
        return new GetUserSubscriptions0RequestBuilder(userId);
    }
}
