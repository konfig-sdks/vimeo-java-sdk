/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Picture;
import com.konfigthis.client.model.ShowcasesCustomShowcaseLogosReplaceLogoRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ShowcasesCustomShowcaseLogosApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ShowcasesCustomShowcaseLogosApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ShowcasesCustomShowcaseLogosApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addCustomLogoCall(Double albumId, Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}/logos"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCustomLogoValidateBeforeCall(Double albumId, Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling addCustomLogo(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling addCustomLogo(Async)");
        }

        return addCustomLogoCall(albumId, userId, _callback);

    }


    private ApiResponse<Picture> addCustomLogoWithHttpInfo(Double albumId, Double userId) throws ApiException {
        okhttp3.Call localVarCall = addCustomLogoValidateBeforeCall(albumId, userId, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addCustomLogoAsync(Double albumId, Double userId, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCustomLogoValidateBeforeCall(albumId, userId, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddCustomLogoRequestBuilder {
        private final Double albumId;
        private final Double userId;

        private AddCustomLogoRequestBuilder(double albumId, double userId) {
            this.albumId = albumId;
            this.userId = userId;
        }

        /**
         * Build call for addCustomLogo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The logo was added to the showcase. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addCustomLogoCall(albumId, userId, _callback);
        }


        /**
         * Execute addCustomLogo request
         * @return Picture
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The logo was added to the showcase. </td><td>  -  </td></tr>
         </table>
         */
        public Picture execute() throws ApiException {
            ApiResponse<Picture> localVarResp = addCustomLogoWithHttpInfo(albumId, userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addCustomLogo request with HTTP info returned
         * @return ApiResponse&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The logo was added to the showcase. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Picture> executeWithHttpInfo() throws ApiException {
            return addCustomLogoWithHttpInfo(albumId, userId);
        }

        /**
         * Execute addCustomLogo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The logo was added to the showcase. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Picture> _callback) throws ApiException {
            return addCustomLogoAsync(albumId, userId, _callback);
        }
    }

    /**
     * Add a custom logo to a showcase
     * This method adds an image file as a custom logo to the specified showcase. The authenticated user must be the owner of the showcase.  For information on how to upload the logo, see our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails) guide.
     * @param albumId The ID of the showcase. (required)
     * @param userId The ID of the user. (required)
     * @return AddCustomLogoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The logo was added to the showcase. </td><td>  -  </td></tr>
     </table>
     */
    public AddCustomLogoRequestBuilder addCustomLogo(double albumId, double userId) throws IllegalArgumentException {
        
        
        return new AddCustomLogoRequestBuilder(albumId, userId);
    }
    private okhttp3.Call deleteCustomLogoCall(Double albumId, Double logoId, Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}/logos/{logo_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "logo_id" + "}", localVarApiClient.escapeString(logoId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCustomLogoValidateBeforeCall(Double albumId, Double logoId, Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling deleteCustomLogo(Async)");
        }

        // verify the required parameter 'logoId' is set
        if (logoId == null) {
            throw new ApiException("Missing the required parameter 'logoId' when calling deleteCustomLogo(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteCustomLogo(Async)");
        }

        return deleteCustomLogoCall(albumId, logoId, userId, _callback);

    }


    private ApiResponse<Void> deleteCustomLogoWithHttpInfo(Double albumId, Double logoId, Double userId) throws ApiException {
        okhttp3.Call localVarCall = deleteCustomLogoValidateBeforeCall(albumId, logoId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteCustomLogoAsync(Double albumId, Double logoId, Double userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCustomLogoValidateBeforeCall(albumId, logoId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteCustomLogoRequestBuilder {
        private final Double albumId;
        private final Double logoId;
        private final Double userId;

        private DeleteCustomLogoRequestBuilder(double albumId, double logoId, double userId) {
            this.albumId = albumId;
            this.logoId = logoId;
            this.userId = userId;
        }

        /**
         * Build call for deleteCustomLogo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The custom logo was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCustomLogoCall(albumId, logoId, userId, _callback);
        }


        /**
         * Execute deleteCustomLogo request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The custom logo was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteCustomLogoWithHttpInfo(albumId, logoId, userId);
        }

        /**
         * Execute deleteCustomLogo request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The custom logo was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteCustomLogoWithHttpInfo(albumId, logoId, userId);
        }

        /**
         * Execute deleteCustomLogo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The custom logo was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteCustomLogoAsync(albumId, logoId, userId, _callback);
        }
    }

    /**
     * Delete a custom showcase logo
     * This method deletes the specified custom logo from its showcase. The authenticated user must be the owner of the showcase.
     * @param albumId The ID of the showcase. (required)
     * @param logoId The ID of the custom logo. (required)
     * @param userId The ID of the user. (required)
     * @return DeleteCustomLogoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The custom logo was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCustomLogoRequestBuilder deleteCustomLogo(double albumId, double logoId, double userId) throws IllegalArgumentException {
        
        
        
        return new DeleteCustomLogoRequestBuilder(albumId, logoId, userId);
    }
    private okhttp3.Call getSpecificLogoCall(Double albumId, Double logoId, Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}/logos/{logo_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "logo_id" + "}", localVarApiClient.escapeString(logoId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificLogoValidateBeforeCall(Double albumId, Double logoId, Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling getSpecificLogo(Async)");
        }

        // verify the required parameter 'logoId' is set
        if (logoId == null) {
            throw new ApiException("Missing the required parameter 'logoId' when calling getSpecificLogo(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getSpecificLogo(Async)");
        }

        return getSpecificLogoCall(albumId, logoId, userId, _callback);

    }


    private ApiResponse<Picture> getSpecificLogoWithHttpInfo(Double albumId, Double logoId, Double userId) throws ApiException {
        okhttp3.Call localVarCall = getSpecificLogoValidateBeforeCall(albumId, logoId, userId, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificLogoAsync(Double albumId, Double logoId, Double userId, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificLogoValidateBeforeCall(albumId, logoId, userId, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificLogoRequestBuilder {
        private final Double albumId;
        private final Double logoId;
        private final Double userId;

        private GetSpecificLogoRequestBuilder(double albumId, double logoId, double userId) {
            this.albumId = albumId;
            this.logoId = logoId;
            this.userId = userId;
        }

        /**
         * Build call for getSpecificLogo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The custom logo was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificLogoCall(albumId, logoId, userId, _callback);
        }


        /**
         * Execute getSpecificLogo request
         * @return Picture
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The custom logo was returned. </td><td>  -  </td></tr>
         </table>
         */
        public Picture execute() throws ApiException {
            ApiResponse<Picture> localVarResp = getSpecificLogoWithHttpInfo(albumId, logoId, userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificLogo request with HTTP info returned
         * @return ApiResponse&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The custom logo was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Picture> executeWithHttpInfo() throws ApiException {
            return getSpecificLogoWithHttpInfo(albumId, logoId, userId);
        }

        /**
         * Execute getSpecificLogo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The custom logo was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Picture> _callback) throws ApiException {
            return getSpecificLogoAsync(albumId, logoId, userId, _callback);
        }
    }

    /**
     * Get a specific custom showcase logo
     * This method returns a single custom logo of the specified showcase. The authenticated user must be the owner of the showcase.
     * @param albumId The ID of the showcase. (required)
     * @param logoId The ID of the custom logo. (required)
     * @param userId The ID of the user. (required)
     * @return GetSpecificLogoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom logo was returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificLogoRequestBuilder getSpecificLogo(double albumId, double logoId, double userId) throws IllegalArgumentException {
        
        
        
        return new GetSpecificLogoRequestBuilder(albumId, logoId, userId);
    }
    private okhttp3.Call listAllCustomLogosCall(Double albumId, Double userId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}/logos"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllCustomLogosValidateBeforeCall(Double albumId, Double userId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling listAllCustomLogos(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listAllCustomLogos(Async)");
        }

        return listAllCustomLogosCall(albumId, userId, page, perPage, _callback);

    }


    private ApiResponse<List<Picture>> listAllCustomLogosWithHttpInfo(Double albumId, Double userId, Double page, Double perPage) throws ApiException {
        okhttp3.Call localVarCall = listAllCustomLogosValidateBeforeCall(albumId, userId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllCustomLogosAsync(Double albumId, Double userId, Double page, Double perPage, final ApiCallback<List<Picture>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllCustomLogosValidateBeforeCall(albumId, userId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllCustomLogosRequestBuilder {
        private final Double albumId;
        private final Double userId;
        private Double page;
        private Double perPage;

        private ListAllCustomLogosRequestBuilder(double albumId, double userId) {
            this.albumId = albumId;
            this.userId = userId;
        }

        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return ListAllCustomLogosRequestBuilder
         */
        public ListAllCustomLogosRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return ListAllCustomLogosRequestBuilder
         */
        public ListAllCustomLogosRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for listAllCustomLogos
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The custom logos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllCustomLogosCall(albumId, userId, page, perPage, _callback);
        }


        /**
         * Execute listAllCustomLogos request
         * @return List&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The custom logos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Picture> execute() throws ApiException {
            ApiResponse<List<Picture>> localVarResp = listAllCustomLogosWithHttpInfo(albumId, userId, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllCustomLogos request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Picture&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The custom logos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Picture>> executeWithHttpInfo() throws ApiException {
            return listAllCustomLogosWithHttpInfo(albumId, userId, page, perPage);
        }

        /**
         * Execute listAllCustomLogos request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The custom logos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Picture>> _callback) throws ApiException {
            return listAllCustomLogosAsync(albumId, userId, page, perPage, _callback);
        }
    }

    /**
     * Get all the custom logos of a showcase
     * This method returns every custom logo of the specified showcase. The authenticated user must be the owner of the showcase.
     * @param albumId The ID of the showcase. (required)
     * @param userId The ID of the user. (required)
     * @return ListAllCustomLogosRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom logos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ListAllCustomLogosRequestBuilder listAllCustomLogos(double albumId, double userId) throws IllegalArgumentException {
        
        
        return new ListAllCustomLogosRequestBuilder(albumId, userId);
    }
    private okhttp3.Call replaceLogoCall(Double albumId, Double logoId, Double userId, ShowcasesCustomShowcaseLogosReplaceLogoRequest showcasesCustomShowcaseLogosReplaceLogoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = showcasesCustomShowcaseLogosReplaceLogoRequest;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}/logos/{logo_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "logo_id" + "}", localVarApiClient.escapeString(logoId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceLogoValidateBeforeCall(Double albumId, Double logoId, Double userId, ShowcasesCustomShowcaseLogosReplaceLogoRequest showcasesCustomShowcaseLogosReplaceLogoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling replaceLogo(Async)");
        }

        // verify the required parameter 'logoId' is set
        if (logoId == null) {
            throw new ApiException("Missing the required parameter 'logoId' when calling replaceLogo(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling replaceLogo(Async)");
        }

        return replaceLogoCall(albumId, logoId, userId, showcasesCustomShowcaseLogosReplaceLogoRequest, _callback);

    }


    private ApiResponse<Picture> replaceLogoWithHttpInfo(Double albumId, Double logoId, Double userId, ShowcasesCustomShowcaseLogosReplaceLogoRequest showcasesCustomShowcaseLogosReplaceLogoRequest) throws ApiException {
        okhttp3.Call localVarCall = replaceLogoValidateBeforeCall(albumId, logoId, userId, showcasesCustomShowcaseLogosReplaceLogoRequest, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call replaceLogoAsync(Double albumId, Double logoId, Double userId, ShowcasesCustomShowcaseLogosReplaceLogoRequest showcasesCustomShowcaseLogosReplaceLogoRequest, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceLogoValidateBeforeCall(albumId, logoId, userId, showcasesCustomShowcaseLogosReplaceLogoRequest, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReplaceLogoRequestBuilder {
        private final Double albumId;
        private final Double logoId;
        private final Double userId;
        private Boolean active;

        private ReplaceLogoRequestBuilder(double albumId, double logoId, double userId) {
            this.albumId = albumId;
            this.logoId = logoId;
            this.userId = userId;
        }

        /**
         * Set active
         * @param active Whether to make this image the active showcase logo. (optional)
         * @return ReplaceLogoRequestBuilder
         */
        public ReplaceLogoRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Build call for replaceLogo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The custom logo was replaced. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ShowcasesCustomShowcaseLogosReplaceLogoRequest showcasesCustomShowcaseLogosReplaceLogoRequest = buildBodyParams();
            return replaceLogoCall(albumId, logoId, userId, showcasesCustomShowcaseLogosReplaceLogoRequest, _callback);
        }

        private ShowcasesCustomShowcaseLogosReplaceLogoRequest buildBodyParams() {
            ShowcasesCustomShowcaseLogosReplaceLogoRequest showcasesCustomShowcaseLogosReplaceLogoRequest = new ShowcasesCustomShowcaseLogosReplaceLogoRequest();
            showcasesCustomShowcaseLogosReplaceLogoRequest.active(this.active);
            return showcasesCustomShowcaseLogosReplaceLogoRequest;
        }

        /**
         * Execute replaceLogo request
         * @return Picture
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The custom logo was replaced. </td><td>  -  </td></tr>
         </table>
         */
        public Picture execute() throws ApiException {
            ShowcasesCustomShowcaseLogosReplaceLogoRequest showcasesCustomShowcaseLogosReplaceLogoRequest = buildBodyParams();
            ApiResponse<Picture> localVarResp = replaceLogoWithHttpInfo(albumId, logoId, userId, showcasesCustomShowcaseLogosReplaceLogoRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute replaceLogo request with HTTP info returned
         * @return ApiResponse&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The custom logo was replaced. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Picture> executeWithHttpInfo() throws ApiException {
            ShowcasesCustomShowcaseLogosReplaceLogoRequest showcasesCustomShowcaseLogosReplaceLogoRequest = buildBodyParams();
            return replaceLogoWithHttpInfo(albumId, logoId, userId, showcasesCustomShowcaseLogosReplaceLogoRequest);
        }

        /**
         * Execute replaceLogo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The custom logo was replaced. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Picture> _callback) throws ApiException {
            ShowcasesCustomShowcaseLogosReplaceLogoRequest showcasesCustomShowcaseLogosReplaceLogoRequest = buildBodyParams();
            return replaceLogoAsync(albumId, logoId, userId, showcasesCustomShowcaseLogosReplaceLogoRequest, _callback);
        }
    }

    /**
     * Replace a custom showcase logo
     * This method replaces the specified custom showcase logo with a new image file. The authenticated user must be the owner of the showcase.  For information on how to upload the logo, see our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails) guide.
     * @param albumId The ID of the showcase. (required)
     * @param logoId The ID of the custom logo. (required)
     * @param userId The ID of the user. (required)
     * @return ReplaceLogoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom logo was replaced. </td><td>  -  </td></tr>
     </table>
     */
    public ReplaceLogoRequestBuilder replaceLogo(double albumId, double logoId, double userId) throws IllegalArgumentException {
        
        
        
        return new ReplaceLogoRequestBuilder(albumId, logoId, userId);
    }
}
