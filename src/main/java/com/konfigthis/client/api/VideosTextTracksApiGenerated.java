/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.TextTrack;
import com.konfigthis.client.model.VideosTextTracksAddTextTrackRequest;
import com.konfigthis.client.model.VideosTextTracksAddTextTrackToVideoRequest;
import com.konfigthis.client.model.VideosTextTracksEditTextTrackRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class VideosTextTracksApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VideosTextTracksApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public VideosTextTracksApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addTextTrackCall(Double videoId, VideosTextTracksAddTextTrackRequest videosTextTracksAddTextTrackRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = videosTextTracksAddTextTrackRequest;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/texttracks"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video.texttrack+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.video.texttrack+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTextTrackValidateBeforeCall(Double videoId, VideosTextTracksAddTextTrackRequest videosTextTracksAddTextTrackRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addTextTrack(Async)");
        }

        // verify the required parameter 'videosTextTracksAddTextTrackRequest' is set
        if (videosTextTracksAddTextTrackRequest == null) {
            throw new ApiException("Missing the required parameter 'videosTextTracksAddTextTrackRequest' when calling addTextTrack(Async)");
        }

        return addTextTrackCall(videoId, videosTextTracksAddTextTrackRequest, _callback);

    }


    private ApiResponse<TextTrack> addTextTrackWithHttpInfo(Double videoId, VideosTextTracksAddTextTrackRequest videosTextTracksAddTextTrackRequest) throws ApiException {
        okhttp3.Call localVarCall = addTextTrackValidateBeforeCall(videoId, videosTextTracksAddTextTrackRequest, null);
        Type localVarReturnType = new TypeToken<TextTrack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addTextTrackAsync(Double videoId, VideosTextTracksAddTextTrackRequest videosTextTracksAddTextTrackRequest, final ApiCallback<TextTrack> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTextTrackValidateBeforeCall(videoId, videosTextTracksAddTextTrackRequest, _callback);
        Type localVarReturnType = new TypeToken<TextTrack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddTextTrackRequestBuilder {
        private final String language;
        private final String name;
        private final String type;
        private final Double videoId;
        private Boolean active;
        private Boolean isAutoGenerated;
        private Boolean isEdited;

        private AddTextTrackRequestBuilder(String language, String name, String type, double videoId) {
            this.language = language;
            this.name = name;
            this.type = type;
            this.videoId = videoId;
        }

        /**
         * Set active
         * @param active Whether the current text track is the *active text track,* or the one that appears in the player. Only one text track per language and type can be active. (optional)
         * @return AddTextTrackRequestBuilder
         */
        public AddTextTrackRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Set isAutoGenerated
         * @param isAutoGenerated Whether the text track was uploaded automatically by the Seshat audio annotation management platform. (optional)
         * @return AddTextTrackRequestBuilder
         */
        public AddTextTrackRequestBuilder isAutoGenerated(Boolean isAutoGenerated) {
            this.isAutoGenerated = isAutoGenerated;
            return this;
        }
        
        /**
         * Set isEdited
         * @param isEdited Whether the text track was uploaded by the Seshat audio annotation management platform after the user edited their transcript. (optional)
         * @return AddTextTrackRequestBuilder
         */
        public AddTextTrackRequestBuilder isEdited(Boolean isEdited) {
            this.isEdited = isEdited;
            return this;
        }
        
        /**
         * Build call for addTextTrack
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The text track was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VideosTextTracksAddTextTrackRequest videosTextTracksAddTextTrackRequest = buildBodyParams();
            return addTextTrackCall(videoId, videosTextTracksAddTextTrackRequest, _callback);
        }

        private VideosTextTracksAddTextTrackRequest buildBodyParams() {
            VideosTextTracksAddTextTrackRequest videosTextTracksAddTextTrackRequest = new VideosTextTracksAddTextTrackRequest();
            videosTextTracksAddTextTrackRequest.active(this.active);
            videosTextTracksAddTextTrackRequest.isAutoGenerated(this.isAutoGenerated);
            videosTextTracksAddTextTrackRequest.isEdited(this.isEdited);
            videosTextTracksAddTextTrackRequest.language(this.language);
            videosTextTracksAddTextTrackRequest.name(this.name);
            if (this.type != null)
            videosTextTracksAddTextTrackRequest.type(VideosTextTracksAddTextTrackRequest.TypeEnum.fromValue(this.type));
            return videosTextTracksAddTextTrackRequest;
        }

        /**
         * Execute addTextTrack request
         * @return TextTrack
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The text track was added. </td><td>  -  </td></tr>
         </table>
         */
        public TextTrack execute() throws ApiException {
            VideosTextTracksAddTextTrackRequest videosTextTracksAddTextTrackRequest = buildBodyParams();
            ApiResponse<TextTrack> localVarResp = addTextTrackWithHttpInfo(videoId, videosTextTracksAddTextTrackRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addTextTrack request with HTTP info returned
         * @return ApiResponse&lt;TextTrack&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The text track was added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TextTrack> executeWithHttpInfo() throws ApiException {
            VideosTextTracksAddTextTrackRequest videosTextTracksAddTextTrackRequest = buildBodyParams();
            return addTextTrackWithHttpInfo(videoId, videosTextTracksAddTextTrackRequest);
        }

        /**
         * Execute addTextTrack request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The text track was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TextTrack> _callback) throws ApiException {
            VideosTextTracksAddTextTrackRequest videosTextTracksAddTextTrackRequest = buildBodyParams();
            return addTextTrackAsync(videoId, videosTextTracksAddTextTrackRequest, _callback);
        }
    }

    /**
     * Add a text track to a video
     * This method adds a text track to the specified video. For more information, see [Working with Text Track Uploads](https://developer.vimeo.com/api/upload/texttracks).
     * @param videoId The ID of the video. (required)
     * @param videosTextTracksAddTextTrackRequest  (required)
     * @return AddTextTrackRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The text track was added. </td><td>  -  </td></tr>
     </table>
     */
    public AddTextTrackRequestBuilder addTextTrack(String language, String name, String type, double videoId) throws IllegalArgumentException {
        if (language == null) throw new IllegalArgumentException("\"language\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        
        return new AddTextTrackRequestBuilder(language, name, type, videoId);
    }
    private okhttp3.Call addTextTrackToVideoCall(Double channelId, Double videoId, VideosTextTracksAddTextTrackToVideoRequest videosTextTracksAddTextTrackToVideoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = videosTextTracksAddTextTrackToVideoRequest;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/videos/{video_id}/texttracks"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video.texttrack+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.video.texttrack+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTextTrackToVideoValidateBeforeCall(Double channelId, Double videoId, VideosTextTracksAddTextTrackToVideoRequest videosTextTracksAddTextTrackToVideoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling addTextTrackToVideo(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addTextTrackToVideo(Async)");
        }

        // verify the required parameter 'videosTextTracksAddTextTrackToVideoRequest' is set
        if (videosTextTracksAddTextTrackToVideoRequest == null) {
            throw new ApiException("Missing the required parameter 'videosTextTracksAddTextTrackToVideoRequest' when calling addTextTrackToVideo(Async)");
        }

        return addTextTrackToVideoCall(channelId, videoId, videosTextTracksAddTextTrackToVideoRequest, _callback);

    }


    private ApiResponse<TextTrack> addTextTrackToVideoWithHttpInfo(Double channelId, Double videoId, VideosTextTracksAddTextTrackToVideoRequest videosTextTracksAddTextTrackToVideoRequest) throws ApiException {
        okhttp3.Call localVarCall = addTextTrackToVideoValidateBeforeCall(channelId, videoId, videosTextTracksAddTextTrackToVideoRequest, null);
        Type localVarReturnType = new TypeToken<TextTrack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addTextTrackToVideoAsync(Double channelId, Double videoId, VideosTextTracksAddTextTrackToVideoRequest videosTextTracksAddTextTrackToVideoRequest, final ApiCallback<TextTrack> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTextTrackToVideoValidateBeforeCall(channelId, videoId, videosTextTracksAddTextTrackToVideoRequest, _callback);
        Type localVarReturnType = new TypeToken<TextTrack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddTextTrackToVideoRequestBuilder {
        private final String language;
        private final String name;
        private final String type;
        private final Double channelId;
        private final Double videoId;
        private Boolean active;
        private Boolean isAutoGenerated;
        private Boolean isEdited;

        private AddTextTrackToVideoRequestBuilder(String language, String name, String type, double channelId, double videoId) {
            this.language = language;
            this.name = name;
            this.type = type;
            this.channelId = channelId;
            this.videoId = videoId;
        }

        /**
         * Set active
         * @param active Whether the current text track is the *active text track,* or the one that appears in the player. Only one text track per language and type can be active. (optional)
         * @return AddTextTrackToVideoRequestBuilder
         */
        public AddTextTrackToVideoRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Set isAutoGenerated
         * @param isAutoGenerated Whether the text track was uploaded automatically by the Seshat audio annotation management platform. (optional)
         * @return AddTextTrackToVideoRequestBuilder
         */
        public AddTextTrackToVideoRequestBuilder isAutoGenerated(Boolean isAutoGenerated) {
            this.isAutoGenerated = isAutoGenerated;
            return this;
        }
        
        /**
         * Set isEdited
         * @param isEdited Whether the text track was uploaded by the Seshat audio annotation management platform after the user edited their transcript. (optional)
         * @return AddTextTrackToVideoRequestBuilder
         */
        public AddTextTrackToVideoRequestBuilder isEdited(Boolean isEdited) {
            this.isEdited = isEdited;
            return this;
        }
        
        /**
         * Build call for addTextTrackToVideo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The text track was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VideosTextTracksAddTextTrackToVideoRequest videosTextTracksAddTextTrackToVideoRequest = buildBodyParams();
            return addTextTrackToVideoCall(channelId, videoId, videosTextTracksAddTextTrackToVideoRequest, _callback);
        }

        private VideosTextTracksAddTextTrackToVideoRequest buildBodyParams() {
            VideosTextTracksAddTextTrackToVideoRequest videosTextTracksAddTextTrackToVideoRequest = new VideosTextTracksAddTextTrackToVideoRequest();
            videosTextTracksAddTextTrackToVideoRequest.active(this.active);
            videosTextTracksAddTextTrackToVideoRequest.isAutoGenerated(this.isAutoGenerated);
            videosTextTracksAddTextTrackToVideoRequest.isEdited(this.isEdited);
            videosTextTracksAddTextTrackToVideoRequest.language(this.language);
            videosTextTracksAddTextTrackToVideoRequest.name(this.name);
            if (this.type != null)
            videosTextTracksAddTextTrackToVideoRequest.type(VideosTextTracksAddTextTrackToVideoRequest.TypeEnum.fromValue(this.type));
            return videosTextTracksAddTextTrackToVideoRequest;
        }

        /**
         * Execute addTextTrackToVideo request
         * @return TextTrack
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The text track was added. </td><td>  -  </td></tr>
         </table>
         */
        public TextTrack execute() throws ApiException {
            VideosTextTracksAddTextTrackToVideoRequest videosTextTracksAddTextTrackToVideoRequest = buildBodyParams();
            ApiResponse<TextTrack> localVarResp = addTextTrackToVideoWithHttpInfo(channelId, videoId, videosTextTracksAddTextTrackToVideoRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addTextTrackToVideo request with HTTP info returned
         * @return ApiResponse&lt;TextTrack&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The text track was added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TextTrack> executeWithHttpInfo() throws ApiException {
            VideosTextTracksAddTextTrackToVideoRequest videosTextTracksAddTextTrackToVideoRequest = buildBodyParams();
            return addTextTrackToVideoWithHttpInfo(channelId, videoId, videosTextTracksAddTextTrackToVideoRequest);
        }

        /**
         * Execute addTextTrackToVideo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The text track was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TextTrack> _callback) throws ApiException {
            VideosTextTracksAddTextTrackToVideoRequest videosTextTracksAddTextTrackToVideoRequest = buildBodyParams();
            return addTextTrackToVideoAsync(channelId, videoId, videosTextTracksAddTextTrackToVideoRequest, _callback);
        }
    }

    /**
     * Add a text track to a video
     * This method adds a text track to the specified video. For more information, see [Working with Text Track Uploads](https://developer.vimeo.com/api/upload/texttracks).
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param videosTextTracksAddTextTrackToVideoRequest  (required)
     * @return AddTextTrackToVideoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The text track was added. </td><td>  -  </td></tr>
     </table>
     */
    public AddTextTrackToVideoRequestBuilder addTextTrackToVideo(String language, String name, String type, double channelId, double videoId) throws IllegalArgumentException {
        if (language == null) throw new IllegalArgumentException("\"language\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        
        
        return new AddTextTrackToVideoRequestBuilder(language, name, type, channelId, videoId);
    }
    private okhttp3.Call deleteTextTrackCall(Double texttrackId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/texttracks/{texttrack_id}"
            .replace("{" + "texttrack_id" + "}", localVarApiClient.escapeString(texttrackId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video.texttrack+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTextTrackValidateBeforeCall(Double texttrackId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'texttrackId' is set
        if (texttrackId == null) {
            throw new ApiException("Missing the required parameter 'texttrackId' when calling deleteTextTrack(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling deleteTextTrack(Async)");
        }

        return deleteTextTrackCall(texttrackId, videoId, _callback);

    }


    private ApiResponse<Void> deleteTextTrackWithHttpInfo(Double texttrackId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = deleteTextTrackValidateBeforeCall(texttrackId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteTextTrackAsync(Double texttrackId, Double videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTextTrackValidateBeforeCall(texttrackId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteTextTrackRequestBuilder {
        private final Double texttrackId;
        private final Double videoId;

        private DeleteTextTrackRequestBuilder(double texttrackId, double videoId) {
            this.texttrackId = texttrackId;
            this.videoId = videoId;
        }

        /**
         * Build call for deleteTextTrack
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The text track was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteTextTrackCall(texttrackId, videoId, _callback);
        }


        /**
         * Execute deleteTextTrack request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The text track was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteTextTrackWithHttpInfo(texttrackId, videoId);
        }

        /**
         * Execute deleteTextTrack request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The text track was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteTextTrackWithHttpInfo(texttrackId, videoId);
        }

        /**
         * Execute deleteTextTrack request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The text track was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteTextTrackAsync(texttrackId, videoId, _callback);
        }
    }

    /**
     * Delete a text track
     * This method deletes the specified text track from a video. The authenticated user must be the owner of the video.
     * @param texttrackId The ID of the text track. (required)
     * @param videoId The ID of the video. (required)
     * @return DeleteTextTrackRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The text track was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteTextTrackRequestBuilder deleteTextTrack(double texttrackId, double videoId) throws IllegalArgumentException {
        
        
        return new DeleteTextTrackRequestBuilder(texttrackId, videoId);
    }
    private okhttp3.Call editTextTrackCall(Double texttrackId, Double videoId, VideosTextTracksEditTextTrackRequest videosTextTracksEditTextTrackRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = videosTextTracksEditTextTrackRequest;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/texttracks/{texttrack_id}"
            .replace("{" + "texttrack_id" + "}", localVarApiClient.escapeString(texttrackId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video.texttrack+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.video.texttrack+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editTextTrackValidateBeforeCall(Double texttrackId, Double videoId, VideosTextTracksEditTextTrackRequest videosTextTracksEditTextTrackRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'texttrackId' is set
        if (texttrackId == null) {
            throw new ApiException("Missing the required parameter 'texttrackId' when calling editTextTrack(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling editTextTrack(Async)");
        }

        return editTextTrackCall(texttrackId, videoId, videosTextTracksEditTextTrackRequest, _callback);

    }


    private ApiResponse<TextTrack> editTextTrackWithHttpInfo(Double texttrackId, Double videoId, VideosTextTracksEditTextTrackRequest videosTextTracksEditTextTrackRequest) throws ApiException {
        okhttp3.Call localVarCall = editTextTrackValidateBeforeCall(texttrackId, videoId, videosTextTracksEditTextTrackRequest, null);
        Type localVarReturnType = new TypeToken<TextTrack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call editTextTrackAsync(Double texttrackId, Double videoId, VideosTextTracksEditTextTrackRequest videosTextTracksEditTextTrackRequest, final ApiCallback<TextTrack> _callback) throws ApiException {

        okhttp3.Call localVarCall = editTextTrackValidateBeforeCall(texttrackId, videoId, videosTextTracksEditTextTrackRequest, _callback);
        Type localVarReturnType = new TypeToken<TextTrack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EditTextTrackRequestBuilder {
        private final Double texttrackId;
        private final Double videoId;
        private Boolean active;
        private String language;
        private String name;
        private String type;

        private EditTextTrackRequestBuilder(double texttrackId, double videoId) {
            this.texttrackId = texttrackId;
            this.videoId = videoId;
        }

        /**
         * Set active
         * @param active Whether the current text track is the *active text track,* or the one that appears in the player. Only one text track per language and per type can be active. (optional)
         * @return EditTextTrackRequestBuilder
         */
        public EditTextTrackRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Set language
         * @param language The language of the text track. For a full list of supported languages, use the [&#x60;/languages?filter&#x3D;texttracks&#x60;](https://developer.vimeo.com/api/reference/videos#get_languages) endpoint. (optional)
         * @return EditTextTrackRequestBuilder
         */
        public EditTextTrackRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the text track. (optional)
         * @return EditTextTrackRequestBuilder
         */
        public EditTextTrackRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set type
         * @param type The type of text track.  Option descriptions:  * &#x60;captions&#x60; - The text track is the captions type.  * &#x60;chapters&#x60; - The text track is the chapters type.  * &#x60;descriptions&#x60; - The text track is the descriptions type.  * &#x60;metadata&#x60; - The text track is the metadata type.  * &#x60;subtitles&#x60; - The text track is the subtitles type.  (optional)
         * @return EditTextTrackRequestBuilder
         */
        public EditTextTrackRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for editTextTrack
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The text track was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VideosTextTracksEditTextTrackRequest videosTextTracksEditTextTrackRequest = buildBodyParams();
            return editTextTrackCall(texttrackId, videoId, videosTextTracksEditTextTrackRequest, _callback);
        }

        private VideosTextTracksEditTextTrackRequest buildBodyParams() {
            VideosTextTracksEditTextTrackRequest videosTextTracksEditTextTrackRequest = new VideosTextTracksEditTextTrackRequest();
            videosTextTracksEditTextTrackRequest.active(this.active);
            videosTextTracksEditTextTrackRequest.language(this.language);
            videosTextTracksEditTextTrackRequest.name(this.name);
            if (this.type != null)
            videosTextTracksEditTextTrackRequest.type(VideosTextTracksEditTextTrackRequest.TypeEnum.fromValue(this.type));
            return videosTextTracksEditTextTrackRequest;
        }

        /**
         * Execute editTextTrack request
         * @return TextTrack
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The text track was edited. </td><td>  -  </td></tr>
         </table>
         */
        public TextTrack execute() throws ApiException {
            VideosTextTracksEditTextTrackRequest videosTextTracksEditTextTrackRequest = buildBodyParams();
            ApiResponse<TextTrack> localVarResp = editTextTrackWithHttpInfo(texttrackId, videoId, videosTextTracksEditTextTrackRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute editTextTrack request with HTTP info returned
         * @return ApiResponse&lt;TextTrack&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The text track was edited. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TextTrack> executeWithHttpInfo() throws ApiException {
            VideosTextTracksEditTextTrackRequest videosTextTracksEditTextTrackRequest = buildBodyParams();
            return editTextTrackWithHttpInfo(texttrackId, videoId, videosTextTracksEditTextTrackRequest);
        }

        /**
         * Execute editTextTrack request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The text track was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TextTrack> _callback) throws ApiException {
            VideosTextTracksEditTextTrackRequest videosTextTracksEditTextTrackRequest = buildBodyParams();
            return editTextTrackAsync(texttrackId, videoId, videosTextTracksEditTextTrackRequest, _callback);
        }
    }

    /**
     * Edit a text track
     * This method edits the specified text track of a video. The authenticated user must be the owner of the video.
     * @param texttrackId The ID of the text track. (required)
     * @param videoId The ID of the video. (required)
     * @return EditTextTrackRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The text track was edited. </td><td>  -  </td></tr>
     </table>
     */
    public EditTextTrackRequestBuilder editTextTrack(double texttrackId, double videoId) throws IllegalArgumentException {
        
        
        return new EditTextTrackRequestBuilder(texttrackId, videoId);
    }
    private okhttp3.Call getAllTracksCall(Double channelId, Double videoId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/videos/{video_id}/texttracks"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video.texttrack+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllTracksValidateBeforeCall(Double channelId, Double videoId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getAllTracks(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getAllTracks(Async)");
        }

        return getAllTracksCall(channelId, videoId, page, perPage, _callback);

    }


    private ApiResponse<List<TextTrack>> getAllTracksWithHttpInfo(Double channelId, Double videoId, Double page, Double perPage) throws ApiException {
        okhttp3.Call localVarCall = getAllTracksValidateBeforeCall(channelId, videoId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<TextTrack>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllTracksAsync(Double channelId, Double videoId, Double page, Double perPage, final ApiCallback<List<TextTrack>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllTracksValidateBeforeCall(channelId, videoId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<TextTrack>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllTracksRequestBuilder {
        private final Double channelId;
        private final Double videoId;
        private Double page;
        private Double perPage;

        private GetAllTracksRequestBuilder(double channelId, double videoId) {
            this.channelId = channelId;
            this.videoId = videoId;
        }

        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetAllTracksRequestBuilder
         */
        public GetAllTracksRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetAllTracksRequestBuilder
         */
        public GetAllTracksRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getAllTracks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The text tracks were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllTracksCall(channelId, videoId, page, perPage, _callback);
        }


        /**
         * Execute getAllTracks request
         * @return List&lt;TextTrack&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The text tracks were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<TextTrack> execute() throws ApiException {
            ApiResponse<List<TextTrack>> localVarResp = getAllTracksWithHttpInfo(channelId, videoId, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllTracks request with HTTP info returned
         * @return ApiResponse&lt;List&lt;TextTrack&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The text tracks were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<TextTrack>> executeWithHttpInfo() throws ApiException {
            return getAllTracksWithHttpInfo(channelId, videoId, page, perPage);
        }

        /**
         * Execute getAllTracks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The text tracks were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<TextTrack>> _callback) throws ApiException {
            return getAllTracksAsync(channelId, videoId, page, perPage, _callback);
        }
    }

    /**
     * Get all the text tracks of a video
     * This method returns every text track of the specified video. The authenticated user must be the owner of the video.
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @return GetAllTracksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The text tracks were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllTracksRequestBuilder getAllTracks(double channelId, double videoId) throws IllegalArgumentException {
        
        
        return new GetAllTracksRequestBuilder(channelId, videoId);
    }
    private okhttp3.Call getAllVideoTracksCall(Double videoId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/texttracks"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video.texttrack+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllVideoTracksValidateBeforeCall(Double videoId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getAllVideoTracks(Async)");
        }

        return getAllVideoTracksCall(videoId, page, perPage, _callback);

    }


    private ApiResponse<List<TextTrack>> getAllVideoTracksWithHttpInfo(Double videoId, Double page, Double perPage) throws ApiException {
        okhttp3.Call localVarCall = getAllVideoTracksValidateBeforeCall(videoId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<TextTrack>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllVideoTracksAsync(Double videoId, Double page, Double perPage, final ApiCallback<List<TextTrack>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllVideoTracksValidateBeforeCall(videoId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<TextTrack>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllVideoTracksRequestBuilder {
        private final Double videoId;
        private Double page;
        private Double perPage;

        private GetAllVideoTracksRequestBuilder(double videoId) {
            this.videoId = videoId;
        }

        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetAllVideoTracksRequestBuilder
         */
        public GetAllVideoTracksRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetAllVideoTracksRequestBuilder
         */
        public GetAllVideoTracksRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getAllVideoTracks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The text tracks were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllVideoTracksCall(videoId, page, perPage, _callback);
        }


        /**
         * Execute getAllVideoTracks request
         * @return List&lt;TextTrack&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The text tracks were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<TextTrack> execute() throws ApiException {
            ApiResponse<List<TextTrack>> localVarResp = getAllVideoTracksWithHttpInfo(videoId, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllVideoTracks request with HTTP info returned
         * @return ApiResponse&lt;List&lt;TextTrack&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The text tracks were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<TextTrack>> executeWithHttpInfo() throws ApiException {
            return getAllVideoTracksWithHttpInfo(videoId, page, perPage);
        }

        /**
         * Execute getAllVideoTracks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The text tracks were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<TextTrack>> _callback) throws ApiException {
            return getAllVideoTracksAsync(videoId, page, perPage, _callback);
        }
    }

    /**
     * Get all the text tracks of a video
     * This method returns every text track of the specified video. The authenticated user must be the owner of the video.
     * @param videoId The ID of the video. (required)
     * @return GetAllVideoTracksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The text tracks were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllVideoTracksRequestBuilder getAllVideoTracks(double videoId) throws IllegalArgumentException {
        
        return new GetAllVideoTracksRequestBuilder(videoId);
    }
    private okhttp3.Call getSpecificTextTrackCall(Double texttrackId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/texttracks/{texttrack_id}"
            .replace("{" + "texttrack_id" + "}", localVarApiClient.escapeString(texttrackId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video.texttrack+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificTextTrackValidateBeforeCall(Double texttrackId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'texttrackId' is set
        if (texttrackId == null) {
            throw new ApiException("Missing the required parameter 'texttrackId' when calling getSpecificTextTrack(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getSpecificTextTrack(Async)");
        }

        return getSpecificTextTrackCall(texttrackId, videoId, _callback);

    }


    private ApiResponse<TextTrack> getSpecificTextTrackWithHttpInfo(Double texttrackId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = getSpecificTextTrackValidateBeforeCall(texttrackId, videoId, null);
        Type localVarReturnType = new TypeToken<TextTrack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificTextTrackAsync(Double texttrackId, Double videoId, final ApiCallback<TextTrack> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificTextTrackValidateBeforeCall(texttrackId, videoId, _callback);
        Type localVarReturnType = new TypeToken<TextTrack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificTextTrackRequestBuilder {
        private final Double texttrackId;
        private final Double videoId;

        private GetSpecificTextTrackRequestBuilder(double texttrackId, double videoId) {
            this.texttrackId = texttrackId;
            this.videoId = videoId;
        }

        /**
         * Build call for getSpecificTextTrack
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The text track was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificTextTrackCall(texttrackId, videoId, _callback);
        }


        /**
         * Execute getSpecificTextTrack request
         * @return TextTrack
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The text track was returned. </td><td>  -  </td></tr>
         </table>
         */
        public TextTrack execute() throws ApiException {
            ApiResponse<TextTrack> localVarResp = getSpecificTextTrackWithHttpInfo(texttrackId, videoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificTextTrack request with HTTP info returned
         * @return ApiResponse&lt;TextTrack&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The text track was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TextTrack> executeWithHttpInfo() throws ApiException {
            return getSpecificTextTrackWithHttpInfo(texttrackId, videoId);
        }

        /**
         * Execute getSpecificTextTrack request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The text track was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TextTrack> _callback) throws ApiException {
            return getSpecificTextTrackAsync(texttrackId, videoId, _callback);
        }
    }

    /**
     * Get a specific text track
     * This method returns a single text track of the specified video. The authenticated user must be the owner of the video.
     * @param texttrackId The ID of the text track. (required)
     * @param videoId The ID of the video. (required)
     * @return GetSpecificTextTrackRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The text track was returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificTextTrackRequestBuilder getSpecificTextTrack(double texttrackId, double videoId) throws IllegalArgumentException {
        
        
        return new GetSpecificTextTrackRequestBuilder(texttrackId, videoId);
    }
}
