/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.UploadVideoRequestEmbed;
import com.konfigthis.client.model.UploadVideoRequestPrivacy;
import com.konfigthis.client.model.UploadVideoRequestReviewPage;
import com.konfigthis.client.model.UploadVideoRequestSpatial;
import com.konfigthis.client.model.UploadVideoRequestUpload;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * UploadVideoRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class UploadVideoRequest {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CONTENT_RATING = "content_rating";
  @SerializedName(SERIALIZED_NAME_CONTENT_RATING)
  private List<String> contentRating = null;

  public static final String SERIALIZED_NAME_EMBED = "embed";
  @SerializedName(SERIALIZED_NAME_EMBED)
  private UploadVideoRequestEmbed embed;

  public static final String SERIALIZED_NAME_EMBED_DOMAINS = "embed_domains";
  @SerializedName(SERIALIZED_NAME_EMBED_DOMAINS)
  private List<String> embedDomains = null;

  public static final String SERIALIZED_NAME_FOLDER_URI = "folder_uri";
  @SerializedName(SERIALIZED_NAME_FOLDER_URI)
  private String folderUri;

  public static final String SERIALIZED_NAME_HIDE_FROM_VIMEO = "hide_from_vimeo";
  @SerializedName(SERIALIZED_NAME_HIDE_FROM_VIMEO)
  private Boolean hideFromVimeo;

  /**
   * The Creative Commons license under which the video is offered.  Option descriptions:  * &#x60;by&#x60; - The video is offered under CC BY, or the attibution-only license.  * &#x60;by-nc&#x60; - The video is offered under CC BY-NC, or the Attribution-NonCommercial license.  * &#x60;by-nc-nd&#x60; - The video is offered under CC BY-NC-ND, or the Attribution-NonCommercian-NoDerivs license.  * &#x60;by-nc-sa&#x60; - The video is offered under CC BY-NC-SA, or the Attribution-NonCommercial-ShareAlike licence.  * &#x60;by-nd&#x60; - The video is offered under CC BY-ND, or the Attribution-NoDerivs license.  * &#x60;by-sa&#x60; - The video is offered under CC BY-SA, or the Attribution-ShareAlike license.  * &#x60;cc0&#x60; - The video is offered under CC0, or the public domain license. 
   */
  @JsonAdapter(LicenseEnum.Adapter.class)
 public enum LicenseEnum {
    BY("by"),
    
    BY_NC("by-nc"),
    
    BY_NC_ND("by-nc-nd"),
    
    BY_NC_SA("by-nc-sa"),
    
    BY_ND("by-nd"),
    
    BY_SA("by-sa"),
    
    CC0("cc0");

    private String value;

    LicenseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LicenseEnum fromValue(String value) {
      for (LicenseEnum b : LicenseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LicenseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LicenseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LicenseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LicenseEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LICENSE = "license";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private LicenseEnum license;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PRIVACY = "privacy";
  @SerializedName(SERIALIZED_NAME_PRIVACY)
  private UploadVideoRequestPrivacy privacy;

  public static final String SERIALIZED_NAME_REVIEW_PAGE = "review_page";
  @SerializedName(SERIALIZED_NAME_REVIEW_PAGE)
  private UploadVideoRequestReviewPage reviewPage;

  public static final String SERIALIZED_NAME_SPATIAL = "spatial";
  @SerializedName(SERIALIZED_NAME_SPATIAL)
  private UploadVideoRequestSpatial spatial;

  public static final String SERIALIZED_NAME_UPLOAD = "upload";
  @SerializedName(SERIALIZED_NAME_UPLOAD)
  private UploadVideoRequestUpload upload;

  public UploadVideoRequest() {
  }

  public UploadVideoRequest description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * The description of the video.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "A celebration of 10 years of Staff Picks.", value = "The description of the video.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public UploadVideoRequest contentRating(List<String> contentRating) {
    
    
    
    
    this.contentRating = contentRating;
    return this;
  }

  public UploadVideoRequest addContentRatingItem(String contentRatingItem) {
    if (this.contentRating == null) {
      this.contentRating = new ArrayList<>();
    }
    this.contentRating.add(contentRatingItem);
    return this;
  }

   /**
   * A list of values describing the content in this video. For a full list of values, use the [&#x60;/contentratings&#x60;](https://developer.vimeo.com/api/reference/videos#get_content_ratings) endpoint.
   * @return contentRating
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of values describing the content in this video. For a full list of values, use the [`/contentratings`](https://developer.vimeo.com/api/reference/videos#get_content_ratings) endpoint.")

  public List<String> getContentRating() {
    return contentRating;
  }


  public void setContentRating(List<String> contentRating) {
    
    
    
    this.contentRating = contentRating;
  }


  public UploadVideoRequest embed(UploadVideoRequestEmbed embed) {
    
    
    
    
    this.embed = embed;
    return this;
  }

   /**
   * Get embed
   * @return embed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UploadVideoRequestEmbed getEmbed() {
    return embed;
  }


  public void setEmbed(UploadVideoRequestEmbed embed) {
    
    
    
    this.embed = embed;
  }


  public UploadVideoRequest embedDomains(List<String> embedDomains) {
    
    
    
    
    this.embedDomains = embedDomains;
    return this;
  }

  public UploadVideoRequest addEmbedDomainsItem(String embedDomainsItem) {
    if (this.embedDomains == null) {
      this.embedDomains = new ArrayList<>();
    }
    this.embedDomains.add(embedDomainsItem);
    return this;
  }

   /**
   * The complete list of domains the video can be embedded on. This field requires that **privacy_embed** have the value &#x60;whitelist&#x60;.
   * @return embedDomains
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The complete list of domains the video can be embedded on. This field requires that **privacy_embed** have the value `whitelist`.")

  public List<String> getEmbedDomains() {
    return embedDomains;
  }


  public void setEmbedDomains(List<String> embedDomains) {
    
    
    
    this.embedDomains = embedDomains;
  }


  public UploadVideoRequest folderUri(String folderUri) {
    
    
    
    
    this.folderUri = folderUri;
    return this;
  }

   /**
   * The URI of the folder to which the video is uploaded.
   * @return folderUri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "/users/12345/folders/6789", value = "The URI of the folder to which the video is uploaded.")

  public String getFolderUri() {
    return folderUri;
  }


  public void setFolderUri(String folderUri) {
    
    
    
    this.folderUri = folderUri;
  }


  public UploadVideoRequest hideFromVimeo(Boolean hideFromVimeo) {
    
    
    
    
    this.hideFromVimeo = hideFromVimeo;
    return this;
  }

   /**
   * Whether to hide the video from everyone except the video&#39;s owner. When the value is &#x60;true&#x60;, unlisted video links work only for the video&#39;s owner.
   * @return hideFromVimeo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether to hide the video from everyone except the video's owner. When the value is `true`, unlisted video links work only for the video's owner.")

  public Boolean getHideFromVimeo() {
    return hideFromVimeo;
  }


  public void setHideFromVimeo(Boolean hideFromVimeo) {
    
    
    
    this.hideFromVimeo = hideFromVimeo;
  }


  public UploadVideoRequest license(LicenseEnum license) {
    
    
    
    
    this.license = license;
    return this;
  }

   /**
   * The Creative Commons license under which the video is offered.  Option descriptions:  * &#x60;by&#x60; - The video is offered under CC BY, or the attibution-only license.  * &#x60;by-nc&#x60; - The video is offered under CC BY-NC, or the Attribution-NonCommercial license.  * &#x60;by-nc-nd&#x60; - The video is offered under CC BY-NC-ND, or the Attribution-NonCommercian-NoDerivs license.  * &#x60;by-nc-sa&#x60; - The video is offered under CC BY-NC-SA, or the Attribution-NonCommercial-ShareAlike licence.  * &#x60;by-nd&#x60; - The video is offered under CC BY-ND, or the Attribution-NoDerivs license.  * &#x60;by-sa&#x60; - The video is offered under CC BY-SA, or the Attribution-ShareAlike license.  * &#x60;cc0&#x60; - The video is offered under CC0, or the public domain license. 
   * @return license
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Creative Commons license under which the video is offered.  Option descriptions:  * `by` - The video is offered under CC BY, or the attibution-only license.  * `by-nc` - The video is offered under CC BY-NC, or the Attribution-NonCommercial license.  * `by-nc-nd` - The video is offered under CC BY-NC-ND, or the Attribution-NonCommercian-NoDerivs license.  * `by-nc-sa` - The video is offered under CC BY-NC-SA, or the Attribution-NonCommercial-ShareAlike licence.  * `by-nd` - The video is offered under CC BY-ND, or the Attribution-NoDerivs license.  * `by-sa` - The video is offered under CC BY-SA, or the Attribution-ShareAlike license.  * `cc0` - The video is offered under CC0, or the public domain license. ")

  public LicenseEnum getLicense() {
    return license;
  }


  public void setLicense(LicenseEnum license) {
    
    
    
    this.license = license;
  }


  public UploadVideoRequest locale(String locale) {
    
    
    
    
    this.locale = locale;
    return this;
  }

   /**
   * The video&#39;s default language. For a full list of supported languages, use the [&#x60;/languages?filter&#x3D;texttracks&#x60;](https://developer.vimeo.com/api/reference/videos#get_languages) endpoint.
   * @return locale
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "en_US", value = "The video's default language. For a full list of supported languages, use the [`/languages?filter=texttracks`](https://developer.vimeo.com/api/reference/videos#get_languages) endpoint.")

  public String getLocale() {
    return locale;
  }


  public void setLocale(String locale) {
    
    
    
    this.locale = locale;
  }


  public UploadVideoRequest name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The title of the video.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Celebrating 10 Years of Staff Picks", value = "The title of the video.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public UploadVideoRequest password(String password) {
    
    
    
    
    this.password = password;
    return this;
  }

   /**
   * The password. This field is required when **privacy.view** is &#x60;password&#x60;.
   * @return password
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "hunter1", value = "The password. This field is required when **privacy.view** is `password`.")

  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    
    
    
    this.password = password;
  }


  public UploadVideoRequest privacy(UploadVideoRequestPrivacy privacy) {
    
    
    
    
    this.privacy = privacy;
    return this;
  }

   /**
   * Get privacy
   * @return privacy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UploadVideoRequestPrivacy getPrivacy() {
    return privacy;
  }


  public void setPrivacy(UploadVideoRequestPrivacy privacy) {
    
    
    
    this.privacy = privacy;
  }


  public UploadVideoRequest reviewPage(UploadVideoRequestReviewPage reviewPage) {
    
    
    
    
    this.reviewPage = reviewPage;
    return this;
  }

   /**
   * Get reviewPage
   * @return reviewPage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UploadVideoRequestReviewPage getReviewPage() {
    return reviewPage;
  }


  public void setReviewPage(UploadVideoRequestReviewPage reviewPage) {
    
    
    
    this.reviewPage = reviewPage;
  }


  public UploadVideoRequest spatial(UploadVideoRequestSpatial spatial) {
    
    
    
    
    this.spatial = spatial;
    return this;
  }

   /**
   * Get spatial
   * @return spatial
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UploadVideoRequestSpatial getSpatial() {
    return spatial;
  }


  public void setSpatial(UploadVideoRequestSpatial spatial) {
    
    
    
    this.spatial = spatial;
  }


  public UploadVideoRequest upload(UploadVideoRequestUpload upload) {
    
    
    
    
    this.upload = upload;
    return this;
  }

   /**
   * Get upload
   * @return upload
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UploadVideoRequestUpload getUpload() {
    return upload;
  }


  public void setUpload(UploadVideoRequestUpload upload) {
    
    
    
    this.upload = upload;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the UploadVideoRequest instance itself
   */
  public UploadVideoRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UploadVideoRequest uploadVideoRequest = (UploadVideoRequest) o;
    return Objects.equals(this.description, uploadVideoRequest.description) &&
        Objects.equals(this.contentRating, uploadVideoRequest.contentRating) &&
        Objects.equals(this.embed, uploadVideoRequest.embed) &&
        Objects.equals(this.embedDomains, uploadVideoRequest.embedDomains) &&
        Objects.equals(this.folderUri, uploadVideoRequest.folderUri) &&
        Objects.equals(this.hideFromVimeo, uploadVideoRequest.hideFromVimeo) &&
        Objects.equals(this.license, uploadVideoRequest.license) &&
        Objects.equals(this.locale, uploadVideoRequest.locale) &&
        Objects.equals(this.name, uploadVideoRequest.name) &&
        Objects.equals(this.password, uploadVideoRequest.password) &&
        Objects.equals(this.privacy, uploadVideoRequest.privacy) &&
        Objects.equals(this.reviewPage, uploadVideoRequest.reviewPage) &&
        Objects.equals(this.spatial, uploadVideoRequest.spatial) &&
        Objects.equals(this.upload, uploadVideoRequest.upload)&&
        Objects.equals(this.additionalProperties, uploadVideoRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, contentRating, embed, embedDomains, folderUri, hideFromVimeo, license, locale, name, password, privacy, reviewPage, spatial, upload, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UploadVideoRequest {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    contentRating: ").append(toIndentedString(contentRating)).append("\n");
    sb.append("    embed: ").append(toIndentedString(embed)).append("\n");
    sb.append("    embedDomains: ").append(toIndentedString(embedDomains)).append("\n");
    sb.append("    folderUri: ").append(toIndentedString(folderUri)).append("\n");
    sb.append("    hideFromVimeo: ").append(toIndentedString(hideFromVimeo)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    privacy: ").append(toIndentedString(privacy)).append("\n");
    sb.append("    reviewPage: ").append(toIndentedString(reviewPage)).append("\n");
    sb.append("    spatial: ").append(toIndentedString(spatial)).append("\n");
    sb.append("    upload: ").append(toIndentedString(upload)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("content_rating");
    openapiFields.add("embed");
    openapiFields.add("embed_domains");
    openapiFields.add("folder_uri");
    openapiFields.add("hide_from_vimeo");
    openapiFields.add("license");
    openapiFields.add("locale");
    openapiFields.add("name");
    openapiFields.add("password");
    openapiFields.add("privacy");
    openapiFields.add("review_page");
    openapiFields.add("spatial");
    openapiFields.add("upload");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("upload");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UploadVideoRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UploadVideoRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UploadVideoRequest is not found in the empty JSON string", UploadVideoRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UploadVideoRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("content_rating") != null && !jsonObj.get("content_rating").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_rating` to be an array in the JSON string but got `%s`", jsonObj.get("content_rating").toString()));
      }
      // validate the optional field `embed`
      if (jsonObj.get("embed") != null && !jsonObj.get("embed").isJsonNull()) {
        UploadVideoRequestEmbed.validateJsonObject(jsonObj.getAsJsonObject("embed"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("embed_domains") != null && !jsonObj.get("embed_domains").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `embed_domains` to be an array in the JSON string but got `%s`", jsonObj.get("embed_domains").toString()));
      }
      if ((jsonObj.get("folder_uri") != null && !jsonObj.get("folder_uri").isJsonNull()) && !jsonObj.get("folder_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `folder_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("folder_uri").toString()));
      }
      if ((jsonObj.get("license") != null && !jsonObj.get("license").isJsonNull()) && !jsonObj.get("license").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license").toString()));
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      // validate the optional field `privacy`
      if (jsonObj.get("privacy") != null && !jsonObj.get("privacy").isJsonNull()) {
        UploadVideoRequestPrivacy.validateJsonObject(jsonObj.getAsJsonObject("privacy"));
      }
      // validate the optional field `review_page`
      if (jsonObj.get("review_page") != null && !jsonObj.get("review_page").isJsonNull()) {
        UploadVideoRequestReviewPage.validateJsonObject(jsonObj.getAsJsonObject("review_page"));
      }
      // validate the optional field `spatial`
      if (jsonObj.get("spatial") != null && !jsonObj.get("spatial").isJsonNull()) {
        UploadVideoRequestSpatial.validateJsonObject(jsonObj.getAsJsonObject("spatial"));
      }
      // validate the required field `upload`
      UploadVideoRequestUpload.validateJsonObject(jsonObj.getAsJsonObject("upload"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UploadVideoRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UploadVideoRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UploadVideoRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UploadVideoRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UploadVideoRequest>() {
           @Override
           public void write(JsonWriter out, UploadVideoRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public UploadVideoRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             UploadVideoRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UploadVideoRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UploadVideoRequest
  * @throws IOException if the JSON string is invalid with respect to UploadVideoRequest
  */
  public static UploadVideoRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UploadVideoRequest.class);
  }

 /**
  * Convert an instance of UploadVideoRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

