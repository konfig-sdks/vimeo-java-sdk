/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The version&#39;s upload information.
 */
@ApiModel(description = "The version's upload information.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class VideoVersionUpload {
  /**
   * The approach for uploading the video.  Option descriptions:  * &#x60;post&#x60; - The video upload uses the POST approach.  * &#x60;pull&#x60; - The video upload uses the pull approach.  * &#x60;tus&#x60; - The video upload uses the tus approach. 
   */
  @JsonAdapter(ApproachEnum.Adapter.class)
 public enum ApproachEnum {
    POST("post"),
    
    PULL("pull"),
    
    TUS("tus");

    private String value;

    ApproachEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApproachEnum fromValue(String value) {
      for (ApproachEnum b : ApproachEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApproachEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApproachEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApproachEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApproachEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_APPROACH = "approach";
  @SerializedName(SERIALIZED_NAME_APPROACH)
  private ApproachEnum approach;

  public static final String SERIALIZED_NAME_FORM = "form";
  @SerializedName(SERIALIZED_NAME_FORM)
  private String form;

  public static final String SERIALIZED_NAME_GCS_UID = "gcs_uid";
  @SerializedName(SERIALIZED_NAME_GCS_UID)
  private String gcsUid;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_REDIRECT_URL = "redirect_url";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URL)
  private String redirectUrl;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Double size;

  /**
   * The status code for the availability of the uploaded video.  Option descriptions:  * &#x60;complete&#x60; - The upload is complete.  * &#x60;error&#x60; - The upload ended with an error.  * &#x60;in_progress&#x60; - The upload is underway. 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    COMPLETE("complete"),
    
    ERROR("error"),
    
    IN_PROGRESS("in_progress");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_UPLOAD_LINK = "upload_link";
  @SerializedName(SERIALIZED_NAME_UPLOAD_LINK)
  private String uploadLink;

  public VideoVersionUpload() {
  }

  public VideoVersionUpload approach(ApproachEnum approach) {
    
    
    
    
    this.approach = approach;
    return this;
  }

   /**
   * The approach for uploading the video.  Option descriptions:  * &#x60;post&#x60; - The video upload uses the POST approach.  * &#x60;pull&#x60; - The video upload uses the pull approach.  * &#x60;tus&#x60; - The video upload uses the tus approach. 
   * @return approach
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "POST", value = "The approach for uploading the video.  Option descriptions:  * `post` - The video upload uses the POST approach.  * `pull` - The video upload uses the pull approach.  * `tus` - The video upload uses the tus approach. ")

  public ApproachEnum getApproach() {
    return approach;
  }


  public void setApproach(ApproachEnum approach) {
    
    
    
    this.approach = approach;
  }


  public VideoVersionUpload form(String form) {
    
    
    
    
    this.form = form;
    return this;
  }

   /**
   * The HTML form for uploading a video through the POST approach.
   * @return form
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The HTML form for uploading a video through the POST approach.")

  public String getForm() {
    return form;
  }


  public void setForm(String form) {
    
    
    
    this.form = form;
  }


  public VideoVersionUpload gcsUid(String gcsUid) {
    
    
    
    
    this.gcsUid = gcsUid;
    return this;
  }

   /**
   * The ID of the Google Cloud Storage upload.
   * @return gcsUid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the Google Cloud Storage upload.")

  public String getGcsUid() {
    return gcsUid;
  }


  public void setGcsUid(String gcsUid) {
    
    
    
    this.gcsUid = gcsUid;
  }


  public VideoVersionUpload link(String link) {
    
    
    
    
    this.link = link;
    return this;
  }

   /**
   * The link of the video to capture through the pull approach.
   * @return link
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The link of the video to capture through the pull approach.")

  public String getLink() {
    return link;
  }


  public void setLink(String link) {
    
    
    
    this.link = link;
  }


  public VideoVersionUpload redirectUrl(String redirectUrl) {
    
    
    
    
    this.redirectUrl = redirectUrl;
    return this;
  }

   /**
   * The redirect URL for the upload app.
   * @return redirectUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The redirect URL for the upload app.")

  public String getRedirectUrl() {
    return redirectUrl;
  }


  public void setRedirectUrl(String redirectUrl) {
    
    
    
    this.redirectUrl = redirectUrl;
  }


  public VideoVersionUpload size(Double size) {
    
    
    
    
    this.size = size;
    return this;
  }

  public VideoVersionUpload size(Integer size) {
    
    
    
    
    this.size = size.doubleValue();
    return this;
  }

   /**
   * The file size in bytes of the uploaded video.
   * @return size
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "60000", value = "The file size in bytes of the uploaded video.")

  public Double getSize() {
    return size;
  }


  public void setSize(Double size) {
    
    
    
    this.size = size;
  }


  public VideoVersionUpload status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The status code for the availability of the uploaded video.  Option descriptions:  * &#x60;complete&#x60; - The upload is complete.  * &#x60;error&#x60; - The upload ended with an error.  * &#x60;in_progress&#x60; - The upload is underway. 
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "COMPLETE", required = true, value = "The status code for the availability of the uploaded video.  Option descriptions:  * `complete` - The upload is complete.  * `error` - The upload ended with an error.  * `in_progress` - The upload is underway. ")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public VideoVersionUpload uploadLink(String uploadLink) {
    
    
    
    
    this.uploadLink = uploadLink;
    return this;
  }

   /**
   * The link for sending video file data.
   * @return uploadLink
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The link for sending video file data.")

  public String getUploadLink() {
    return uploadLink;
  }


  public void setUploadLink(String uploadLink) {
    
    
    
    this.uploadLink = uploadLink;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the VideoVersionUpload instance itself
   */
  public VideoVersionUpload putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoVersionUpload videoVersionUpload = (VideoVersionUpload) o;
    return Objects.equals(this.approach, videoVersionUpload.approach) &&
        Objects.equals(this.form, videoVersionUpload.form) &&
        Objects.equals(this.gcsUid, videoVersionUpload.gcsUid) &&
        Objects.equals(this.link, videoVersionUpload.link) &&
        Objects.equals(this.redirectUrl, videoVersionUpload.redirectUrl) &&
        Objects.equals(this.size, videoVersionUpload.size) &&
        Objects.equals(this.status, videoVersionUpload.status) &&
        Objects.equals(this.uploadLink, videoVersionUpload.uploadLink)&&
        Objects.equals(this.additionalProperties, videoVersionUpload.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(approach, form, gcsUid, link, redirectUrl, size, status, uploadLink, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoVersionUpload {\n");
    sb.append("    approach: ").append(toIndentedString(approach)).append("\n");
    sb.append("    form: ").append(toIndentedString(form)).append("\n");
    sb.append("    gcsUid: ").append(toIndentedString(gcsUid)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    uploadLink: ").append(toIndentedString(uploadLink)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("approach");
    openapiFields.add("form");
    openapiFields.add("gcs_uid");
    openapiFields.add("link");
    openapiFields.add("redirect_url");
    openapiFields.add("size");
    openapiFields.add("status");
    openapiFields.add("upload_link");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("status");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VideoVersionUpload
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!VideoVersionUpload.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoVersionUpload is not found in the empty JSON string", VideoVersionUpload.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VideoVersionUpload.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("approach") != null && !jsonObj.get("approach").isJsonNull()) && !jsonObj.get("approach").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approach` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approach").toString()));
      }
      if ((jsonObj.get("form") != null && !jsonObj.get("form").isJsonNull()) && !jsonObj.get("form").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `form` to be a primitive type in the JSON string but got `%s`", jsonObj.get("form").toString()));
      }
      if ((jsonObj.get("gcs_uid") != null && !jsonObj.get("gcs_uid").isJsonNull()) && !jsonObj.get("gcs_uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gcs_uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gcs_uid").toString()));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("redirect_url") != null && !jsonObj.get("redirect_url").isJsonNull()) && !jsonObj.get("redirect_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirect_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirect_url").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("upload_link") != null && !jsonObj.get("upload_link").isJsonNull()) && !jsonObj.get("upload_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upload_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upload_link").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoVersionUpload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoVersionUpload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoVersionUpload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoVersionUpload.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoVersionUpload>() {
           @Override
           public void write(JsonWriter out, VideoVersionUpload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoVersionUpload read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             VideoVersionUpload instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VideoVersionUpload given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VideoVersionUpload
  * @throws IOException if the JSON string is invalid with respect to VideoVersionUpload
  */
  public static VideoVersionUpload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoVersionUpload.class);
  }

 /**
  * Convert an instance of VideoVersionUpload to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

