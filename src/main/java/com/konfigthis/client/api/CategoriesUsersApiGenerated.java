/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Category;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CategoriesUsersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CategoriesUsersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CategoriesUsersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call checkFollowedCategoryCall(String category, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/categories/{category}"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkFollowedCategoryValidateBeforeCall(String category, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling checkFollowedCategory(Async)");
        }

        return checkFollowedCategoryCall(category, _callback);

    }


    private ApiResponse<Void> checkFollowedCategoryWithHttpInfo(String category) throws ApiException {
        okhttp3.Call localVarCall = checkFollowedCategoryValidateBeforeCall(category, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call checkFollowedCategoryAsync(String category, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkFollowedCategoryValidateBeforeCall(category, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CheckFollowedCategoryRequestBuilder {
        private final String category;

        private CheckFollowedCategoryRequestBuilder(String category) {
            this.category = category;
        }

        /**
         * Build call for checkFollowedCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user is following the category. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkFollowedCategoryCall(category, _callback);
        }


        /**
         * Execute checkFollowedCategory request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user is following the category. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            checkFollowedCategoryWithHttpInfo(category);
        }

        /**
         * Execute checkFollowedCategory request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user is following the category. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return checkFollowedCategoryWithHttpInfo(category);
        }

        /**
         * Execute checkFollowedCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user is following the category. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return checkFollowedCategoryAsync(category, _callback);
        }
    }

    /**
     * Check if the user follows a category
     * This method determines whether the authenticated user follows the specified category.
     * @param category The name of the category. (required)
     * @return CheckFollowedCategoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user is following the category. </td><td>  -  </td></tr>
     </table>
     */
    public CheckFollowedCategoryRequestBuilder checkFollowedCategory(String category) throws IllegalArgumentException {
        if (category == null) throw new IllegalArgumentException("\"category\" is required but got null");
            

        return new CheckFollowedCategoryRequestBuilder(category);
    }
    private okhttp3.Call checkFollowedCategory_0Call(String category, Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/categories/{category}"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkFollowedCategory_0ValidateBeforeCall(String category, Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling checkFollowedCategory_0(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling checkFollowedCategory_0(Async)");
        }

        return checkFollowedCategory_0Call(category, userId, _callback);

    }


    private ApiResponse<Void> checkFollowedCategory_0WithHttpInfo(String category, Double userId) throws ApiException {
        okhttp3.Call localVarCall = checkFollowedCategory_0ValidateBeforeCall(category, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call checkFollowedCategory_0Async(String category, Double userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkFollowedCategory_0ValidateBeforeCall(category, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CheckFollowedCategory0RequestBuilder {
        private final String category;
        private final Double userId;

        private CheckFollowedCategory0RequestBuilder(String category, double userId) {
            this.category = category;
            this.userId = userId;
        }

        /**
         * Build call for checkFollowedCategory_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user is following the category. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkFollowedCategory_0Call(category, userId, _callback);
        }


        /**
         * Execute checkFollowedCategory_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user is following the category. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            checkFollowedCategory_0WithHttpInfo(category, userId);
        }

        /**
         * Execute checkFollowedCategory_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user is following the category. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return checkFollowedCategory_0WithHttpInfo(category, userId);
        }

        /**
         * Execute checkFollowedCategory_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user is following the category. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return checkFollowedCategory_0Async(category, userId, _callback);
        }
    }

    /**
     * Check if the user follows a category
     * This method determines whether the authenticated user follows the specified category.
     * @param category The name of the category. (required)
     * @param userId The ID of the user. (required)
     * @return CheckFollowedCategory0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user is following the category. </td><td>  -  </td></tr>
     </table>
     */
    public CheckFollowedCategory0RequestBuilder checkFollowedCategory_0(String category, double userId) throws IllegalArgumentException {
        if (category == null) throw new IllegalArgumentException("\"category\" is required but got null");
            

        
        return new CheckFollowedCategory0RequestBuilder(category, userId);
    }
    private okhttp3.Call followCategoryCall(Double category, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/categories/{category}"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call followCategoryValidateBeforeCall(Double category, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling followCategory(Async)");
        }

        return followCategoryCall(category, _callback);

    }


    private ApiResponse<Void> followCategoryWithHttpInfo(Double category) throws ApiException {
        okhttp3.Call localVarCall = followCategoryValidateBeforeCall(category, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call followCategoryAsync(Double category, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = followCategoryValidateBeforeCall(category, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class FollowCategoryRequestBuilder {
        private final Double category;

        private FollowCategoryRequestBuilder(double category) {
            this.category = category;
        }

        /**
         * Build call for followCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user is following the category. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return followCategoryCall(category, _callback);
        }


        /**
         * Execute followCategory request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user is following the category. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            followCategoryWithHttpInfo(category);
        }

        /**
         * Execute followCategory request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user is following the category. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return followCategoryWithHttpInfo(category);
        }

        /**
         * Execute followCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user is following the category. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return followCategoryAsync(category, _callback);
        }
    }

    /**
     * Cause the user to follow a specific category
     * This method causes the authenticated user to follow the specified category.
     * @param category The name of the category. (required)
     * @return FollowCategoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user is following the category. </td><td>  -  </td></tr>
     </table>
     */
    public FollowCategoryRequestBuilder followCategory(double category) throws IllegalArgumentException {
        
        return new FollowCategoryRequestBuilder(category);
    }
    private okhttp3.Call followSpecificCategoryCall(Double category, Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/categories/{category}"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call followSpecificCategoryValidateBeforeCall(Double category, Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling followSpecificCategory(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling followSpecificCategory(Async)");
        }

        return followSpecificCategoryCall(category, userId, _callback);

    }


    private ApiResponse<Void> followSpecificCategoryWithHttpInfo(Double category, Double userId) throws ApiException {
        okhttp3.Call localVarCall = followSpecificCategoryValidateBeforeCall(category, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call followSpecificCategoryAsync(Double category, Double userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = followSpecificCategoryValidateBeforeCall(category, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class FollowSpecificCategoryRequestBuilder {
        private final Double category;
        private final Double userId;

        private FollowSpecificCategoryRequestBuilder(double category, double userId) {
            this.category = category;
            this.userId = userId;
        }

        /**
         * Build call for followSpecificCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user is following the category. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return followSpecificCategoryCall(category, userId, _callback);
        }


        /**
         * Execute followSpecificCategory request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user is following the category. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            followSpecificCategoryWithHttpInfo(category, userId);
        }

        /**
         * Execute followSpecificCategory request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user is following the category. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return followSpecificCategoryWithHttpInfo(category, userId);
        }

        /**
         * Execute followSpecificCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user is following the category. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return followSpecificCategoryAsync(category, userId, _callback);
        }
    }

    /**
     * Cause the user to follow a specific category
     * This method causes the authenticated user to follow the specified category.
     * @param category The name of the category. (required)
     * @param userId The ID of the user. (required)
     * @return FollowSpecificCategoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user is following the category. </td><td>  -  </td></tr>
     </table>
     */
    public FollowSpecificCategoryRequestBuilder followSpecificCategory(double category, double userId) throws IllegalArgumentException {
        
        
        return new FollowSpecificCategoryRequestBuilder(category, userId);
    }
    private okhttp3.Call listFollowedCategoriesCall(String direction, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.category+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFollowedCategoriesValidateBeforeCall(String direction, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        return listFollowedCategoriesCall(direction, page, perPage, sort, _callback);

    }


    private ApiResponse<List<Category>> listFollowedCategoriesWithHttpInfo(String direction, Double page, Double perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = listFollowedCategoriesValidateBeforeCall(direction, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<List<Category>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFollowedCategoriesAsync(String direction, Double page, Double perPage, String sort, final ApiCallback<List<Category>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFollowedCategoriesValidateBeforeCall(direction, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Category>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListFollowedCategoriesRequestBuilder {
        private String direction;
        private Double page;
        private Double perPage;
        private String sort;

        private ListFollowedCategoriesRequestBuilder() {
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return ListFollowedCategoriesRequestBuilder
         */
        public ListFollowedCategoriesRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return ListFollowedCategoriesRequestBuilder
         */
        public ListFollowedCategoriesRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return ListFollowedCategoriesRequestBuilder
         */
        public ListFollowedCategoriesRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;name&#x60; - Sort the results by name.  (optional)
         * @return ListFollowedCategoriesRequestBuilder
         */
        public ListFollowedCategoriesRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for listFollowedCategories
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The categories were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFollowedCategoriesCall(direction, page, perPage, sort, _callback);
        }


        /**
         * Execute listFollowedCategories request
         * @return List&lt;Category&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The categories were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Category> execute() throws ApiException {
            ApiResponse<List<Category>> localVarResp = listFollowedCategoriesWithHttpInfo(direction, page, perPage, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listFollowedCategories request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Category&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The categories were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Category>> executeWithHttpInfo() throws ApiException {
            return listFollowedCategoriesWithHttpInfo(direction, page, perPage, sort);
        }

        /**
         * Execute listFollowedCategories request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The categories were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Category>> _callback) throws ApiException {
            return listFollowedCategoriesAsync(direction, page, perPage, sort, _callback);
        }
    }

    /**
     * Get all the categories that the user follows
     * This method returns every category that the authenticated user follows.
     * @return ListFollowedCategoriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The categories were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ListFollowedCategoriesRequestBuilder listFollowedCategories() throws IllegalArgumentException {
        return new ListFollowedCategoriesRequestBuilder();
    }
    private okhttp3.Call listFollowedCategories_0Call(Double userId, String direction, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/categories"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.category+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFollowedCategories_0ValidateBeforeCall(Double userId, String direction, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listFollowedCategories_0(Async)");
        }

        return listFollowedCategories_0Call(userId, direction, page, perPage, sort, _callback);

    }


    private ApiResponse<List<Category>> listFollowedCategories_0WithHttpInfo(Double userId, String direction, Double page, Double perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = listFollowedCategories_0ValidateBeforeCall(userId, direction, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<List<Category>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFollowedCategories_0Async(Double userId, String direction, Double page, Double perPage, String sort, final ApiCallback<List<Category>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFollowedCategories_0ValidateBeforeCall(userId, direction, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Category>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListFollowedCategories0RequestBuilder {
        private final Double userId;
        private String direction;
        private Double page;
        private Double perPage;
        private String sort;

        private ListFollowedCategories0RequestBuilder(double userId) {
            this.userId = userId;
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return ListFollowedCategories0RequestBuilder
         */
        public ListFollowedCategories0RequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return ListFollowedCategories0RequestBuilder
         */
        public ListFollowedCategories0RequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return ListFollowedCategories0RequestBuilder
         */
        public ListFollowedCategories0RequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;name&#x60; - Sort the results by name.  (optional)
         * @return ListFollowedCategories0RequestBuilder
         */
        public ListFollowedCategories0RequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for listFollowedCategories_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The categories were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFollowedCategories_0Call(userId, direction, page, perPage, sort, _callback);
        }


        /**
         * Execute listFollowedCategories_0 request
         * @return List&lt;Category&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The categories were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Category> execute() throws ApiException {
            ApiResponse<List<Category>> localVarResp = listFollowedCategories_0WithHttpInfo(userId, direction, page, perPage, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listFollowedCategories_0 request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Category&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The categories were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Category>> executeWithHttpInfo() throws ApiException {
            return listFollowedCategories_0WithHttpInfo(userId, direction, page, perPage, sort);
        }

        /**
         * Execute listFollowedCategories_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The categories were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Category>> _callback) throws ApiException {
            return listFollowedCategories_0Async(userId, direction, page, perPage, sort, _callback);
        }
    }

    /**
     * Get all the categories that the user follows
     * This method returns every category that the authenticated user follows.
     * @param userId The ID of the user. (required)
     * @return ListFollowedCategories0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The categories were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ListFollowedCategories0RequestBuilder listFollowedCategories_0(double userId) throws IllegalArgumentException {
        
        return new ListFollowedCategories0RequestBuilder(userId);
    }
    private okhttp3.Call stopFollowingCategoryCall(String category, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/categories/{category}"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stopFollowingCategoryValidateBeforeCall(String category, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling stopFollowingCategory(Async)");
        }

        return stopFollowingCategoryCall(category, _callback);

    }


    private ApiResponse<Void> stopFollowingCategoryWithHttpInfo(String category) throws ApiException {
        okhttp3.Call localVarCall = stopFollowingCategoryValidateBeforeCall(category, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call stopFollowingCategoryAsync(String category, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stopFollowingCategoryValidateBeforeCall(category, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class StopFollowingCategoryRequestBuilder {
        private final String category;

        private StopFollowingCategoryRequestBuilder(String category) {
            this.category = category;
        }

        /**
         * Build call for stopFollowingCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user has stopped following the category. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return stopFollowingCategoryCall(category, _callback);
        }


        /**
         * Execute stopFollowingCategory request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user has stopped following the category. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            stopFollowingCategoryWithHttpInfo(category);
        }

        /**
         * Execute stopFollowingCategory request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user has stopped following the category. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return stopFollowingCategoryWithHttpInfo(category);
        }

        /**
         * Execute stopFollowingCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user has stopped following the category. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return stopFollowingCategoryAsync(category, _callback);
        }
    }

    /**
     * Cause the user to stop following a category
     * This method causes the authenticated user to stop following the specified category.
     * @param category The name of the category. (required)
     * @return StopFollowingCategoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user has stopped following the category. </td><td>  -  </td></tr>
     </table>
     */
    public StopFollowingCategoryRequestBuilder stopFollowingCategory(String category) throws IllegalArgumentException {
        if (category == null) throw new IllegalArgumentException("\"category\" is required but got null");
            

        return new StopFollowingCategoryRequestBuilder(category);
    }
    private okhttp3.Call stopFollowingCategory_0Call(String category, Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/categories/{category}"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stopFollowingCategory_0ValidateBeforeCall(String category, Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling stopFollowingCategory_0(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling stopFollowingCategory_0(Async)");
        }

        return stopFollowingCategory_0Call(category, userId, _callback);

    }


    private ApiResponse<Void> stopFollowingCategory_0WithHttpInfo(String category, Double userId) throws ApiException {
        okhttp3.Call localVarCall = stopFollowingCategory_0ValidateBeforeCall(category, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call stopFollowingCategory_0Async(String category, Double userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stopFollowingCategory_0ValidateBeforeCall(category, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class StopFollowingCategory0RequestBuilder {
        private final String category;
        private final Double userId;

        private StopFollowingCategory0RequestBuilder(String category, double userId) {
            this.category = category;
            this.userId = userId;
        }

        /**
         * Build call for stopFollowingCategory_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user has stopped following the category. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return stopFollowingCategory_0Call(category, userId, _callback);
        }


        /**
         * Execute stopFollowingCategory_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user has stopped following the category. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            stopFollowingCategory_0WithHttpInfo(category, userId);
        }

        /**
         * Execute stopFollowingCategory_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user has stopped following the category. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return stopFollowingCategory_0WithHttpInfo(category, userId);
        }

        /**
         * Execute stopFollowingCategory_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user has stopped following the category. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return stopFollowingCategory_0Async(category, userId, _callback);
        }
    }

    /**
     * Cause the user to stop following a category
     * This method causes the authenticated user to stop following the specified category.
     * @param category The name of the category. (required)
     * @param userId The ID of the user. (required)
     * @return StopFollowingCategory0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user has stopped following the category. </td><td>  -  </td></tr>
     </table>
     */
    public StopFollowingCategory0RequestBuilder stopFollowingCategory_0(String category, double userId) throws IllegalArgumentException {
        if (category == null) throw new IllegalArgumentException("\"category\" is required but got null");
            

        
        return new StopFollowingCategory0RequestBuilder(category, userId);
    }
}
