/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.OnDemandGenre;
import com.konfigthis.client.model.OnDemandPageColors;
import com.konfigthis.client.model.OnDemandPageEpisodes;
import com.konfigthis.client.model.OnDemandPageMetadata;
import com.konfigthis.client.model.OnDemandPagePreorder;
import com.konfigthis.client.model.OnDemandPagePublished;
import com.konfigthis.client.model.OnDemandPageSubscription;
import com.konfigthis.client.model.Picture;
import com.konfigthis.client.model.User;
import com.konfigthis.client.model.Video;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * OnDemandPage
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class OnDemandPage {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_BACKGROUND = "background";
  @SerializedName(SERIALIZED_NAME_BACKGROUND)
  private Picture background;

  public static final String SERIALIZED_NAME_COLORS = "colors";
  @SerializedName(SERIALIZED_NAME_COLORS)
  private OnDemandPageColors colors;

  public static final String SERIALIZED_NAME_CONTENT_RATING = "content_rating";
  @SerializedName(SERIALIZED_NAME_CONTENT_RATING)
  private List<String> contentRating = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_TIME = "created_time";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private String createdTime;

  public static final String SERIALIZED_NAME_DOMAIN_LINK = "domain_link";
  @SerializedName(SERIALIZED_NAME_DOMAIN_LINK)
  private String domainLink;

  public static final String SERIALIZED_NAME_EPISODES = "episodes";
  @SerializedName(SERIALIZED_NAME_EPISODES)
  private OnDemandPageEpisodes episodes;

  public static final String SERIALIZED_NAME_FILM = "film";
  @SerializedName(SERIALIZED_NAME_FILM)
  private Video film;

  public static final String SERIALIZED_NAME_GENRES = "genres";
  @SerializedName(SERIALIZED_NAME_GENRES)
  private List<OnDemandGenre> genres = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private OnDemandPageMetadata metadata;

  public static final String SERIALIZED_NAME_MODIFIED_TIME = "modified_time";
  @SerializedName(SERIALIZED_NAME_MODIFIED_TIME)
  private String modifiedTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PICTURES = "pictures";
  @SerializedName(SERIALIZED_NAME_PICTURES)
  private Picture pictures;

  public static final String SERIALIZED_NAME_PREORDER = "preorder";
  @SerializedName(SERIALIZED_NAME_PREORDER)
  private OnDemandPagePreorder preorder;

  public static final String SERIALIZED_NAME_PUBLISHED = "published";
  @SerializedName(SERIALIZED_NAME_PUBLISHED)
  private OnDemandPagePublished published;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private Double rating;

  public static final String SERIALIZED_NAME_RESOURCE_KEY = "resource_key";
  @SerializedName(SERIALIZED_NAME_RESOURCE_KEY)
  private String resourceKey;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  public static final String SERIALIZED_NAME_SUBSCRIPTION = "subscription";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION)
  private OnDemandPageSubscription subscription;

  public static final String SERIALIZED_NAME_THEME = "theme";
  @SerializedName(SERIALIZED_NAME_THEME)
  private String theme;

  public static final String SERIALIZED_NAME_THUMBNAIL = "thumbnail";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL)
  private Picture thumbnail;

  public static final String SERIALIZED_NAME_TRAILER = "trailer";
  @SerializedName(SERIALIZED_NAME_TRAILER)
  private Video trailer;

  /**
   * Whether the On Demand page is for a film or a series.  Option descriptions:  * &#x60;film&#x60; - The On Demand page is for a film.  * &#x60;series&#x60; - The On Demand page is for a series. 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    FILM("film"),
    
    SERIES("series");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public OnDemandPage() {
  }

  public OnDemandPage description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * The description of the On Demand page.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "DARBY FOREVER follows the fantasies of Darby, a shopgirl at \"Bobbins & Notions\"", required = true, value = "The description of the On Demand page.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public OnDemandPage background(Picture background) {
    
    
    
    
    this.background = background;
    return this;
  }

   /**
   * The background image for the On Demand page.
   * @return background
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The background image for the On Demand page.")

  public Picture getBackground() {
    return background;
  }


  public void setBackground(Picture background) {
    
    
    
    this.background = background;
  }


  public OnDemandPage colors(OnDemandPageColors colors) {
    
    
    
    
    this.colors = colors;
    return this;
  }

   /**
   * Get colors
   * @return colors
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OnDemandPageColors getColors() {
    return colors;
  }


  public void setColors(OnDemandPageColors colors) {
    
    
    
    this.colors = colors;
  }


  public OnDemandPage contentRating(List<String> contentRating) {
    
    
    
    
    this.contentRating = contentRating;
    return this;
  }

  public OnDemandPage addContentRatingItem(String contentRatingItem) {
    this.contentRating.add(contentRatingItem);
    return this;
  }

   /**
   * An array of the On Demand page&#39;s content ratings.
   * @return contentRating
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An array of the On Demand page's content ratings.")

  public List<String> getContentRating() {
    return contentRating;
  }


  public void setContentRating(List<String> contentRating) {
    
    
    
    this.contentRating = contentRating;
  }


  public OnDemandPage createdTime(String createdTime) {
    
    
    
    
    this.createdTime = createdTime;
    return this;
  }

   /**
   * The time in ISO 8601 format when the On Demand page was created.
   * @return createdTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-05-15T13:42:25+00:00", value = "The time in ISO 8601 format when the On Demand page was created.")

  public String getCreatedTime() {
    return createdTime;
  }


  public void setCreatedTime(String createdTime) {
    
    
    
    this.createdTime = createdTime;
  }


  public OnDemandPage domainLink(String domainLink) {
    
    
    
    
    this.domainLink = domainLink;
    return this;
  }

   /**
   * The link to the On Demand page on its own domain.
   * @return domainLink
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://example.com", required = true, value = "The link to the On Demand page on its own domain.")

  public String getDomainLink() {
    return domainLink;
  }


  public void setDomainLink(String domainLink) {
    
    
    
    this.domainLink = domainLink;
  }


  public OnDemandPage episodes(OnDemandPageEpisodes episodes) {
    
    
    
    
    this.episodes = episodes;
    return this;
  }

   /**
   * Get episodes
   * @return episodes
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OnDemandPageEpisodes getEpisodes() {
    return episodes;
  }


  public void setEpisodes(OnDemandPageEpisodes episodes) {
    
    
    
    this.episodes = episodes;
  }


  public OnDemandPage film(Video film) {
    
    
    
    
    this.film = film;
    return this;
  }

   /**
   * The On Demand page&#39;s film, if the page is for a film.
   * @return film
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The On Demand page's film, if the page is for a film.")

  public Video getFilm() {
    return film;
  }


  public void setFilm(Video film) {
    
    
    
    this.film = film;
  }


  public OnDemandPage genres(List<OnDemandGenre> genres) {
    
    
    
    
    this.genres = genres;
    return this;
  }

  public OnDemandPage addGenresItem(OnDemandGenre genresItem) {
    this.genres.add(genresItem);
    return this;
  }

   /**
   * An array of the genres assigned to the On Demand page.
   * @return genres
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An array of the genres assigned to the On Demand page.")

  public List<OnDemandGenre> getGenres() {
    return genres;
  }


  public void setGenres(List<OnDemandGenre> genres) {
    
    
    
    this.genres = genres;
  }


  public OnDemandPage link(String link) {
    
    
    
    
    this.link = link;
    return this;
  }

   /**
   * The link to the On Demand page.
   * @return link
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://vimeo.com/ondemand/darbyforever", required = true, value = "The link to the On Demand page.")

  public String getLink() {
    return link;
  }


  public void setLink(String link) {
    
    
    
    this.link = link;
  }


  public OnDemandPage metadata(OnDemandPageMetadata metadata) {
    
    
    
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OnDemandPageMetadata getMetadata() {
    return metadata;
  }


  public void setMetadata(OnDemandPageMetadata metadata) {
    
    
    
    this.metadata = metadata;
  }


  public OnDemandPage modifiedTime(String modifiedTime) {
    
    
    
    
    this.modifiedTime = modifiedTime;
    return this;
  }

   /**
   * The time in ISO 8601 format when the On Demand page was last modified.
   * @return modifiedTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-05-15T13:42:25+00:00", value = "The time in ISO 8601 format when the On Demand page was last modified.")

  public String getModifiedTime() {
    return modifiedTime;
  }


  public void setModifiedTime(String modifiedTime) {
    
    
    
    this.modifiedTime = modifiedTime;
  }


  public OnDemandPage name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The descriptive title of the On Demand page.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Darby Forever", required = true, value = "The descriptive title of the On Demand page.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public OnDemandPage pictures(Picture pictures) {
    
    
    
    
    this.pictures = pictures;
    return this;
  }

   /**
   * The active poster for the On Demand page.
   * @return pictures
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The active poster for the On Demand page.")

  public Picture getPictures() {
    return pictures;
  }


  public void setPictures(Picture pictures) {
    
    
    
    this.pictures = pictures;
  }


  public OnDemandPage preorder(OnDemandPagePreorder preorder) {
    
    
    
    
    this.preorder = preorder;
    return this;
  }

   /**
   * Get preorder
   * @return preorder
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OnDemandPagePreorder getPreorder() {
    return preorder;
  }


  public void setPreorder(OnDemandPagePreorder preorder) {
    
    
    
    this.preorder = preorder;
  }


  public OnDemandPage published(OnDemandPagePublished published) {
    
    
    
    
    this.published = published;
    return this;
  }

   /**
   * Get published
   * @return published
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OnDemandPagePublished getPublished() {
    return published;
  }


  public void setPublished(OnDemandPagePublished published) {
    
    
    
    this.published = published;
  }


  public OnDemandPage rating(Double rating) {
    
    
    
    
    this.rating = rating;
    return this;
  }

  public OnDemandPage rating(Integer rating) {
    
    
    
    
    this.rating = rating.doubleValue();
    return this;
  }

   /**
   * The rating of the On Demand page.
   * @return rating
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "7", required = true, value = "The rating of the On Demand page.")

  public Double getRating() {
    return rating;
  }


  public void setRating(Double rating) {
    
    
    
    this.rating = rating;
  }


  public OnDemandPage resourceKey(String resourceKey) {
    
    
    
    
    this.resourceKey = resourceKey;
    return this;
  }

   /**
   * The On Demand resource key.
   * @return resourceKey
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "bac1033deba2310ebba2caec33c23e4beea67aba", required = true, value = "The On Demand resource key.")

  public String getResourceKey() {
    return resourceKey;
  }


  public void setResourceKey(String resourceKey) {
    
    
    
    this.resourceKey = resourceKey;
  }


  public OnDemandPage sku(String sku) {
    
    
    
    
    this.sku = sku;
    return this;
  }

   /**
   * The creator-designated SKU for the On Demand page.
   * @return sku
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "VIME0001", value = "The creator-designated SKU for the On Demand page.")

  public String getSku() {
    return sku;
  }


  public void setSku(String sku) {
    
    
    
    this.sku = sku;
  }


  public OnDemandPage subscription(OnDemandPageSubscription subscription) {
    
    
    
    
    this.subscription = subscription;
    return this;
  }

   /**
   * Get subscription
   * @return subscription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public OnDemandPageSubscription getSubscription() {
    return subscription;
  }


  public void setSubscription(OnDemandPageSubscription subscription) {
    
    
    
    this.subscription = subscription;
  }


  public OnDemandPage theme(String theme) {
    
    
    
    
    this.theme = theme;
    return this;
  }

   /**
   * The graphical theme for the On Demand page.
   * @return theme
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "vader", required = true, value = "The graphical theme for the On Demand page.")

  public String getTheme() {
    return theme;
  }


  public void setTheme(String theme) {
    
    
    
    this.theme = theme;
  }


  public OnDemandPage thumbnail(Picture thumbnail) {
    
    
    
    
    this.thumbnail = thumbnail;
    return this;
  }

   /**
   * The thumbnail image for the On Demand page.
   * @return thumbnail
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The thumbnail image for the On Demand page.")

  public Picture getThumbnail() {
    return thumbnail;
  }


  public void setThumbnail(Picture thumbnail) {
    
    
    
    this.thumbnail = thumbnail;
  }


  public OnDemandPage trailer(Video trailer) {
    
    
    
    
    this.trailer = trailer;
    return this;
  }

   /**
   * The trailer for the On Demand page.
   * @return trailer
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The trailer for the On Demand page.")

  public Video getTrailer() {
    return trailer;
  }


  public void setTrailer(Video trailer) {
    
    
    
    this.trailer = trailer;
  }


  public OnDemandPage type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Whether the On Demand page is for a film or a series.  Option descriptions:  * &#x60;film&#x60; - The On Demand page is for a film.  * &#x60;series&#x60; - The On Demand page is for a series. 
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "FILM", required = true, value = "Whether the On Demand page is for a film or a series.  Option descriptions:  * `film` - The On Demand page is for a film.  * `series` - The On Demand page is for a series. ")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public OnDemandPage uri(String uri) {
    
    
    
    
    this.uri = uri;
    return this;
  }

   /**
   * The relative URI of the On Demand page.
   * @return uri
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "/ondemand/pages/61326", required = true, value = "The relative URI of the On Demand page.")

  public String getUri() {
    return uri;
  }


  public void setUri(String uri) {
    
    
    
    this.uri = uri;
  }


  public OnDemandPage user(User user) {
    
    
    
    
    this.user = user;
    return this;
  }

   /**
   * The user who created the On Demand page.
   * @return user
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The user who created the On Demand page.")

  public User getUser() {
    return user;
  }


  public void setUser(User user) {
    
    
    
    this.user = user;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OnDemandPage instance itself
   */
  public OnDemandPage putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OnDemandPage onDemandPage = (OnDemandPage) o;
    return Objects.equals(this.description, onDemandPage.description) &&
        Objects.equals(this.background, onDemandPage.background) &&
        Objects.equals(this.colors, onDemandPage.colors) &&
        Objects.equals(this.contentRating, onDemandPage.contentRating) &&
        Objects.equals(this.createdTime, onDemandPage.createdTime) &&
        Objects.equals(this.domainLink, onDemandPage.domainLink) &&
        Objects.equals(this.episodes, onDemandPage.episodes) &&
        Objects.equals(this.film, onDemandPage.film) &&
        Objects.equals(this.genres, onDemandPage.genres) &&
        Objects.equals(this.link, onDemandPage.link) &&
        Objects.equals(this.metadata, onDemandPage.metadata) &&
        Objects.equals(this.modifiedTime, onDemandPage.modifiedTime) &&
        Objects.equals(this.name, onDemandPage.name) &&
        Objects.equals(this.pictures, onDemandPage.pictures) &&
        Objects.equals(this.preorder, onDemandPage.preorder) &&
        Objects.equals(this.published, onDemandPage.published) &&
        Objects.equals(this.rating, onDemandPage.rating) &&
        Objects.equals(this.resourceKey, onDemandPage.resourceKey) &&
        Objects.equals(this.sku, onDemandPage.sku) &&
        Objects.equals(this.subscription, onDemandPage.subscription) &&
        Objects.equals(this.theme, onDemandPage.theme) &&
        Objects.equals(this.thumbnail, onDemandPage.thumbnail) &&
        Objects.equals(this.trailer, onDemandPage.trailer) &&
        Objects.equals(this.type, onDemandPage.type) &&
        Objects.equals(this.uri, onDemandPage.uri) &&
        Objects.equals(this.user, onDemandPage.user)&&
        Objects.equals(this.additionalProperties, onDemandPage.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, background, colors, contentRating, createdTime, domainLink, episodes, film, genres, link, metadata, modifiedTime, name, pictures, preorder, published, rating, resourceKey, sku, subscription, theme, thumbnail, trailer, type, uri, user, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OnDemandPage {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    background: ").append(toIndentedString(background)).append("\n");
    sb.append("    colors: ").append(toIndentedString(colors)).append("\n");
    sb.append("    contentRating: ").append(toIndentedString(contentRating)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    domainLink: ").append(toIndentedString(domainLink)).append("\n");
    sb.append("    episodes: ").append(toIndentedString(episodes)).append("\n");
    sb.append("    film: ").append(toIndentedString(film)).append("\n");
    sb.append("    genres: ").append(toIndentedString(genres)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    modifiedTime: ").append(toIndentedString(modifiedTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pictures: ").append(toIndentedString(pictures)).append("\n");
    sb.append("    preorder: ").append(toIndentedString(preorder)).append("\n");
    sb.append("    published: ").append(toIndentedString(published)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    resourceKey: ").append(toIndentedString(resourceKey)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    subscription: ").append(toIndentedString(subscription)).append("\n");
    sb.append("    theme: ").append(toIndentedString(theme)).append("\n");
    sb.append("    thumbnail: ").append(toIndentedString(thumbnail)).append("\n");
    sb.append("    trailer: ").append(toIndentedString(trailer)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("background");
    openapiFields.add("colors");
    openapiFields.add("content_rating");
    openapiFields.add("created_time");
    openapiFields.add("domain_link");
    openapiFields.add("episodes");
    openapiFields.add("film");
    openapiFields.add("genres");
    openapiFields.add("link");
    openapiFields.add("metadata");
    openapiFields.add("modified_time");
    openapiFields.add("name");
    openapiFields.add("pictures");
    openapiFields.add("preorder");
    openapiFields.add("published");
    openapiFields.add("rating");
    openapiFields.add("resource_key");
    openapiFields.add("sku");
    openapiFields.add("subscription");
    openapiFields.add("theme");
    openapiFields.add("thumbnail");
    openapiFields.add("trailer");
    openapiFields.add("type");
    openapiFields.add("uri");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("background");
    openapiRequiredFields.add("colors");
    openapiRequiredFields.add("content_rating");
    openapiRequiredFields.add("domain_link");
    openapiRequiredFields.add("episodes");
    openapiRequiredFields.add("genres");
    openapiRequiredFields.add("link");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("pictures");
    openapiRequiredFields.add("preorder");
    openapiRequiredFields.add("published");
    openapiRequiredFields.add("rating");
    openapiRequiredFields.add("resource_key");
    openapiRequiredFields.add("subscription");
    openapiRequiredFields.add("theme");
    openapiRequiredFields.add("thumbnail");
    openapiRequiredFields.add("trailer");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("uri");
    openapiRequiredFields.add("user");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OnDemandPage
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OnDemandPage.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OnDemandPage is not found in the empty JSON string", OnDemandPage.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OnDemandPage.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("description").isJsonNull() && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the required field `background`
      Picture.validateJsonObject(jsonObj.getAsJsonObject("background"));
      // validate the required field `colors`
      OnDemandPageColors.validateJsonObject(jsonObj.getAsJsonObject("colors"));
      // ensure the required json array is present
      if (jsonObj.get("content_rating") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("content_rating").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_rating` to be an array in the JSON string but got `%s`", jsonObj.get("content_rating").toString()));
      }
      if ((jsonObj.get("created_time") != null && !jsonObj.get("created_time").isJsonNull()) && !jsonObj.get("created_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_time").toString()));
      }
      if (!jsonObj.get("domain_link").isJsonNull() && !jsonObj.get("domain_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain_link").toString()));
      }
      // validate the required field `episodes`
      OnDemandPageEpisodes.validateJsonObject(jsonObj.getAsJsonObject("episodes"));
      // validate the optional field `film`
      if (jsonObj.get("film") != null && !jsonObj.get("film").isJsonNull()) {
        Video.validateJsonObject(jsonObj.getAsJsonObject("film"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("genres").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `genres` to be an array in the JSON string but got `%s`", jsonObj.get("genres").toString()));
      }

      JsonArray jsonArraygenres = jsonObj.getAsJsonArray("genres");
      // validate the required field `genres` (array)
      for (int i = 0; i < jsonArraygenres.size(); i++) {
        OnDemandGenre.validateJsonObject(jsonArraygenres.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      // validate the required field `metadata`
      OnDemandPageMetadata.validateJsonObject(jsonObj.getAsJsonObject("metadata"));
      if ((jsonObj.get("modified_time") != null && !jsonObj.get("modified_time").isJsonNull()) && !jsonObj.get("modified_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modified_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modified_time").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `pictures`
      Picture.validateJsonObject(jsonObj.getAsJsonObject("pictures"));
      // validate the required field `preorder`
      OnDemandPagePreorder.validateJsonObject(jsonObj.getAsJsonObject("preorder"));
      // validate the required field `published`
      OnDemandPagePublished.validateJsonObject(jsonObj.getAsJsonObject("published"));
      if (!jsonObj.get("resource_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_key").toString()));
      }
      if (!jsonObj.get("sku").isJsonNull() && (jsonObj.get("sku") != null && !jsonObj.get("sku").isJsonNull()) && !jsonObj.get("sku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku").toString()));
      }
      // validate the required field `subscription`
      OnDemandPageSubscription.validateJsonObject(jsonObj.getAsJsonObject("subscription"));
      if (!jsonObj.get("theme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `theme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("theme").toString()));
      }
      // validate the required field `thumbnail`
      Picture.validateJsonObject(jsonObj.getAsJsonObject("thumbnail"));
      // validate the required field `trailer`
      Video.validateJsonObject(jsonObj.getAsJsonObject("trailer"));
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      // validate the required field `user`
      User.validateJsonObject(jsonObj.getAsJsonObject("user"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OnDemandPage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OnDemandPage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OnDemandPage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OnDemandPage.class));

       return (TypeAdapter<T>) new TypeAdapter<OnDemandPage>() {
           @Override
           public void write(JsonWriter out, OnDemandPage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OnDemandPage read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             OnDemandPage instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OnDemandPage given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OnDemandPage
  * @throws IOException if the JSON string is invalid with respect to OnDemandPage
  */
  public static OnDemandPage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OnDemandPage.class);
  }

 /**
  * Convert an instance of OnDemandPage to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

