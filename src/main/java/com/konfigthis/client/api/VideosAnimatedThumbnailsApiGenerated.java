/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AnimatedThumbset;
import com.konfigthis.client.model.VideosAnimatedThumbnailsCreateSetRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class VideosAnimatedThumbnailsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VideosAnimatedThumbnailsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public VideosAnimatedThumbnailsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createSetCall(Double videoId, VideosAnimatedThumbnailsCreateSetRequest videosAnimatedThumbnailsCreateSetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = videosAnimatedThumbnailsCreateSetRequest;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/animated_thumbsets"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.animatedthumbnails+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.animatedthumbnails+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSetValidateBeforeCall(Double videoId, VideosAnimatedThumbnailsCreateSetRequest videosAnimatedThumbnailsCreateSetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling createSet(Async)");
        }

        // verify the required parameter 'videosAnimatedThumbnailsCreateSetRequest' is set
        if (videosAnimatedThumbnailsCreateSetRequest == null) {
            throw new ApiException("Missing the required parameter 'videosAnimatedThumbnailsCreateSetRequest' when calling createSet(Async)");
        }

        return createSetCall(videoId, videosAnimatedThumbnailsCreateSetRequest, _callback);

    }


    private ApiResponse<AnimatedThumbset> createSetWithHttpInfo(Double videoId, VideosAnimatedThumbnailsCreateSetRequest videosAnimatedThumbnailsCreateSetRequest) throws ApiException {
        okhttp3.Call localVarCall = createSetValidateBeforeCall(videoId, videosAnimatedThumbnailsCreateSetRequest, null);
        Type localVarReturnType = new TypeToken<AnimatedThumbset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSetAsync(Double videoId, VideosAnimatedThumbnailsCreateSetRequest videosAnimatedThumbnailsCreateSetRequest, final ApiCallback<AnimatedThumbset> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSetValidateBeforeCall(videoId, videosAnimatedThumbnailsCreateSetRequest, _callback);
        Type localVarReturnType = new TypeToken<AnimatedThumbset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateSetRequestBuilder {
        private final Double duration;
        private final Double videoId;
        private Double startTime;

        private CreateSetRequestBuilder(double duration, double videoId) {
            this.duration = duration;
            this.videoId = videoId;
        }

        /**
         * Set startTime
         * @param startTime The time in seconds corresponding to the start of the animation in the video. The default value is 0. (optional)
         * @return CreateSetRequestBuilder
         */
        public CreateSetRequestBuilder startTime(Double startTime) {
            this.startTime = startTime;
            return this;
        }
        
        /**
         * Build call for createSet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The set of animated thumbnails was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VideosAnimatedThumbnailsCreateSetRequest videosAnimatedThumbnailsCreateSetRequest = buildBodyParams();
            return createSetCall(videoId, videosAnimatedThumbnailsCreateSetRequest, _callback);
        }

        private VideosAnimatedThumbnailsCreateSetRequest buildBodyParams() {
            VideosAnimatedThumbnailsCreateSetRequest videosAnimatedThumbnailsCreateSetRequest = new VideosAnimatedThumbnailsCreateSetRequest();
            videosAnimatedThumbnailsCreateSetRequest.duration(this.duration);
            videosAnimatedThumbnailsCreateSetRequest.startTime(this.startTime);
            return videosAnimatedThumbnailsCreateSetRequest;
        }

        /**
         * Execute createSet request
         * @return AnimatedThumbset
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The set of animated thumbnails was created. </td><td>  -  </td></tr>
         </table>
         */
        public AnimatedThumbset execute() throws ApiException {
            VideosAnimatedThumbnailsCreateSetRequest videosAnimatedThumbnailsCreateSetRequest = buildBodyParams();
            ApiResponse<AnimatedThumbset> localVarResp = createSetWithHttpInfo(videoId, videosAnimatedThumbnailsCreateSetRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createSet request with HTTP info returned
         * @return ApiResponse&lt;AnimatedThumbset&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The set of animated thumbnails was created. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AnimatedThumbset> executeWithHttpInfo() throws ApiException {
            VideosAnimatedThumbnailsCreateSetRequest videosAnimatedThumbnailsCreateSetRequest = buildBodyParams();
            return createSetWithHttpInfo(videoId, videosAnimatedThumbnailsCreateSetRequest);
        }

        /**
         * Execute createSet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The set of animated thumbnails was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AnimatedThumbset> _callback) throws ApiException {
            VideosAnimatedThumbnailsCreateSetRequest videosAnimatedThumbnailsCreateSetRequest = buildBodyParams();
            return createSetAsync(videoId, videosAnimatedThumbnailsCreateSetRequest, _callback);
        }
    }

    /**
     * Create a set of animated thumbnails for a video
     * This method creates a set of animated thumbnails for the specified video. Please note that you can&#39;t create more than four sets of animated thumbnails for the same video.
     * @param videoId The ID of the video. (required)
     * @param videosAnimatedThumbnailsCreateSetRequest  (required)
     * @return CreateSetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The set of animated thumbnails was created. </td><td>  -  </td></tr>
     </table>
     */
    public CreateSetRequestBuilder createSet(double duration, double videoId) throws IllegalArgumentException {
        
        
        return new CreateSetRequestBuilder(duration, videoId);
    }
    private okhttp3.Call deleteSetCall(String pictureId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/animated_thumbsets/{picture_id}"
            .replace("{" + "picture_id" + "}", localVarApiClient.escapeString(pictureId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSetValidateBeforeCall(String pictureId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pictureId' is set
        if (pictureId == null) {
            throw new ApiException("Missing the required parameter 'pictureId' when calling deleteSet(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling deleteSet(Async)");
        }

        return deleteSetCall(pictureId, videoId, _callback);

    }


    private ApiResponse<Void> deleteSetWithHttpInfo(String pictureId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = deleteSetValidateBeforeCall(pictureId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteSetAsync(String pictureId, Double videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSetValidateBeforeCall(pictureId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteSetRequestBuilder {
        private final String pictureId;
        private final Double videoId;

        private DeleteSetRequestBuilder(String pictureId, double videoId) {
            this.pictureId = pictureId;
            this.videoId = videoId;
        }

        /**
         * Build call for deleteSet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The set of animated thumbnails was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSetCall(pictureId, videoId, _callback);
        }


        /**
         * Execute deleteSet request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The set of animated thumbnails was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteSetWithHttpInfo(pictureId, videoId);
        }

        /**
         * Execute deleteSet request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The set of animated thumbnails was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteSetWithHttpInfo(pictureId, videoId);
        }

        /**
         * Execute deleteSet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The set of animated thumbnails was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteSetAsync(pictureId, videoId, _callback);
        }
    }

    /**
     * Delete a set of animated thumbnails for a video
     * This method deletes a set of animated thumbnails for the specified video.
     * @param pictureId The UUID of the set of animated thumbnails. (required)
     * @param videoId The ID of the video. (required)
     * @return DeleteSetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The set of animated thumbnails was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSetRequestBuilder deleteSet(String pictureId, double videoId) throws IllegalArgumentException {
        if (pictureId == null) throw new IllegalArgumentException("\"pictureId\" is required but got null");
            

        
        return new DeleteSetRequestBuilder(pictureId, videoId);
    }
    private okhttp3.Call getAllSetsCall(Double videoId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/animated_thumbsets"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.animatedthumbnails+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllSetsValidateBeforeCall(Double videoId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getAllSets(Async)");
        }

        return getAllSetsCall(videoId, page, perPage, _callback);

    }


    private ApiResponse<List<AnimatedThumbset>> getAllSetsWithHttpInfo(Double videoId, Double page, Double perPage) throws ApiException {
        okhttp3.Call localVarCall = getAllSetsValidateBeforeCall(videoId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<AnimatedThumbset>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllSetsAsync(Double videoId, Double page, Double perPage, final ApiCallback<List<AnimatedThumbset>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllSetsValidateBeforeCall(videoId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<AnimatedThumbset>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllSetsRequestBuilder {
        private final Double videoId;
        private Double page;
        private Double perPage;

        private GetAllSetsRequestBuilder(double videoId) {
            this.videoId = videoId;
        }

        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetAllSetsRequestBuilder
         */
        public GetAllSetsRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetAllSetsRequestBuilder
         */
        public GetAllSetsRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getAllSets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The sets of animated thumbnails were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllSetsCall(videoId, page, perPage, _callback);
        }


        /**
         * Execute getAllSets request
         * @return List&lt;AnimatedThumbset&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The sets of animated thumbnails were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<AnimatedThumbset> execute() throws ApiException {
            ApiResponse<List<AnimatedThumbset>> localVarResp = getAllSetsWithHttpInfo(videoId, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllSets request with HTTP info returned
         * @return ApiResponse&lt;List&lt;AnimatedThumbset&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The sets of animated thumbnails were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<AnimatedThumbset>> executeWithHttpInfo() throws ApiException {
            return getAllSetsWithHttpInfo(videoId, page, perPage);
        }

        /**
         * Execute getAllSets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The sets of animated thumbnails were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<AnimatedThumbset>> _callback) throws ApiException {
            return getAllSetsAsync(videoId, page, perPage, _callback);
        }
    }

    /**
     * Get all the animated thumbnails of a video
     * This method returns all the sets of animated thumbnails associated with the specified video. The authenticated user must be the owner of the video.
     * @param videoId The ID of the video. (required)
     * @return GetAllSetsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The sets of animated thumbnails were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllSetsRequestBuilder getAllSets(double videoId) throws IllegalArgumentException {
        
        return new GetAllSetsRequestBuilder(videoId);
    }
    private okhttp3.Call getStatusOfSetCall(String pictureId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/animated_thumbsets/{picture_id}/status"
            .replace("{" + "picture_id" + "}", localVarApiClient.escapeString(pictureId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.animatedthumbnails+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatusOfSetValidateBeforeCall(String pictureId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pictureId' is set
        if (pictureId == null) {
            throw new ApiException("Missing the required parameter 'pictureId' when calling getStatusOfSet(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getStatusOfSet(Async)");
        }

        return getStatusOfSetCall(pictureId, videoId, _callback);

    }


    private ApiResponse<AnimatedThumbset> getStatusOfSetWithHttpInfo(String pictureId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = getStatusOfSetValidateBeforeCall(pictureId, videoId, null);
        Type localVarReturnType = new TypeToken<AnimatedThumbset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStatusOfSetAsync(String pictureId, Double videoId, final ApiCallback<AnimatedThumbset> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatusOfSetValidateBeforeCall(pictureId, videoId, _callback);
        Type localVarReturnType = new TypeToken<AnimatedThumbset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStatusOfSetRequestBuilder {
        private final String pictureId;
        private final Double videoId;

        private GetStatusOfSetRequestBuilder(String pictureId, double videoId) {
            this.pictureId = pictureId;
            this.videoId = videoId;
        }

        /**
         * Build call for getStatusOfSet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The status of the set of animated thumbnails was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStatusOfSetCall(pictureId, videoId, _callback);
        }


        /**
         * Execute getStatusOfSet request
         * @return AnimatedThumbset
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The status of the set of animated thumbnails was returned. </td><td>  -  </td></tr>
         </table>
         */
        public AnimatedThumbset execute() throws ApiException {
            ApiResponse<AnimatedThumbset> localVarResp = getStatusOfSetWithHttpInfo(pictureId, videoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStatusOfSet request with HTTP info returned
         * @return ApiResponse&lt;AnimatedThumbset&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The status of the set of animated thumbnails was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AnimatedThumbset> executeWithHttpInfo() throws ApiException {
            return getStatusOfSetWithHttpInfo(pictureId, videoId);
        }

        /**
         * Execute getStatusOfSet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The status of the set of animated thumbnails was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AnimatedThumbset> _callback) throws ApiException {
            return getStatusOfSetAsync(pictureId, videoId, _callback);
        }
    }

    /**
     * Get the status of a set of animated thumbnails
     * This method returns the status of a particular set of animated thumbnails associated with the specified video. The status indicates whether the thumbnails are ready to use. The authenticated user must be the owner of the video.
     * @param pictureId The UUID of the set of animated thumbnails. (required)
     * @param videoId The ID of the video. (required)
     * @return GetStatusOfSetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The status of the set of animated thumbnails was returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetStatusOfSetRequestBuilder getStatusOfSet(String pictureId, double videoId) throws IllegalArgumentException {
        if (pictureId == null) throw new IllegalArgumentException("\"pictureId\" is required but got null");
            

        
        return new GetStatusOfSetRequestBuilder(pictureId, videoId);
    }
    private okhttp3.Call specificSetGetCall(String pictureId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/animated_thumbsets/{picture_id}"
            .replace("{" + "picture_id" + "}", localVarApiClient.escapeString(pictureId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.animatedthumbnails+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call specificSetGetValidateBeforeCall(String pictureId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pictureId' is set
        if (pictureId == null) {
            throw new ApiException("Missing the required parameter 'pictureId' when calling specificSetGet(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling specificSetGet(Async)");
        }

        return specificSetGetCall(pictureId, videoId, _callback);

    }


    private ApiResponse<AnimatedThumbset> specificSetGetWithHttpInfo(String pictureId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = specificSetGetValidateBeforeCall(pictureId, videoId, null);
        Type localVarReturnType = new TypeToken<AnimatedThumbset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call specificSetGetAsync(String pictureId, Double videoId, final ApiCallback<AnimatedThumbset> _callback) throws ApiException {

        okhttp3.Call localVarCall = specificSetGetValidateBeforeCall(pictureId, videoId, _callback);
        Type localVarReturnType = new TypeToken<AnimatedThumbset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SpecificSetGetRequestBuilder {
        private final String pictureId;
        private final Double videoId;

        private SpecificSetGetRequestBuilder(String pictureId, double videoId) {
            this.pictureId = pictureId;
            this.videoId = videoId;
        }

        /**
         * Build call for specificSetGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The set of animated thumbnails was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return specificSetGetCall(pictureId, videoId, _callback);
        }


        /**
         * Execute specificSetGet request
         * @return AnimatedThumbset
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The set of animated thumbnails was returned. </td><td>  -  </td></tr>
         </table>
         */
        public AnimatedThumbset execute() throws ApiException {
            ApiResponse<AnimatedThumbset> localVarResp = specificSetGetWithHttpInfo(pictureId, videoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute specificSetGet request with HTTP info returned
         * @return ApiResponse&lt;AnimatedThumbset&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The set of animated thumbnails was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AnimatedThumbset> executeWithHttpInfo() throws ApiException {
            return specificSetGetWithHttpInfo(pictureId, videoId);
        }

        /**
         * Execute specificSetGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The set of animated thumbnails was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AnimatedThumbset> _callback) throws ApiException {
            return specificSetGetAsync(pictureId, videoId, _callback);
        }
    }

    /**
     * Get a specific set of animated thumbnails
     * This method returns a particular set of animated thumbnails associated with the specified video. The authenticated user must be the owner of the video.
     * @param pictureId The UUID of the set of animated thumbnails. (required)
     * @param videoId The ID of the video. (required)
     * @return SpecificSetGetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The set of animated thumbnails was returned. </td><td>  -  </td></tr>
     </table>
     */
    public SpecificSetGetRequestBuilder specificSetGet(String pictureId, double videoId) throws IllegalArgumentException {
        if (pictureId == null) throw new IllegalArgumentException("\"pictureId\" is required but got null");
            

        
        return new SpecificSetGetRequestBuilder(pictureId, videoId);
    }
}
