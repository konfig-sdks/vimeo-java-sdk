/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FoldersItemsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FoldersItemsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public FoldersItemsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getFolderContentsCall(Double projectId, Double userId, String direction, String filter, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/projects/{project_id}/items"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFolderContentsValidateBeforeCall(Double projectId, Double userId, String direction, String filter, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getFolderContents(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getFolderContents(Async)");
        }

        return getFolderContentsCall(projectId, userId, direction, filter, page, perPage, sort, _callback);

    }


    private ApiResponse<Void> getFolderContentsWithHttpInfo(Double projectId, Double userId, String direction, String filter, Double page, Double perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = getFolderContentsValidateBeforeCall(projectId, userId, direction, filter, page, perPage, sort, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getFolderContentsAsync(Double projectId, Double userId, String direction, String filter, Double page, Double perPage, String sort, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFolderContentsValidateBeforeCall(projectId, userId, direction, filter, page, perPage, sort, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetFolderContentsRequestBuilder {
        private final Double projectId;
        private final Double userId;
        private String direction;
        private String filter;
        private Double page;
        private Double perPage;
        private String sort;

        private GetFolderContentsRequestBuilder(double projectId, double userId) {
            this.projectId = projectId;
            this.userId = userId;
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return GetFolderContentsRequestBuilder
         */
        public GetFolderContentsRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The attribute by which to filter the results.  Option descriptions:  * &#x60;folder&#x60; - Filter the results by folder.  * &#x60;live_event&#x60; - Filter the results by event.  * &#x60;video&#x60; - Filter the results by video.  (optional)
         * @return GetFolderContentsRequestBuilder
         */
        public GetFolderContentsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetFolderContentsRequestBuilder
         */
        public GetFolderContentsRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetFolderContentsRequestBuilder
         */
        public GetFolderContentsRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sort order.  * &#x60;duration&#x60; - Sort the results by duration. Items without a duration, namely events and folders, are grouped by type in ascending alphabetical order, with events first.  * &#x60;last_user_action_event_date&#x60; - Sort the results by the date of the last user action.  (optional)
         * @return GetFolderContentsRequestBuilder
         */
        public GetFolderContentsRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getFolderContents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFolderContentsCall(projectId, userId, direction, filter, page, perPage, sort, _callback);
        }


        /**
         * Execute getFolderContents request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getFolderContentsWithHttpInfo(projectId, userId, direction, filter, page, perPage, sort);
        }

        /**
         * Execute getFolderContents request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getFolderContentsWithHttpInfo(projectId, userId, direction, filter, page, perPage, sort);
        }

        /**
         * Execute getFolderContents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getFolderContentsAsync(projectId, userId, direction, filter, page, perPage, sort, _callback);
        }
    }

    /**
     * Get all the items in a folder
     * This method returns every item that belongs to the specified folder.
     * @param projectId The ID of the folder. (required)
     * @param userId The ID of the user. (required)
     * @return GetFolderContentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetFolderContentsRequestBuilder getFolderContents(double projectId, double userId) throws IllegalArgumentException {
        
        
        return new GetFolderContentsRequestBuilder(projectId, userId);
    }
    private okhttp3.Call getFolderItemsCall(Double projectId, String direction, String filter, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/projects/{project_id}/items"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFolderItemsValidateBeforeCall(Double projectId, String direction, String filter, Double page, Double perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getFolderItems(Async)");
        }

        return getFolderItemsCall(projectId, direction, filter, page, perPage, sort, _callback);

    }


    private ApiResponse<Void> getFolderItemsWithHttpInfo(Double projectId, String direction, String filter, Double page, Double perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = getFolderItemsValidateBeforeCall(projectId, direction, filter, page, perPage, sort, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getFolderItemsAsync(Double projectId, String direction, String filter, Double page, Double perPage, String sort, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFolderItemsValidateBeforeCall(projectId, direction, filter, page, perPage, sort, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetFolderItemsRequestBuilder {
        private final Double projectId;
        private String direction;
        private String filter;
        private Double page;
        private Double perPage;
        private String sort;

        private GetFolderItemsRequestBuilder(double projectId) {
            this.projectId = projectId;
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return GetFolderItemsRequestBuilder
         */
        public GetFolderItemsRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The attribute by which to filter the results.  Option descriptions:  * &#x60;folder&#x60; - Filter the results by folder.  * &#x60;live_event&#x60; - Filter the results by event.  * &#x60;video&#x60; - Filter the results by video.  (optional)
         * @return GetFolderItemsRequestBuilder
         */
        public GetFolderItemsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetFolderItemsRequestBuilder
         */
        public GetFolderItemsRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetFolderItemsRequestBuilder
         */
        public GetFolderItemsRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sort order.  * &#x60;duration&#x60; - Sort the results by duration. Items without a duration, namely events and folders, are grouped by type in ascending alphabetical order, with events first.  * &#x60;last_user_action_event_date&#x60; - Sort the results by the date of the last user action.  (optional)
         * @return GetFolderItemsRequestBuilder
         */
        public GetFolderItemsRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getFolderItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFolderItemsCall(projectId, direction, filter, page, perPage, sort, _callback);
        }


        /**
         * Execute getFolderItems request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getFolderItemsWithHttpInfo(projectId, direction, filter, page, perPage, sort);
        }

        /**
         * Execute getFolderItems request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getFolderItemsWithHttpInfo(projectId, direction, filter, page, perPage, sort);
        }

        /**
         * Execute getFolderItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getFolderItemsAsync(projectId, direction, filter, page, perPage, sort, _callback);
        }
    }

    /**
     * Get all the items in a folder
     * This method returns every item that belongs to the specified folder.
     * @param projectId The ID of the folder. (required)
     * @return GetFolderItemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetFolderItemsRequestBuilder getFolderItems(double projectId) throws IllegalArgumentException {
        
        return new GetFolderItemsRequestBuilder(projectId);
    }
    private okhttp3.Call removeFromFolderCall(Double projectId, String uris, Boolean shouldDeleteItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/projects/{project_id}/items"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shouldDeleteItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("should_delete_items", shouldDeleteItems));
        }

        if (uris != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uris", uris));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFromFolderValidateBeforeCall(Double projectId, String uris, Boolean shouldDeleteItems, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling removeFromFolder(Async)");
        }

        // verify the required parameter 'uris' is set
        if (uris == null) {
            throw new ApiException("Missing the required parameter 'uris' when calling removeFromFolder(Async)");
        }

        return removeFromFolderCall(projectId, uris, shouldDeleteItems, _callback);

    }


    private ApiResponse<Void> removeFromFolderWithHttpInfo(Double projectId, String uris, Boolean shouldDeleteItems) throws ApiException {
        okhttp3.Call localVarCall = removeFromFolderValidateBeforeCall(projectId, uris, shouldDeleteItems, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeFromFolderAsync(Double projectId, String uris, Boolean shouldDeleteItems, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFromFolderValidateBeforeCall(projectId, uris, shouldDeleteItems, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveFromFolderRequestBuilder {
        private final Double projectId;
        private final String uris;
        private Boolean shouldDeleteItems;

        private RemoveFromFolderRequestBuilder(double projectId, String uris) {
            this.projectId = projectId;
            this.uris = uris;
        }

        /**
         * Set shouldDeleteItems
         * @param shouldDeleteItems Whether to delete the items when removing them from the folder. (optional)
         * @return RemoveFromFolderRequestBuilder
         */
        public RemoveFromFolderRequestBuilder shouldDeleteItems(Boolean shouldDeleteItems) {
            this.shouldDeleteItems = shouldDeleteItems;
            return this;
        }
        
        /**
         * Build call for removeFromFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The items were removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeFromFolderCall(projectId, uris, shouldDeleteItems, _callback);
        }


        /**
         * Execute removeFromFolder request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The items were removed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeFromFolderWithHttpInfo(projectId, uris, shouldDeleteItems);
        }

        /**
         * Execute removeFromFolder request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The items were removed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeFromFolderWithHttpInfo(projectId, uris, shouldDeleteItems);
        }

        /**
         * Execute removeFromFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The items were removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeFromFolderAsync(projectId, uris, shouldDeleteItems, _callback);
        }
    }

    /**
     * Remove items from a folder
     * This method removes all items from the specified folder.
     * @param projectId The ID of the folder. (required)
     * @param uris A comma-separated list of video or event URIs to remove. (required)
     * @return RemoveFromFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The items were removed. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFromFolderRequestBuilder removeFromFolder(double projectId, String uris) throws IllegalArgumentException {
        
        if (uris == null) throw new IllegalArgumentException("\"uris\" is required but got null");
            

        return new RemoveFromFolderRequestBuilder(projectId, uris);
    }
}
