/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Channel;
import com.konfigthis.client.model.ChannelsVideosAddMultipleToChannelRequest;
import com.konfigthis.client.model.ChannelsVideosRemoveMultipleFromChannelRequest;
import com.konfigthis.client.model.Video;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ChannelsVideosApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChannelsVideosApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ChannelsVideosApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addMultipleToChannelCall(Double channelId, ChannelsVideosAddMultipleToChannelRequest channelsVideosAddMultipleToChannelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = channelsVideosAddMultipleToChannelRequest;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/videos"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMultipleToChannelValidateBeforeCall(Double channelId, ChannelsVideosAddMultipleToChannelRequest channelsVideosAddMultipleToChannelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling addMultipleToChannel(Async)");
        }

        // verify the required parameter 'channelsVideosAddMultipleToChannelRequest' is set
        if (channelsVideosAddMultipleToChannelRequest == null) {
            throw new ApiException("Missing the required parameter 'channelsVideosAddMultipleToChannelRequest' when calling addMultipleToChannel(Async)");
        }

        return addMultipleToChannelCall(channelId, channelsVideosAddMultipleToChannelRequest, _callback);

    }


    private ApiResponse<Void> addMultipleToChannelWithHttpInfo(Double channelId, ChannelsVideosAddMultipleToChannelRequest channelsVideosAddMultipleToChannelRequest) throws ApiException {
        okhttp3.Call localVarCall = addMultipleToChannelValidateBeforeCall(channelId, channelsVideosAddMultipleToChannelRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addMultipleToChannelAsync(Double channelId, ChannelsVideosAddMultipleToChannelRequest channelsVideosAddMultipleToChannelRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMultipleToChannelValidateBeforeCall(channelId, channelsVideosAddMultipleToChannelRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddMultipleToChannelRequestBuilder {
        private final String videoUri;
        private final Double channelId;

        private AddMultipleToChannelRequestBuilder(String videoUri, double channelId) {
            this.videoUri = videoUri;
            this.channelId = channelId;
        }

        /**
         * Build call for addMultipleToChannel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ChannelsVideosAddMultipleToChannelRequest channelsVideosAddMultipleToChannelRequest = buildBodyParams();
            return addMultipleToChannelCall(channelId, channelsVideosAddMultipleToChannelRequest, _callback);
        }

        private ChannelsVideosAddMultipleToChannelRequest buildBodyParams() {
            ChannelsVideosAddMultipleToChannelRequest channelsVideosAddMultipleToChannelRequest = new ChannelsVideosAddMultipleToChannelRequest();
            channelsVideosAddMultipleToChannelRequest.videoUri(this.videoUri);
            return channelsVideosAddMultipleToChannelRequest;
        }

        /**
         * Execute addMultipleToChannel request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were added. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ChannelsVideosAddMultipleToChannelRequest channelsVideosAddMultipleToChannelRequest = buildBodyParams();
            addMultipleToChannelWithHttpInfo(channelId, channelsVideosAddMultipleToChannelRequest);
        }

        /**
         * Execute addMultipleToChannel request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ChannelsVideosAddMultipleToChannelRequest channelsVideosAddMultipleToChannelRequest = buildBodyParams();
            return addMultipleToChannelWithHttpInfo(channelId, channelsVideosAddMultipleToChannelRequest);
        }

        /**
         * Execute addMultipleToChannel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ChannelsVideosAddMultipleToChannelRequest channelsVideosAddMultipleToChannelRequest = buildBodyParams();
            return addMultipleToChannelAsync(channelId, channelsVideosAddMultipleToChannelRequest, _callback);
        }
    }

    /**
     * Add a list of videos to a channel
     * This method adds multiple videos to the specified channel. The authenticated user must be a moderator of the channel.
     * @param channelId The ID of the channel. (required)
     * @param channelsVideosAddMultipleToChannelRequest  (required)
     * @return AddMultipleToChannelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were added. </td><td>  -  </td></tr>
     </table>
     */
    public AddMultipleToChannelRequestBuilder addMultipleToChannel(String videoUri, double channelId) throws IllegalArgumentException {
        if (videoUri == null) throw new IllegalArgumentException("\"videoUri\" is required but got null");
            

        
        return new AddMultipleToChannelRequestBuilder(videoUri, channelId);
    }
    private okhttp3.Call addVideoToChannelCall(Double channelId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/videos/{video_id}"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVideoToChannelValidateBeforeCall(Double channelId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling addVideoToChannel(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addVideoToChannel(Async)");
        }

        return addVideoToChannelCall(channelId, videoId, _callback);

    }


    private ApiResponse<Void> addVideoToChannelWithHttpInfo(Double channelId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = addVideoToChannelValidateBeforeCall(channelId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addVideoToChannelAsync(Double channelId, Double videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVideoToChannelValidateBeforeCall(channelId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddVideoToChannelRequestBuilder {
        private final Double channelId;
        private final Double videoId;

        private AddVideoToChannelRequestBuilder(double channelId, double videoId) {
            this.channelId = channelId;
            this.videoId = videoId;
        }

        /**
         * Build call for addVideoToChannel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addVideoToChannelCall(channelId, videoId, _callback);
        }


        /**
         * Execute addVideoToChannel request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            addVideoToChannelWithHttpInfo(channelId, videoId);
        }

        /**
         * Execute addVideoToChannel request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return addVideoToChannelWithHttpInfo(channelId, videoId);
        }

        /**
         * Execute addVideoToChannel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return addVideoToChannelAsync(channelId, videoId, _callback);
        }
    }

    /**
     * Add a specific video to a channel
     * This method adds a single video to the specified channel. The authenticated user must be a moderator of the channel.
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @return AddVideoToChannelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
     </table>
     */
    public AddVideoToChannelRequestBuilder addVideoToChannel(double channelId, double videoId) throws IllegalArgumentException {
        
        
        return new AddVideoToChannelRequestBuilder(channelId, videoId);
    }
    private okhttp3.Call getAccessibleChannelsCall(Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/available_channels"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.channel+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccessibleChannelsValidateBeforeCall(Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getAccessibleChannels(Async)");
        }

        return getAccessibleChannelsCall(videoId, _callback);

    }


    private ApiResponse<List<Channel>> getAccessibleChannelsWithHttpInfo(Double videoId) throws ApiException {
        okhttp3.Call localVarCall = getAccessibleChannelsValidateBeforeCall(videoId, null);
        Type localVarReturnType = new TypeToken<List<Channel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAccessibleChannelsAsync(Double videoId, final ApiCallback<List<Channel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccessibleChannelsValidateBeforeCall(videoId, _callback);
        Type localVarReturnType = new TypeToken<List<Channel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAccessibleChannelsRequestBuilder {
        private final Double videoId;

        private GetAccessibleChannelsRequestBuilder(double videoId) {
            this.videoId = videoId;
        }

        /**
         * Build call for getAccessibleChannels
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The channels were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAccessibleChannelsCall(videoId, _callback);
        }


        /**
         * Execute getAccessibleChannels request
         * @return List&lt;Channel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The channels were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Channel> execute() throws ApiException {
            ApiResponse<List<Channel>> localVarResp = getAccessibleChannelsWithHttpInfo(videoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAccessibleChannels request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Channel&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The channels were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Channel>> executeWithHttpInfo() throws ApiException {
            return getAccessibleChannelsWithHttpInfo(videoId);
        }

        /**
         * Execute getAccessibleChannels request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The channels were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Channel>> _callback) throws ApiException {
            return getAccessibleChannelsAsync(videoId, _callback);
        }
    }

    /**
     * Get all the channels to which the user can add or remove a specific video
     * This method returns every channel to which the authenticated user can add or remove the specified video. The authenticated user must be a moderator of the channel.
     * @param videoId The ID of the video. (required)
     * @return GetAccessibleChannelsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The channels were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAccessibleChannelsRequestBuilder getAccessibleChannels(double videoId) throws IllegalArgumentException {
        
        return new GetAccessibleChannelsRequestBuilder(videoId);
    }
    private okhttp3.Call getSpecificVideoInChannelCall(Double channelId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/videos/{video_id}"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificVideoInChannelValidateBeforeCall(Double channelId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getSpecificVideoInChannel(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getSpecificVideoInChannel(Async)");
        }

        return getSpecificVideoInChannelCall(channelId, videoId, _callback);

    }


    private ApiResponse<Video> getSpecificVideoInChannelWithHttpInfo(Double channelId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = getSpecificVideoInChannelValidateBeforeCall(channelId, videoId, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificVideoInChannelAsync(Double channelId, Double videoId, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificVideoInChannelValidateBeforeCall(channelId, videoId, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificVideoInChannelRequestBuilder {
        private final Double channelId;
        private final Double videoId;

        private GetSpecificVideoInChannelRequestBuilder(double channelId, double videoId) {
            this.channelId = channelId;
            this.videoId = videoId;
        }

        /**
         * Build call for getSpecificVideoInChannel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificVideoInChannelCall(channelId, videoId, _callback);
        }


        /**
         * Execute getSpecificVideoInChannel request
         * @return Video
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public Video execute() throws ApiException {
            ApiResponse<Video> localVarResp = getSpecificVideoInChannelWithHttpInfo(channelId, videoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificVideoInChannel request with HTTP info returned
         * @return ApiResponse&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Video> executeWithHttpInfo() throws ApiException {
            return getSpecificVideoInChannelWithHttpInfo(channelId, videoId);
        }

        /**
         * Execute getSpecificVideoInChannel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Video> _callback) throws ApiException {
            return getSpecificVideoInChannelAsync(channelId, videoId, _callback);
        }
    }

    /**
     * Get a specific video in a channel
     * This method returns a single video in the specified channel. You can use it to determine whether the video is in the channel.
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @return GetSpecificVideoInChannelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificVideoInChannelRequestBuilder getSpecificVideoInChannel(double channelId, double videoId) throws IllegalArgumentException {
        
        
        return new GetSpecificVideoInChannelRequestBuilder(channelId, videoId);
    }
    private okhttp3.Call listInChannelCall(Double channelId, String containingUri, String direction, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/videos"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (containingUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("containing_uri", containingUri));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (filterEmbeddable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_embeddable", filterEmbeddable));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInChannelValidateBeforeCall(Double channelId, String containingUri, String direction, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling listInChannel(Async)");
        }

        return listInChannelCall(channelId, containingUri, direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);

    }


    private ApiResponse<List<Video>> listInChannelWithHttpInfo(Double channelId, String containingUri, String direction, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = listInChannelValidateBeforeCall(channelId, containingUri, direction, filter, filterEmbeddable, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listInChannelAsync(Double channelId, String containingUri, String direction, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInChannelValidateBeforeCall(channelId, containingUri, direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListInChannelRequestBuilder {
        private final Double channelId;
        private String containingUri;
        private String direction;
        private String filter;
        private Boolean filterEmbeddable;
        private Double page;
        private Double perPage;
        private String query;
        private String sort;

        private ListInChannelRequestBuilder(double channelId) {
            this.channelId = channelId;
        }

        /**
         * Set containingUri
         * @param containingUri The page that contains the video URI. (optional)
         * @return ListInChannelRequestBuilder
         */
        public ListInChannelRequestBuilder containingUri(String containingUri) {
            this.containingUri = containingUri;
            return this;
        }
        
        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return ListInChannelRequestBuilder
         */
        public ListInChannelRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)
         * @return ListInChannelRequestBuilder
         */
        public ListInChannelRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set filterEmbeddable
         * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)
         * @return ListInChannelRequestBuilder
         */
        public ListInChannelRequestBuilder filterEmbeddable(Boolean filterEmbeddable) {
            this.filterEmbeddable = filterEmbeddable;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return ListInChannelRequestBuilder
         */
        public ListInChannelRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return ListInChannelRequestBuilder
         */
        public ListInChannelRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set query
         * @param query The search query to use to filter the results. (optional)
         * @return ListInChannelRequestBuilder
         */
        public ListInChannelRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;added&#x60; - Sort the results by date added.  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;default&#x60; - Use the default sorting method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;manual&#x60; - Sort the results as the user has arranged them.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)
         * @return ListInChannelRequestBuilder
         */
        public ListInChannelRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for listInChannel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> No videos have been added to this channel since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listInChannelCall(channelId, containingUri, direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);
        }


        /**
         * Execute listInChannel request
         * @return List&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> No videos have been added to this channel since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
         </table>
         */
        public List<Video> execute() throws ApiException {
            ApiResponse<List<Video>> localVarResp = listInChannelWithHttpInfo(channelId, containingUri, direction, filter, filterEmbeddable, page, perPage, query, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listInChannel request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Video&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> No videos have been added to this channel since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Video>> executeWithHttpInfo() throws ApiException {
            return listInChannelWithHttpInfo(channelId, containingUri, direction, filter, filterEmbeddable, page, perPage, query, sort);
        }

        /**
         * Execute listInChannel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> No videos have been added to this channel since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Video>> _callback) throws ApiException {
            return listInChannelAsync(channelId, containingUri, direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);
        }
    }

    /**
     * Get all the videos in a channel
     * This method returns every video in the specified channel.
     * @param channelId The ID of the channel. (required)
     * @return ListInChannelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> No videos have been added to this channel since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
     </table>
     */
    public ListInChannelRequestBuilder listInChannel(double channelId) throws IllegalArgumentException {
        
        return new ListInChannelRequestBuilder(channelId);
    }
    private okhttp3.Call removeMultipleFromChannelCall(Double channelId, ChannelsVideosRemoveMultipleFromChannelRequest channelsVideosRemoveMultipleFromChannelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = channelsVideosRemoveMultipleFromChannelRequest;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/videos"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeMultipleFromChannelValidateBeforeCall(Double channelId, ChannelsVideosRemoveMultipleFromChannelRequest channelsVideosRemoveMultipleFromChannelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling removeMultipleFromChannel(Async)");
        }

        // verify the required parameter 'channelsVideosRemoveMultipleFromChannelRequest' is set
        if (channelsVideosRemoveMultipleFromChannelRequest == null) {
            throw new ApiException("Missing the required parameter 'channelsVideosRemoveMultipleFromChannelRequest' when calling removeMultipleFromChannel(Async)");
        }

        return removeMultipleFromChannelCall(channelId, channelsVideosRemoveMultipleFromChannelRequest, _callback);

    }


    private ApiResponse<Void> removeMultipleFromChannelWithHttpInfo(Double channelId, ChannelsVideosRemoveMultipleFromChannelRequest channelsVideosRemoveMultipleFromChannelRequest) throws ApiException {
        okhttp3.Call localVarCall = removeMultipleFromChannelValidateBeforeCall(channelId, channelsVideosRemoveMultipleFromChannelRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeMultipleFromChannelAsync(Double channelId, ChannelsVideosRemoveMultipleFromChannelRequest channelsVideosRemoveMultipleFromChannelRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeMultipleFromChannelValidateBeforeCall(channelId, channelsVideosRemoveMultipleFromChannelRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveMultipleFromChannelRequestBuilder {
        private final String videoUri;
        private final Double channelId;

        private RemoveMultipleFromChannelRequestBuilder(String videoUri, double channelId) {
            this.videoUri = videoUri;
            this.channelId = channelId;
        }

        /**
         * Build call for removeMultipleFromChannel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ChannelsVideosRemoveMultipleFromChannelRequest channelsVideosRemoveMultipleFromChannelRequest = buildBodyParams();
            return removeMultipleFromChannelCall(channelId, channelsVideosRemoveMultipleFromChannelRequest, _callback);
        }

        private ChannelsVideosRemoveMultipleFromChannelRequest buildBodyParams() {
            ChannelsVideosRemoveMultipleFromChannelRequest channelsVideosRemoveMultipleFromChannelRequest = new ChannelsVideosRemoveMultipleFromChannelRequest();
            channelsVideosRemoveMultipleFromChannelRequest.videoUri(this.videoUri);
            return channelsVideosRemoveMultipleFromChannelRequest;
        }

        /**
         * Execute removeMultipleFromChannel request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ChannelsVideosRemoveMultipleFromChannelRequest channelsVideosRemoveMultipleFromChannelRequest = buildBodyParams();
            removeMultipleFromChannelWithHttpInfo(channelId, channelsVideosRemoveMultipleFromChannelRequest);
        }

        /**
         * Execute removeMultipleFromChannel request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ChannelsVideosRemoveMultipleFromChannelRequest channelsVideosRemoveMultipleFromChannelRequest = buildBodyParams();
            return removeMultipleFromChannelWithHttpInfo(channelId, channelsVideosRemoveMultipleFromChannelRequest);
        }

        /**
         * Execute removeMultipleFromChannel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ChannelsVideosRemoveMultipleFromChannelRequest channelsVideosRemoveMultipleFromChannelRequest = buildBodyParams();
            return removeMultipleFromChannelAsync(channelId, channelsVideosRemoveMultipleFromChannelRequest, _callback);
        }
    }

    /**
     * Remove a list of videos from a channel
     * This method removes multiple videos from the specified channel. Include the videos by their URI as a JSON block in the body of the request using the **video_uri** field, like this: &#x60;[{ \&quot;video_uri\&quot;: \&quot;/videos/1234\&quot; }, { \&quot;video_uri\&quot;: \&quot;/videos/1235\&quot; }]&#x60;. The authenticated user must be a moderator of the channel. For more information on batch requests like this one, see [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).
     * @param channelId The ID of the channel. (required)
     * @param channelsVideosRemoveMultipleFromChannelRequest  (required)
     * @return RemoveMultipleFromChannelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveMultipleFromChannelRequestBuilder removeMultipleFromChannel(String videoUri, double channelId) throws IllegalArgumentException {
        if (videoUri == null) throw new IllegalArgumentException("\"videoUri\" is required but got null");
            

        
        return new RemoveMultipleFromChannelRequestBuilder(videoUri, channelId);
    }
    private okhttp3.Call removeSpecificVideoCall(Double channelId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/videos/{video_id}"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeSpecificVideoValidateBeforeCall(Double channelId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling removeSpecificVideo(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling removeSpecificVideo(Async)");
        }

        return removeSpecificVideoCall(channelId, videoId, _callback);

    }


    private ApiResponse<Void> removeSpecificVideoWithHttpInfo(Double channelId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = removeSpecificVideoValidateBeforeCall(channelId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeSpecificVideoAsync(Double channelId, Double videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeSpecificVideoValidateBeforeCall(channelId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveSpecificVideoRequestBuilder {
        private final Double channelId;
        private final Double videoId;

        private RemoveSpecificVideoRequestBuilder(double channelId, double videoId) {
            this.channelId = channelId;
            this.videoId = videoId;
        }

        /**
         * Build call for removeSpecificVideo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeSpecificVideoCall(channelId, videoId, _callback);
        }


        /**
         * Execute removeSpecificVideo request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeSpecificVideoWithHttpInfo(channelId, videoId);
        }

        /**
         * Execute removeSpecificVideo request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeSpecificVideoWithHttpInfo(channelId, videoId);
        }

        /**
         * Execute removeSpecificVideo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeSpecificVideoAsync(channelId, videoId, _callback);
        }
    }

    /**
     * Remove a specific video from a channel
     * This method removes a single video from the specified channel. The authenticated user must be a moderator of the channel.
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @return RemoveSpecificVideoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveSpecificVideoRequestBuilder removeSpecificVideo(double channelId, double videoId) throws IllegalArgumentException {
        
        
        return new RemoveSpecificVideoRequestBuilder(channelId, videoId);
    }
}
