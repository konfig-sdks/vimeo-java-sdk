/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Album;
import com.konfigthis.client.model.ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest;
import com.konfigthis.client.model.ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest1;
import com.konfigthis.client.model.ShowcasesShowcaseVideosReplaceShowcaseVideosRequest;
import com.konfigthis.client.model.ShowcasesShowcaseVideosReplaceVideosRequest;
import com.konfigthis.client.model.Video;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ShowcasesShowcaseVideosApi
 */
@Disabled
public class ShowcasesShowcaseVideosApiTest {

    private static ShowcasesShowcaseVideosApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ShowcasesShowcaseVideosApi(apiClient);
    }

    /**
     * Add a specific video to a showcase
     *
     * This method adds a single video to the specified showcase. The authenticated user must be the owner of the showcase.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addToShowcaseTest() throws ApiException {
        Double albumId = null;
        Double videoId = null;
        api.addToShowcase(albumId, videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Add a specific video to a showcase
     *
     * This method adds a single video to the specified showcase. The authenticated user must be the owner of the showcase.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addToShowcase_0Test() throws ApiException {
        Double albumId = null;
        Double userId = null;
        Double videoId = null;
        api.addToShowcase_0(albumId, userId, videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a thumbnail for a showcase from a showcase video
     *
     * This method creates a thumbnail image for a showcase from the specified frame of a showcase video. The authenticated user must be the owner of the showcase.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createShowcaseThumbnailTest() throws ApiException {
        Double albumId = null;
        Double videoId = null;
        Double timeCode = null;
        Album response = api.createShowcaseThumbnail(albumId, videoId)
                .timeCode(timeCode)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a thumbnail for a showcase from a showcase video
     *
     * This method creates a thumbnail image for a showcase from the specified frame of a showcase video. The authenticated user must be the owner of the showcase.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createShowcaseThumbnail_0Test() throws ApiException {
        Double albumId = null;
        Double userId = null;
        Double videoId = null;
        Double timeCode = null;
        Album response = api.createShowcaseThumbnail_0(albumId, userId, videoId)
                .timeCode(timeCode)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the videos in a showcase
     *
     * This method returns every video in the specified showcase. The authenticated user must be the owner of the showcase.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getShowcaseVideosTest() throws ApiException {
        Double albumId = null;
        Double userId = null;
        String containingUri = null;
        String direction = null;
        String filter = null;
        Boolean filterEmbeddable = null;
        Double page = null;
        String password = null;
        Double perPage = null;
        String query = null;
        String sort = null;
        Boolean weakSearch = null;
        List<Video> response = api.getShowcaseVideos(albumId, userId)
                .containingUri(containingUri)
                .direction(direction)
                .filter(filter)
                .filterEmbeddable(filterEmbeddable)
                .page(page)
                .password(password)
                .perPage(perPage)
                .query(query)
                .sort(sort)
                .weakSearch(weakSearch)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a specific video in a showcase
     *
     * This method returns a single video belonging to the specified showcase. The authenticated user must be the owner of the showcase.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSpecificVideoInShowcaseTest() throws ApiException {
        Double albumId = null;
        Double videoId = null;
        String password = null;
        Video response = api.getSpecificVideoInShowcase(albumId, videoId)
                .password(password)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a specific video in a showcase
     *
     * This method returns a single video belonging to the specified showcase. The authenticated user must be the owner of the showcase.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSpecificVideoInShowcase_0Test() throws ApiException {
        Double albumId = null;
        Double userId = null;
        Double videoId = null;
        String password = null;
        Video response = api.getSpecificVideoInShowcase_0(albumId, userId, videoId)
                .password(password)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the showcases to which the user can add or remove a specific video
     *
     * This endpoint returns every showcase to which the authenticated user can add or remove the specified video. The user must be the owner of the showcase.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAvailableShowcasesTest() throws ApiException {
        Double videoId = null;
        Double page = null;
        Double perPage = null;
        List<Album> response = api.listAvailableShowcases(videoId)
                .page(page)
                .perPage(perPage)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the user&#39;s videos that can be added to or removed from a showcase
     *
     * This method returns every video belonging to the authenticated user that can be added to or removed from the specified showcase.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInShowcaseTest() throws ApiException {
        Double albumId = null;
        String direction = null;
        Double page = null;
        Double perPage = null;
        String sort = null;
        List<Video> response = api.listInShowcase(albumId)
                .direction(direction)
                .page(page)
                .perPage(perPage)
                .sort(sort)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the videos in a showcase
     *
     * This method returns every video in the specified showcase. The authenticated user must be the owner of the showcase.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInShowcase_0Test() throws ApiException {
        Double albumId = null;
        String containingUri = null;
        String direction = null;
        String filter = null;
        Boolean filterEmbeddable = null;
        Double page = null;
        String password = null;
        Double perPage = null;
        String query = null;
        String sort = null;
        Boolean weakSearch = null;
        List<Video> response = api.listInShowcase_0(albumId)
                .containingUri(containingUri)
                .direction(direction)
                .filter(filter)
                .filterEmbeddable(filterEmbeddable)
                .page(page)
                .password(password)
                .perPage(perPage)
                .query(query)
                .sort(sort)
                .weakSearch(weakSearch)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove a video from a showcase
     *
     * This method removes the specified video from its showcase. The authenticated user must be the owner of the showcase.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeFromShowcaseTest() throws ApiException {
        Double albumId = null;
        Double videoId = null;
        api.removeFromShowcase(albumId, videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove a video from a showcase
     *
     * This method removes the specified video from its showcase. The authenticated user must be the owner of the showcase.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeVideoFromShowcaseTest() throws ApiException {
        Double albumId = null;
        Double userId = null;
        Double videoId = null;
        api.removeVideoFromShowcase(albumId, userId, videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Replace all the videos in a showcase
     *
     * This method replaces all the videos in the specified showcase with a new set of one or more videos. The authenticated user must be the owner of the showcase.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replaceShowcaseVideosTest() throws ApiException {
        String videos = null;
        Double albumId = null;
        Double userId = null;
        api.replaceShowcaseVideos(videos, albumId, userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Replace all the videos in a showcase
     *
     * This method replaces all the videos in the specified showcase with a new set of one or more videos. The authenticated user must be the owner of the showcase.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replaceVideosTest() throws ApiException {
        String videos = null;
        Double albumId = null;
        api.replaceVideos(videos, albumId)
                .execute();
        // TODO: test validations
    }

    /**
     * Set the featured video of a showcase
     *
     * This method sets the featured video of the specified showcase. The authenticated user must be the owner of the showcase, and the featured video must belong to it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setFeaturedVideoTest() throws ApiException {
        Double albumId = null;
        Double videoId = null;
        Album response = api.setFeaturedVideo(albumId, videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Set the featured video of a showcase
     *
     * This method sets the featured video of the specified showcase. The authenticated user must be the owner of the showcase, and the featured video must belong to it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setFeaturedVideo_0Test() throws ApiException {
        Double albumId = null;
        Double userId = null;
        Double videoId = null;
        Album response = api.setFeaturedVideo_0(albumId, userId, videoId)
                .execute();
        // TODO: test validations
    }

}
