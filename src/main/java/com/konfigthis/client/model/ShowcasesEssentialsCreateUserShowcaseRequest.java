/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ShowcasesEssentialsCreateUserShowcaseRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ShowcasesEssentialsCreateUserShowcaseRequest {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_BRAND_COLOR = "brand_color";
  @SerializedName(SERIALIZED_NAME_BRAND_COLOR)
  private String brandColor;

  public static final String SERIALIZED_NAME_HIDE_FROM_VIMEO = "hide_from_vimeo";
  @SerializedName(SERIALIZED_NAME_HIDE_FROM_VIMEO)
  private Boolean hideFromVimeo;

  public static final String SERIALIZED_NAME_HIDE_NAV = "hide_nav";
  @SerializedName(SERIALIZED_NAME_HIDE_NAV)
  private Boolean hideNav;

  public static final String SERIALIZED_NAME_HIDE_UPCOMING = "hide_upcoming";
  @SerializedName(SERIALIZED_NAME_HIDE_UPCOMING)
  private Boolean hideUpcoming;

  /**
   * The type of layout for presenting the showcase.  Option descriptions:  * &#x60;grid&#x60; - The videos appear in a grid.  * &#x60;player&#x60; - The videos appear in the player. 
   */
  @JsonAdapter(LayoutEnum.Adapter.class)
 public enum LayoutEnum {
    GRID("grid"),
    
    PLAYER("player");

    private String value;

    LayoutEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LayoutEnum fromValue(String value) {
      for (LayoutEnum b : LayoutEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LayoutEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LayoutEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LayoutEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LayoutEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LAYOUT = "layout";
  @SerializedName(SERIALIZED_NAME_LAYOUT)
  private LayoutEnum layout;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  /**
   * The privacy level of the showcase.  Option descriptions:  * &#x60;anybody&#x60; - Anyone can access the showcase, either on Vimeo or through an embed.  * &#x60;embed_only&#x60; - The showcase doesn&#39;t appear on Vimeo, but it can be embedded on other sites.  * &#x60;nobody&#x60; - No one can access the showcase, including the authenticated user.  * &#x60;password&#x60; - Only those with the password can access the showcase.  * &#x60;team&#x60; - Only members of the authenticated user&#39;s team can access the showcase.  * &#x60;unlisted&#x60; - The showcase can&#39;t be accessed if the URL omits its unlisted hash. 
   */
  @JsonAdapter(PrivacyEnum.Adapter.class)
 public enum PrivacyEnum {
    ANYBODY("anybody"),
    
    EMBED_ONLY("embed_only"),
    
    NOBODY("nobody"),
    
    PASSWORD("password"),
    
    TEAM("team"),
    
    UNLISTED("unlisted");

    private String value;

    PrivacyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PrivacyEnum fromValue(String value) {
      for (PrivacyEnum b : PrivacyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PrivacyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrivacyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrivacyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PrivacyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PRIVACY = "privacy";
  @SerializedName(SERIALIZED_NAME_PRIVACY)
  private PrivacyEnum privacy;

  public static final String SERIALIZED_NAME_REVIEW_MODE = "review_mode";
  @SerializedName(SERIALIZED_NAME_REVIEW_MODE)
  private Boolean reviewMode;

  /**
   * The default sort order of the videos as they appear in the showcase.  Option descriptions:  * &#x60;added_first&#x60; - The videos appear according to when they were added to the showcase, with the most recently added first.  * &#x60;added_last&#x60; - The videos appear according to when they were added to the showcase, with the most recently added last.  * &#x60;alphabetical&#x60; - The videos appear alphabetically by their title.  * &#x60;arranged&#x60; - The videos appear as arranged by the owner of the showcase.  * &#x60;comments&#x60; - The videos appear according to their number of comments.  * &#x60;likes&#x60; - The videos appear according to their number of likes.  * &#x60;newest&#x60; - The videos appear in chronological order with the newest first.  * &#x60;oldest&#x60; - The videos appear in chronological order with the oldest first.  * &#x60;plays&#x60; - The videos appear according to their number of plays. 
   */
  @JsonAdapter(SortEnum.Adapter.class)
 public enum SortEnum {
    ADDED_FIRST("added_first"),
    
    ADDED_LAST("added_last"),
    
    ALPHABETICAL("alphabetical"),
    
    ARRANGED("arranged"),
    
    COMMENTS("comments"),
    
    LIKES("likes"),
    
    NEWEST("newest"),
    
    OLDEST("oldest"),
    
    PLAYS("plays");

    private String value;

    SortEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SortEnum fromValue(String value) {
      for (SortEnum b : SortEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SortEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SortEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SortEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SortEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SORT = "sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  private SortEnum sort;

  /**
   * The color theme of the showcase.  Option descriptions:  * &#x60;dark&#x60; - The showcase uses the dark theme.  * &#x60;standard&#x60; - The showcase uses the standard theme. 
   */
  @JsonAdapter(ThemeEnum.Adapter.class)
 public enum ThemeEnum {
    DARK("dark"),
    
    STANDARD("standard");

    private String value;

    ThemeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ThemeEnum fromValue(String value) {
      for (ThemeEnum b : ThemeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ThemeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ThemeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ThemeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ThemeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_THEME = "theme";
  @SerializedName(SERIALIZED_NAME_THEME)
  private ThemeEnum theme;

  public ShowcasesEssentialsCreateUserShowcaseRequest() {
  }

  public ShowcasesEssentialsCreateUserShowcaseRequest description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * The description of the showcase.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Vimeo holiday videos!", value = "The description of the showcase.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public ShowcasesEssentialsCreateUserShowcaseRequest brandColor(String brandColor) {
    
    
    
    
    this.brandColor = brandColor;
    return this;
  }

   /**
   * The hexadecimal code for the color of the player buttons and showcase controls.
   * @return brandColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ff66ee", value = "The hexadecimal code for the color of the player buttons and showcase controls.")

  public String getBrandColor() {
    return brandColor;
  }


  public void setBrandColor(String brandColor) {
    
    
    
    this.brandColor = brandColor;
  }


  public ShowcasesEssentialsCreateUserShowcaseRequest hideFromVimeo(Boolean hideFromVimeo) {
    
    
    
    
    this.hideFromVimeo = hideFromVimeo;
    return this;
  }

   /**
   * Whether the showcase should be hidden from Vimeo when unlisted.
   * @return hideFromVimeo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether the showcase should be hidden from Vimeo when unlisted.")

  public Boolean getHideFromVimeo() {
    return hideFromVimeo;
  }


  public void setHideFromVimeo(Boolean hideFromVimeo) {
    
    
    
    this.hideFromVimeo = hideFromVimeo;
  }


  public ShowcasesEssentialsCreateUserShowcaseRequest hideNav(Boolean hideNav) {
    
    
    
    
    this.hideNav = hideNav;
    return this;
  }

   /**
   * Whether to hide Vimeo navigation when displaying the showcase.
   * @return hideNav
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether to hide Vimeo navigation when displaying the showcase.")

  public Boolean getHideNav() {
    return hideNav;
  }


  public void setHideNav(Boolean hideNav) {
    
    
    
    this.hideNav = hideNav;
  }


  public ShowcasesEssentialsCreateUserShowcaseRequest hideUpcoming(Boolean hideUpcoming) {
    
    
    
    
    this.hideUpcoming = hideUpcoming;
    return this;
  }

   /**
   * Whether to include the upcoming event in the showcase.
   * @return hideUpcoming
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether to include the upcoming event in the showcase.")

  public Boolean getHideUpcoming() {
    return hideUpcoming;
  }


  public void setHideUpcoming(Boolean hideUpcoming) {
    
    
    
    this.hideUpcoming = hideUpcoming;
  }


  public ShowcasesEssentialsCreateUserShowcaseRequest layout(LayoutEnum layout) {
    
    
    
    
    this.layout = layout;
    return this;
  }

   /**
   * The type of layout for presenting the showcase.  Option descriptions:  * &#x60;grid&#x60; - The videos appear in a grid.  * &#x60;player&#x60; - The videos appear in the player. 
   * @return layout
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of layout for presenting the showcase.  Option descriptions:  * `grid` - The videos appear in a grid.  * `player` - The videos appear in the player. ")

  public LayoutEnum getLayout() {
    return layout;
  }


  public void setLayout(LayoutEnum layout) {
    
    
    
    this.layout = layout;
  }


  public ShowcasesEssentialsCreateUserShowcaseRequest name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The name of the showcase.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Vimeo Holiday Videos!", required = true, value = "The name of the showcase.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public ShowcasesEssentialsCreateUserShowcaseRequest password(String password) {
    
    
    
    
    this.password = password;
    return this;
  }

   /**
   * The showcase&#39;s password. This field is required only when **privacy** is &#x60;password&#x60;.
   * @return password
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "hunter1", value = "The showcase's password. This field is required only when **privacy** is `password`.")

  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    
    
    
    this.password = password;
  }


  public ShowcasesEssentialsCreateUserShowcaseRequest privacy(PrivacyEnum privacy) {
    
    
    
    
    this.privacy = privacy;
    return this;
  }

   /**
   * The privacy level of the showcase.  Option descriptions:  * &#x60;anybody&#x60; - Anyone can access the showcase, either on Vimeo or through an embed.  * &#x60;embed_only&#x60; - The showcase doesn&#39;t appear on Vimeo, but it can be embedded on other sites.  * &#x60;nobody&#x60; - No one can access the showcase, including the authenticated user.  * &#x60;password&#x60; - Only those with the password can access the showcase.  * &#x60;team&#x60; - Only members of the authenticated user&#39;s team can access the showcase.  * &#x60;unlisted&#x60; - The showcase can&#39;t be accessed if the URL omits its unlisted hash. 
   * @return privacy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The privacy level of the showcase.  Option descriptions:  * `anybody` - Anyone can access the showcase, either on Vimeo or through an embed.  * `embed_only` - The showcase doesn't appear on Vimeo, but it can be embedded on other sites.  * `nobody` - No one can access the showcase, including the authenticated user.  * `password` - Only those with the password can access the showcase.  * `team` - Only members of the authenticated user's team can access the showcase.  * `unlisted` - The showcase can't be accessed if the URL omits its unlisted hash. ")

  public PrivacyEnum getPrivacy() {
    return privacy;
  }


  public void setPrivacy(PrivacyEnum privacy) {
    
    
    
    this.privacy = privacy;
  }


  public ShowcasesEssentialsCreateUserShowcaseRequest reviewMode(Boolean reviewMode) {
    
    
    
    
    this.reviewMode = reviewMode;
    return this;
  }

   /**
   * Whether showcase videos use the review mode URL.
   * @return reviewMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether showcase videos use the review mode URL.")

  public Boolean getReviewMode() {
    return reviewMode;
  }


  public void setReviewMode(Boolean reviewMode) {
    
    
    
    this.reviewMode = reviewMode;
  }


  public ShowcasesEssentialsCreateUserShowcaseRequest sort(SortEnum sort) {
    
    
    
    
    this.sort = sort;
    return this;
  }

   /**
   * The default sort order of the videos as they appear in the showcase.  Option descriptions:  * &#x60;added_first&#x60; - The videos appear according to when they were added to the showcase, with the most recently added first.  * &#x60;added_last&#x60; - The videos appear according to when they were added to the showcase, with the most recently added last.  * &#x60;alphabetical&#x60; - The videos appear alphabetically by their title.  * &#x60;arranged&#x60; - The videos appear as arranged by the owner of the showcase.  * &#x60;comments&#x60; - The videos appear according to their number of comments.  * &#x60;likes&#x60; - The videos appear according to their number of likes.  * &#x60;newest&#x60; - The videos appear in chronological order with the newest first.  * &#x60;oldest&#x60; - The videos appear in chronological order with the oldest first.  * &#x60;plays&#x60; - The videos appear according to their number of plays. 
   * @return sort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The default sort order of the videos as they appear in the showcase.  Option descriptions:  * `added_first` - The videos appear according to when they were added to the showcase, with the most recently added first.  * `added_last` - The videos appear according to when they were added to the showcase, with the most recently added last.  * `alphabetical` - The videos appear alphabetically by their title.  * `arranged` - The videos appear as arranged by the owner of the showcase.  * `comments` - The videos appear according to their number of comments.  * `likes` - The videos appear according to their number of likes.  * `newest` - The videos appear in chronological order with the newest first.  * `oldest` - The videos appear in chronological order with the oldest first.  * `plays` - The videos appear according to their number of plays. ")

  public SortEnum getSort() {
    return sort;
  }


  public void setSort(SortEnum sort) {
    
    
    
    this.sort = sort;
  }


  public ShowcasesEssentialsCreateUserShowcaseRequest theme(ThemeEnum theme) {
    
    
    
    
    this.theme = theme;
    return this;
  }

   /**
   * The color theme of the showcase.  Option descriptions:  * &#x60;dark&#x60; - The showcase uses the dark theme.  * &#x60;standard&#x60; - The showcase uses the standard theme. 
   * @return theme
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The color theme of the showcase.  Option descriptions:  * `dark` - The showcase uses the dark theme.  * `standard` - The showcase uses the standard theme. ")

  public ThemeEnum getTheme() {
    return theme;
  }


  public void setTheme(ThemeEnum theme) {
    
    
    
    this.theme = theme;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ShowcasesEssentialsCreateUserShowcaseRequest instance itself
   */
  public ShowcasesEssentialsCreateUserShowcaseRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShowcasesEssentialsCreateUserShowcaseRequest showcasesEssentialsCreateUserShowcaseRequest = (ShowcasesEssentialsCreateUserShowcaseRequest) o;
    return Objects.equals(this.description, showcasesEssentialsCreateUserShowcaseRequest.description) &&
        Objects.equals(this.brandColor, showcasesEssentialsCreateUserShowcaseRequest.brandColor) &&
        Objects.equals(this.hideFromVimeo, showcasesEssentialsCreateUserShowcaseRequest.hideFromVimeo) &&
        Objects.equals(this.hideNav, showcasesEssentialsCreateUserShowcaseRequest.hideNav) &&
        Objects.equals(this.hideUpcoming, showcasesEssentialsCreateUserShowcaseRequest.hideUpcoming) &&
        Objects.equals(this.layout, showcasesEssentialsCreateUserShowcaseRequest.layout) &&
        Objects.equals(this.name, showcasesEssentialsCreateUserShowcaseRequest.name) &&
        Objects.equals(this.password, showcasesEssentialsCreateUserShowcaseRequest.password) &&
        Objects.equals(this.privacy, showcasesEssentialsCreateUserShowcaseRequest.privacy) &&
        Objects.equals(this.reviewMode, showcasesEssentialsCreateUserShowcaseRequest.reviewMode) &&
        Objects.equals(this.sort, showcasesEssentialsCreateUserShowcaseRequest.sort) &&
        Objects.equals(this.theme, showcasesEssentialsCreateUserShowcaseRequest.theme)&&
        Objects.equals(this.additionalProperties, showcasesEssentialsCreateUserShowcaseRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, brandColor, hideFromVimeo, hideNav, hideUpcoming, layout, name, password, privacy, reviewMode, sort, theme, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShowcasesEssentialsCreateUserShowcaseRequest {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    brandColor: ").append(toIndentedString(brandColor)).append("\n");
    sb.append("    hideFromVimeo: ").append(toIndentedString(hideFromVimeo)).append("\n");
    sb.append("    hideNav: ").append(toIndentedString(hideNav)).append("\n");
    sb.append("    hideUpcoming: ").append(toIndentedString(hideUpcoming)).append("\n");
    sb.append("    layout: ").append(toIndentedString(layout)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    privacy: ").append(toIndentedString(privacy)).append("\n");
    sb.append("    reviewMode: ").append(toIndentedString(reviewMode)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    theme: ").append(toIndentedString(theme)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("brand_color");
    openapiFields.add("hide_from_vimeo");
    openapiFields.add("hide_nav");
    openapiFields.add("hide_upcoming");
    openapiFields.add("layout");
    openapiFields.add("name");
    openapiFields.add("password");
    openapiFields.add("privacy");
    openapiFields.add("review_mode");
    openapiFields.add("sort");
    openapiFields.add("theme");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ShowcasesEssentialsCreateUserShowcaseRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ShowcasesEssentialsCreateUserShowcaseRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShowcasesEssentialsCreateUserShowcaseRequest is not found in the empty JSON string", ShowcasesEssentialsCreateUserShowcaseRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ShowcasesEssentialsCreateUserShowcaseRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("brand_color") != null && !jsonObj.get("brand_color").isJsonNull()) && !jsonObj.get("brand_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand_color").toString()));
      }
      if ((jsonObj.get("layout") != null && !jsonObj.get("layout").isJsonNull()) && !jsonObj.get("layout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `layout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("layout").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("privacy") != null && !jsonObj.get("privacy").isJsonNull()) && !jsonObj.get("privacy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privacy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privacy").toString()));
      }
      if ((jsonObj.get("sort") != null && !jsonObj.get("sort").isJsonNull()) && !jsonObj.get("sort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sort").toString()));
      }
      if ((jsonObj.get("theme") != null && !jsonObj.get("theme").isJsonNull()) && !jsonObj.get("theme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `theme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("theme").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShowcasesEssentialsCreateUserShowcaseRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShowcasesEssentialsCreateUserShowcaseRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShowcasesEssentialsCreateUserShowcaseRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShowcasesEssentialsCreateUserShowcaseRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ShowcasesEssentialsCreateUserShowcaseRequest>() {
           @Override
           public void write(JsonWriter out, ShowcasesEssentialsCreateUserShowcaseRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ShowcasesEssentialsCreateUserShowcaseRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ShowcasesEssentialsCreateUserShowcaseRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ShowcasesEssentialsCreateUserShowcaseRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ShowcasesEssentialsCreateUserShowcaseRequest
  * @throws IOException if the JSON string is invalid with respect to ShowcasesEssentialsCreateUserShowcaseRequest
  */
  public static ShowcasesEssentialsCreateUserShowcaseRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShowcasesEssentialsCreateUserShowcaseRequest.class);
  }

 /**
  * Convert an instance of ShowcasesEssentialsCreateUserShowcaseRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

