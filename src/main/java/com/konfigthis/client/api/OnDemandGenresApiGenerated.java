/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.OnDemandGenre;
import com.konfigthis.client.model.OnDemandPage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OnDemandGenresApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OnDemandGenresApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OnDemandGenresApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addGenreToPageCall(String genreId, Double ondemandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/genres/{genre_id}"
            .replace("{" + "genre_id" + "}", localVarApiClient.escapeString(genreId.toString()))
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.genre+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addGenreToPageValidateBeforeCall(String genreId, Double ondemandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'genreId' is set
        if (genreId == null) {
            throw new ApiException("Missing the required parameter 'genreId' when calling addGenreToPage(Async)");
        }

        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling addGenreToPage(Async)");
        }

        return addGenreToPageCall(genreId, ondemandId, _callback);

    }


    private ApiResponse<OnDemandGenre> addGenreToPageWithHttpInfo(String genreId, Double ondemandId) throws ApiException {
        okhttp3.Call localVarCall = addGenreToPageValidateBeforeCall(genreId, ondemandId, null);
        Type localVarReturnType = new TypeToken<OnDemandGenre>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addGenreToPageAsync(String genreId, Double ondemandId, final ApiCallback<OnDemandGenre> _callback) throws ApiException {

        okhttp3.Call localVarCall = addGenreToPageValidateBeforeCall(genreId, ondemandId, _callback);
        Type localVarReturnType = new TypeToken<OnDemandGenre>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddGenreToPageRequestBuilder {
        private final String genreId;
        private final Double ondemandId;

        private AddGenreToPageRequestBuilder(String genreId, double ondemandId) {
            this.genreId = genreId;
            this.ondemandId = ondemandId;
        }

        /**
         * Build call for addGenreToPage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The genre was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addGenreToPageCall(genreId, ondemandId, _callback);
        }


        /**
         * Execute addGenreToPage request
         * @return OnDemandGenre
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The genre was added. </td><td>  -  </td></tr>
         </table>
         */
        public OnDemandGenre execute() throws ApiException {
            ApiResponse<OnDemandGenre> localVarResp = addGenreToPageWithHttpInfo(genreId, ondemandId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addGenreToPage request with HTTP info returned
         * @return ApiResponse&lt;OnDemandGenre&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The genre was added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OnDemandGenre> executeWithHttpInfo() throws ApiException {
            return addGenreToPageWithHttpInfo(genreId, ondemandId);
        }

        /**
         * Execute addGenreToPage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The genre was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OnDemandGenre> _callback) throws ApiException {
            return addGenreToPageAsync(genreId, ondemandId, _callback);
        }
    }

    /**
     * Add a genre to an On Demand page
     * This method adds the specified genre designation to an On Demand page. A page can be associated with a maximum of two genres. The authenticated user must be the owner of the page.
     * @param genreId The ID of the genre. (required)
     * @param ondemandId The ID of the On Demand page. (required)
     * @return AddGenreToPageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The genre was added. </td><td>  -  </td></tr>
     </table>
     */
    public AddGenreToPageRequestBuilder addGenreToPage(String genreId, double ondemandId) throws IllegalArgumentException {
        if (genreId == null) throw new IllegalArgumentException("\"genreId\" is required but got null");
            

        
        return new AddGenreToPageRequestBuilder(genreId, ondemandId);
    }
    private okhttp3.Call checkGenreAssociationCall(String genreId, Double ondemandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/genres/{genre_id}"
            .replace("{" + "genre_id" + "}", localVarApiClient.escapeString(genreId.toString()))
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.genre+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkGenreAssociationValidateBeforeCall(String genreId, Double ondemandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'genreId' is set
        if (genreId == null) {
            throw new ApiException("Missing the required parameter 'genreId' when calling checkGenreAssociation(Async)");
        }

        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling checkGenreAssociation(Async)");
        }

        return checkGenreAssociationCall(genreId, ondemandId, _callback);

    }


    private ApiResponse<OnDemandGenre> checkGenreAssociationWithHttpInfo(String genreId, Double ondemandId) throws ApiException {
        okhttp3.Call localVarCall = checkGenreAssociationValidateBeforeCall(genreId, ondemandId, null);
        Type localVarReturnType = new TypeToken<OnDemandGenre>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkGenreAssociationAsync(String genreId, Double ondemandId, final ApiCallback<OnDemandGenre> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkGenreAssociationValidateBeforeCall(genreId, ondemandId, _callback);
        Type localVarReturnType = new TypeToken<OnDemandGenre>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckGenreAssociationRequestBuilder {
        private final String genreId;
        private final Double ondemandId;

        private CheckGenreAssociationRequestBuilder(String genreId, double ondemandId) {
            this.genreId = genreId;
            this.ondemandId = ondemandId;
        }

        /**
         * Build call for checkGenreAssociation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The On Demand page is in this genre. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkGenreAssociationCall(genreId, ondemandId, _callback);
        }


        /**
         * Execute checkGenreAssociation request
         * @return OnDemandGenre
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The On Demand page is in this genre. </td><td>  -  </td></tr>
         </table>
         */
        public OnDemandGenre execute() throws ApiException {
            ApiResponse<OnDemandGenre> localVarResp = checkGenreAssociationWithHttpInfo(genreId, ondemandId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkGenreAssociation request with HTTP info returned
         * @return ApiResponse&lt;OnDemandGenre&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The On Demand page is in this genre. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OnDemandGenre> executeWithHttpInfo() throws ApiException {
            return checkGenreAssociationWithHttpInfo(genreId, ondemandId);
        }

        /**
         * Execute checkGenreAssociation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The On Demand page is in this genre. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OnDemandGenre> _callback) throws ApiException {
            return checkGenreAssociationAsync(genreId, ondemandId, _callback);
        }
    }

    /**
     * Check whether an On Demand page belongs to a specific genre
     * This method determines whether an On Demand page is associated with the specified genre.
     * @param genreId The ID of the genre. (required)
     * @param ondemandId The ID of the On Demand page. (required)
     * @return CheckGenreAssociationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand page is in this genre. </td><td>  -  </td></tr>
     </table>
     */
    public CheckGenreAssociationRequestBuilder checkGenreAssociation(String genreId, double ondemandId) throws IllegalArgumentException {
        if (genreId == null) throw new IllegalArgumentException("\"genreId\" is required but got null");
            

        
        return new CheckGenreAssociationRequestBuilder(genreId, ondemandId);
    }
    private okhttp3.Call getAllGenresCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/genres";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.genre+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllGenresValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllGenresCall(_callback);

    }


    private ApiResponse<List<OnDemandGenre>> getAllGenresWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllGenresValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<OnDemandGenre>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllGenresAsync(final ApiCallback<List<OnDemandGenre>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllGenresValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<OnDemandGenre>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllGenresRequestBuilder {

        private GetAllGenresRequestBuilder() {
        }

        /**
         * Build call for getAllGenres
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The genres were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllGenresCall(_callback);
        }


        /**
         * Execute getAllGenres request
         * @return List&lt;OnDemandGenre&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The genres were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<OnDemandGenre> execute() throws ApiException {
            ApiResponse<List<OnDemandGenre>> localVarResp = getAllGenresWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllGenres request with HTTP info returned
         * @return ApiResponse&lt;List&lt;OnDemandGenre&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The genres were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<OnDemandGenre>> executeWithHttpInfo() throws ApiException {
            return getAllGenresWithHttpInfo();
        }

        /**
         * Execute getAllGenres request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The genres were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<OnDemandGenre>> _callback) throws ApiException {
            return getAllGenresAsync(_callback);
        }
    }

    /**
     * Get all On Demand genres
     * This method returns every existing On Demand genre.
     * @return GetAllGenresRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The genres were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllGenresRequestBuilder getAllGenres() throws IllegalArgumentException {
        return new GetAllGenresRequestBuilder();
    }
    private okhttp3.Call getAllPagesInGenreCall(String genreId, String direction, String filter, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/genres/{genre_id}/pages"
            .replace("{" + "genre_id" + "}", localVarApiClient.escapeString(genreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.page+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPagesInGenreValidateBeforeCall(String genreId, String direction, String filter, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'genreId' is set
        if (genreId == null) {
            throw new ApiException("Missing the required parameter 'genreId' when calling getAllPagesInGenre(Async)");
        }

        return getAllPagesInGenreCall(genreId, direction, filter, page, perPage, query, sort, _callback);

    }


    private ApiResponse<List<OnDemandPage>> getAllPagesInGenreWithHttpInfo(String genreId, String direction, String filter, Double page, Double perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = getAllPagesInGenreValidateBeforeCall(genreId, direction, filter, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<OnDemandPage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllPagesInGenreAsync(String genreId, String direction, String filter, Double page, Double perPage, String query, String sort, final ApiCallback<List<OnDemandPage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPagesInGenreValidateBeforeCall(genreId, direction, filter, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<OnDemandPage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllPagesInGenreRequestBuilder {
        private final String genreId;
        private String direction;
        private String filter;
        private Double page;
        private Double perPage;
        private String query;
        private String sort;

        private GetAllPagesInGenreRequestBuilder(String genreId) {
            this.genreId = genreId;
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return GetAllPagesInGenreRequestBuilder
         */
        public GetAllPagesInGenreRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The attribute by which to filter the results.  Option descriptions:  * &#x60;country&#x60; - Sort the results by country.  * &#x60;my_region&#x60; - Sort the results by user&#39;s region.  (optional)
         * @return GetAllPagesInGenreRequestBuilder
         */
        public GetAllPagesInGenreRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetAllPagesInGenreRequestBuilder
         */
        public GetAllPagesInGenreRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetAllPagesInGenreRequestBuilder
         */
        public GetAllPagesInGenreRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set query
         * @param query The search query to use to filter the results. (optional)
         * @return GetAllPagesInGenreRequestBuilder
         */
        public GetAllPagesInGenreRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;name&#x60; - Sort the results by name.  * &#x60;publish.time&#x60; - Sort the results by time of publishing.  * &#x60;videos&#x60; - Sort the results by video.  (optional)
         * @return GetAllPagesInGenreRequestBuilder
         */
        public GetAllPagesInGenreRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getAllPagesInGenre
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The On Demand pages in the genre were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllPagesInGenreCall(genreId, direction, filter, page, perPage, query, sort, _callback);
        }


        /**
         * Execute getAllPagesInGenre request
         * @return List&lt;OnDemandPage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The On Demand pages in the genre were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<OnDemandPage> execute() throws ApiException {
            ApiResponse<List<OnDemandPage>> localVarResp = getAllPagesInGenreWithHttpInfo(genreId, direction, filter, page, perPage, query, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllPagesInGenre request with HTTP info returned
         * @return ApiResponse&lt;List&lt;OnDemandPage&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The On Demand pages in the genre were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<OnDemandPage>> executeWithHttpInfo() throws ApiException {
            return getAllPagesInGenreWithHttpInfo(genreId, direction, filter, page, perPage, query, sort);
        }

        /**
         * Execute getAllPagesInGenre request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The On Demand pages in the genre were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<OnDemandPage>> _callback) throws ApiException {
            return getAllPagesInGenreAsync(genreId, direction, filter, page, perPage, query, sort, _callback);
        }
    }

    /**
     * Get all the On Demand pages in a genre
     * This method returns every On Demand page that belongs to the specified genre.
     * @param genreId The ID of the genre. (required)
     * @return GetAllPagesInGenreRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand pages in the genre were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllPagesInGenreRequestBuilder getAllPagesInGenre(String genreId) throws IllegalArgumentException {
        if (genreId == null) throw new IllegalArgumentException("\"genreId\" is required but got null");
            

        return new GetAllPagesInGenreRequestBuilder(genreId);
    }
    private okhttp3.Call getGenresCall(Double ondemandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/genres"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.genre+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGenresValidateBeforeCall(Double ondemandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling getGenres(Async)");
        }

        return getGenresCall(ondemandId, _callback);

    }


    private ApiResponse<List<OnDemandGenre>> getGenresWithHttpInfo(Double ondemandId) throws ApiException {
        okhttp3.Call localVarCall = getGenresValidateBeforeCall(ondemandId, null);
        Type localVarReturnType = new TypeToken<List<OnDemandGenre>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGenresAsync(Double ondemandId, final ApiCallback<List<OnDemandGenre>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGenresValidateBeforeCall(ondemandId, _callback);
        Type localVarReturnType = new TypeToken<List<OnDemandGenre>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGenresRequestBuilder {
        private final Double ondemandId;

        private GetGenresRequestBuilder(double ondemandId) {
            this.ondemandId = ondemandId;
        }

        /**
         * Build call for getGenres
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The genres were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGenresCall(ondemandId, _callback);
        }


        /**
         * Execute getGenres request
         * @return List&lt;OnDemandGenre&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The genres were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<OnDemandGenre> execute() throws ApiException {
            ApiResponse<List<OnDemandGenre>> localVarResp = getGenresWithHttpInfo(ondemandId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGenres request with HTTP info returned
         * @return ApiResponse&lt;List&lt;OnDemandGenre&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The genres were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<OnDemandGenre>> executeWithHttpInfo() throws ApiException {
            return getGenresWithHttpInfo(ondemandId);
        }

        /**
         * Execute getGenres request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The genres were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<OnDemandGenre>> _callback) throws ApiException {
            return getGenresAsync(ondemandId, _callback);
        }
    }

    /**
     * Get all the genres of an On Demand page
     * This method returns every genre associated with the specified On Demand page.
     * @param ondemandId The ID of the On Demand page. (required)
     * @return GetGenresRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The genres were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetGenresRequestBuilder getGenres(double ondemandId) throws IllegalArgumentException {
        
        return new GetGenresRequestBuilder(ondemandId);
    }
    private okhttp3.Call getSpecificPageInGenreCall(String genreId, Double ondemandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/genres/{genre_id}/pages/{ondemand_id}"
            .replace("{" + "genre_id" + "}", localVarApiClient.escapeString(genreId.toString()))
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.page+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificPageInGenreValidateBeforeCall(String genreId, Double ondemandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'genreId' is set
        if (genreId == null) {
            throw new ApiException("Missing the required parameter 'genreId' when calling getSpecificPageInGenre(Async)");
        }

        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling getSpecificPageInGenre(Async)");
        }

        return getSpecificPageInGenreCall(genreId, ondemandId, _callback);

    }


    private ApiResponse<OnDemandPage> getSpecificPageInGenreWithHttpInfo(String genreId, Double ondemandId) throws ApiException {
        okhttp3.Call localVarCall = getSpecificPageInGenreValidateBeforeCall(genreId, ondemandId, null);
        Type localVarReturnType = new TypeToken<OnDemandPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificPageInGenreAsync(String genreId, Double ondemandId, final ApiCallback<OnDemandPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificPageInGenreValidateBeforeCall(genreId, ondemandId, _callback);
        Type localVarReturnType = new TypeToken<OnDemandPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificPageInGenreRequestBuilder {
        private final String genreId;
        private final Double ondemandId;

        private GetSpecificPageInGenreRequestBuilder(String genreId, double ondemandId) {
            this.genreId = genreId;
            this.ondemandId = ondemandId;
        }

        /**
         * Build call for getSpecificPageInGenre
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The On Demand page in the genre was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificPageInGenreCall(genreId, ondemandId, _callback);
        }


        /**
         * Execute getSpecificPageInGenre request
         * @return OnDemandPage
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The On Demand page in the genre was returned. </td><td>  -  </td></tr>
         </table>
         */
        public OnDemandPage execute() throws ApiException {
            ApiResponse<OnDemandPage> localVarResp = getSpecificPageInGenreWithHttpInfo(genreId, ondemandId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificPageInGenre request with HTTP info returned
         * @return ApiResponse&lt;OnDemandPage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The On Demand page in the genre was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OnDemandPage> executeWithHttpInfo() throws ApiException {
            return getSpecificPageInGenreWithHttpInfo(genreId, ondemandId);
        }

        /**
         * Execute getSpecificPageInGenre request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The On Demand page in the genre was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OnDemandPage> _callback) throws ApiException {
            return getSpecificPageInGenreAsync(genreId, ondemandId, _callback);
        }
    }

    /**
     * Get a specific On Demand page in a genre
     * This method returns a single On Demand page that belongs to the specified genre.
     * @param genreId The ID of the genre. (required)
     * @param ondemandId The ID of the On Demand page. (required)
     * @return GetSpecificPageInGenreRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand page in the genre was returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificPageInGenreRequestBuilder getSpecificPageInGenre(String genreId, double ondemandId) throws IllegalArgumentException {
        if (genreId == null) throw new IllegalArgumentException("\"genreId\" is required but got null");
            

        
        return new GetSpecificPageInGenreRequestBuilder(genreId, ondemandId);
    }
    private okhttp3.Call removeGenreFromPageCall(String genreId, Double ondemandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/genres/{genre_id}"
            .replace("{" + "genre_id" + "}", localVarApiClient.escapeString(genreId.toString()))
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.genre+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeGenreFromPageValidateBeforeCall(String genreId, Double ondemandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'genreId' is set
        if (genreId == null) {
            throw new ApiException("Missing the required parameter 'genreId' when calling removeGenreFromPage(Async)");
        }

        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling removeGenreFromPage(Async)");
        }

        return removeGenreFromPageCall(genreId, ondemandId, _callback);

    }


    private ApiResponse<Void> removeGenreFromPageWithHttpInfo(String genreId, Double ondemandId) throws ApiException {
        okhttp3.Call localVarCall = removeGenreFromPageValidateBeforeCall(genreId, ondemandId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeGenreFromPageAsync(String genreId, Double ondemandId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeGenreFromPageValidateBeforeCall(genreId, ondemandId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveGenreFromPageRequestBuilder {
        private final String genreId;
        private final Double ondemandId;

        private RemoveGenreFromPageRequestBuilder(String genreId, double ondemandId) {
            this.genreId = genreId;
            this.ondemandId = ondemandId;
        }

        /**
         * Build call for removeGenreFromPage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The genre was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeGenreFromPageCall(genreId, ondemandId, _callback);
        }


        /**
         * Execute removeGenreFromPage request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The genre was removed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeGenreFromPageWithHttpInfo(genreId, ondemandId);
        }

        /**
         * Execute removeGenreFromPage request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The genre was removed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeGenreFromPageWithHttpInfo(genreId, ondemandId);
        }

        /**
         * Execute removeGenreFromPage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The genre was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeGenreFromPageAsync(genreId, ondemandId, _callback);
        }
    }

    /**
     * Remove a genre from an On Demand page
     * This method removes a genre association from the specified On Demand page. The authenticated user must be the owner of the page.
     * @param genreId The ID of the genre. (required)
     * @param ondemandId The ID of the On Demand page. (required)
     * @return RemoveGenreFromPageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The genre was removed. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveGenreFromPageRequestBuilder removeGenreFromPage(String genreId, double ondemandId) throws IllegalArgumentException {
        if (genreId == null) throw new IllegalArgumentException("\"genreId\" is required but got null");
            

        
        return new RemoveGenreFromPageRequestBuilder(genreId, ondemandId);
    }
    private okhttp3.Call specificGenreGetCall(String genreId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/genres/{genre_id}"
            .replace("{" + "genre_id" + "}", localVarApiClient.escapeString(genreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.genre+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call specificGenreGetValidateBeforeCall(String genreId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'genreId' is set
        if (genreId == null) {
            throw new ApiException("Missing the required parameter 'genreId' when calling specificGenreGet(Async)");
        }

        return specificGenreGetCall(genreId, _callback);

    }


    private ApiResponse<OnDemandGenre> specificGenreGetWithHttpInfo(String genreId) throws ApiException {
        okhttp3.Call localVarCall = specificGenreGetValidateBeforeCall(genreId, null);
        Type localVarReturnType = new TypeToken<OnDemandGenre>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call specificGenreGetAsync(String genreId, final ApiCallback<OnDemandGenre> _callback) throws ApiException {

        okhttp3.Call localVarCall = specificGenreGetValidateBeforeCall(genreId, _callback);
        Type localVarReturnType = new TypeToken<OnDemandGenre>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SpecificGenreGetRequestBuilder {
        private final String genreId;

        private SpecificGenreGetRequestBuilder(String genreId) {
            this.genreId = genreId;
        }

        /**
         * Build call for specificGenreGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The genre was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return specificGenreGetCall(genreId, _callback);
        }


        /**
         * Execute specificGenreGet request
         * @return OnDemandGenre
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The genre was returned. </td><td>  -  </td></tr>
         </table>
         */
        public OnDemandGenre execute() throws ApiException {
            ApiResponse<OnDemandGenre> localVarResp = specificGenreGetWithHttpInfo(genreId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute specificGenreGet request with HTTP info returned
         * @return ApiResponse&lt;OnDemandGenre&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The genre was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OnDemandGenre> executeWithHttpInfo() throws ApiException {
            return specificGenreGetWithHttpInfo(genreId);
        }

        /**
         * Execute specificGenreGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The genre was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OnDemandGenre> _callback) throws ApiException {
            return specificGenreGetAsync(genreId, _callback);
        }
    }

    /**
     * Get a specific On Demand genre
     * This method returns a single On Demand genre.
     * @param genreId The ID of the genre. (required)
     * @return SpecificGenreGetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The genre was returned. </td><td>  -  </td></tr>
     </table>
     */
    public SpecificGenreGetRequestBuilder specificGenreGet(String genreId) throws IllegalArgumentException {
        if (genreId == null) throw new IllegalArgumentException("\"genreId\" is required but got null");
            

        return new SpecificGenreGetRequestBuilder(genreId);
    }
}
