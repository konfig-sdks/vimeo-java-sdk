/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EmbedSettingsBadgesLive;
import com.konfigthis.client.model.EmbedSettingsBadgesStaffPick;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A collection of the video&#39;s badges.
 */
@ApiModel(description = "A collection of the video's badges.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmbedSettingsBadges {
  public static final String SERIALIZED_NAME_DOLBY_VISION = "dolby_vision";
  @SerializedName(SERIALIZED_NAME_DOLBY_VISION)
  private Boolean dolbyVision;

  public static final String SERIALIZED_NAME_HDR = "hdr";
  @SerializedName(SERIALIZED_NAME_HDR)
  private Boolean hdr;

  public static final String SERIALIZED_NAME_HDR10 = "hdr_10";
  @SerializedName(SERIALIZED_NAME_HDR10)
  private Boolean hdr10;

  public static final String SERIALIZED_NAME_HDR10_PLUS = "hdr_10_plus";
  @SerializedName(SERIALIZED_NAME_HDR10_PLUS)
  private Boolean hdr10Plus;

  public static final String SERIALIZED_NAME_LIVE = "live";
  @SerializedName(SERIALIZED_NAME_LIVE)
  private EmbedSettingsBadgesLive live;

  public static final String SERIALIZED_NAME_STAFF_PICK = "staff_pick";
  @SerializedName(SERIALIZED_NAME_STAFF_PICK)
  private EmbedSettingsBadgesStaffPick staffPick;

  public static final String SERIALIZED_NAME_VOD = "vod";
  @SerializedName(SERIALIZED_NAME_VOD)
  private Boolean vod;

  public static final String SERIALIZED_NAME_WEEKEND_CHALLENGE = "weekend_challenge";
  @SerializedName(SERIALIZED_NAME_WEEKEND_CHALLENGE)
  private Boolean weekendChallenge;

  public EmbedSettingsBadges() {
  }

  public EmbedSettingsBadges dolbyVision(Boolean dolbyVision) {
    
    
    
    
    this.dolbyVision = dolbyVision;
    return this;
  }

   /**
   * Whether the video was filmed using Dolby Vision.
   * @return dolbyVision
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the video was filmed using Dolby Vision.")

  public Boolean getDolbyVision() {
    return dolbyVision;
  }


  public void setDolbyVision(Boolean dolbyVision) {
    
    
    
    this.dolbyVision = dolbyVision;
  }


  public EmbedSettingsBadges hdr(Boolean hdr) {
    
    
    
    
    this.hdr = hdr;
    return this;
  }

   /**
   * Whether the video has an HDR-compatible transcode.
   * @return hdr
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the video has an HDR-compatible transcode.")

  public Boolean getHdr() {
    return hdr;
  }


  public void setHdr(Boolean hdr) {
    
    
    
    this.hdr = hdr;
  }


  public EmbedSettingsBadges hdr10(Boolean hdr10) {
    
    
    
    
    this.hdr10 = hdr10;
    return this;
  }

   /**
   * Whether the video was filmed using HDR10.
   * @return hdr10
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the video was filmed using HDR10.")

  public Boolean getHdr10() {
    return hdr10;
  }


  public void setHdr10(Boolean hdr10) {
    
    
    
    this.hdr10 = hdr10;
  }


  public EmbedSettingsBadges hdr10Plus(Boolean hdr10Plus) {
    
    
    
    
    this.hdr10Plus = hdr10Plus;
    return this;
  }

   /**
   * Whether the video was filmed using HDR10 Plus.
   * @return hdr10Plus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the video was filmed using HDR10 Plus.")

  public Boolean getHdr10Plus() {
    return hdr10Plus;
  }


  public void setHdr10Plus(Boolean hdr10Plus) {
    
    
    
    this.hdr10Plus = hdr10Plus;
  }


  public EmbedSettingsBadges live(EmbedSettingsBadgesLive live) {
    
    
    
    
    this.live = live;
    return this;
  }

   /**
   * Get live
   * @return live
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EmbedSettingsBadgesLive getLive() {
    return live;
  }


  public void setLive(EmbedSettingsBadgesLive live) {
    
    
    
    this.live = live;
  }


  public EmbedSettingsBadges staffPick(EmbedSettingsBadgesStaffPick staffPick) {
    
    
    
    
    this.staffPick = staffPick;
    return this;
  }

   /**
   * Get staffPick
   * @return staffPick
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EmbedSettingsBadgesStaffPick getStaffPick() {
    return staffPick;
  }


  public void setStaffPick(EmbedSettingsBadgesStaffPick staffPick) {
    
    
    
    this.staffPick = staffPick;
  }


  public EmbedSettingsBadges vod(Boolean vod) {
    
    
    
    
    this.vod = vod;
    return this;
  }

   /**
   * Whether the video is a Vimeo On Demand video.
   * @return vod
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "Whether the video is a Vimeo On Demand video.")

  public Boolean getVod() {
    return vod;
  }


  public void setVod(Boolean vod) {
    
    
    
    this.vod = vod;
  }


  public EmbedSettingsBadges weekendChallenge(Boolean weekendChallenge) {
    
    
    
    
    this.weekendChallenge = weekendChallenge;
    return this;
  }

   /**
   * Whether the video is a Vimeo Weekend Challenge.
   * @return weekendChallenge
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "Whether the video is a Vimeo Weekend Challenge.")

  public Boolean getWeekendChallenge() {
    return weekendChallenge;
  }


  public void setWeekendChallenge(Boolean weekendChallenge) {
    
    
    
    this.weekendChallenge = weekendChallenge;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmbedSettingsBadges instance itself
   */
  public EmbedSettingsBadges putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmbedSettingsBadges embedSettingsBadges = (EmbedSettingsBadges) o;
    return Objects.equals(this.dolbyVision, embedSettingsBadges.dolbyVision) &&
        Objects.equals(this.hdr, embedSettingsBadges.hdr) &&
        Objects.equals(this.hdr10, embedSettingsBadges.hdr10) &&
        Objects.equals(this.hdr10Plus, embedSettingsBadges.hdr10Plus) &&
        Objects.equals(this.live, embedSettingsBadges.live) &&
        Objects.equals(this.staffPick, embedSettingsBadges.staffPick) &&
        Objects.equals(this.vod, embedSettingsBadges.vod) &&
        Objects.equals(this.weekendChallenge, embedSettingsBadges.weekendChallenge)&&
        Objects.equals(this.additionalProperties, embedSettingsBadges.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dolbyVision, hdr, hdr10, hdr10Plus, live, staffPick, vod, weekendChallenge, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmbedSettingsBadges {\n");
    sb.append("    dolbyVision: ").append(toIndentedString(dolbyVision)).append("\n");
    sb.append("    hdr: ").append(toIndentedString(hdr)).append("\n");
    sb.append("    hdr10: ").append(toIndentedString(hdr10)).append("\n");
    sb.append("    hdr10Plus: ").append(toIndentedString(hdr10Plus)).append("\n");
    sb.append("    live: ").append(toIndentedString(live)).append("\n");
    sb.append("    staffPick: ").append(toIndentedString(staffPick)).append("\n");
    sb.append("    vod: ").append(toIndentedString(vod)).append("\n");
    sb.append("    weekendChallenge: ").append(toIndentedString(weekendChallenge)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dolby_vision");
    openapiFields.add("hdr");
    openapiFields.add("hdr_10");
    openapiFields.add("hdr_10_plus");
    openapiFields.add("live");
    openapiFields.add("staff_pick");
    openapiFields.add("vod");
    openapiFields.add("weekend_challenge");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("hdr");
    openapiRequiredFields.add("live");
    openapiRequiredFields.add("staff_pick");
    openapiRequiredFields.add("vod");
    openapiRequiredFields.add("weekend_challenge");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmbedSettingsBadges
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmbedSettingsBadges.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmbedSettingsBadges is not found in the empty JSON string", EmbedSettingsBadges.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EmbedSettingsBadges.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `live`
      EmbedSettingsBadgesLive.validateJsonObject(jsonObj.getAsJsonObject("live"));
      // validate the required field `staff_pick`
      EmbedSettingsBadgesStaffPick.validateJsonObject(jsonObj.getAsJsonObject("staff_pick"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmbedSettingsBadges.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmbedSettingsBadges' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmbedSettingsBadges> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmbedSettingsBadges.class));

       return (TypeAdapter<T>) new TypeAdapter<EmbedSettingsBadges>() {
           @Override
           public void write(JsonWriter out, EmbedSettingsBadges value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmbedSettingsBadges read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmbedSettingsBadges instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmbedSettingsBadges given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmbedSettingsBadges
  * @throws IOException if the JSON string is invalid with respect to EmbedSettingsBadges
  */
  public static EmbedSettingsBadges fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmbedSettingsBadges.class);
  }

 /**
  * Convert an instance of EmbedSettingsBadges to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

