/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EmailCaptureForm;
import com.konfigthis.client.model.LiveEventMetadataInteractionsEdit;
import com.konfigthis.client.model.User;
import com.konfigthis.client.model.WebinarEmailProviderListInner;
import com.konfigthis.client.model.WebinarEmailQuota;
import com.konfigthis.client.model.WebinarEmailSettings;
import com.konfigthis.client.model.WebinarEvents;
import com.konfigthis.client.model.WebinarMetadata;
import com.konfigthis.client.model.WebinarPrivacy;
import com.konfigthis.client.model.WebinarRegistrationData;
import com.konfigthis.client.model.WebinarSchedule;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Webinar
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Webinar {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_COMPLETED_ON = "completed_on";
  @SerializedName(SERIALIZED_NAME_COMPLETED_ON)
  private String completedOn;

  public static final String SERIALIZED_NAME_CREATED_TIME = "created_time";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private String createdTime;

  public static final String SERIALIZED_NAME_EDIT = "edit";
  @SerializedName(SERIALIZED_NAME_EDIT)
  private LiveEventMetadataInteractionsEdit edit;

  public static final String SERIALIZED_NAME_EMAIL_PROVIDER_LIST = "email_provider_list";
  @SerializedName(SERIALIZED_NAME_EMAIL_PROVIDER_LIST)
  private List<WebinarEmailProviderListInner> emailProviderList = new ArrayList<>();

  public static final String SERIALIZED_NAME_EMAIL_QUOTA = "email_quota";
  @SerializedName(SERIALIZED_NAME_EMAIL_QUOTA)
  private WebinarEmailQuota emailQuota;

  public static final String SERIALIZED_NAME_EMAIL_SETTINGS = "email_settings";
  @SerializedName(SERIALIZED_NAME_EMAIL_SETTINGS)
  private WebinarEmailSettings emailSettings;

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private WebinarEvents events;

  public static final String SERIALIZED_NAME_HAS_POLLS = "has_polls";
  @SerializedName(SERIALIZED_NAME_HAS_POLLS)
  private Boolean hasPolls;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private WebinarMetadata metadata;

  public static final String SERIALIZED_NAME_MODIFIED_ON = "modified_on";
  @SerializedName(SERIALIZED_NAME_MODIFIED_ON)
  private String modifiedOn;

  public static final String SERIALIZED_NAME_NEXT_OCCURRENCE_TIME = "next_occurrence_time";
  @SerializedName(SERIALIZED_NAME_NEXT_OCCURRENCE_TIME)
  private String nextOccurrenceTime;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PRIVACY = "privacy";
  @SerializedName(SERIALIZED_NAME_PRIVACY)
  private WebinarPrivacy privacy;

  public static final String SERIALIZED_NAME_REGISTRATION_DATA = "registration_data";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_DATA)
  private WebinarRegistrationData registrationData;

  public static final String SERIALIZED_NAME_REGISTRATION_FORM = "registration_form";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_FORM)
  private EmailCaptureForm registrationForm;

  public static final String SERIALIZED_NAME_SCHEDULE = "schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private WebinarSchedule schedule;

  /**
   * The status of the webinar.  Option descriptions:  * &#x60;ended&#x60; - The webinar has ended.  * &#x60;started&#x60; - The webinar has started. 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    ENDED("ended"),
    
    STARTED("started");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TIME_ZONE = "time_zone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public Webinar() {
  }

  public Webinar title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * The title of the webinar.
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Live Content", required = true, value = "The title of the webinar.")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public Webinar description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * The description of the webinar.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "In this episode, we interview a surprise guest", required = true, value = "The description of the webinar.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public Webinar completedOn(String completedOn) {
    
    
    
    
    this.completedOn = completedOn;
    return this;
  }

   /**
   * The time in ISO 8601 format when the webinar was completed.
   * @return completedOn
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2016-11-03T09:24:56+00:00", required = true, value = "The time in ISO 8601 format when the webinar was completed.")

  public String getCompletedOn() {
    return completedOn;
  }


  public void setCompletedOn(String completedOn) {
    
    
    
    this.completedOn = completedOn;
  }


  public Webinar createdTime(String createdTime) {
    
    
    
    
    this.createdTime = createdTime;
    return this;
  }

   /**
   * The time in ISO 8601 format when the webinar was created.
   * @return createdTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2016-11-03T09:24:56+00:00", required = true, value = "The time in ISO 8601 format when the webinar was created.")

  public String getCreatedTime() {
    return createdTime;
  }


  public void setCreatedTime(String createdTime) {
    
    
    
    this.createdTime = createdTime;
  }


  public Webinar edit(LiveEventMetadataInteractionsEdit edit) {
    
    
    
    
    this.edit = edit;
    return this;
  }

   /**
   * Get edit
   * @return edit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public LiveEventMetadataInteractionsEdit getEdit() {
    return edit;
  }


  public void setEdit(LiveEventMetadataInteractionsEdit edit) {
    
    
    
    this.edit = edit;
  }


  public Webinar emailProviderList(List<WebinarEmailProviderListInner> emailProviderList) {
    
    
    
    
    this.emailProviderList = emailProviderList;
    return this;
  }

  public Webinar addEmailProviderListItem(WebinarEmailProviderListInner emailProviderListItem) {
    this.emailProviderList.add(emailProviderListItem);
    return this;
  }

   /**
   * Information about the email provider list that is selected to import registrants.
   * @return emailProviderList
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Information about the email provider list that is selected to import registrants.")

  public List<WebinarEmailProviderListInner> getEmailProviderList() {
    return emailProviderList;
  }


  public void setEmailProviderList(List<WebinarEmailProviderListInner> emailProviderList) {
    
    
    
    this.emailProviderList = emailProviderList;
  }


  public Webinar emailQuota(WebinarEmailQuota emailQuota) {
    
    
    
    
    this.emailQuota = emailQuota;
    return this;
  }

   /**
   * Get emailQuota
   * @return emailQuota
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public WebinarEmailQuota getEmailQuota() {
    return emailQuota;
  }


  public void setEmailQuota(WebinarEmailQuota emailQuota) {
    
    
    
    this.emailQuota = emailQuota;
  }


  public Webinar emailSettings(WebinarEmailSettings emailSettings) {
    
    
    
    
    this.emailSettings = emailSettings;
    return this;
  }

   /**
   * The settings for emails that are sent about the webinar.
   * @return emailSettings
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The settings for emails that are sent about the webinar.")

  public WebinarEmailSettings getEmailSettings() {
    return emailSettings;
  }


  public void setEmailSettings(WebinarEmailSettings emailSettings) {
    
    
    
    this.emailSettings = emailSettings;
  }


  public Webinar events(WebinarEvents events) {
    
    
    
    
    this.events = events;
    return this;
  }

   /**
   * Get events
   * @return events
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public WebinarEvents getEvents() {
    return events;
  }


  public void setEvents(WebinarEvents events) {
    
    
    
    this.events = events;
  }


  public Webinar hasPolls(Boolean hasPolls) {
    
    
    
    
    this.hasPolls = hasPolls;
    return this;
  }

   /**
   * Whether polls are associated with the webinar.
   * @return hasPolls
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "Whether polls are associated with the webinar.")

  public Boolean getHasPolls() {
    return hasPolls;
  }


  public void setHasPolls(Boolean hasPolls) {
    
    
    
    this.hasPolls = hasPolls;
  }


  public Webinar metadata(WebinarMetadata metadata) {
    
    
    
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public WebinarMetadata getMetadata() {
    return metadata;
  }


  public void setMetadata(WebinarMetadata metadata) {
    
    
    
    this.metadata = metadata;
  }


  public Webinar modifiedOn(String modifiedOn) {
    
    
    
    
    this.modifiedOn = modifiedOn;
    return this;
  }

   /**
   * The time in ISO 8601 format when the webinar was modified.
   * @return modifiedOn
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2023-11-03T09:24:56+00:00", required = true, value = "The time in ISO 8601 format when the webinar was modified.")

  public String getModifiedOn() {
    return modifiedOn;
  }


  public void setModifiedOn(String modifiedOn) {
    
    
    
    this.modifiedOn = modifiedOn;
  }


  public Webinar nextOccurrenceTime(String nextOccurrenceTime) {
    
    
    
    
    this.nextOccurrenceTime = nextOccurrenceTime;
    return this;
  }

   /**
   * The date in ISO 8601 format on which the next occurrence of the webinar is expected to be live.
   * @return nextOccurrenceTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2018-07-30T14:00:00+00:00", required = true, value = "The date in ISO 8601 format on which the next occurrence of the webinar is expected to be live.")

  public String getNextOccurrenceTime() {
    return nextOccurrenceTime;
  }


  public void setNextOccurrenceTime(String nextOccurrenceTime) {
    
    
    
    this.nextOccurrenceTime = nextOccurrenceTime;
  }


  public Webinar password(String password) {
    
    
    
    
    this.password = password;
    return this;
  }

   /**
   * The password used to access the videos generated by streaming to the webinar event.
   * @return password
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "gogo", required = true, value = "The password used to access the videos generated by streaming to the webinar event.")

  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    
    
    
    this.password = password;
  }


  public Webinar privacy(WebinarPrivacy privacy) {
    
    
    
    
    this.privacy = privacy;
    return this;
  }

   /**
   * Get privacy
   * @return privacy
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public WebinarPrivacy getPrivacy() {
    return privacy;
  }


  public void setPrivacy(WebinarPrivacy privacy) {
    
    
    
    this.privacy = privacy;
  }


  public Webinar registrationData(WebinarRegistrationData registrationData) {
    
    
    
    
    this.registrationData = registrationData;
    return this;
  }

   /**
   * Get registrationData
   * @return registrationData
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public WebinarRegistrationData getRegistrationData() {
    return registrationData;
  }


  public void setRegistrationData(WebinarRegistrationData registrationData) {
    
    
    
    this.registrationData = registrationData;
  }


  public Webinar registrationForm(EmailCaptureForm registrationForm) {
    
    
    
    
    this.registrationForm = registrationForm;
    return this;
  }

   /**
   * The registration form settings associated with the webinar.
   * @return registrationForm
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The registration form settings associated with the webinar.")

  public EmailCaptureForm getRegistrationForm() {
    return registrationForm;
  }


  public void setRegistrationForm(EmailCaptureForm registrationForm) {
    
    
    
    this.registrationForm = registrationForm;
  }


  public Webinar schedule(WebinarSchedule schedule) {
    
    
    
    
    this.schedule = schedule;
    return this;
  }

   /**
   * Get schedule
   * @return schedule
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public WebinarSchedule getSchedule() {
    return schedule;
  }


  public void setSchedule(WebinarSchedule schedule) {
    
    
    
    this.schedule = schedule;
  }


  public Webinar status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The status of the webinar.  Option descriptions:  * &#x60;ended&#x60; - The webinar has ended.  * &#x60;started&#x60; - The webinar has started. 
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "STARTED", required = true, value = "The status of the webinar.  Option descriptions:  * `ended` - The webinar has ended.  * `started` - The webinar has started. ")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public Webinar timeZone(String timeZone) {
    
    
    
    
    this.timeZone = timeZone;
    return this;
  }

   /**
   * The time zone used in resolving the timestamps that are included in the automatically generated video titles for the webinar.
   * @return timeZone
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "America/New_York", required = true, value = "The time zone used in resolving the timestamps that are included in the automatically generated video titles for the webinar.")

  public String getTimeZone() {
    return timeZone;
  }


  public void setTimeZone(String timeZone) {
    
    
    
    this.timeZone = timeZone;
  }


  public Webinar uri(String uri) {
    
    
    
    
    this.uri = uri;
    return this;
  }

   /**
   * The webinar&#39;s canonical relative URI.
   * @return uri
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "/webinars/f19bfa08-b266-4f20-bfce-db1d0719b52f", required = true, value = "The webinar's canonical relative URI.")

  public String getUri() {
    return uri;
  }


  public void setUri(String uri) {
    
    
    
    this.uri = uri;
  }


  public Webinar user(User user) {
    
    
    
    
    this.user = user;
    return this;
  }

   /**
   * The owner of the webinar.
   * @return user
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The owner of the webinar.")

  public User getUser() {
    return user;
  }


  public void setUser(User user) {
    
    
    
    this.user = user;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Webinar instance itself
   */
  public Webinar putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Webinar webinar = (Webinar) o;
    return Objects.equals(this.title, webinar.title) &&
        Objects.equals(this.description, webinar.description) &&
        Objects.equals(this.completedOn, webinar.completedOn) &&
        Objects.equals(this.createdTime, webinar.createdTime) &&
        Objects.equals(this.edit, webinar.edit) &&
        Objects.equals(this.emailProviderList, webinar.emailProviderList) &&
        Objects.equals(this.emailQuota, webinar.emailQuota) &&
        Objects.equals(this.emailSettings, webinar.emailSettings) &&
        Objects.equals(this.events, webinar.events) &&
        Objects.equals(this.hasPolls, webinar.hasPolls) &&
        Objects.equals(this.metadata, webinar.metadata) &&
        Objects.equals(this.modifiedOn, webinar.modifiedOn) &&
        Objects.equals(this.nextOccurrenceTime, webinar.nextOccurrenceTime) &&
        Objects.equals(this.password, webinar.password) &&
        Objects.equals(this.privacy, webinar.privacy) &&
        Objects.equals(this.registrationData, webinar.registrationData) &&
        Objects.equals(this.registrationForm, webinar.registrationForm) &&
        Objects.equals(this.schedule, webinar.schedule) &&
        Objects.equals(this.status, webinar.status) &&
        Objects.equals(this.timeZone, webinar.timeZone) &&
        Objects.equals(this.uri, webinar.uri) &&
        Objects.equals(this.user, webinar.user)&&
        Objects.equals(this.additionalProperties, webinar.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, description, completedOn, createdTime, edit, emailProviderList, emailQuota, emailSettings, events, hasPolls, metadata, modifiedOn, nextOccurrenceTime, password, privacy, registrationData, registrationForm, schedule, status, timeZone, uri, user, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Webinar {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    completedOn: ").append(toIndentedString(completedOn)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    edit: ").append(toIndentedString(edit)).append("\n");
    sb.append("    emailProviderList: ").append(toIndentedString(emailProviderList)).append("\n");
    sb.append("    emailQuota: ").append(toIndentedString(emailQuota)).append("\n");
    sb.append("    emailSettings: ").append(toIndentedString(emailSettings)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    hasPolls: ").append(toIndentedString(hasPolls)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    modifiedOn: ").append(toIndentedString(modifiedOn)).append("\n");
    sb.append("    nextOccurrenceTime: ").append(toIndentedString(nextOccurrenceTime)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    privacy: ").append(toIndentedString(privacy)).append("\n");
    sb.append("    registrationData: ").append(toIndentedString(registrationData)).append("\n");
    sb.append("    registrationForm: ").append(toIndentedString(registrationForm)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("completed_on");
    openapiFields.add("created_time");
    openapiFields.add("edit");
    openapiFields.add("email_provider_list");
    openapiFields.add("email_quota");
    openapiFields.add("email_settings");
    openapiFields.add("events");
    openapiFields.add("has_polls");
    openapiFields.add("metadata");
    openapiFields.add("modified_on");
    openapiFields.add("next_occurrence_time");
    openapiFields.add("password");
    openapiFields.add("privacy");
    openapiFields.add("registration_data");
    openapiFields.add("registration_form");
    openapiFields.add("schedule");
    openapiFields.add("status");
    openapiFields.add("time_zone");
    openapiFields.add("uri");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("completed_on");
    openapiRequiredFields.add("created_time");
    openapiRequiredFields.add("edit");
    openapiRequiredFields.add("email_provider_list");
    openapiRequiredFields.add("email_quota");
    openapiRequiredFields.add("email_settings");
    openapiRequiredFields.add("events");
    openapiRequiredFields.add("has_polls");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("modified_on");
    openapiRequiredFields.add("next_occurrence_time");
    openapiRequiredFields.add("password");
    openapiRequiredFields.add("privacy");
    openapiRequiredFields.add("registration_data");
    openapiRequiredFields.add("registration_form");
    openapiRequiredFields.add("schedule");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("time_zone");
    openapiRequiredFields.add("uri");
    openapiRequiredFields.add("user");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Webinar
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Webinar.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Webinar is not found in the empty JSON string", Webinar.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Webinar.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("title").isJsonNull() && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("description").isJsonNull() && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("completed_on").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completed_on` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completed_on").toString()));
      }
      if (!jsonObj.get("created_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_time").toString()));
      }
      // validate the required field `edit`
      LiveEventMetadataInteractionsEdit.validateJsonObject(jsonObj.getAsJsonObject("edit"));
      // ensure the json data is an array
      if (!jsonObj.get("email_provider_list").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `email_provider_list` to be an array in the JSON string but got `%s`", jsonObj.get("email_provider_list").toString()));
      }

      JsonArray jsonArrayemailProviderList = jsonObj.getAsJsonArray("email_provider_list");
      // validate the required field `email_provider_list` (array)
      for (int i = 0; i < jsonArrayemailProviderList.size(); i++) {
        WebinarEmailProviderListInner.validateJsonObject(jsonArrayemailProviderList.get(i).getAsJsonObject());
      };
      // validate the required field `email_quota`
      WebinarEmailQuota.validateJsonObject(jsonObj.getAsJsonObject("email_quota"));
      // validate the required field `email_settings`
      WebinarEmailSettings.validateJsonObject(jsonObj.getAsJsonObject("email_settings"));
      // validate the required field `events`
      WebinarEvents.validateJsonObject(jsonObj.getAsJsonObject("events"));
      // validate the required field `metadata`
      WebinarMetadata.validateJsonObject(jsonObj.getAsJsonObject("metadata"));
      if (!jsonObj.get("modified_on").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modified_on` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modified_on").toString()));
      }
      if (!jsonObj.get("next_occurrence_time").isJsonNull() && !jsonObj.get("next_occurrence_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `next_occurrence_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("next_occurrence_time").toString()));
      }
      if (!jsonObj.get("password").isJsonNull() && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      // validate the required field `privacy`
      WebinarPrivacy.validateJsonObject(jsonObj.getAsJsonObject("privacy"));
      // validate the required field `registration_data`
      WebinarRegistrationData.validateJsonObject(jsonObj.getAsJsonObject("registration_data"));
      // validate the required field `registration_form`
      EmailCaptureForm.validateJsonObject(jsonObj.getAsJsonObject("registration_form"));
      // validate the required field `schedule`
      WebinarSchedule.validateJsonObject(jsonObj.getAsJsonObject("schedule"));
      if (!jsonObj.get("status").isJsonNull() && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("time_zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_zone").toString()));
      }
      if (!jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      // validate the required field `user`
      User.validateJsonObject(jsonObj.getAsJsonObject("user"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Webinar.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Webinar' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Webinar> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Webinar.class));

       return (TypeAdapter<T>) new TypeAdapter<Webinar>() {
           @Override
           public void write(JsonWriter out, Webinar value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Webinar read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Webinar instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Webinar given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Webinar
  * @throws IOException if the JSON string is invalid with respect to Webinar
  */
  public static Webinar fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Webinar.class);
  }

 /**
  * Convert an instance of Webinar to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

