/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.OnDemandPromotion;
import com.konfigthis.client.model.OnDemandPromotionCode;
import com.konfigthis.client.model.OnDemandPromotionsAddPromotionToPageRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OnDemandPromotionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OnDemandPromotionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OnDemandPromotionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addPromotionToPageCall(Double ondemandId, OnDemandPromotionsAddPromotionToPageRequest onDemandPromotionsAddPromotionToPageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = onDemandPromotionsAddPromotionToPageRequest;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/promotions"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.promotion+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.ondemand.promotion+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPromotionToPageValidateBeforeCall(Double ondemandId, OnDemandPromotionsAddPromotionToPageRequest onDemandPromotionsAddPromotionToPageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling addPromotionToPage(Async)");
        }

        // verify the required parameter 'onDemandPromotionsAddPromotionToPageRequest' is set
        if (onDemandPromotionsAddPromotionToPageRequest == null) {
            throw new ApiException("Missing the required parameter 'onDemandPromotionsAddPromotionToPageRequest' when calling addPromotionToPage(Async)");
        }

        return addPromotionToPageCall(ondemandId, onDemandPromotionsAddPromotionToPageRequest, _callback);

    }


    private ApiResponse<OnDemandPromotion> addPromotionToPageWithHttpInfo(Double ondemandId, OnDemandPromotionsAddPromotionToPageRequest onDemandPromotionsAddPromotionToPageRequest) throws ApiException {
        okhttp3.Call localVarCall = addPromotionToPageValidateBeforeCall(ondemandId, onDemandPromotionsAddPromotionToPageRequest, null);
        Type localVarReturnType = new TypeToken<OnDemandPromotion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addPromotionToPageAsync(Double ondemandId, OnDemandPromotionsAddPromotionToPageRequest onDemandPromotionsAddPromotionToPageRequest, final ApiCallback<OnDemandPromotion> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPromotionToPageValidateBeforeCall(ondemandId, onDemandPromotionsAddPromotionToPageRequest, _callback);
        Type localVarReturnType = new TypeToken<OnDemandPromotion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddPromotionToPageRequestBuilder {
        private final Boolean download;
        private final String streamPeriod;
        private final Double total;
        private final String type;
        private final Double ondemandId;
        private String accessType;
        private String code;
        private String discountType;
        private String endTime;
        private String label;
        private Double percentOff;
        private String productType;
        private String startTime;

        private AddPromotionToPageRequestBuilder(Boolean download, String streamPeriod, double total, String type, double ondemandId) {
            this.download = download;
            this.streamPeriod = streamPeriod;
            this.total = total;
            this.type = type;
            this.ondemandId = ondemandId;
        }

        /**
         * Set accessType
         * @param accessType The promotion access type, which is a purchase option that isn&#39;t available in the On Demand container. Use the **download** and **stream_period** parameters to define additional characteristics for the &#x60;vip&#x60; type.  Option descriptions:  * &#x60;default&#x60; - The promotion grants a discount on the existing purchase options for an On Demand container.  * &#x60;vip&#x60; - The promotion grants free access to On Demand content before it&#39;s released.  (optional)
         * @return AddPromotionToPageRequestBuilder
         */
        public AddPromotionToPageRequestBuilder accessType(String accessType) {
            this.accessType = accessType;
            return this;
        }
        
        /**
         * Set code
         * @param code The promotion code. This parameter is ignored when the promotion type is &#x60;batch&#x60;. (optional)
         * @return AddPromotionToPageRequestBuilder
         */
        public AddPromotionToPageRequestBuilder code(String code) {
            this.code = code;
            return this;
        }
        
        /**
         * Set discountType
         * @param discountType The type of discount offered by the promotion code. When **access_type** is &#x60;vip&#x60;, the value of this parameter must be &#x60;free&#x60;.  Option descriptions:  * &#x60;free&#x60; - The discount reduces the price to zero.  * &#x60;percent&#x60; - The discount reduces the price by the percentage defined in the **percent_off** parameter.  (optional)
         * @return AddPromotionToPageRequestBuilder
         */
        public AddPromotionToPageRequestBuilder discountType(String discountType) {
            this.discountType = discountType;
            return this;
        }
        
        /**
         * Set endTime
         * @param endTime The time at which the promotion period ends. If this parameter has no value, the promotion never expires. (optional)
         * @return AddPromotionToPageRequestBuilder
         */
        public AddPromotionToPageRequestBuilder endTime(String endTime) {
            this.endTime = endTime;
            return this;
        }
        
        /**
         * Set label
         * @param label The description of the promotion when the promotion type is &#x60;batch&#x60;. This parameter is ignored when the promotion type is &#x60;single&#x60;. (optional)
         * @return AddPromotionToPageRequestBuilder
         */
        public AddPromotionToPageRequestBuilder label(String label) {
            this.label = label;
            return this;
        }
        
        /**
         * Set percentOff
         * @param percentOff The percentage of the discount. This parameter is applicable only when **discount_type** is &#x60;percent&#x60;. (optional)
         * @return AddPromotionToPageRequestBuilder
         */
        public AddPromotionToPageRequestBuilder percentOff(Double percentOff) {
            this.percentOff = percentOff;
            return this;
        }
        
        /**
         * Set productType
         * @param productType The type of transaction to which the promotion applies. When **access_type** is &#x60;default&#x60;, the default value is &#x60;any&#x60;. When **access_type** is &#x60;vip&#x60;, the default value is &#x60;rent&#x60; and the only valid product types are &#x60;buy&#x60; and &#x60;rent&#x60;.  Option descriptions:  * &#x60;any&#x60; - The promotion applies to any transaction.  * &#x60;buy&#x60; - The promotion applies only to purchased products.  * &#x60;buy_episode&#x60; - The promotion applies only to purchased episodes.  * &#x60;rent&#x60; - The promotion applies only to rented products.  * &#x60;rent_episode&#x60; - The promotion applies only to rented episodes.  * &#x60;subscribe&#x60; - The promotion applies only to subscriptions.  (optional)
         * @return AddPromotionToPageRequestBuilder
         */
        public AddPromotionToPageRequestBuilder productType(String productType) {
            this.productType = productType;
            return this;
        }
        
        /**
         * Set startTime
         * @param startTime The time at which the promotion period starts. If this parameter has no value, the start time defaults to the time at which the promotion was created. (optional)
         * @return AddPromotionToPageRequestBuilder
         */
        public AddPromotionToPageRequestBuilder startTime(String startTime) {
            this.startTime = startTime;
            return this;
        }
        
        /**
         * Build call for addPromotionToPage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The promotion was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OnDemandPromotionsAddPromotionToPageRequest onDemandPromotionsAddPromotionToPageRequest = buildBodyParams();
            return addPromotionToPageCall(ondemandId, onDemandPromotionsAddPromotionToPageRequest, _callback);
        }

        private OnDemandPromotionsAddPromotionToPageRequest buildBodyParams() {
            OnDemandPromotionsAddPromotionToPageRequest onDemandPromotionsAddPromotionToPageRequest = new OnDemandPromotionsAddPromotionToPageRequest();
            if (this.accessType != null)
            onDemandPromotionsAddPromotionToPageRequest.accessType(OnDemandPromotionsAddPromotionToPageRequest.AccessTypeEnum.fromValue(this.accessType));
            onDemandPromotionsAddPromotionToPageRequest.code(this.code);
            if (this.discountType != null)
            onDemandPromotionsAddPromotionToPageRequest.discountType(OnDemandPromotionsAddPromotionToPageRequest.DiscountTypeEnum.fromValue(this.discountType));
            onDemandPromotionsAddPromotionToPageRequest.download(this.download);
            onDemandPromotionsAddPromotionToPageRequest.endTime(this.endTime);
            onDemandPromotionsAddPromotionToPageRequest.label(this.label);
            onDemandPromotionsAddPromotionToPageRequest.percentOff(this.percentOff);
            if (this.productType != null)
            onDemandPromotionsAddPromotionToPageRequest.productType(OnDemandPromotionsAddPromotionToPageRequest.ProductTypeEnum.fromValue(this.productType));
            onDemandPromotionsAddPromotionToPageRequest.startTime(this.startTime);
            if (this.streamPeriod != null)
            onDemandPromotionsAddPromotionToPageRequest.streamPeriod(OnDemandPromotionsAddPromotionToPageRequest.StreamPeriodEnum.fromValue(this.streamPeriod));
            onDemandPromotionsAddPromotionToPageRequest.total(this.total);
            if (this.type != null)
            onDemandPromotionsAddPromotionToPageRequest.type(OnDemandPromotionsAddPromotionToPageRequest.TypeEnum.fromValue(this.type));
            return onDemandPromotionsAddPromotionToPageRequest;
        }

        /**
         * Execute addPromotionToPage request
         * @return OnDemandPromotion
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The promotion was added. </td><td>  -  </td></tr>
         </table>
         */
        public OnDemandPromotion execute() throws ApiException {
            OnDemandPromotionsAddPromotionToPageRequest onDemandPromotionsAddPromotionToPageRequest = buildBodyParams();
            ApiResponse<OnDemandPromotion> localVarResp = addPromotionToPageWithHttpInfo(ondemandId, onDemandPromotionsAddPromotionToPageRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addPromotionToPage request with HTTP info returned
         * @return ApiResponse&lt;OnDemandPromotion&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The promotion was added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OnDemandPromotion> executeWithHttpInfo() throws ApiException {
            OnDemandPromotionsAddPromotionToPageRequest onDemandPromotionsAddPromotionToPageRequest = buildBodyParams();
            return addPromotionToPageWithHttpInfo(ondemandId, onDemandPromotionsAddPromotionToPageRequest);
        }

        /**
         * Execute addPromotionToPage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The promotion was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OnDemandPromotion> _callback) throws ApiException {
            OnDemandPromotionsAddPromotionToPageRequest onDemandPromotionsAddPromotionToPageRequest = buildBodyParams();
            return addPromotionToPageAsync(ondemandId, onDemandPromotionsAddPromotionToPageRequest, _callback);
        }
    }

    /**
     * Add a promotion to an On Demand page
     * This method adds a promotion to the specified On Demand page. The authenticated user must be the owner of the page.
     * @param ondemandId The ID of the On Demand page. (required)
     * @param onDemandPromotionsAddPromotionToPageRequest  (required)
     * @return AddPromotionToPageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The promotion was added. </td><td>  -  </td></tr>
     </table>
     */
    public AddPromotionToPageRequestBuilder addPromotionToPage(Boolean download, String streamPeriod, double total, String type, double ondemandId) throws IllegalArgumentException {
        if (download == null) throw new IllegalArgumentException("\"download\" is required but got null");
        if (streamPeriod == null) throw new IllegalArgumentException("\"streamPeriod\" is required but got null");
            

        
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        
        return new AddPromotionToPageRequestBuilder(download, streamPeriod, total, type, ondemandId);
    }
    private okhttp3.Call deletePromotionOnPageCall(Double ondemandId, Double promotionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/promotions/{promotion_id}"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()))
            .replace("{" + "promotion_id" + "}", localVarApiClient.escapeString(promotionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePromotionOnPageValidateBeforeCall(Double ondemandId, Double promotionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling deletePromotionOnPage(Async)");
        }

        // verify the required parameter 'promotionId' is set
        if (promotionId == null) {
            throw new ApiException("Missing the required parameter 'promotionId' when calling deletePromotionOnPage(Async)");
        }

        return deletePromotionOnPageCall(ondemandId, promotionId, _callback);

    }


    private ApiResponse<Void> deletePromotionOnPageWithHttpInfo(Double ondemandId, Double promotionId) throws ApiException {
        okhttp3.Call localVarCall = deletePromotionOnPageValidateBeforeCall(ondemandId, promotionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deletePromotionOnPageAsync(Double ondemandId, Double promotionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePromotionOnPageValidateBeforeCall(ondemandId, promotionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeletePromotionOnPageRequestBuilder {
        private final Double ondemandId;
        private final Double promotionId;

        private DeletePromotionOnPageRequestBuilder(double ondemandId, double promotionId) {
            this.ondemandId = ondemandId;
            this.promotionId = promotionId;
        }

        /**
         * Build call for deletePromotionOnPage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The promotion was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePromotionOnPageCall(ondemandId, promotionId, _callback);
        }


        /**
         * Execute deletePromotionOnPage request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The promotion was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deletePromotionOnPageWithHttpInfo(ondemandId, promotionId);
        }

        /**
         * Execute deletePromotionOnPage request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The promotion was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deletePromotionOnPageWithHttpInfo(ondemandId, promotionId);
        }

        /**
         * Execute deletePromotionOnPage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The promotion was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deletePromotionOnPageAsync(ondemandId, promotionId, _callback);
        }
    }

    /**
     * Delete a promotion on an On Demand page
     * This method deletes a promotion on the specified On Demand page. The authenticated user must be the owner of the page.
     * @param ondemandId The ID of the On Demand page. (required)
     * @param promotionId The ID of the promotion. (required)
     * @return DeletePromotionOnPageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The promotion was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public DeletePromotionOnPageRequestBuilder deletePromotionOnPage(double ondemandId, double promotionId) throws IllegalArgumentException {
        
        
        return new DeletePromotionOnPageRequestBuilder(ondemandId, promotionId);
    }
    private okhttp3.Call getAllPagePromotionsCall(Double ondemandId, String filter, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/promotions"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.promotion+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPagePromotionsValidateBeforeCall(Double ondemandId, String filter, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling getAllPagePromotions(Async)");
        }

        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling getAllPagePromotions(Async)");
        }

        return getAllPagePromotionsCall(ondemandId, filter, page, perPage, _callback);

    }


    private ApiResponse<OnDemandPromotion> getAllPagePromotionsWithHttpInfo(Double ondemandId, String filter, Double page, Double perPage) throws ApiException {
        okhttp3.Call localVarCall = getAllPagePromotionsValidateBeforeCall(ondemandId, filter, page, perPage, null);
        Type localVarReturnType = new TypeToken<OnDemandPromotion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllPagePromotionsAsync(Double ondemandId, String filter, Double page, Double perPage, final ApiCallback<OnDemandPromotion> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPagePromotionsValidateBeforeCall(ondemandId, filter, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<OnDemandPromotion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllPagePromotionsRequestBuilder {
        private final Double ondemandId;
        private final String filter;
        private Double page;
        private Double perPage;

        private GetAllPagePromotionsRequestBuilder(double ondemandId, String filter) {
            this.ondemandId = ondemandId;
            this.filter = filter;
        }

        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetAllPagePromotionsRequestBuilder
         */
        public GetAllPagePromotionsRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetAllPagePromotionsRequestBuilder
         */
        public GetAllPagePromotionsRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getAllPagePromotions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The promotions were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllPagePromotionsCall(ondemandId, filter, page, perPage, _callback);
        }


        /**
         * Execute getAllPagePromotions request
         * @return OnDemandPromotion
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The promotions were returned. </td><td>  -  </td></tr>
         </table>
         */
        public OnDemandPromotion execute() throws ApiException {
            ApiResponse<OnDemandPromotion> localVarResp = getAllPagePromotionsWithHttpInfo(ondemandId, filter, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllPagePromotions request with HTTP info returned
         * @return ApiResponse&lt;OnDemandPromotion&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The promotions were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OnDemandPromotion> executeWithHttpInfo() throws ApiException {
            return getAllPagePromotionsWithHttpInfo(ondemandId, filter, page, perPage);
        }

        /**
         * Execute getAllPagePromotions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The promotions were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OnDemandPromotion> _callback) throws ApiException {
            return getAllPagePromotionsAsync(ondemandId, filter, page, perPage, _callback);
        }
    }

    /**
     * Get all the promotions on an On Demand page
     * This method returns every promotion on the specified On Demand page. The authenticated user must be the owner of the page.
     * @param ondemandId The ID of the On Demand page. (required)
     * @param filter The type of filter to apply to the results.  Option descriptions:  * &#x60;batch&#x60; - Filter the results by the &#x60;batch&#x60; promotion.  * &#x60;default&#x60; - Filter the results by the default promotion.  * &#x60;single&#x60; - Filter the results by the &#x60;single&#x60; promotion.  * &#x60;vip&#x60; - Filter the results by the &#x60;vip&#x60; promotion.  (required)
     * @return GetAllPagePromotionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The promotions were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllPagePromotionsRequestBuilder getAllPagePromotions(double ondemandId, String filter) throws IllegalArgumentException {
        
        if (filter == null) throw new IllegalArgumentException("\"filter\" is required but got null");
            

        return new GetAllPagePromotionsRequestBuilder(ondemandId, filter);
    }
    private okhttp3.Call getAllPromotionCodesCall(Double ondemandId, Double promotionId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/promotions/{promotion_id}/codes"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()))
            .replace("{" + "promotion_id" + "}", localVarApiClient.escapeString(promotionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.promocode+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPromotionCodesValidateBeforeCall(Double ondemandId, Double promotionId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling getAllPromotionCodes(Async)");
        }

        // verify the required parameter 'promotionId' is set
        if (promotionId == null) {
            throw new ApiException("Missing the required parameter 'promotionId' when calling getAllPromotionCodes(Async)");
        }

        return getAllPromotionCodesCall(ondemandId, promotionId, page, perPage, _callback);

    }


    private ApiResponse<OnDemandPromotionCode> getAllPromotionCodesWithHttpInfo(Double ondemandId, Double promotionId, Double page, Double perPage) throws ApiException {
        okhttp3.Call localVarCall = getAllPromotionCodesValidateBeforeCall(ondemandId, promotionId, page, perPage, null);
        Type localVarReturnType = new TypeToken<OnDemandPromotionCode>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllPromotionCodesAsync(Double ondemandId, Double promotionId, Double page, Double perPage, final ApiCallback<OnDemandPromotionCode> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPromotionCodesValidateBeforeCall(ondemandId, promotionId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<OnDemandPromotionCode>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllPromotionCodesRequestBuilder {
        private final Double ondemandId;
        private final Double promotionId;
        private Double page;
        private Double perPage;

        private GetAllPromotionCodesRequestBuilder(double ondemandId, double promotionId) {
            this.ondemandId = ondemandId;
            this.promotionId = promotionId;
        }

        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetAllPromotionCodesRequestBuilder
         */
        public GetAllPromotionCodesRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetAllPromotionCodesRequestBuilder
         */
        public GetAllPromotionCodesRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getAllPromotionCodes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The codes were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllPromotionCodesCall(ondemandId, promotionId, page, perPage, _callback);
        }


        /**
         * Execute getAllPromotionCodes request
         * @return OnDemandPromotionCode
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The codes were returned. </td><td>  -  </td></tr>
         </table>
         */
        public OnDemandPromotionCode execute() throws ApiException {
            ApiResponse<OnDemandPromotionCode> localVarResp = getAllPromotionCodesWithHttpInfo(ondemandId, promotionId, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllPromotionCodes request with HTTP info returned
         * @return ApiResponse&lt;OnDemandPromotionCode&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The codes were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OnDemandPromotionCode> executeWithHttpInfo() throws ApiException {
            return getAllPromotionCodesWithHttpInfo(ondemandId, promotionId, page, perPage);
        }

        /**
         * Execute getAllPromotionCodes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The codes were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OnDemandPromotionCode> _callback) throws ApiException {
            return getAllPromotionCodesAsync(ondemandId, promotionId, page, perPage, _callback);
        }
    }

    /**
     * Get all the codes of a promotion on an On Demand page
     * This method returns every code of the specified promotion on an On Demand page. The authenticated user must be the owner of the page.
     * @param ondemandId The ID of the On Demand page. (required)
     * @param promotionId The ID of the promotion. (required)
     * @return GetAllPromotionCodesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The codes were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllPromotionCodesRequestBuilder getAllPromotionCodes(double ondemandId, double promotionId) throws IllegalArgumentException {
        
        
        return new GetAllPromotionCodesRequestBuilder(ondemandId, promotionId);
    }
    private okhttp3.Call specificPromotionGetCall(Double ondemandId, Double promotionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/promotions/{promotion_id}"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()))
            .replace("{" + "promotion_id" + "}", localVarApiClient.escapeString(promotionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.promotion+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call specificPromotionGetValidateBeforeCall(Double ondemandId, Double promotionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling specificPromotionGet(Async)");
        }

        // verify the required parameter 'promotionId' is set
        if (promotionId == null) {
            throw new ApiException("Missing the required parameter 'promotionId' when calling specificPromotionGet(Async)");
        }

        return specificPromotionGetCall(ondemandId, promotionId, _callback);

    }


    private ApiResponse<OnDemandPromotion> specificPromotionGetWithHttpInfo(Double ondemandId, Double promotionId) throws ApiException {
        okhttp3.Call localVarCall = specificPromotionGetValidateBeforeCall(ondemandId, promotionId, null);
        Type localVarReturnType = new TypeToken<OnDemandPromotion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call specificPromotionGetAsync(Double ondemandId, Double promotionId, final ApiCallback<OnDemandPromotion> _callback) throws ApiException {

        okhttp3.Call localVarCall = specificPromotionGetValidateBeforeCall(ondemandId, promotionId, _callback);
        Type localVarReturnType = new TypeToken<OnDemandPromotion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SpecificPromotionGetRequestBuilder {
        private final Double ondemandId;
        private final Double promotionId;

        private SpecificPromotionGetRequestBuilder(double ondemandId, double promotionId) {
            this.ondemandId = ondemandId;
            this.promotionId = promotionId;
        }

        /**
         * Build call for specificPromotionGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The promotion was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return specificPromotionGetCall(ondemandId, promotionId, _callback);
        }


        /**
         * Execute specificPromotionGet request
         * @return OnDemandPromotion
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The promotion was returned. </td><td>  -  </td></tr>
         </table>
         */
        public OnDemandPromotion execute() throws ApiException {
            ApiResponse<OnDemandPromotion> localVarResp = specificPromotionGetWithHttpInfo(ondemandId, promotionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute specificPromotionGet request with HTTP info returned
         * @return ApiResponse&lt;OnDemandPromotion&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The promotion was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OnDemandPromotion> executeWithHttpInfo() throws ApiException {
            return specificPromotionGetWithHttpInfo(ondemandId, promotionId);
        }

        /**
         * Execute specificPromotionGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The promotion was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OnDemandPromotion> _callback) throws ApiException {
            return specificPromotionGetAsync(ondemandId, promotionId, _callback);
        }
    }

    /**
     * Get a specific promotion on an On Demand page
     * This method returns a single promotion on the specified On Demand page. The authenticated user must be the owner of the page.
     * @param ondemandId The ID of the On Demand page. (required)
     * @param promotionId The ID of the promotion. (required)
     * @return SpecificPromotionGetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The promotion was returned. </td><td>  -  </td></tr>
     </table>
     */
    public SpecificPromotionGetRequestBuilder specificPromotionGet(double ondemandId, double promotionId) throws IllegalArgumentException {
        
        
        return new SpecificPromotionGetRequestBuilder(ondemandId, promotionId);
    }
}
