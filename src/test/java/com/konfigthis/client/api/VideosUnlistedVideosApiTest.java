/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.User;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VideosUnlistedVideosApi
 */
@Disabled
public class VideosUnlistedVideosApiTest {

    private static VideosUnlistedVideosApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new VideosUnlistedVideosApi(apiClient);
    }

    /**
     * Permit a list of users to access an unlisted video
     *
     * This method gives multiple users permission to access the specified unlisted video. The authenticated user must be the owner of the video. The body of the request should follow our [batch request format](https://developer.vimeo.com/api/common-formats#working-with-batch-requests): each object must contain a single **uri** field whose value is the URI of the user who can access the video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void grantAccessToUsersTest() throws ApiException {
        Double channelId = null;
        Double videoId = null;
        List<User> response = api.grantAccessToUsers(channelId, videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Permit a list of users to access an unlisted video
     *
     * This method gives multiple users permission to access the specified unlisted video. The authenticated user must be the owner of the video. The body of the request should follow our [batch request format](https://developer.vimeo.com/api/common-formats#working-with-batch-requests): each object must contain a single **uri** field whose value is the URI of the user who can access the video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void grantAccessToUsers_0Test() throws ApiException {
        Double videoId = null;
        List<User> response = api.grantAccessToUsers_0(videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Permit a single user to access an unlisted video
     *
     * This method gives a single user permission to access the specified unlisted video. The authenticated user must be the owner of the video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void grantUserAccessTest() throws ApiException {
        Double userId = null;
        Double videoId = null;
        User response = api.grantUserAccess(userId, videoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the users who can access an unlisted video
     *
     * This method returns every user who has access to the specified unlisted video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAccessibleUsersTest() throws ApiException {
        Double channelId = null;
        Double videoId = null;
        Double page = null;
        Double perPage = null;
        List<User> response = api.listAccessibleUsers(channelId, videoId)
                .page(page)
                .perPage(perPage)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the users who can access an unlisted video
     *
     * This method returns every user who has access to the specified unlisted video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAccessibleUsers_0Test() throws ApiException {
        Double videoId = null;
        Double page = null;
        Double perPage = null;
        List<User> response = api.listAccessibleUsers_0(videoId)
                .page(page)
                .perPage(perPage)
                .execute();
        // TODO: test validations
    }

    /**
     * Restrict a user from viewing an unlisted video
     *
     * This method prevents a user from being able to view the specified unlisted video. The authenticated user must be the owner of the video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restrictUserAccessTest() throws ApiException {
        Double userId = null;
        Double videoId = null;
        api.restrictUserAccess(userId, videoId)
                .execute();
        // TODO: test validations
    }

}
