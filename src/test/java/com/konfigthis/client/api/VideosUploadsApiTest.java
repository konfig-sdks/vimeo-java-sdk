/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.UploadAttempt;
import com.konfigthis.client.model.UploadVideoRequest;
import com.konfigthis.client.model.UploadVideoRequestEmbed;
import com.konfigthis.client.model.UploadVideoRequestPrivacy;
import com.konfigthis.client.model.UploadVideoRequestReviewPage;
import com.konfigthis.client.model.UploadVideoRequestSpatial;
import com.konfigthis.client.model.UploadVideoRequestUpload;
import com.konfigthis.client.model.Video;
import com.konfigthis.client.model.VideosUploadsBeginVideoUploadProcessRequest;
import com.konfigthis.client.model.VideosUploadsBeginVideoUploadProcessRequestEmbed;
import com.konfigthis.client.model.VideosUploadsBeginVideoUploadProcessRequestPrivacy;
import com.konfigthis.client.model.VideosUploadsBeginVideoUploadProcessRequestReviewPage;
import com.konfigthis.client.model.VideosUploadsBeginVideoUploadProcessRequestSpatial;
import com.konfigthis.client.model.VideosUploadsBeginVideoUploadProcessRequestUpload;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VideosUploadsApi
 */
@Disabled
public class VideosUploadsApiTest {

    private static VideosUploadsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new VideosUploadsApi(apiClient);
    }

    /**
     * Upload a video
     *
     * This method begins the video upload process for the authenticated user. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void beginVideoUploadProcessTest() throws ApiException {
        VideosUploadsBeginVideoUploadProcessRequestUpload upload = null;
        String description = null;
        List<String> contentRating = null;
        VideosUploadsBeginVideoUploadProcessRequestEmbed embed = null;
        List<String> embedDomains = null;
        String folderUri = null;
        Boolean hideFromVimeo = null;
        String license = null;
        String locale = null;
        String name = null;
        String password = null;
        VideosUploadsBeginVideoUploadProcessRequestPrivacy privacy = null;
        VideosUploadsBeginVideoUploadProcessRequestReviewPage reviewPage = null;
        VideosUploadsBeginVideoUploadProcessRequestSpatial spatial = null;
        Video response = api.beginVideoUploadProcess(upload)
                .description(description)
                .contentRating(contentRating)
                .embed(embed)
                .embedDomains(embedDomains)
                .folderUri(folderUri)
                .hideFromVimeo(hideFromVimeo)
                .license(license)
                .locale(locale)
                .name(name)
                .password(password)
                .privacy(privacy)
                .reviewPage(reviewPage)
                .spatial(spatial)
                .execute();
        // TODO: test validations
    }

    /**
     * Complete a streaming upload
     *
     * This method completes the specified streaming upload of the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void completeStreamingUploadTest() throws ApiException {
        Double uploadId = null;
        Double userId = null;
        String signature = null;
        Double videoFileId = null;
        api.completeStreamingUpload(uploadId, userId, signature, videoFileId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an upload attempt
     *
     * This method returns the specified upload attempt of the authenticated user. _This method has been deprecated. For information on our currently supported upload approaches, see our [Working with Video Uploads](https://developer.vimeo.com/api/upload/videos) guide._
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUploadAttemptTest() throws ApiException {
        Double uploadId = null;
        Double userId = null;
        UploadAttempt response = api.getUploadAttempt(uploadId, userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Upload a video
     *
     * This method begins the video upload process for the authenticated user. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void videoTest() throws ApiException {
        UploadVideoRequestUpload upload = null;
        Double userId = null;
        String description = null;
        List<String> contentRating = null;
        UploadVideoRequestEmbed embed = null;
        List<String> embedDomains = null;
        String folderUri = null;
        Boolean hideFromVimeo = null;
        String license = null;
        String locale = null;
        String name = null;
        String password = null;
        UploadVideoRequestPrivacy privacy = null;
        UploadVideoRequestReviewPage reviewPage = null;
        UploadVideoRequestSpatial spatial = null;
        Video response = api.video(upload, userId)
                .description(description)
                .contentRating(contentRating)
                .embed(embed)
                .embedDomains(embedDomains)
                .folderUri(folderUri)
                .hideFromVimeo(hideFromVimeo)
                .license(license)
                .locale(locale)
                .name(name)
                .password(password)
                .privacy(privacy)
                .reviewPage(reviewPage)
                .spatial(spatial)
                .execute();
        // TODO: test validations
    }

}
