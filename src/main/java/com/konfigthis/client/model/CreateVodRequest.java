/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CreateVodRequestBuy;
import com.konfigthis.client.model.CreateVodRequestEpisodes;
import com.konfigthis.client.model.CreateVodRequestRent;
import com.konfigthis.client.model.CreateVodRequestSubscription;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CreateVodRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CreateVodRequest {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * An array of accepted currencies.  Option descriptions:  * &#x60;AUD&#x60; - The currency is in Australian dollars.  * &#x60;CAD&#x60; - The currency is in Canadian dollars.  * &#x60;CHF&#x60; - The currency is in Swiss francs.  * &#x60;DKK&#x60; - The currency is in Danish krone.  * &#x60;EUR&#x60; - The currency is in euros.  * &#x60;GBP&#x60; - The currency is in British pounds.  * &#x60;JPY&#x60; - The currency is in Japanese yen.  * &#x60;KRW&#x60; - The currency is in South Korean won.  * &#x60;NOK&#x60; - The currency is in Norwegian krone.  * &#x60;PLN&#x60; - The currency is in Polish zloty.  * &#x60;SEK&#x60; - The currency is in Swedish krona.  * &#x60;USD&#x60; - The currency is in United States dollars. 
   */
  @JsonAdapter(AcceptedCurrenciesEnum.Adapter.class)
 public enum AcceptedCurrenciesEnum {
    AUD("AUD"),
    
    CAD("CAD"),
    
    CHF("CHF"),
    
    DKK("DKK"),
    
    EUR("EUR"),
    
    GBP("GBP"),
    
    JPY("JPY"),
    
    KRW("KRW"),
    
    NOK("NOK"),
    
    PLN("PLN"),
    
    SEK("SEK"),
    
    USD("USD");

    private String value;

    AcceptedCurrenciesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AcceptedCurrenciesEnum fromValue(String value) {
      for (AcceptedCurrenciesEnum b : AcceptedCurrenciesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AcceptedCurrenciesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AcceptedCurrenciesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AcceptedCurrenciesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AcceptedCurrenciesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACCEPTED_CURRENCIES = "accepted_currencies";
  @SerializedName(SERIALIZED_NAME_ACCEPTED_CURRENCIES)
  private AcceptedCurrenciesEnum acceptedCurrencies;

  public static final String SERIALIZED_NAME_BUY = "buy";
  @SerializedName(SERIALIZED_NAME_BUY)
  private CreateVodRequestBuy buy;

  /**
   * The content rating of the video, given either as a comma-separated list or as a JSON array, depending on the request format.  Option descriptions:  * &#x60;drugs&#x60; - The video contains drug or alcohol use.  * &#x60;language&#x60; - The video contains profanity or sexually suggestive content.  * &#x60;nudity&#x60; - The video contains nudity.  * &#x60;safe&#x60; - The video is suitable for all audiences.  * &#x60;unrated&#x60; - The video hasn&#39;t been rated.  * &#x60;violence&#x60; - The video contains violent or graphic content. 
   */
  @JsonAdapter(ContentRatingEnum.Adapter.class)
 public enum ContentRatingEnum {
    DRUGS("drugs"),
    
    LANGUAGE("language"),
    
    NUDITY("nudity"),
    
    SAFE("safe"),
    
    UNRATED("unrated"),
    
    VIOLENCE("violence");

    private String value;

    ContentRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentRatingEnum fromValue(String value) {
      for (ContentRatingEnum b : ContentRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContentRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContentRatingEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CONTENT_RATING = "content_rating";
  @SerializedName(SERIALIZED_NAME_CONTENT_RATING)
  private ContentRatingEnum contentRating;

  public static final String SERIALIZED_NAME_DOMAIN_LINK = "domain_link";
  @SerializedName(SERIALIZED_NAME_DOMAIN_LINK)
  private String domainLink;

  public static final String SERIALIZED_NAME_EPISODES = "episodes";
  @SerializedName(SERIALIZED_NAME_EPISODES)
  private CreateVodRequestEpisodes episodes;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RENT = "rent";
  @SerializedName(SERIALIZED_NAME_RENT)
  private CreateVodRequestRent rent;

  public static final String SERIALIZED_NAME_SUBSCRIPTION = "subscription";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION)
  private CreateVodRequestSubscription subscription;

  /**
   * The type of the On Demand page.  Option descriptions:  * &#x60;film&#x60; - The On Demand page is a film.  * &#x60;series&#x60; - The On Demand page is a series. 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    FILM("film"),
    
    SERIES("series");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public CreateVodRequest() {
  }

  public CreateVodRequest description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * The description of the On Demand page.
   * @return description
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "DARBY FOREVER follows the fantasies of Darby, a shopgirl at \"Bobbins & Notions\".", required = true, value = "The description of the On Demand page.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public CreateVodRequest acceptedCurrencies(AcceptedCurrenciesEnum acceptedCurrencies) {
    
    
    
    
    this.acceptedCurrencies = acceptedCurrencies;
    return this;
  }

   /**
   * An array of accepted currencies.  Option descriptions:  * &#x60;AUD&#x60; - The currency is in Australian dollars.  * &#x60;CAD&#x60; - The currency is in Canadian dollars.  * &#x60;CHF&#x60; - The currency is in Swiss francs.  * &#x60;DKK&#x60; - The currency is in Danish krone.  * &#x60;EUR&#x60; - The currency is in euros.  * &#x60;GBP&#x60; - The currency is in British pounds.  * &#x60;JPY&#x60; - The currency is in Japanese yen.  * &#x60;KRW&#x60; - The currency is in South Korean won.  * &#x60;NOK&#x60; - The currency is in Norwegian krone.  * &#x60;PLN&#x60; - The currency is in Polish zloty.  * &#x60;SEK&#x60; - The currency is in Swedish krona.  * &#x60;USD&#x60; - The currency is in United States dollars. 
   * @return acceptedCurrencies
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of accepted currencies.  Option descriptions:  * `AUD` - The currency is in Australian dollars.  * `CAD` - The currency is in Canadian dollars.  * `CHF` - The currency is in Swiss francs.  * `DKK` - The currency is in Danish krone.  * `EUR` - The currency is in euros.  * `GBP` - The currency is in British pounds.  * `JPY` - The currency is in Japanese yen.  * `KRW` - The currency is in South Korean won.  * `NOK` - The currency is in Norwegian krone.  * `PLN` - The currency is in Polish zloty.  * `SEK` - The currency is in Swedish krona.  * `USD` - The currency is in United States dollars. ")

  public AcceptedCurrenciesEnum getAcceptedCurrencies() {
    return acceptedCurrencies;
  }


  public void setAcceptedCurrencies(AcceptedCurrenciesEnum acceptedCurrencies) {
    
    
    
    this.acceptedCurrencies = acceptedCurrencies;
  }


  public CreateVodRequest buy(CreateVodRequestBuy buy) {
    
    
    
    
    this.buy = buy;
    return this;
  }

   /**
   * Get buy
   * @return buy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CreateVodRequestBuy getBuy() {
    return buy;
  }


  public void setBuy(CreateVodRequestBuy buy) {
    
    
    
    this.buy = buy;
  }


  public CreateVodRequest contentRating(ContentRatingEnum contentRating) {
    
    
    
    
    this.contentRating = contentRating;
    return this;
  }

   /**
   * The content rating of the video, given either as a comma-separated list or as a JSON array, depending on the request format.  Option descriptions:  * &#x60;drugs&#x60; - The video contains drug or alcohol use.  * &#x60;language&#x60; - The video contains profanity or sexually suggestive content.  * &#x60;nudity&#x60; - The video contains nudity.  * &#x60;safe&#x60; - The video is suitable for all audiences.  * &#x60;unrated&#x60; - The video hasn&#39;t been rated.  * &#x60;violence&#x60; - The video contains violent or graphic content. 
   * @return contentRating
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The content rating of the video, given either as a comma-separated list or as a JSON array, depending on the request format.  Option descriptions:  * `drugs` - The video contains drug or alcohol use.  * `language` - The video contains profanity or sexually suggestive content.  * `nudity` - The video contains nudity.  * `safe` - The video is suitable for all audiences.  * `unrated` - The video hasn't been rated.  * `violence` - The video contains violent or graphic content. ")

  public ContentRatingEnum getContentRating() {
    return contentRating;
  }


  public void setContentRating(ContentRatingEnum contentRating) {
    
    
    
    this.contentRating = contentRating;
  }


  public CreateVodRequest domainLink(String domainLink) {
    
    
    
    
    this.domainLink = domainLink;
    return this;
  }

   /**
   * The custom domain of the On Demand page.
   * @return domainLink
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://example.com", value = "The custom domain of the On Demand page.")

  public String getDomainLink() {
    return domainLink;
  }


  public void setDomainLink(String domainLink) {
    
    
    
    this.domainLink = domainLink;
  }


  public CreateVodRequest episodes(CreateVodRequestEpisodes episodes) {
    
    
    
    
    this.episodes = episodes;
    return this;
  }

   /**
   * Get episodes
   * @return episodes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CreateVodRequestEpisodes getEpisodes() {
    return episodes;
  }


  public void setEpisodes(CreateVodRequestEpisodes episodes) {
    
    
    
    this.episodes = episodes;
  }


  public CreateVodRequest link(String link) {
    
    
    
    
    this.link = link;
    return this;
  }

   /**
   * The custom string to use in the Vimeo URL of the On Demand page.
   * @return link
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "darbyforever", value = "The custom string to use in the Vimeo URL of the On Demand page.")

  public String getLink() {
    return link;
  }


  public void setLink(String link) {
    
    
    
    this.link = link;
  }


  public CreateVodRequest name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The name of the On Demand page.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Darby Forever", required = true, value = "The name of the On Demand page.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public CreateVodRequest rent(CreateVodRequestRent rent) {
    
    
    
    
    this.rent = rent;
    return this;
  }

   /**
   * Get rent
   * @return rent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CreateVodRequestRent getRent() {
    return rent;
  }


  public void setRent(CreateVodRequestRent rent) {
    
    
    
    this.rent = rent;
  }


  public CreateVodRequest subscription(CreateVodRequestSubscription subscription) {
    
    
    
    
    this.subscription = subscription;
    return this;
  }

   /**
   * Get subscription
   * @return subscription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CreateVodRequestSubscription getSubscription() {
    return subscription;
  }


  public void setSubscription(CreateVodRequestSubscription subscription) {
    
    
    
    this.subscription = subscription;
  }


  public CreateVodRequest type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * The type of the On Demand page.  Option descriptions:  * &#x60;film&#x60; - The On Demand page is a film.  * &#x60;series&#x60; - The On Demand page is a series. 
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of the On Demand page.  Option descriptions:  * `film` - The On Demand page is a film.  * `series` - The On Demand page is a series. ")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CreateVodRequest instance itself
   */
  public CreateVodRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateVodRequest createVodRequest = (CreateVodRequest) o;
    return Objects.equals(this.description, createVodRequest.description) &&
        Objects.equals(this.acceptedCurrencies, createVodRequest.acceptedCurrencies) &&
        Objects.equals(this.buy, createVodRequest.buy) &&
        Objects.equals(this.contentRating, createVodRequest.contentRating) &&
        Objects.equals(this.domainLink, createVodRequest.domainLink) &&
        Objects.equals(this.episodes, createVodRequest.episodes) &&
        Objects.equals(this.link, createVodRequest.link) &&
        Objects.equals(this.name, createVodRequest.name) &&
        Objects.equals(this.rent, createVodRequest.rent) &&
        Objects.equals(this.subscription, createVodRequest.subscription) &&
        Objects.equals(this.type, createVodRequest.type)&&
        Objects.equals(this.additionalProperties, createVodRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, acceptedCurrencies, buy, contentRating, domainLink, episodes, link, name, rent, subscription, type, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateVodRequest {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    acceptedCurrencies: ").append(toIndentedString(acceptedCurrencies)).append("\n");
    sb.append("    buy: ").append(toIndentedString(buy)).append("\n");
    sb.append("    contentRating: ").append(toIndentedString(contentRating)).append("\n");
    sb.append("    domainLink: ").append(toIndentedString(domainLink)).append("\n");
    sb.append("    episodes: ").append(toIndentedString(episodes)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rent: ").append(toIndentedString(rent)).append("\n");
    sb.append("    subscription: ").append(toIndentedString(subscription)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("accepted_currencies");
    openapiFields.add("buy");
    openapiFields.add("content_rating");
    openapiFields.add("domain_link");
    openapiFields.add("episodes");
    openapiFields.add("link");
    openapiFields.add("name");
    openapiFields.add("rent");
    openapiFields.add("subscription");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("content_rating");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateVodRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CreateVodRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateVodRequest is not found in the empty JSON string", CreateVodRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateVodRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("accepted_currencies") != null && !jsonObj.get("accepted_currencies").isJsonNull()) && !jsonObj.get("accepted_currencies").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accepted_currencies` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accepted_currencies").toString()));
      }
      // validate the optional field `buy`
      if (jsonObj.get("buy") != null && !jsonObj.get("buy").isJsonNull()) {
        CreateVodRequestBuy.validateJsonObject(jsonObj.getAsJsonObject("buy"));
      }
      if (!jsonObj.get("content_rating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_rating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content_rating").toString()));
      }
      if ((jsonObj.get("domain_link") != null && !jsonObj.get("domain_link").isJsonNull()) && !jsonObj.get("domain_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain_link").toString()));
      }
      // validate the optional field `episodes`
      if (jsonObj.get("episodes") != null && !jsonObj.get("episodes").isJsonNull()) {
        CreateVodRequestEpisodes.validateJsonObject(jsonObj.getAsJsonObject("episodes"));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `rent`
      if (jsonObj.get("rent") != null && !jsonObj.get("rent").isJsonNull()) {
        CreateVodRequestRent.validateJsonObject(jsonObj.getAsJsonObject("rent"));
      }
      // validate the optional field `subscription`
      if (jsonObj.get("subscription") != null && !jsonObj.get("subscription").isJsonNull()) {
        CreateVodRequestSubscription.validateJsonObject(jsonObj.getAsJsonObject("subscription"));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateVodRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateVodRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateVodRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateVodRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateVodRequest>() {
           @Override
           public void write(JsonWriter out, CreateVodRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateVodRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CreateVodRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateVodRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateVodRequest
  * @throws IOException if the JSON string is invalid with respect to CreateVodRequest
  */
  public static CreateVodRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateVodRequest.class);
  }

 /**
  * Convert an instance of CreateVodRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

