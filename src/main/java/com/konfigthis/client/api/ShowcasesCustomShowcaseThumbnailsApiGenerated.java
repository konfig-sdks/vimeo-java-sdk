/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Picture;
import com.konfigthis.client.model.ShowcasesCustomShowcaseThumbnailsReplaceCustomThumbnailRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ShowcasesCustomShowcaseThumbnailsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ShowcasesCustomShowcaseThumbnailsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ShowcasesCustomShowcaseThumbnailsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addCustomThumbnailCall(Double albumId, Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}/custom_thumbnails"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCustomThumbnailValidateBeforeCall(Double albumId, Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling addCustomThumbnail(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling addCustomThumbnail(Async)");
        }

        return addCustomThumbnailCall(albumId, userId, _callback);

    }


    private ApiResponse<Picture> addCustomThumbnailWithHttpInfo(Double albumId, Double userId) throws ApiException {
        okhttp3.Call localVarCall = addCustomThumbnailValidateBeforeCall(albumId, userId, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addCustomThumbnailAsync(Double albumId, Double userId, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCustomThumbnailValidateBeforeCall(albumId, userId, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddCustomThumbnailRequestBuilder {
        private final Double albumId;
        private final Double userId;

        private AddCustomThumbnailRequestBuilder(double albumId, double userId) {
            this.albumId = albumId;
            this.userId = userId;
        }

        /**
         * Build call for addCustomThumbnail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The custom thumbnail was added to the showcase. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addCustomThumbnailCall(albumId, userId, _callback);
        }


        /**
         * Execute addCustomThumbnail request
         * @return Picture
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The custom thumbnail was added to the showcase. </td><td>  -  </td></tr>
         </table>
         */
        public Picture execute() throws ApiException {
            ApiResponse<Picture> localVarResp = addCustomThumbnailWithHttpInfo(albumId, userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addCustomThumbnail request with HTTP info returned
         * @return ApiResponse&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The custom thumbnail was added to the showcase. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Picture> executeWithHttpInfo() throws ApiException {
            return addCustomThumbnailWithHttpInfo(albumId, userId);
        }

        /**
         * Execute addCustomThumbnail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The custom thumbnail was added to the showcase. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Picture> _callback) throws ApiException {
            return addCustomThumbnailAsync(albumId, userId, _callback);
        }
    }

    /**
     * Add a custom thumbnail to a showcase
     * This method adds an uploaded image file as a custom thumbnail for the specified showcase. The image doesn&#39;t need to be a still from a showcase video, unlike with the [standard thumbnail method](https://developer.vimeo.com/api/reference/albums#set_video_as_album_thumbnail). The authenticated user must be the owner of the showcase.  For information on how to upload the thumbnail, see our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails) guide, and follow the same steps.
     * @param albumId The ID of the showcase. (required)
     * @param userId The ID of the user. (required)
     * @return AddCustomThumbnailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The custom thumbnail was added to the showcase. </td><td>  -  </td></tr>
     </table>
     */
    public AddCustomThumbnailRequestBuilder addCustomThumbnail(double albumId, double userId) throws IllegalArgumentException {
        
        
        return new AddCustomThumbnailRequestBuilder(albumId, userId);
    }
    private okhttp3.Call deleteCustomThumbnailCall(Double albumId, Double thumbnailId, Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}/custom_thumbnails/{thumbnail_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "thumbnail_id" + "}", localVarApiClient.escapeString(thumbnailId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCustomThumbnailValidateBeforeCall(Double albumId, Double thumbnailId, Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling deleteCustomThumbnail(Async)");
        }

        // verify the required parameter 'thumbnailId' is set
        if (thumbnailId == null) {
            throw new ApiException("Missing the required parameter 'thumbnailId' when calling deleteCustomThumbnail(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteCustomThumbnail(Async)");
        }

        return deleteCustomThumbnailCall(albumId, thumbnailId, userId, _callback);

    }


    private ApiResponse<Void> deleteCustomThumbnailWithHttpInfo(Double albumId, Double thumbnailId, Double userId) throws ApiException {
        okhttp3.Call localVarCall = deleteCustomThumbnailValidateBeforeCall(albumId, thumbnailId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteCustomThumbnailAsync(Double albumId, Double thumbnailId, Double userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCustomThumbnailValidateBeforeCall(albumId, thumbnailId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteCustomThumbnailRequestBuilder {
        private final Double albumId;
        private final Double thumbnailId;
        private final Double userId;

        private DeleteCustomThumbnailRequestBuilder(double albumId, double thumbnailId, double userId) {
            this.albumId = albumId;
            this.thumbnailId = thumbnailId;
            this.userId = userId;
        }

        /**
         * Build call for deleteCustomThumbnail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The custom thumbnail was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCustomThumbnailCall(albumId, thumbnailId, userId, _callback);
        }


        /**
         * Execute deleteCustomThumbnail request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The custom thumbnail was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteCustomThumbnailWithHttpInfo(albumId, thumbnailId, userId);
        }

        /**
         * Execute deleteCustomThumbnail request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The custom thumbnail was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteCustomThumbnailWithHttpInfo(albumId, thumbnailId, userId);
        }

        /**
         * Execute deleteCustomThumbnail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The custom thumbnail was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteCustomThumbnailAsync(albumId, thumbnailId, userId, _callback);
        }
    }

    /**
     * Delete a custom showcase thumbnail
     * This method deletes the specified custom thumbnail from its showcase. The authenticated user must be the owner of the showcase.
     * @param albumId The ID of the showcase. (required)
     * @param thumbnailId The ID of the custom thumbnail. (required)
     * @param userId The ID of the user. (required)
     * @return DeleteCustomThumbnailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The custom thumbnail was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCustomThumbnailRequestBuilder deleteCustomThumbnail(double albumId, double thumbnailId, double userId) throws IllegalArgumentException {
        
        
        
        return new DeleteCustomThumbnailRequestBuilder(albumId, thumbnailId, userId);
    }
    private okhttp3.Call getSpecificThumbnailCall(Double albumId, Double thumbnailId, Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}/custom_thumbnails/{thumbnail_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "thumbnail_id" + "}", localVarApiClient.escapeString(thumbnailId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificThumbnailValidateBeforeCall(Double albumId, Double thumbnailId, Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling getSpecificThumbnail(Async)");
        }

        // verify the required parameter 'thumbnailId' is set
        if (thumbnailId == null) {
            throw new ApiException("Missing the required parameter 'thumbnailId' when calling getSpecificThumbnail(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getSpecificThumbnail(Async)");
        }

        return getSpecificThumbnailCall(albumId, thumbnailId, userId, _callback);

    }


    private ApiResponse<Picture> getSpecificThumbnailWithHttpInfo(Double albumId, Double thumbnailId, Double userId) throws ApiException {
        okhttp3.Call localVarCall = getSpecificThumbnailValidateBeforeCall(albumId, thumbnailId, userId, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificThumbnailAsync(Double albumId, Double thumbnailId, Double userId, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificThumbnailValidateBeforeCall(albumId, thumbnailId, userId, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificThumbnailRequestBuilder {
        private final Double albumId;
        private final Double thumbnailId;
        private final Double userId;

        private GetSpecificThumbnailRequestBuilder(double albumId, double thumbnailId, double userId) {
            this.albumId = albumId;
            this.thumbnailId = thumbnailId;
            this.userId = userId;
        }

        /**
         * Build call for getSpecificThumbnail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The custom thumbnail was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificThumbnailCall(albumId, thumbnailId, userId, _callback);
        }


        /**
         * Execute getSpecificThumbnail request
         * @return Picture
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The custom thumbnail was returned. </td><td>  -  </td></tr>
         </table>
         */
        public Picture execute() throws ApiException {
            ApiResponse<Picture> localVarResp = getSpecificThumbnailWithHttpInfo(albumId, thumbnailId, userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificThumbnail request with HTTP info returned
         * @return ApiResponse&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The custom thumbnail was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Picture> executeWithHttpInfo() throws ApiException {
            return getSpecificThumbnailWithHttpInfo(albumId, thumbnailId, userId);
        }

        /**
         * Execute getSpecificThumbnail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The custom thumbnail was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Picture> _callback) throws ApiException {
            return getSpecificThumbnailAsync(albumId, thumbnailId, userId, _callback);
        }
    }

    /**
     * Get a specific custom showcase thumbnail
     * This method returns a single custom thumbnail of the specified showcase. The authenticated user must be the owner of the showcase.
     * @param albumId The ID of the showcase. (required)
     * @param thumbnailId The ID of the custom thumbnail. (required)
     * @param userId The ID of the user. (required)
     * @return GetSpecificThumbnailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom thumbnail was returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificThumbnailRequestBuilder getSpecificThumbnail(double albumId, double thumbnailId, double userId) throws IllegalArgumentException {
        
        
        
        return new GetSpecificThumbnailRequestBuilder(albumId, thumbnailId, userId);
    }
    private okhttp3.Call listCall(Double albumId, Double userId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}/custom_thumbnails"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(Double albumId, Double userId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling list(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling list(Async)");
        }

        return listCall(albumId, userId, page, perPage, _callback);

    }


    private ApiResponse<List<Picture>> listWithHttpInfo(Double albumId, Double userId, Double page, Double perPage) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(albumId, userId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(Double albumId, Double userId, Double page, Double perPage, final ApiCallback<List<Picture>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(albumId, userId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private final Double albumId;
        private final Double userId;
        private Double page;
        private Double perPage;

        private ListRequestBuilder(double albumId, double userId) {
            this.albumId = albumId;
            this.userId = userId;
        }

        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The custom thumbnails were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(albumId, userId, page, perPage, _callback);
        }


        /**
         * Execute list request
         * @return List&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The custom thumbnails were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Picture> execute() throws ApiException {
            ApiResponse<List<Picture>> localVarResp = listWithHttpInfo(albumId, userId, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Picture&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The custom thumbnails were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Picture>> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(albumId, userId, page, perPage);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The custom thumbnails were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Picture>> _callback) throws ApiException {
            return listAsync(albumId, userId, page, perPage, _callback);
        }
    }

    /**
     * Get all the custom thumbnails of a showcase
     * This method returns every custom thumbnail of the specified showcase. The authenticated user must be the owner of the showcase.
     * @param albumId The ID of the showcase. (required)
     * @param userId The ID of the user. (required)
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom thumbnails were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list(double albumId, double userId) throws IllegalArgumentException {
        
        
        return new ListRequestBuilder(albumId, userId);
    }
    private okhttp3.Call replaceCustomThumbnailCall(Double albumId, Double thumbnailId, Double userId, ShowcasesCustomShowcaseThumbnailsReplaceCustomThumbnailRequest showcasesCustomShowcaseThumbnailsReplaceCustomThumbnailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = showcasesCustomShowcaseThumbnailsReplaceCustomThumbnailRequest;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}/custom_thumbnails/{thumbnail_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "thumbnail_id" + "}", localVarApiClient.escapeString(thumbnailId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceCustomThumbnailValidateBeforeCall(Double albumId, Double thumbnailId, Double userId, ShowcasesCustomShowcaseThumbnailsReplaceCustomThumbnailRequest showcasesCustomShowcaseThumbnailsReplaceCustomThumbnailRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling replaceCustomThumbnail(Async)");
        }

        // verify the required parameter 'thumbnailId' is set
        if (thumbnailId == null) {
            throw new ApiException("Missing the required parameter 'thumbnailId' when calling replaceCustomThumbnail(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling replaceCustomThumbnail(Async)");
        }

        return replaceCustomThumbnailCall(albumId, thumbnailId, userId, showcasesCustomShowcaseThumbnailsReplaceCustomThumbnailRequest, _callback);

    }


    private ApiResponse<Picture> replaceCustomThumbnailWithHttpInfo(Double albumId, Double thumbnailId, Double userId, ShowcasesCustomShowcaseThumbnailsReplaceCustomThumbnailRequest showcasesCustomShowcaseThumbnailsReplaceCustomThumbnailRequest) throws ApiException {
        okhttp3.Call localVarCall = replaceCustomThumbnailValidateBeforeCall(albumId, thumbnailId, userId, showcasesCustomShowcaseThumbnailsReplaceCustomThumbnailRequest, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call replaceCustomThumbnailAsync(Double albumId, Double thumbnailId, Double userId, ShowcasesCustomShowcaseThumbnailsReplaceCustomThumbnailRequest showcasesCustomShowcaseThumbnailsReplaceCustomThumbnailRequest, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceCustomThumbnailValidateBeforeCall(albumId, thumbnailId, userId, showcasesCustomShowcaseThumbnailsReplaceCustomThumbnailRequest, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReplaceCustomThumbnailRequestBuilder {
        private final Double albumId;
        private final Double thumbnailId;
        private final Double userId;
        private Boolean active;

        private ReplaceCustomThumbnailRequestBuilder(double albumId, double thumbnailId, double userId) {
            this.albumId = albumId;
            this.thumbnailId = thumbnailId;
            this.userId = userId;
        }

        /**
         * Set active
         * @param active Whether to make this image the active custom showcase thumbnail. (optional)
         * @return ReplaceCustomThumbnailRequestBuilder
         */
        public ReplaceCustomThumbnailRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Build call for replaceCustomThumbnail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The custom thumbnail was replaced. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ShowcasesCustomShowcaseThumbnailsReplaceCustomThumbnailRequest showcasesCustomShowcaseThumbnailsReplaceCustomThumbnailRequest = buildBodyParams();
            return replaceCustomThumbnailCall(albumId, thumbnailId, userId, showcasesCustomShowcaseThumbnailsReplaceCustomThumbnailRequest, _callback);
        }

        private ShowcasesCustomShowcaseThumbnailsReplaceCustomThumbnailRequest buildBodyParams() {
            ShowcasesCustomShowcaseThumbnailsReplaceCustomThumbnailRequest showcasesCustomShowcaseThumbnailsReplaceCustomThumbnailRequest = new ShowcasesCustomShowcaseThumbnailsReplaceCustomThumbnailRequest();
            showcasesCustomShowcaseThumbnailsReplaceCustomThumbnailRequest.active(this.active);
            return showcasesCustomShowcaseThumbnailsReplaceCustomThumbnailRequest;
        }

        /**
         * Execute replaceCustomThumbnail request
         * @return Picture
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The custom thumbnail was replaced. </td><td>  -  </td></tr>
         </table>
         */
        public Picture execute() throws ApiException {
            ShowcasesCustomShowcaseThumbnailsReplaceCustomThumbnailRequest showcasesCustomShowcaseThumbnailsReplaceCustomThumbnailRequest = buildBodyParams();
            ApiResponse<Picture> localVarResp = replaceCustomThumbnailWithHttpInfo(albumId, thumbnailId, userId, showcasesCustomShowcaseThumbnailsReplaceCustomThumbnailRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute replaceCustomThumbnail request with HTTP info returned
         * @return ApiResponse&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The custom thumbnail was replaced. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Picture> executeWithHttpInfo() throws ApiException {
            ShowcasesCustomShowcaseThumbnailsReplaceCustomThumbnailRequest showcasesCustomShowcaseThumbnailsReplaceCustomThumbnailRequest = buildBodyParams();
            return replaceCustomThumbnailWithHttpInfo(albumId, thumbnailId, userId, showcasesCustomShowcaseThumbnailsReplaceCustomThumbnailRequest);
        }

        /**
         * Execute replaceCustomThumbnail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The custom thumbnail was replaced. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Picture> _callback) throws ApiException {
            ShowcasesCustomShowcaseThumbnailsReplaceCustomThumbnailRequest showcasesCustomShowcaseThumbnailsReplaceCustomThumbnailRequest = buildBodyParams();
            return replaceCustomThumbnailAsync(albumId, thumbnailId, userId, showcasesCustomShowcaseThumbnailsReplaceCustomThumbnailRequest, _callback);
        }
    }

    /**
     * Replace a custom showcase thumbnail
     * This method replaces the specified custom showcase thumbnail with a new image file. The authenticated user must be the owner of the showcase.  For information on how to upload the thumbnail, see our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails) guide.
     * @param albumId The ID of the showcase. (required)
     * @param thumbnailId The ID of the custom thumbnail. (required)
     * @param userId The ID of the user. (required)
     * @return ReplaceCustomThumbnailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom thumbnail was replaced. </td><td>  -  </td></tr>
     </table>
     */
    public ReplaceCustomThumbnailRequestBuilder replaceCustomThumbnail(double albumId, double thumbnailId, double userId) throws IllegalArgumentException {
        
        
        
        return new ReplaceCustomThumbnailRequestBuilder(albumId, thumbnailId, userId);
    }
}
