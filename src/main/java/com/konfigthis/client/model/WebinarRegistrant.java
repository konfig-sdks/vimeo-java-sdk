/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.WebinarRegistrantAnalytics;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * WebinarRegistrant
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class WebinarRegistrant {
  public static final String SERIALIZED_NAME_ANALYTICS = "analytics";
  @SerializedName(SERIALIZED_NAME_ANALYTICS)
  private WebinarRegistrantAnalytics analytics;

  public static final String SERIALIZED_NAME_CREATED_ON = "created_on";
  @SerializedName(SERIALIZED_NAME_CREATED_ON)
  private Double createdOn;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Object data;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  /**
   * The registrant&#39;s attended status for the webinar.  Option descriptions:  * &#x60;B&#x60; - The registrant has been blocked from attending the webinar.  * &#x60;N&#x60; - The registrant has not attended the webinar.  * &#x60;Y&#x60; - The registrant has attended the webinar. 
   */
  @JsonAdapter(HasAttendedEnum.Adapter.class)
 public enum HasAttendedEnum {
    B("B"),
    
    N("N"),
    
    Y("Y");

    private String value;

    HasAttendedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HasAttendedEnum fromValue(String value) {
      for (HasAttendedEnum b : HasAttendedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HasAttendedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HasAttendedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HasAttendedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HasAttendedEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_HAS_ATTENDED = "has_attended";
  @SerializedName(SERIALIZED_NAME_HAS_ATTENDED)
  private HasAttendedEnum hasAttended;

  public static final String SERIALIZED_NAME_IS_BLOCKED = "is_blocked";
  @SerializedName(SERIALIZED_NAME_IS_BLOCKED)
  private Boolean isBlocked;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_REFERRER = "referrer";
  @SerializedName(SERIALIZED_NAME_REFERRER)
  private String referrer;

  public static final String SERIALIZED_NAME_SOURCE_DETAILS = "source_details";
  @SerializedName(SERIALIZED_NAME_SOURCE_DETAILS)
  private Object sourceDetails;

  public static final String SERIALIZED_NAME_SOURCE_TYPE = "source_type";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPE)
  private String sourceType;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public WebinarRegistrant() {
  }

  public WebinarRegistrant analytics(WebinarRegistrantAnalytics analytics) {
    
    
    
    
    this.analytics = analytics;
    return this;
  }

   /**
   * Get analytics
   * @return analytics
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public WebinarRegistrantAnalytics getAnalytics() {
    return analytics;
  }


  public void setAnalytics(WebinarRegistrantAnalytics analytics) {
    
    
    
    this.analytics = analytics;
  }


  public WebinarRegistrant createdOn(Double createdOn) {
    
    
    
    
    this.createdOn = createdOn;
    return this;
  }

  public WebinarRegistrant createdOn(Integer createdOn) {
    
    
    
    
    this.createdOn = createdOn.doubleValue();
    return this;
  }

   /**
   * The date in Unix time when the registrant&#39;s account was created.
   * @return createdOn
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1620053300000", required = true, value = "The date in Unix time when the registrant's account was created.")

  public Double getCreatedOn() {
    return createdOn;
  }


  public void setCreatedOn(Double createdOn) {
    
    
    
    this.createdOn = createdOn;
  }


  public WebinarRegistrant data(Object data) {
    
    
    
    
    this.data = data;
    return this;
  }

   /**
   * The values of all other fields as submitted on the webinar registration form.
   * @return data
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{'Company':'Vimeo'}", required = true, value = "The values of all other fields as submitted on the webinar registration form.")

  public Object getData() {
    return data;
  }


  public void setData(Object data) {
    
    
    
    this.data = data;
  }


  public WebinarRegistrant email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * The registrant&#39;s email address as submitted on the webinar registration form.
   * @return email
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "jane.doe@vimeo.com", required = true, value = "The registrant's email address as submitted on the webinar registration form.")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public WebinarRegistrant firstName(String firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * The registrant&#39;s first name as submitted on the webinar registration form.
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Jane", required = true, value = "The registrant's first name as submitted on the webinar registration form.")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    
    this.firstName = firstName;
  }


  public WebinarRegistrant hasAttended(HasAttendedEnum hasAttended) {
    
    
    
    
    this.hasAttended = hasAttended;
    return this;
  }

   /**
   * The registrant&#39;s attended status for the webinar.  Option descriptions:  * &#x60;B&#x60; - The registrant has been blocked from attending the webinar.  * &#x60;N&#x60; - The registrant has not attended the webinar.  * &#x60;Y&#x60; - The registrant has attended the webinar. 
   * @return hasAttended
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "B", required = true, value = "The registrant's attended status for the webinar.  Option descriptions:  * `B` - The registrant has been blocked from attending the webinar.  * `N` - The registrant has not attended the webinar.  * `Y` - The registrant has attended the webinar. ")

  public HasAttendedEnum getHasAttended() {
    return hasAttended;
  }


  public void setHasAttended(HasAttendedEnum hasAttended) {
    
    
    
    this.hasAttended = hasAttended;
  }


  public WebinarRegistrant isBlocked(Boolean isBlocked) {
    
    
    
    
    this.isBlocked = isBlocked;
    return this;
  }

   /**
   * Whether the registrant&#39;s viewing status for the webinar is blocked.
   * @return isBlocked
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "Whether the registrant's viewing status for the webinar is blocked.")

  public Boolean getIsBlocked() {
    return isBlocked;
  }


  public void setIsBlocked(Boolean isBlocked) {
    
    
    
    this.isBlocked = isBlocked;
  }


  public WebinarRegistrant lastName(String lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * The registrant&#39;s last name as submitted on the webinar registration form.
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Doe", required = true, value = "The registrant's last name as submitted on the webinar registration form.")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    
    this.lastName = lastName;
  }


  public WebinarRegistrant referrer(String referrer) {
    
    
    
    
    this.referrer = referrer;
    return this;
  }

   /**
   * The web address where the registration form was submitted.
   * @return referrer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "http://example.com", required = true, value = "The web address where the registration form was submitted.")

  public String getReferrer() {
    return referrer;
  }


  public void setReferrer(String referrer) {
    
    
    
    this.referrer = referrer;
  }


  public WebinarRegistrant sourceDetails(Object sourceDetails) {
    
    
    
    
    this.sourceDetails = sourceDetails;
    return this;
  }

   /**
   * Details about the source from which the registrant&#39;s account was created.
   * @return sourceDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "Details about the source from which the registrant's account was created.")

  public Object getSourceDetails() {
    return sourceDetails;
  }


  public void setSourceDetails(Object sourceDetails) {
    
    
    
    this.sourceDetails = sourceDetails;
  }


  public WebinarRegistrant sourceType(String sourceType) {
    
    
    
    
    this.sourceType = sourceType;
    return this;
  }

   /**
   * The source from which the registrant&#39;s account was created.
   * @return sourceType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CSV", required = true, value = "The source from which the registrant's account was created.")

  public String getSourceType() {
    return sourceType;
  }


  public void setSourceType(String sourceType) {
    
    
    
    this.sourceType = sourceType;
  }


  public WebinarRegistrant uri(String uri) {
    
    
    
    
    this.uri = uri;
    return this;
  }

   /**
   * The API URL to return the webinar registrant&#39;s account.
   * @return uri
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "/webinars/db1d0719b52f-bfce-4f20-b266-f19bfa08/registrants/f19bfa08-b266-4f20-bfce-db1d0719b52f", required = true, value = "The API URL to return the webinar registrant's account.")

  public String getUri() {
    return uri;
  }


  public void setUri(String uri) {
    
    
    
    this.uri = uri;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the WebinarRegistrant instance itself
   */
  public WebinarRegistrant putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebinarRegistrant webinarRegistrant = (WebinarRegistrant) o;
    return Objects.equals(this.analytics, webinarRegistrant.analytics) &&
        Objects.equals(this.createdOn, webinarRegistrant.createdOn) &&
        Objects.equals(this.data, webinarRegistrant.data) &&
        Objects.equals(this.email, webinarRegistrant.email) &&
        Objects.equals(this.firstName, webinarRegistrant.firstName) &&
        Objects.equals(this.hasAttended, webinarRegistrant.hasAttended) &&
        Objects.equals(this.isBlocked, webinarRegistrant.isBlocked) &&
        Objects.equals(this.lastName, webinarRegistrant.lastName) &&
        Objects.equals(this.referrer, webinarRegistrant.referrer) &&
        Objects.equals(this.sourceDetails, webinarRegistrant.sourceDetails) &&
        Objects.equals(this.sourceType, webinarRegistrant.sourceType) &&
        Objects.equals(this.uri, webinarRegistrant.uri)&&
        Objects.equals(this.additionalProperties, webinarRegistrant.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analytics, createdOn, data, email, firstName, hasAttended, isBlocked, lastName, referrer, sourceDetails, sourceType, uri, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebinarRegistrant {\n");
    sb.append("    analytics: ").append(toIndentedString(analytics)).append("\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    hasAttended: ").append(toIndentedString(hasAttended)).append("\n");
    sb.append("    isBlocked: ").append(toIndentedString(isBlocked)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    referrer: ").append(toIndentedString(referrer)).append("\n");
    sb.append("    sourceDetails: ").append(toIndentedString(sourceDetails)).append("\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("analytics");
    openapiFields.add("created_on");
    openapiFields.add("data");
    openapiFields.add("email");
    openapiFields.add("first_name");
    openapiFields.add("has_attended");
    openapiFields.add("is_blocked");
    openapiFields.add("last_name");
    openapiFields.add("referrer");
    openapiFields.add("source_details");
    openapiFields.add("source_type");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("analytics");
    openapiRequiredFields.add("created_on");
    openapiRequiredFields.add("data");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("first_name");
    openapiRequiredFields.add("has_attended");
    openapiRequiredFields.add("is_blocked");
    openapiRequiredFields.add("last_name");
    openapiRequiredFields.add("referrer");
    openapiRequiredFields.add("source_details");
    openapiRequiredFields.add("source_type");
    openapiRequiredFields.add("uri");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WebinarRegistrant
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WebinarRegistrant.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebinarRegistrant is not found in the empty JSON string", WebinarRegistrant.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebinarRegistrant.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `analytics`
      WebinarRegistrantAnalytics.validateJsonObject(jsonObj.getAsJsonObject("analytics"));
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("first_name").isJsonNull() && !jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if (!jsonObj.get("has_attended").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `has_attended` to be a primitive type in the JSON string but got `%s`", jsonObj.get("has_attended").toString()));
      }
      if (!jsonObj.get("last_name").isJsonNull() && !jsonObj.get("last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      if (!jsonObj.get("referrer").isJsonNull() && !jsonObj.get("referrer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referrer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referrer").toString()));
      }
      if (!jsonObj.get("source_type").isJsonNull() && !jsonObj.get("source_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_type").toString()));
      }
      if (!jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebinarRegistrant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebinarRegistrant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebinarRegistrant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebinarRegistrant.class));

       return (TypeAdapter<T>) new TypeAdapter<WebinarRegistrant>() {
           @Override
           public void write(JsonWriter out, WebinarRegistrant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public WebinarRegistrant read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             WebinarRegistrant instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WebinarRegistrant given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WebinarRegistrant
  * @throws IOException if the JSON string is invalid with respect to WebinarRegistrant
  */
  public static WebinarRegistrant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebinarRegistrant.class);
  }

 /**
  * Convert an instance of WebinarRegistrant to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

