/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EmailCaptureForm;
import com.konfigthis.client.model.EmbedSettingsBadges;
import com.konfigthis.client.model.EmbedSettingsButtons;
import com.konfigthis.client.model.EmbedSettingsCardsInner;
import com.konfigthis.client.model.EmbedSettingsColors;
import com.konfigthis.client.model.EmbedSettingsEndScreen;
import com.konfigthis.client.model.EmbedSettingsLogos;
import com.konfigthis.client.model.EmbedSettingsPlayButton;
import com.konfigthis.client.model.EmbedSettingsTitle;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EmbedSettings
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmbedSettings {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private EmbedSettingsTitle title;

  public static final String SERIALIZED_NAME_AIRPLAY = "airplay";
  @SerializedName(SERIALIZED_NAME_AIRPLAY)
  private Boolean airplay;

  public static final String SERIALIZED_NAME_AUDIO_TRACKS = "audio_tracks";
  @SerializedName(SERIALIZED_NAME_AUDIO_TRACKS)
  private Boolean audioTracks;

  public static final String SERIALIZED_NAME_AUTOPIP = "autopip";
  @SerializedName(SERIALIZED_NAME_AUTOPIP)
  private Boolean autopip;

  public static final String SERIALIZED_NAME_BADGES = "badges";
  @SerializedName(SERIALIZED_NAME_BADGES)
  private EmbedSettingsBadges badges;

  public static final String SERIALIZED_NAME_BUTTONS = "buttons";
  @SerializedName(SERIALIZED_NAME_BUTTONS)
  private EmbedSettingsButtons buttons;

  public static final String SERIALIZED_NAME_CARDS = "cards";
  @SerializedName(SERIALIZED_NAME_CARDS)
  private List<EmbedSettingsCardsInner> cards = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHAPTERS = "chapters";
  @SerializedName(SERIALIZED_NAME_CHAPTERS)
  private Boolean chapters;

  public static final String SERIALIZED_NAME_CHROMECAST = "chromecast";
  @SerializedName(SERIALIZED_NAME_CHROMECAST)
  private Boolean chromecast;

  public static final String SERIALIZED_NAME_CLOSED_CAPTIONS = "closed_captions";
  @SerializedName(SERIALIZED_NAME_CLOSED_CAPTIONS)
  private Boolean closedCaptions;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_COLORS = "colors";
  @SerializedName(SERIALIZED_NAME_COLORS)
  private EmbedSettingsColors colors;

  public static final String SERIALIZED_NAME_EMAIL_CAPTURE_FORM = "email_capture_form";
  @SerializedName(SERIALIZED_NAME_EMAIL_CAPTURE_FORM)
  private EmailCaptureForm emailCaptureForm;

  public static final String SERIALIZED_NAME_END_SCREEN = "end_screen";
  @SerializedName(SERIALIZED_NAME_END_SCREEN)
  private EmbedSettingsEndScreen endScreen;

  public static final String SERIALIZED_NAME_EVENT_SCHEDULE = "event_schedule";
  @SerializedName(SERIALIZED_NAME_EVENT_SCHEDULE)
  private Boolean eventSchedule;

  public static final String SERIALIZED_NAME_HAS_CARDS = "has_cards";
  @SerializedName(SERIALIZED_NAME_HAS_CARDS)
  private Boolean hasCards;

  public static final String SERIALIZED_NAME_HTML = "html";
  @SerializedName(SERIALIZED_NAME_HTML)
  private String html;

  public static final String SERIALIZED_NAME_INTERACTIVE = "interactive";
  @SerializedName(SERIALIZED_NAME_INTERACTIVE)
  private Boolean interactive;

  public static final String SERIALIZED_NAME_LOGOS = "logos";
  @SerializedName(SERIALIZED_NAME_LOGOS)
  private EmbedSettingsLogos logos;

  /**
   * The type of the video outro.  Option descriptions:  * &#x60;beginning&#x60; - The outro is a thumbnail.  * &#x60;custom&#x60; - The outro is custom.  * &#x60;email&#x60; - The outro is an email form.  * &#x60;image&#x60; - The outro is an image.  * &#x60;link&#x60; - The outro is a link.  * &#x60;loop&#x60; - The outro is a loop.  * &#x60;nothing&#x60; - There is no outro.  * &#x60;share&#x60; - The outro is a share button.  * &#x60;text&#x60; - The outro is text.  * &#x60;threevideos&#x60; - The outro is three video suggestions.  * &#x60;videos&#x60; - The outro is video suggestions. 
   */
  @JsonAdapter(OutroTypeEnum.Adapter.class)
 public enum OutroTypeEnum {
    BEGINNING("beginning"),
    
    CUSTOM("custom"),
    
    EMAIL("email"),
    
    IMAGE("image"),
    
    LINK("link"),
    
    LOOP("loop"),
    
    NOTHING("nothing"),
    
    SHARE("share"),
    
    TEXT("text"),
    
    THREEVIDEOS("threevideos"),
    
    VIDEOS("videos");

    private String value;

    OutroTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OutroTypeEnum fromValue(String value) {
      for (OutroTypeEnum b : OutroTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OutroTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OutroTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OutroTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OutroTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OUTRO_TYPE = "outro_type";
  @SerializedName(SERIALIZED_NAME_OUTRO_TYPE)
  private OutroTypeEnum outroType;

  public static final String SERIALIZED_NAME_PIP = "pip";
  @SerializedName(SERIALIZED_NAME_PIP)
  private Boolean pip;

  public static final String SERIALIZED_NAME_PLAY_BUTTON = "play_button";
  @SerializedName(SERIALIZED_NAME_PLAY_BUTTON)
  private EmbedSettingsPlayButton playButton;

  public static final String SERIALIZED_NAME_PLAYBAR = "playbar";
  @SerializedName(SERIALIZED_NAME_PLAYBAR)
  private Boolean playbar;

  public static final String SERIALIZED_NAME_QUALITY_SELECTOR = "quality_selector";
  @SerializedName(SERIALIZED_NAME_QUALITY_SELECTOR)
  private Boolean qualitySelector;

  public static final String SERIALIZED_NAME_SHOW_TIMEZONE = "show_timezone";
  @SerializedName(SERIALIZED_NAME_SHOW_TIMEZONE)
  private Boolean showTimezone;

  public static final String SERIALIZED_NAME_SPEED = "speed";
  @SerializedName(SERIALIZED_NAME_SPEED)
  private Boolean speed;

  public static final String SERIALIZED_NAME_TRANSCRIPT = "transcript";
  @SerializedName(SERIALIZED_NAME_TRANSCRIPT)
  private Boolean transcript;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_VOLUME = "volume";
  @SerializedName(SERIALIZED_NAME_VOLUME)
  private Boolean volume;

  public EmbedSettings() {
  }

  public EmbedSettings title(EmbedSettingsTitle title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EmbedSettingsTitle getTitle() {
    return title;
  }


  public void setTitle(EmbedSettingsTitle title) {
    
    
    
    this.title = title;
  }


  public EmbedSettings airplay(Boolean airplay) {
    
    
    
    
    this.airplay = airplay;
    return this;
  }

   /**
   * Whether AirPlay is enabled in the embeddable player.
   * @return airplay
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether AirPlay is enabled in the embeddable player.")

  public Boolean getAirplay() {
    return airplay;
  }


  public void setAirplay(Boolean airplay) {
    
    
    
    this.airplay = airplay;
  }


  public EmbedSettings audioTracks(Boolean audioTracks) {
    
    
    
    
    this.audioTracks = audioTracks;
    return this;
  }

   /**
   * Whether multiple audio tracks can appear in the embeddable player.
   * @return audioTracks
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether multiple audio tracks can appear in the embeddable player.")

  public Boolean getAudioTracks() {
    return audioTracks;
  }


  public void setAudioTracks(Boolean audioTracks) {
    
    
    
    this.audioTracks = audioTracks;
  }


  public EmbedSettings autopip(Boolean autopip) {
    
    
    
    
    this.autopip = autopip;
    return this;
  }

   /**
   * Whether automatic picture-in-picture is enabled.
   * @return autopip
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether automatic picture-in-picture is enabled.")

  public Boolean getAutopip() {
    return autopip;
  }


  public void setAutopip(Boolean autopip) {
    
    
    
    this.autopip = autopip;
  }


  public EmbedSettings badges(EmbedSettingsBadges badges) {
    
    
    
    
    this.badges = badges;
    return this;
  }

   /**
   * Get badges
   * @return badges
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EmbedSettingsBadges getBadges() {
    return badges;
  }


  public void setBadges(EmbedSettingsBadges badges) {
    
    
    
    this.badges = badges;
  }


  public EmbedSettings buttons(EmbedSettingsButtons buttons) {
    
    
    
    
    this.buttons = buttons;
    return this;
  }

   /**
   * Get buttons
   * @return buttons
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EmbedSettingsButtons getButtons() {
    return buttons;
  }


  public void setButtons(EmbedSettingsButtons buttons) {
    
    
    
    this.buttons = buttons;
  }


  public EmbedSettings cards(List<EmbedSettingsCardsInner> cards) {
    
    
    
    
    this.cards = cards;
    return this;
  }

  public EmbedSettings addCardsItem(EmbedSettingsCardsInner cardsItem) {
    this.cards.add(cardsItem);
    return this;
  }

   /**
   * A collection of cards associated with the selected video.
   * @return cards
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A collection of cards associated with the selected video.")

  public List<EmbedSettingsCardsInner> getCards() {
    return cards;
  }


  public void setCards(List<EmbedSettingsCardsInner> cards) {
    
    
    
    this.cards = cards;
  }


  public EmbedSettings chapters(Boolean chapters) {
    
    
    
    
    this.chapters = chapters;
    return this;
  }

   /**
   * Whether chapters are enabled in the embeddable player.
   * @return chapters
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether chapters are enabled in the embeddable player.")

  public Boolean getChapters() {
    return chapters;
  }


  public void setChapters(Boolean chapters) {
    
    
    
    this.chapters = chapters;
  }


  public EmbedSettings chromecast(Boolean chromecast) {
    
    
    
    
    this.chromecast = chromecast;
    return this;
  }

   /**
   * Whether the Chromecast button appears in the embeddable player.
   * @return chromecast
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the Chromecast button appears in the embeddable player.")

  public Boolean getChromecast() {
    return chromecast;
  }


  public void setChromecast(Boolean chromecast) {
    
    
    
    this.chromecast = chromecast;
  }


  public EmbedSettings closedCaptions(Boolean closedCaptions) {
    
    
    
    
    this.closedCaptions = closedCaptions;
    return this;
  }

   /**
   * Whether closed captions are enabled in the embeddable player.
   * @return closedCaptions
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether closed captions are enabled in the embeddable player.")

  public Boolean getClosedCaptions() {
    return closedCaptions;
  }


  public void setClosedCaptions(Boolean closedCaptions) {
    
    
    
    this.closedCaptions = closedCaptions;
  }


  public EmbedSettings color(String color) {
    
    
    
    
    this.color = color;
    return this;
  }

   /**
   * The first player color, which controls the color of the progress bar, buttons, and more.
   * @return color
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "#0a0808", required = true, value = "The first player color, which controls the color of the progress bar, buttons, and more.")

  public String getColor() {
    return color;
  }


  public void setColor(String color) {
    
    
    
    this.color = color;
  }


  public EmbedSettings colors(EmbedSettingsColors colors) {
    
    
    
    
    this.colors = colors;
    return this;
  }

   /**
   * Get colors
   * @return colors
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EmbedSettingsColors getColors() {
    return colors;
  }


  public void setColors(EmbedSettingsColors colors) {
    
    
    
    this.colors = colors;
  }


  public EmbedSettings emailCaptureForm(EmailCaptureForm emailCaptureForm) {
    
    
    
    
    this.emailCaptureForm = emailCaptureForm;
    return this;
  }

   /**
   * The email capture form settings associated with the video.
   * @return emailCaptureForm
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The email capture form settings associated with the video.")

  public EmailCaptureForm getEmailCaptureForm() {
    return emailCaptureForm;
  }


  public void setEmailCaptureForm(EmailCaptureForm emailCaptureForm) {
    
    
    
    this.emailCaptureForm = emailCaptureForm;
  }


  public EmbedSettings endScreen(EmbedSettingsEndScreen endScreen) {
    
    
    
    
    this.endScreen = endScreen;
    return this;
  }

   /**
   * Get endScreen
   * @return endScreen
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EmbedSettingsEndScreen getEndScreen() {
    return endScreen;
  }


  public void setEndScreen(EmbedSettingsEndScreen endScreen) {
    
    
    
    this.endScreen = endScreen;
  }


  public EmbedSettings eventSchedule(Boolean eventSchedule) {
    
    
    
    
    this.eventSchedule = eventSchedule;
    return this;
  }

   /**
   * Whether the embedded player should display the event schedule.
   * @return eventSchedule
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the embedded player should display the event schedule.")

  public Boolean getEventSchedule() {
    return eventSchedule;
  }


  public void setEventSchedule(Boolean eventSchedule) {
    
    
    
    this.eventSchedule = eventSchedule;
  }


  public EmbedSettings hasCards(Boolean hasCards) {
    
    
    
    
    this.hasCards = hasCards;
    return this;
  }

   /**
   * Whether the video has cards.
   * @return hasCards
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the video has cards.")

  public Boolean getHasCards() {
    return hasCards;
  }


  public void setHasCards(Boolean hasCards) {
    
    
    
    this.hasCards = hasCards;
  }


  public EmbedSettings html(String html) {
    
    
    
    
    this.html = html;
    return this;
  }

   /**
   * The HTML code for embedding the video on a web page.
   * @return html
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The HTML code for embedding the video on a web page.")

  public String getHtml() {
    return html;
  }


  public void setHtml(String html) {
    
    
    
    this.html = html;
  }


  public EmbedSettings interactive(Boolean interactive) {
    
    
    
    
    this.interactive = interactive;
    return this;
  }

   /**
   * Whether the video is an interactive video.
   * @return interactive
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the video is an interactive video.")

  public Boolean getInteractive() {
    return interactive;
  }


  public void setInteractive(Boolean interactive) {
    
    
    
    this.interactive = interactive;
  }


  public EmbedSettings logos(EmbedSettingsLogos logos) {
    
    
    
    
    this.logos = logos;
    return this;
  }

   /**
   * Get logos
   * @return logos
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EmbedSettingsLogos getLogos() {
    return logos;
  }


  public void setLogos(EmbedSettingsLogos logos) {
    
    
    
    this.logos = logos;
  }


  public EmbedSettings outroType(OutroTypeEnum outroType) {
    
    
    
    
    this.outroType = outroType;
    return this;
  }

   /**
   * The type of the video outro.  Option descriptions:  * &#x60;beginning&#x60; - The outro is a thumbnail.  * &#x60;custom&#x60; - The outro is custom.  * &#x60;email&#x60; - The outro is an email form.  * &#x60;image&#x60; - The outro is an image.  * &#x60;link&#x60; - The outro is a link.  * &#x60;loop&#x60; - The outro is a loop.  * &#x60;nothing&#x60; - There is no outro.  * &#x60;share&#x60; - The outro is a share button.  * &#x60;text&#x60; - The outro is text.  * &#x60;threevideos&#x60; - The outro is three video suggestions.  * &#x60;videos&#x60; - The outro is video suggestions. 
   * @return outroType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "LINK", required = true, value = "The type of the video outro.  Option descriptions:  * `beginning` - The outro is a thumbnail.  * `custom` - The outro is custom.  * `email` - The outro is an email form.  * `image` - The outro is an image.  * `link` - The outro is a link.  * `loop` - The outro is a loop.  * `nothing` - There is no outro.  * `share` - The outro is a share button.  * `text` - The outro is text.  * `threevideos` - The outro is three video suggestions.  * `videos` - The outro is video suggestions. ")

  public OutroTypeEnum getOutroType() {
    return outroType;
  }


  public void setOutroType(OutroTypeEnum outroType) {
    
    
    
    this.outroType = outroType;
  }


  public EmbedSettings pip(Boolean pip) {
    
    
    
    
    this.pip = pip;
    return this;
  }

   /**
   * Whether picture-in-picture is enabled and the button appears in the embeddable player.
   * @return pip
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether picture-in-picture is enabled and the button appears in the embeddable player.")

  public Boolean getPip() {
    return pip;
  }


  public void setPip(Boolean pip) {
    
    
    
    this.pip = pip;
  }


  public EmbedSettings playButton(EmbedSettingsPlayButton playButton) {
    
    
    
    
    this.playButton = playButton;
    return this;
  }

   /**
   * Get playButton
   * @return playButton
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EmbedSettingsPlayButton getPlayButton() {
    return playButton;
  }


  public void setPlayButton(EmbedSettingsPlayButton playButton) {
    
    
    
    this.playButton = playButton;
  }


  public EmbedSettings playbar(Boolean playbar) {
    
    
    
    
    this.playbar = playbar;
    return this;
  }

   /**
   * Whether the playbar appears in the embeddable player.
   * @return playbar
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the playbar appears in the embeddable player.")

  public Boolean getPlaybar() {
    return playbar;
  }


  public void setPlaybar(Boolean playbar) {
    
    
    
    this.playbar = playbar;
  }


  public EmbedSettings qualitySelector(Boolean qualitySelector) {
    
    
    
    
    this.qualitySelector = qualitySelector;
    return this;
  }

   /**
   * Whether the quality selector appears in the embeddable player.
   * @return qualitySelector
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the quality selector appears in the embeddable player.")

  public Boolean getQualitySelector() {
    return qualitySelector;
  }


  public void setQualitySelector(Boolean qualitySelector) {
    
    
    
    this.qualitySelector = qualitySelector;
  }


  public EmbedSettings showTimezone(Boolean showTimezone) {
    
    
    
    
    this.showTimezone = showTimezone;
    return this;
  }

   /**
   * Whether the embedded player should display the schedule timezone.
   * @return showTimezone
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "Whether the embedded player should display the schedule timezone.")

  public Boolean getShowTimezone() {
    return showTimezone;
  }


  public void setShowTimezone(Boolean showTimezone) {
    
    
    
    this.showTimezone = showTimezone;
  }


  public EmbedSettings speed(Boolean speed) {
    
    
    
    
    this.speed = speed;
    return this;
  }

   /**
   * Whether the speed controls appear in the embeddable player.
   * @return speed
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the speed controls appear in the embeddable player.")

  public Boolean getSpeed() {
    return speed;
  }


  public void setSpeed(Boolean speed) {
    
    
    
    this.speed = speed;
  }


  public EmbedSettings transcript(Boolean transcript) {
    
    
    
    
    this.transcript = transcript;
    return this;
  }

   /**
   * Whether the transcript controls appear in the embeddable player.
   * @return transcript
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the transcript controls appear in the embeddable player.")

  public Boolean getTranscript() {
    return transcript;
  }


  public void setTranscript(Boolean transcript) {
    
    
    
    this.transcript = transcript;
  }


  public EmbedSettings uri(String uri) {
    
    
    
    
    this.uri = uri;
    return this;
  }

   /**
   * The URI of the embed preset.
   * @return uri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "/videos/258684937/presets/12345", value = "The URI of the embed preset.")

  public String getUri() {
    return uri;
  }


  public void setUri(String uri) {
    
    
    
    this.uri = uri;
  }


  public EmbedSettings volume(Boolean volume) {
    
    
    
    
    this.volume = volume;
    return this;
  }

   /**
   * Whether the volume controls appear in the embeddable player.
   * @return volume
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the volume controls appear in the embeddable player.")

  public Boolean getVolume() {
    return volume;
  }


  public void setVolume(Boolean volume) {
    
    
    
    this.volume = volume;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmbedSettings instance itself
   */
  public EmbedSettings putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmbedSettings embedSettings = (EmbedSettings) o;
    return Objects.equals(this.title, embedSettings.title) &&
        Objects.equals(this.airplay, embedSettings.airplay) &&
        Objects.equals(this.audioTracks, embedSettings.audioTracks) &&
        Objects.equals(this.autopip, embedSettings.autopip) &&
        Objects.equals(this.badges, embedSettings.badges) &&
        Objects.equals(this.buttons, embedSettings.buttons) &&
        Objects.equals(this.cards, embedSettings.cards) &&
        Objects.equals(this.chapters, embedSettings.chapters) &&
        Objects.equals(this.chromecast, embedSettings.chromecast) &&
        Objects.equals(this.closedCaptions, embedSettings.closedCaptions) &&
        Objects.equals(this.color, embedSettings.color) &&
        Objects.equals(this.colors, embedSettings.colors) &&
        Objects.equals(this.emailCaptureForm, embedSettings.emailCaptureForm) &&
        Objects.equals(this.endScreen, embedSettings.endScreen) &&
        Objects.equals(this.eventSchedule, embedSettings.eventSchedule) &&
        Objects.equals(this.hasCards, embedSettings.hasCards) &&
        Objects.equals(this.html, embedSettings.html) &&
        Objects.equals(this.interactive, embedSettings.interactive) &&
        Objects.equals(this.logos, embedSettings.logos) &&
        Objects.equals(this.outroType, embedSettings.outroType) &&
        Objects.equals(this.pip, embedSettings.pip) &&
        Objects.equals(this.playButton, embedSettings.playButton) &&
        Objects.equals(this.playbar, embedSettings.playbar) &&
        Objects.equals(this.qualitySelector, embedSettings.qualitySelector) &&
        Objects.equals(this.showTimezone, embedSettings.showTimezone) &&
        Objects.equals(this.speed, embedSettings.speed) &&
        Objects.equals(this.transcript, embedSettings.transcript) &&
        Objects.equals(this.uri, embedSettings.uri) &&
        Objects.equals(this.volume, embedSettings.volume)&&
        Objects.equals(this.additionalProperties, embedSettings.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, airplay, audioTracks, autopip, badges, buttons, cards, chapters, chromecast, closedCaptions, color, colors, emailCaptureForm, endScreen, eventSchedule, hasCards, html, interactive, logos, outroType, pip, playButton, playbar, qualitySelector, showTimezone, speed, transcript, uri, volume, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmbedSettings {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    airplay: ").append(toIndentedString(airplay)).append("\n");
    sb.append("    audioTracks: ").append(toIndentedString(audioTracks)).append("\n");
    sb.append("    autopip: ").append(toIndentedString(autopip)).append("\n");
    sb.append("    badges: ").append(toIndentedString(badges)).append("\n");
    sb.append("    buttons: ").append(toIndentedString(buttons)).append("\n");
    sb.append("    cards: ").append(toIndentedString(cards)).append("\n");
    sb.append("    chapters: ").append(toIndentedString(chapters)).append("\n");
    sb.append("    chromecast: ").append(toIndentedString(chromecast)).append("\n");
    sb.append("    closedCaptions: ").append(toIndentedString(closedCaptions)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    colors: ").append(toIndentedString(colors)).append("\n");
    sb.append("    emailCaptureForm: ").append(toIndentedString(emailCaptureForm)).append("\n");
    sb.append("    endScreen: ").append(toIndentedString(endScreen)).append("\n");
    sb.append("    eventSchedule: ").append(toIndentedString(eventSchedule)).append("\n");
    sb.append("    hasCards: ").append(toIndentedString(hasCards)).append("\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("    interactive: ").append(toIndentedString(interactive)).append("\n");
    sb.append("    logos: ").append(toIndentedString(logos)).append("\n");
    sb.append("    outroType: ").append(toIndentedString(outroType)).append("\n");
    sb.append("    pip: ").append(toIndentedString(pip)).append("\n");
    sb.append("    playButton: ").append(toIndentedString(playButton)).append("\n");
    sb.append("    playbar: ").append(toIndentedString(playbar)).append("\n");
    sb.append("    qualitySelector: ").append(toIndentedString(qualitySelector)).append("\n");
    sb.append("    showTimezone: ").append(toIndentedString(showTimezone)).append("\n");
    sb.append("    speed: ").append(toIndentedString(speed)).append("\n");
    sb.append("    transcript: ").append(toIndentedString(transcript)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("airplay");
    openapiFields.add("audio_tracks");
    openapiFields.add("autopip");
    openapiFields.add("badges");
    openapiFields.add("buttons");
    openapiFields.add("cards");
    openapiFields.add("chapters");
    openapiFields.add("chromecast");
    openapiFields.add("closed_captions");
    openapiFields.add("color");
    openapiFields.add("colors");
    openapiFields.add("email_capture_form");
    openapiFields.add("end_screen");
    openapiFields.add("event_schedule");
    openapiFields.add("has_cards");
    openapiFields.add("html");
    openapiFields.add("interactive");
    openapiFields.add("logos");
    openapiFields.add("outro_type");
    openapiFields.add("pip");
    openapiFields.add("play_button");
    openapiFields.add("playbar");
    openapiFields.add("quality_selector");
    openapiFields.add("show_timezone");
    openapiFields.add("speed");
    openapiFields.add("transcript");
    openapiFields.add("uri");
    openapiFields.add("volume");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("airplay");
    openapiRequiredFields.add("audio_tracks");
    openapiRequiredFields.add("autopip");
    openapiRequiredFields.add("badges");
    openapiRequiredFields.add("buttons");
    openapiRequiredFields.add("cards");
    openapiRequiredFields.add("chapters");
    openapiRequiredFields.add("chromecast");
    openapiRequiredFields.add("closed_captions");
    openapiRequiredFields.add("color");
    openapiRequiredFields.add("colors");
    openapiRequiredFields.add("email_capture_form");
    openapiRequiredFields.add("end_screen");
    openapiRequiredFields.add("event_schedule");
    openapiRequiredFields.add("has_cards");
    openapiRequiredFields.add("interactive");
    openapiRequiredFields.add("logos");
    openapiRequiredFields.add("outro_type");
    openapiRequiredFields.add("pip");
    openapiRequiredFields.add("play_button");
    openapiRequiredFields.add("playbar");
    openapiRequiredFields.add("quality_selector");
    openapiRequiredFields.add("show_timezone");
    openapiRequiredFields.add("speed");
    openapiRequiredFields.add("transcript");
    openapiRequiredFields.add("volume");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmbedSettings
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmbedSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmbedSettings is not found in the empty JSON string", EmbedSettings.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EmbedSettings.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `title`
      EmbedSettingsTitle.validateJsonObject(jsonObj.getAsJsonObject("title"));
      // validate the required field `badges`
      EmbedSettingsBadges.validateJsonObject(jsonObj.getAsJsonObject("badges"));
      // validate the required field `buttons`
      EmbedSettingsButtons.validateJsonObject(jsonObj.getAsJsonObject("buttons"));
      // ensure the json data is an array
      if (!jsonObj.get("cards").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cards` to be an array in the JSON string but got `%s`", jsonObj.get("cards").toString()));
      }

      JsonArray jsonArraycards = jsonObj.getAsJsonArray("cards");
      // validate the required field `cards` (array)
      for (int i = 0; i < jsonArraycards.size(); i++) {
        EmbedSettingsCardsInner.validateJsonObject(jsonArraycards.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      // validate the required field `colors`
      EmbedSettingsColors.validateJsonObject(jsonObj.getAsJsonObject("colors"));
      // validate the required field `email_capture_form`
      EmailCaptureForm.validateJsonObject(jsonObj.getAsJsonObject("email_capture_form"));
      // validate the required field `end_screen`
      EmbedSettingsEndScreen.validateJsonObject(jsonObj.getAsJsonObject("end_screen"));
      if ((jsonObj.get("html") != null && !jsonObj.get("html").isJsonNull()) && !jsonObj.get("html").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html").toString()));
      }
      // validate the required field `logos`
      EmbedSettingsLogos.validateJsonObject(jsonObj.getAsJsonObject("logos"));
      if (!jsonObj.get("outro_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outro_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outro_type").toString()));
      }
      // validate the required field `play_button`
      EmbedSettingsPlayButton.validateJsonObject(jsonObj.getAsJsonObject("play_button"));
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmbedSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmbedSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmbedSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmbedSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<EmbedSettings>() {
           @Override
           public void write(JsonWriter out, EmbedSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmbedSettings read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmbedSettings instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmbedSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmbedSettings
  * @throws IOException if the JSON string is invalid with respect to EmbedSettings
  */
  public static EmbedSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmbedSettings.class);
  }

 /**
  * Convert an instance of EmbedSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

