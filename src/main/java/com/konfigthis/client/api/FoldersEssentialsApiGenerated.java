/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateProjectRequest;
import com.konfigthis.client.model.EditProjectRequest;
import com.konfigthis.client.model.FoldersEssentialsCreateFolderRequest;
import com.konfigthis.client.model.FoldersEssentialsEditFolderRequest;
import com.konfigthis.client.model.Project;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FoldersEssentialsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FoldersEssentialsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public FoldersEssentialsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createFolderCall(FoldersEssentialsCreateFolderRequest foldersEssentialsCreateFolderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = foldersEssentialsCreateFolderRequest;

        // create path and map variables
        String localVarPath = "/me/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFolderValidateBeforeCall(FoldersEssentialsCreateFolderRequest foldersEssentialsCreateFolderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'foldersEssentialsCreateFolderRequest' is set
        if (foldersEssentialsCreateFolderRequest == null) {
            throw new ApiException("Missing the required parameter 'foldersEssentialsCreateFolderRequest' when calling createFolder(Async)");
        }

        return createFolderCall(foldersEssentialsCreateFolderRequest, _callback);

    }


    private ApiResponse<Project> createFolderWithHttpInfo(FoldersEssentialsCreateFolderRequest foldersEssentialsCreateFolderRequest) throws ApiException {
        okhttp3.Call localVarCall = createFolderValidateBeforeCall(foldersEssentialsCreateFolderRequest, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createFolderAsync(FoldersEssentialsCreateFolderRequest foldersEssentialsCreateFolderRequest, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFolderValidateBeforeCall(foldersEssentialsCreateFolderRequest, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateFolderRequestBuilder {
        private final String name;
        private String parentFolderUri;

        private CreateFolderRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set parentFolderUri
         * @param parentFolderUri The URI of the parent folder. (optional)
         * @return CreateFolderRequestBuilder
         */
        public CreateFolderRequestBuilder parentFolderUri(String parentFolderUri) {
            this.parentFolderUri = parentFolderUri;
            return this;
        }
        
        /**
         * Build call for createFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The folder was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FoldersEssentialsCreateFolderRequest foldersEssentialsCreateFolderRequest = buildBodyParams();
            return createFolderCall(foldersEssentialsCreateFolderRequest, _callback);
        }

        private FoldersEssentialsCreateFolderRequest buildBodyParams() {
            FoldersEssentialsCreateFolderRequest foldersEssentialsCreateFolderRequest = new FoldersEssentialsCreateFolderRequest();
            foldersEssentialsCreateFolderRequest.name(this.name);
            foldersEssentialsCreateFolderRequest.parentFolderUri(this.parentFolderUri);
            return foldersEssentialsCreateFolderRequest;
        }

        /**
         * Execute createFolder request
         * @return Project
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The folder was created. </td><td>  -  </td></tr>
         </table>
         */
        public Project execute() throws ApiException {
            FoldersEssentialsCreateFolderRequest foldersEssentialsCreateFolderRequest = buildBodyParams();
            ApiResponse<Project> localVarResp = createFolderWithHttpInfo(foldersEssentialsCreateFolderRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createFolder request with HTTP info returned
         * @return ApiResponse&lt;Project&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The folder was created. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Project> executeWithHttpInfo() throws ApiException {
            FoldersEssentialsCreateFolderRequest foldersEssentialsCreateFolderRequest = buildBodyParams();
            return createFolderWithHttpInfo(foldersEssentialsCreateFolderRequest);
        }

        /**
         * Execute createFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The folder was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Project> _callback) throws ApiException {
            FoldersEssentialsCreateFolderRequest foldersEssentialsCreateFolderRequest = buildBodyParams();
            return createFolderAsync(foldersEssentialsCreateFolderRequest, _callback);
        }
    }

    /**
     * Create a folder
     * This method creates a new folder for the authenticated user. By default, this method creates a top-level folder. To create a subfolder — that is, to place the new folder inside an existing folder — specify the parent folder by URI with the **parent_folder_uri** parameter in the body of the request.
     * @param foldersEssentialsCreateFolderRequest  (required)
     * @return CreateFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The folder was created. </td><td>  -  </td></tr>
     </table>
     */
    public CreateFolderRequestBuilder createFolder(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateFolderRequestBuilder(name);
    }
    private okhttp3.Call deleteFolderCall(Double projectId, Boolean shouldDeleteClips, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/projects/{project_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shouldDeleteClips != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("should_delete_clips", shouldDeleteClips));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFolderValidateBeforeCall(Double projectId, Boolean shouldDeleteClips, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteFolder(Async)");
        }

        return deleteFolderCall(projectId, shouldDeleteClips, _callback);

    }


    private ApiResponse<Void> deleteFolderWithHttpInfo(Double projectId, Boolean shouldDeleteClips) throws ApiException {
        okhttp3.Call localVarCall = deleteFolderValidateBeforeCall(projectId, shouldDeleteClips, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteFolderAsync(Double projectId, Boolean shouldDeleteClips, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFolderValidateBeforeCall(projectId, shouldDeleteClips, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteFolderRequestBuilder {
        private final Double projectId;
        private Boolean shouldDeleteClips;

        private DeleteFolderRequestBuilder(double projectId) {
            this.projectId = projectId;
        }

        /**
         * Set shouldDeleteClips
         * @param shouldDeleteClips Whether to delete all the videos in the folder along with the folder itself. (optional)
         * @return DeleteFolderRequestBuilder
         */
        public DeleteFolderRequestBuilder shouldDeleteClips(Boolean shouldDeleteClips) {
            this.shouldDeleteClips = shouldDeleteClips;
            return this;
        }
        
        /**
         * Build call for deleteFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The folder was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteFolderCall(projectId, shouldDeleteClips, _callback);
        }


        /**
         * Execute deleteFolder request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The folder was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteFolderWithHttpInfo(projectId, shouldDeleteClips);
        }

        /**
         * Execute deleteFolder request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The folder was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteFolderWithHttpInfo(projectId, shouldDeleteClips);
        }

        /**
         * Execute deleteFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The folder was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteFolderAsync(projectId, shouldDeleteClips, _callback);
        }
    }

    /**
     * Delete a folder
     * This method deletes the specified folder and optionally also the videos that it contains. The authenticated user must be the owner of the folder.
     * @param projectId The ID of the folder. (required)
     * @return DeleteFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The folder was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteFolderRequestBuilder deleteFolder(double projectId) throws IllegalArgumentException {
        
        return new DeleteFolderRequestBuilder(projectId);
    }
    private okhttp3.Call editFolderCall(Double projectId, FoldersEssentialsEditFolderRequest foldersEssentialsEditFolderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = foldersEssentialsEditFolderRequest;

        // create path and map variables
        String localVarPath = "/me/projects/{project_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editFolderValidateBeforeCall(Double projectId, FoldersEssentialsEditFolderRequest foldersEssentialsEditFolderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling editFolder(Async)");
        }

        // verify the required parameter 'foldersEssentialsEditFolderRequest' is set
        if (foldersEssentialsEditFolderRequest == null) {
            throw new ApiException("Missing the required parameter 'foldersEssentialsEditFolderRequest' when calling editFolder(Async)");
        }

        return editFolderCall(projectId, foldersEssentialsEditFolderRequest, _callback);

    }


    private ApiResponse<Project> editFolderWithHttpInfo(Double projectId, FoldersEssentialsEditFolderRequest foldersEssentialsEditFolderRequest) throws ApiException {
        okhttp3.Call localVarCall = editFolderValidateBeforeCall(projectId, foldersEssentialsEditFolderRequest, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call editFolderAsync(Double projectId, FoldersEssentialsEditFolderRequest foldersEssentialsEditFolderRequest, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = editFolderValidateBeforeCall(projectId, foldersEssentialsEditFolderRequest, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EditFolderRequestBuilder {
        private final String name;
        private final Double projectId;

        private EditFolderRequestBuilder(String name, double projectId) {
            this.name = name;
            this.projectId = projectId;
        }

        /**
         * Build call for editFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The folder was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FoldersEssentialsEditFolderRequest foldersEssentialsEditFolderRequest = buildBodyParams();
            return editFolderCall(projectId, foldersEssentialsEditFolderRequest, _callback);
        }

        private FoldersEssentialsEditFolderRequest buildBodyParams() {
            FoldersEssentialsEditFolderRequest foldersEssentialsEditFolderRequest = new FoldersEssentialsEditFolderRequest();
            foldersEssentialsEditFolderRequest.name(this.name);
            return foldersEssentialsEditFolderRequest;
        }

        /**
         * Execute editFolder request
         * @return Project
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The folder was edited. </td><td>  -  </td></tr>
         </table>
         */
        public Project execute() throws ApiException {
            FoldersEssentialsEditFolderRequest foldersEssentialsEditFolderRequest = buildBodyParams();
            ApiResponse<Project> localVarResp = editFolderWithHttpInfo(projectId, foldersEssentialsEditFolderRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute editFolder request with HTTP info returned
         * @return ApiResponse&lt;Project&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The folder was edited. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Project> executeWithHttpInfo() throws ApiException {
            FoldersEssentialsEditFolderRequest foldersEssentialsEditFolderRequest = buildBodyParams();
            return editFolderWithHttpInfo(projectId, foldersEssentialsEditFolderRequest);
        }

        /**
         * Execute editFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The folder was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Project> _callback) throws ApiException {
            FoldersEssentialsEditFolderRequest foldersEssentialsEditFolderRequest = buildBodyParams();
            return editFolderAsync(projectId, foldersEssentialsEditFolderRequest, _callback);
        }
    }

    /**
     * Edit a folder
     * This method edits the specified folder. The authenticated user must be the owner of the folder.
     * @param projectId The ID of the folder. (required)
     * @param foldersEssentialsEditFolderRequest  (required)
     * @return EditFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The folder was edited. </td><td>  -  </td></tr>
     </table>
     */
    public EditFolderRequestBuilder editFolder(String name, double projectId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        
        return new EditFolderRequestBuilder(name, projectId);
    }
    private okhttp3.Call getAllUserFoldersCall(String direction, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllUserFoldersValidateBeforeCall(String direction, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        return getAllUserFoldersCall(direction, page, perPage, query, sort, _callback);

    }


    private ApiResponse<List<Project>> getAllUserFoldersWithHttpInfo(String direction, Double page, Double perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = getAllUserFoldersValidateBeforeCall(direction, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllUserFoldersAsync(String direction, Double page, Double perPage, String query, String sort, final ApiCallback<List<Project>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllUserFoldersValidateBeforeCall(direction, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllUserFoldersRequestBuilder {
        private String direction;
        private Double page;
        private Double perPage;
        private String query;
        private String sort;

        private GetAllUserFoldersRequestBuilder() {
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return GetAllUserFoldersRequestBuilder
         */
        public GetAllUserFoldersRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetAllUserFoldersRequestBuilder
         */
        public GetAllUserFoldersRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetAllUserFoldersRequestBuilder
         */
        public GetAllUserFoldersRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set query
         * @param query The search query to use to filter the results. (optional)
         * @return GetAllUserFoldersRequestBuilder
         */
        public GetAllUserFoldersRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sort order.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;name&#x60; - Sort the results by name.  * &#x60;pinned_on&#x60; - Sort the results by pinned timestamp.  (optional)
         * @return GetAllUserFoldersRequestBuilder
         */
        public GetAllUserFoldersRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getAllUserFolders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The folders were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllUserFoldersCall(direction, page, perPage, query, sort, _callback);
        }


        /**
         * Execute getAllUserFolders request
         * @return List&lt;Project&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The folders were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Project> execute() throws ApiException {
            ApiResponse<List<Project>> localVarResp = getAllUserFoldersWithHttpInfo(direction, page, perPage, query, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllUserFolders request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Project&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The folders were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Project>> executeWithHttpInfo() throws ApiException {
            return getAllUserFoldersWithHttpInfo(direction, page, perPage, query, sort);
        }

        /**
         * Execute getAllUserFolders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The folders were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Project>> _callback) throws ApiException {
            return getAllUserFoldersAsync(direction, page, perPage, query, sort, _callback);
        }
    }

    /**
     * Get all the folders that belong to the user
     * This method returns all the folders belonging to the authenticated user.
     * @return GetAllUserFoldersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The folders were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllUserFoldersRequestBuilder getAllUserFolders() throws IllegalArgumentException {
        return new GetAllUserFoldersRequestBuilder();
    }
    private okhttp3.Call getSpecificFolderCall(Double projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/projects/{project_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificFolderValidateBeforeCall(Double projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getSpecificFolder(Async)");
        }

        return getSpecificFolderCall(projectId, _callback);

    }


    private ApiResponse<Project> getSpecificFolderWithHttpInfo(Double projectId) throws ApiException {
        okhttp3.Call localVarCall = getSpecificFolderValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificFolderAsync(Double projectId, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificFolderValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificFolderRequestBuilder {
        private final Double projectId;

        private GetSpecificFolderRequestBuilder(double projectId) {
            this.projectId = projectId;
        }

        /**
         * Build call for getSpecificFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The folder was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificFolderCall(projectId, _callback);
        }


        /**
         * Execute getSpecificFolder request
         * @return Project
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The folder was returned. </td><td>  -  </td></tr>
         </table>
         */
        public Project execute() throws ApiException {
            ApiResponse<Project> localVarResp = getSpecificFolderWithHttpInfo(projectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificFolder request with HTTP info returned
         * @return ApiResponse&lt;Project&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The folder was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Project> executeWithHttpInfo() throws ApiException {
            return getSpecificFolderWithHttpInfo(projectId);
        }

        /**
         * Execute getSpecificFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The folder was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Project> _callback) throws ApiException {
            return getSpecificFolderAsync(projectId, _callback);
        }
    }

    /**
     * Get a specific folder
     * This method returns a single folder belonging to the authenticated user.
     * @param projectId The ID of the folder. (required)
     * @return GetSpecificFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The folder was returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificFolderRequestBuilder getSpecificFolder(double projectId) throws IllegalArgumentException {
        
        return new GetSpecificFolderRequestBuilder(projectId);
    }
    private okhttp3.Call getUserPrivateToMeFolderCall(Double ownerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{owner_id}/folders/private_to_me"
            .replace("{" + "owner_id" + "}", localVarApiClient.escapeString(ownerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserPrivateToMeFolderValidateBeforeCall(Double ownerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling getUserPrivateToMeFolder(Async)");
        }

        return getUserPrivateToMeFolderCall(ownerId, _callback);

    }


    private ApiResponse<Project> getUserPrivateToMeFolderWithHttpInfo(Double ownerId) throws ApiException {
        okhttp3.Call localVarCall = getUserPrivateToMeFolderValidateBeforeCall(ownerId, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserPrivateToMeFolderAsync(Double ownerId, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserPrivateToMeFolderValidateBeforeCall(ownerId, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserPrivateToMeFolderRequestBuilder {
        private final Double ownerId;

        private GetUserPrivateToMeFolderRequestBuilder(double ownerId) {
            this.ownerId = ownerId;
        }

        /**
         * Build call for getUserPrivateToMeFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The folder was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserPrivateToMeFolderCall(ownerId, _callback);
        }


        /**
         * Execute getUserPrivateToMeFolder request
         * @return Project
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The folder was returned. </td><td>  -  </td></tr>
         </table>
         */
        public Project execute() throws ApiException {
            ApiResponse<Project> localVarResp = getUserPrivateToMeFolderWithHttpInfo(ownerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserPrivateToMeFolder request with HTTP info returned
         * @return ApiResponse&lt;Project&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The folder was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Project> executeWithHttpInfo() throws ApiException {
            return getUserPrivateToMeFolderWithHttpInfo(ownerId);
        }

        /**
         * Execute getUserPrivateToMeFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The folder was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Project> _callback) throws ApiException {
            return getUserPrivateToMeFolderAsync(ownerId, _callback);
        }
    }

    /**
     * Get a user&#39;s private-to-me folder
     * This method returns the specified private-to-me folder.
     * @param ownerId The ID of the owner. (required)
     * @return GetUserPrivateToMeFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The folder was returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetUserPrivateToMeFolderRequestBuilder getUserPrivateToMeFolder(double ownerId) throws IllegalArgumentException {
        
        return new GetUserPrivateToMeFolderRequestBuilder(ownerId);
    }
    private okhttp3.Call projectCall(Double userId, CreateProjectRequest createProjectRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createProjectRequest;

        // create path and map variables
        String localVarPath = "/users/{user_id}/projects"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectValidateBeforeCall(Double userId, CreateProjectRequest createProjectRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling project(Async)");
        }

        // verify the required parameter 'createProjectRequest' is set
        if (createProjectRequest == null) {
            throw new ApiException("Missing the required parameter 'createProjectRequest' when calling project(Async)");
        }

        return projectCall(userId, createProjectRequest, _callback);

    }


    private ApiResponse<Project> projectWithHttpInfo(Double userId, CreateProjectRequest createProjectRequest) throws ApiException {
        okhttp3.Call localVarCall = projectValidateBeforeCall(userId, createProjectRequest, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call projectAsync(Double userId, CreateProjectRequest createProjectRequest, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectValidateBeforeCall(userId, createProjectRequest, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ProjectRequestBuilder {
        private final String name;
        private final Double userId;
        private String parentFolderUri;

        private ProjectRequestBuilder(String name, double userId) {
            this.name = name;
            this.userId = userId;
        }

        /**
         * Set parentFolderUri
         * @param parentFolderUri The URI of the parent folder. (optional)
         * @return ProjectRequestBuilder
         */
        public ProjectRequestBuilder parentFolderUri(String parentFolderUri) {
            this.parentFolderUri = parentFolderUri;
            return this;
        }
        
        /**
         * Build call for project
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The folder was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateProjectRequest createProjectRequest = buildBodyParams();
            return projectCall(userId, createProjectRequest, _callback);
        }

        private CreateProjectRequest buildBodyParams() {
            CreateProjectRequest createProjectRequest = new CreateProjectRequest();
            createProjectRequest.name(this.name);
            createProjectRequest.parentFolderUri(this.parentFolderUri);
            return createProjectRequest;
        }

        /**
         * Execute project request
         * @return Project
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The folder was created. </td><td>  -  </td></tr>
         </table>
         */
        public Project execute() throws ApiException {
            CreateProjectRequest createProjectRequest = buildBodyParams();
            ApiResponse<Project> localVarResp = projectWithHttpInfo(userId, createProjectRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute project request with HTTP info returned
         * @return ApiResponse&lt;Project&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The folder was created. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Project> executeWithHttpInfo() throws ApiException {
            CreateProjectRequest createProjectRequest = buildBodyParams();
            return projectWithHttpInfo(userId, createProjectRequest);
        }

        /**
         * Execute project request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The folder was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Project> _callback) throws ApiException {
            CreateProjectRequest createProjectRequest = buildBodyParams();
            return projectAsync(userId, createProjectRequest, _callback);
        }
    }

    /**
     * Create a folder
     * This method creates a new folder for the authenticated user. By default, this method creates a top-level folder. To create a subfolder — that is, to place the new folder inside an existing folder — specify the parent folder by URI with the **parent_folder_uri** parameter in the body of the request.
     * @param userId The ID of the user. (required)
     * @param createProjectRequest  (required)
     * @return ProjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The folder was created. </td><td>  -  </td></tr>
     </table>
     */
    public ProjectRequestBuilder project(String name, double userId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        
        return new ProjectRequestBuilder(name, userId);
    }
    private okhttp3.Call project_0Call(Double projectId, Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/projects/{project_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call project_0ValidateBeforeCall(Double projectId, Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling project_0(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling project_0(Async)");
        }

        return project_0Call(projectId, userId, _callback);

    }


    private ApiResponse<Project> project_0WithHttpInfo(Double projectId, Double userId) throws ApiException {
        okhttp3.Call localVarCall = project_0ValidateBeforeCall(projectId, userId, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call project_0Async(Double projectId, Double userId, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = project_0ValidateBeforeCall(projectId, userId, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Project0RequestBuilder {
        private final Double projectId;
        private final Double userId;

        private Project0RequestBuilder(double projectId, double userId) {
            this.projectId = projectId;
            this.userId = userId;
        }

        /**
         * Build call for project_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The folder was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return project_0Call(projectId, userId, _callback);
        }


        /**
         * Execute project_0 request
         * @return Project
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The folder was returned. </td><td>  -  </td></tr>
         </table>
         */
        public Project execute() throws ApiException {
            ApiResponse<Project> localVarResp = project_0WithHttpInfo(projectId, userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute project_0 request with HTTP info returned
         * @return ApiResponse&lt;Project&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The folder was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Project> executeWithHttpInfo() throws ApiException {
            return project_0WithHttpInfo(projectId, userId);
        }

        /**
         * Execute project_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The folder was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Project> _callback) throws ApiException {
            return project_0Async(projectId, userId, _callback);
        }
    }

    /**
     * Get a specific folder
     * This method returns a single folder belonging to the authenticated user.
     * @param projectId The ID of the folder. (required)
     * @param userId The ID of the user. (required)
     * @return Project0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The folder was returned. </td><td>  -  </td></tr>
     </table>
     */
    public Project0RequestBuilder project_0(double projectId, double userId) throws IllegalArgumentException {
        
        
        return new Project0RequestBuilder(projectId, userId);
    }
    private okhttp3.Call project_1Call(Double projectId, Double userId, Boolean shouldDeleteClips, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/projects/{project_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shouldDeleteClips != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("should_delete_clips", shouldDeleteClips));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call project_1ValidateBeforeCall(Double projectId, Double userId, Boolean shouldDeleteClips, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling project_1(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling project_1(Async)");
        }

        return project_1Call(projectId, userId, shouldDeleteClips, _callback);

    }


    private ApiResponse<Void> project_1WithHttpInfo(Double projectId, Double userId, Boolean shouldDeleteClips) throws ApiException {
        okhttp3.Call localVarCall = project_1ValidateBeforeCall(projectId, userId, shouldDeleteClips, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call project_1Async(Double projectId, Double userId, Boolean shouldDeleteClips, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = project_1ValidateBeforeCall(projectId, userId, shouldDeleteClips, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class Project1RequestBuilder {
        private final Double projectId;
        private final Double userId;
        private Boolean shouldDeleteClips;

        private Project1RequestBuilder(double projectId, double userId) {
            this.projectId = projectId;
            this.userId = userId;
        }

        /**
         * Set shouldDeleteClips
         * @param shouldDeleteClips Whether to delete all the videos in the folder along with the folder itself. (optional)
         * @return Project1RequestBuilder
         */
        public Project1RequestBuilder shouldDeleteClips(Boolean shouldDeleteClips) {
            this.shouldDeleteClips = shouldDeleteClips;
            return this;
        }
        
        /**
         * Build call for project_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The folder was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return project_1Call(projectId, userId, shouldDeleteClips, _callback);
        }


        /**
         * Execute project_1 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The folder was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            project_1WithHttpInfo(projectId, userId, shouldDeleteClips);
        }

        /**
         * Execute project_1 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The folder was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return project_1WithHttpInfo(projectId, userId, shouldDeleteClips);
        }

        /**
         * Execute project_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The folder was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return project_1Async(projectId, userId, shouldDeleteClips, _callback);
        }
    }

    /**
     * Delete a folder
     * This method deletes the specified folder and optionally also the videos that it contains. The authenticated user must be the owner of the folder.
     * @param projectId The ID of the folder. (required)
     * @param userId The ID of the user. (required)
     * @return Project1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The folder was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public Project1RequestBuilder project_1(double projectId, double userId) throws IllegalArgumentException {
        
        
        return new Project1RequestBuilder(projectId, userId);
    }
    private okhttp3.Call project_2Call(Double projectId, Double userId, EditProjectRequest editProjectRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editProjectRequest;

        // create path and map variables
        String localVarPath = "/users/{user_id}/projects/{project_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call project_2ValidateBeforeCall(Double projectId, Double userId, EditProjectRequest editProjectRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling project_2(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling project_2(Async)");
        }

        // verify the required parameter 'editProjectRequest' is set
        if (editProjectRequest == null) {
            throw new ApiException("Missing the required parameter 'editProjectRequest' when calling project_2(Async)");
        }

        return project_2Call(projectId, userId, editProjectRequest, _callback);

    }


    private ApiResponse<Project> project_2WithHttpInfo(Double projectId, Double userId, EditProjectRequest editProjectRequest) throws ApiException {
        okhttp3.Call localVarCall = project_2ValidateBeforeCall(projectId, userId, editProjectRequest, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call project_2Async(Double projectId, Double userId, EditProjectRequest editProjectRequest, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = project_2ValidateBeforeCall(projectId, userId, editProjectRequest, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Project2RequestBuilder {
        private final String name;
        private final Double projectId;
        private final Double userId;

        private Project2RequestBuilder(String name, double projectId, double userId) {
            this.name = name;
            this.projectId = projectId;
            this.userId = userId;
        }

        /**
         * Build call for project_2
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The folder was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EditProjectRequest editProjectRequest = buildBodyParams();
            return project_2Call(projectId, userId, editProjectRequest, _callback);
        }

        private EditProjectRequest buildBodyParams() {
            EditProjectRequest editProjectRequest = new EditProjectRequest();
            editProjectRequest.name(this.name);
            return editProjectRequest;
        }

        /**
         * Execute project_2 request
         * @return Project
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The folder was edited. </td><td>  -  </td></tr>
         </table>
         */
        public Project execute() throws ApiException {
            EditProjectRequest editProjectRequest = buildBodyParams();
            ApiResponse<Project> localVarResp = project_2WithHttpInfo(projectId, userId, editProjectRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute project_2 request with HTTP info returned
         * @return ApiResponse&lt;Project&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The folder was edited. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Project> executeWithHttpInfo() throws ApiException {
            EditProjectRequest editProjectRequest = buildBodyParams();
            return project_2WithHttpInfo(projectId, userId, editProjectRequest);
        }

        /**
         * Execute project_2 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The folder was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Project> _callback) throws ApiException {
            EditProjectRequest editProjectRequest = buildBodyParams();
            return project_2Async(projectId, userId, editProjectRequest, _callback);
        }
    }

    /**
     * Edit a folder
     * This method edits the specified folder. The authenticated user must be the owner of the folder.
     * @param projectId The ID of the folder. (required)
     * @param userId The ID of the user. (required)
     * @param editProjectRequest  (required)
     * @return Project2RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The folder was edited. </td><td>  -  </td></tr>
     </table>
     */
    public Project2RequestBuilder project_2(String name, double projectId, double userId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        
        
        return new Project2RequestBuilder(name, projectId, userId);
    }
    private okhttp3.Call projectsCall(Double userId, String direction, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/projects"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsValidateBeforeCall(Double userId, String direction, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling projects(Async)");
        }

        return projectsCall(userId, direction, page, perPage, query, sort, _callback);

    }


    private ApiResponse<List<Project>> projectsWithHttpInfo(Double userId, String direction, Double page, Double perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = projectsValidateBeforeCall(userId, direction, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call projectsAsync(Double userId, String direction, Double page, Double perPage, String query, String sort, final ApiCallback<List<Project>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsValidateBeforeCall(userId, direction, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ProjectsRequestBuilder {
        private final Double userId;
        private String direction;
        private Double page;
        private Double perPage;
        private String query;
        private String sort;

        private ProjectsRequestBuilder(double userId) {
            this.userId = userId;
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return ProjectsRequestBuilder
         */
        public ProjectsRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return ProjectsRequestBuilder
         */
        public ProjectsRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return ProjectsRequestBuilder
         */
        public ProjectsRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set query
         * @param query The search query to use to filter the results. (optional)
         * @return ProjectsRequestBuilder
         */
        public ProjectsRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sort order.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;name&#x60; - Sort the results by name.  * &#x60;pinned_on&#x60; - Sort the results by pinned timestamp.  (optional)
         * @return ProjectsRequestBuilder
         */
        public ProjectsRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for projects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The folders were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return projectsCall(userId, direction, page, perPage, query, sort, _callback);
        }


        /**
         * Execute projects request
         * @return List&lt;Project&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The folders were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Project> execute() throws ApiException {
            ApiResponse<List<Project>> localVarResp = projectsWithHttpInfo(userId, direction, page, perPage, query, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute projects request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Project&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The folders were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Project>> executeWithHttpInfo() throws ApiException {
            return projectsWithHttpInfo(userId, direction, page, perPage, query, sort);
        }

        /**
         * Execute projects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The folders were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Project>> _callback) throws ApiException {
            return projectsAsync(userId, direction, page, perPage, query, sort, _callback);
        }
    }

    /**
     * Get all the folders that belong to the user
     * This method returns all the folders belonging to the authenticated user.
     * @param userId The ID of the user. (required)
     * @return ProjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The folders were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ProjectsRequestBuilder projects(double userId) throws IllegalArgumentException {
        
        return new ProjectsRequestBuilder(userId);
    }
}
