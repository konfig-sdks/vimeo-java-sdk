/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.FollowUsersRequest;
import com.konfigthis.client.model.User;
import com.konfigthis.client.model.UsersFollowersFollowMultipleUsersRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UsersFollowersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersFollowersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UsersFollowersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call checkFollowingStatusCall(Double followUserId, Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/following/{follow_user_id}"
            .replace("{" + "follow_user_id" + "}", localVarApiClient.escapeString(followUserId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkFollowingStatusValidateBeforeCall(Double followUserId, Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'followUserId' is set
        if (followUserId == null) {
            throw new ApiException("Missing the required parameter 'followUserId' when calling checkFollowingStatus(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling checkFollowingStatus(Async)");
        }

        return checkFollowingStatusCall(followUserId, userId, _callback);

    }


    private ApiResponse<Void> checkFollowingStatusWithHttpInfo(Double followUserId, Double userId) throws ApiException {
        okhttp3.Call localVarCall = checkFollowingStatusValidateBeforeCall(followUserId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call checkFollowingStatusAsync(Double followUserId, Double userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkFollowingStatusValidateBeforeCall(followUserId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CheckFollowingStatusRequestBuilder {
        private final Double followUserId;
        private final Double userId;

        private CheckFollowingStatusRequestBuilder(double followUserId, double userId) {
            this.followUserId = followUserId;
            this.userId = userId;
        }

        /**
         * Build call for checkFollowingStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The authenticated user follows the specified user. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkFollowingStatusCall(followUserId, userId, _callback);
        }


        /**
         * Execute checkFollowingStatus request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The authenticated user follows the specified user. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            checkFollowingStatusWithHttpInfo(followUserId, userId);
        }

        /**
         * Execute checkFollowingStatus request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The authenticated user follows the specified user. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return checkFollowingStatusWithHttpInfo(followUserId, userId);
        }

        /**
         * Execute checkFollowingStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The authenticated user follows the specified user. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return checkFollowingStatusAsync(followUserId, userId, _callback);
        }
    }

    /**
     * Check if the user is following another user
     * This method determines whether the authenticated user is a follower of the specified user.
     * @param followUserId The ID of the user to follow. (required)
     * @param userId The ID of the user. (required)
     * @return CheckFollowingStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The authenticated user follows the specified user. </td><td>  -  </td></tr>
     </table>
     */
    public CheckFollowingStatusRequestBuilder checkFollowingStatus(double followUserId, double userId) throws IllegalArgumentException {
        
        
        return new CheckFollowingStatusRequestBuilder(followUserId, userId);
    }
    private okhttp3.Call checkFollowingUserCall(Double followUserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/following/{follow_user_id}"
            .replace("{" + "follow_user_id" + "}", localVarApiClient.escapeString(followUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkFollowingUserValidateBeforeCall(Double followUserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'followUserId' is set
        if (followUserId == null) {
            throw new ApiException("Missing the required parameter 'followUserId' when calling checkFollowingUser(Async)");
        }

        return checkFollowingUserCall(followUserId, _callback);

    }


    private ApiResponse<Void> checkFollowingUserWithHttpInfo(Double followUserId) throws ApiException {
        okhttp3.Call localVarCall = checkFollowingUserValidateBeforeCall(followUserId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call checkFollowingUserAsync(Double followUserId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkFollowingUserValidateBeforeCall(followUserId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CheckFollowingUserRequestBuilder {
        private final Double followUserId;

        private CheckFollowingUserRequestBuilder(double followUserId) {
            this.followUserId = followUserId;
        }

        /**
         * Build call for checkFollowingUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The authenticated user follows the specified user. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkFollowingUserCall(followUserId, _callback);
        }


        /**
         * Execute checkFollowingUser request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The authenticated user follows the specified user. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            checkFollowingUserWithHttpInfo(followUserId);
        }

        /**
         * Execute checkFollowingUser request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The authenticated user follows the specified user. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return checkFollowingUserWithHttpInfo(followUserId);
        }

        /**
         * Execute checkFollowingUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The authenticated user follows the specified user. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return checkFollowingUserAsync(followUserId, _callback);
        }
    }

    /**
     * Check if the user is following another user
     * This method determines whether the authenticated user is a follower of the specified user.
     * @param followUserId The ID of the user to follow. (required)
     * @return CheckFollowingUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The authenticated user follows the specified user. </td><td>  -  </td></tr>
     </table>
     */
    public CheckFollowingUserRequestBuilder checkFollowingUser(double followUserId) throws IllegalArgumentException {
        
        return new CheckFollowingUserRequestBuilder(followUserId);
    }
    private okhttp3.Call followMultipleUsersCall(UsersFollowersFollowMultipleUsersRequest usersFollowersFollowMultipleUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersFollowersFollowMultipleUsersRequest;

        // create path and map variables
        String localVarPath = "/me/following";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call followMultipleUsersValidateBeforeCall(UsersFollowersFollowMultipleUsersRequest usersFollowersFollowMultipleUsersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'usersFollowersFollowMultipleUsersRequest' is set
        if (usersFollowersFollowMultipleUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'usersFollowersFollowMultipleUsersRequest' when calling followMultipleUsers(Async)");
        }

        return followMultipleUsersCall(usersFollowersFollowMultipleUsersRequest, _callback);

    }


    private ApiResponse<Void> followMultipleUsersWithHttpInfo(UsersFollowersFollowMultipleUsersRequest usersFollowersFollowMultipleUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = followMultipleUsersValidateBeforeCall(usersFollowersFollowMultipleUsersRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call followMultipleUsersAsync(UsersFollowersFollowMultipleUsersRequest usersFollowersFollowMultipleUsersRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = followMultipleUsersValidateBeforeCall(usersFollowersFollowMultipleUsersRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class FollowMultipleUsersRequestBuilder {
        private final List<String> users;

        private FollowMultipleUsersRequestBuilder(List<String> users) {
            this.users = users;
        }

        /**
         * Build call for followMultipleUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The users were followed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersFollowersFollowMultipleUsersRequest usersFollowersFollowMultipleUsersRequest = buildBodyParams();
            return followMultipleUsersCall(usersFollowersFollowMultipleUsersRequest, _callback);
        }

        private UsersFollowersFollowMultipleUsersRequest buildBodyParams() {
            UsersFollowersFollowMultipleUsersRequest usersFollowersFollowMultipleUsersRequest = new UsersFollowersFollowMultipleUsersRequest();
            usersFollowersFollowMultipleUsersRequest.users(this.users);
            return usersFollowersFollowMultipleUsersRequest;
        }

        /**
         * Execute followMultipleUsers request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The users were followed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UsersFollowersFollowMultipleUsersRequest usersFollowersFollowMultipleUsersRequest = buildBodyParams();
            followMultipleUsersWithHttpInfo(usersFollowersFollowMultipleUsersRequest);
        }

        /**
         * Execute followMultipleUsers request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The users were followed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UsersFollowersFollowMultipleUsersRequest usersFollowersFollowMultipleUsersRequest = buildBodyParams();
            return followMultipleUsersWithHttpInfo(usersFollowersFollowMultipleUsersRequest);
        }

        /**
         * Execute followMultipleUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The users were followed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UsersFollowersFollowMultipleUsersRequest usersFollowersFollowMultipleUsersRequest = buildBodyParams();
            return followMultipleUsersAsync(usersFollowersFollowMultipleUsersRequest, _callback);
        }
    }

    /**
     * Follow a list of users
     * This method causes the authenticated user to become a follower of multiple users. In the body of the request, specify the list of users to follow as an array of URIs, where &#x60;user01_id&#x60;, &#x60;user02_id&#x60;, &#x60;user03_id&#x60;, and so on, are the user IDs of the users in question:  &#x60;&#x60;&#x60; {  [      {\&quot;uri\&quot; : \&quot;/users/{user01_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user02_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user03_id}\&quot;}  ] } &#x60;&#x60;&#x60;
     * @param usersFollowersFollowMultipleUsersRequest  (required)
     * @return FollowMultipleUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The users were followed. </td><td>  -  </td></tr>
     </table>
     */
    public FollowMultipleUsersRequestBuilder followMultipleUsers(List<String> users) throws IllegalArgumentException {
        if (users == null) throw new IllegalArgumentException("\"users\" is required but got null");
        return new FollowMultipleUsersRequestBuilder(users);
    }
    private okhttp3.Call followSpecificUserCall(Double followUserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/following/{follow_user_id}"
            .replace("{" + "follow_user_id" + "}", localVarApiClient.escapeString(followUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call followSpecificUserValidateBeforeCall(Double followUserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'followUserId' is set
        if (followUserId == null) {
            throw new ApiException("Missing the required parameter 'followUserId' when calling followSpecificUser(Async)");
        }

        return followSpecificUserCall(followUserId, _callback);

    }


    private ApiResponse<Void> followSpecificUserWithHttpInfo(Double followUserId) throws ApiException {
        okhttp3.Call localVarCall = followSpecificUserValidateBeforeCall(followUserId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call followSpecificUserAsync(Double followUserId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = followSpecificUserValidateBeforeCall(followUserId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class FollowSpecificUserRequestBuilder {
        private final Double followUserId;

        private FollowSpecificUserRequestBuilder(double followUserId) {
            this.followUserId = followUserId;
        }

        /**
         * Build call for followSpecificUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user was followed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return followSpecificUserCall(followUserId, _callback);
        }


        /**
         * Execute followSpecificUser request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user was followed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            followSpecificUserWithHttpInfo(followUserId);
        }

        /**
         * Execute followSpecificUser request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user was followed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return followSpecificUserWithHttpInfo(followUserId);
        }

        /**
         * Execute followSpecificUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user was followed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return followSpecificUserAsync(followUserId, _callback);
        }
    }

    /**
     * Follow a specific user
     * This method causes the authenticated user to become the follower of the specified user.
     * @param followUserId The ID of the user to follow. (required)
     * @return FollowSpecificUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was followed. </td><td>  -  </td></tr>
     </table>
     */
    public FollowSpecificUserRequestBuilder followSpecificUser(double followUserId) throws IllegalArgumentException {
        
        return new FollowSpecificUserRequestBuilder(followUserId);
    }
    private okhttp3.Call followersCall(Double userId, String direction, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/followers"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call followersValidateBeforeCall(Double userId, String direction, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling followers(Async)");
        }

        return followersCall(userId, direction, page, perPage, query, sort, _callback);

    }


    private ApiResponse<List<User>> followersWithHttpInfo(Double userId, String direction, Double page, Double perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = followersValidateBeforeCall(userId, direction, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call followersAsync(Double userId, String direction, Double page, Double perPage, String query, String sort, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = followersValidateBeforeCall(userId, direction, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FollowersRequestBuilder {
        private final Double userId;
        private String direction;
        private Double page;
        private Double perPage;
        private String query;
        private String sort;

        private FollowersRequestBuilder(double userId) {
            this.userId = userId;
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return FollowersRequestBuilder
         */
        public FollowersRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return FollowersRequestBuilder
         */
        public FollowersRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return FollowersRequestBuilder
         */
        public FollowersRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set query
         * @param query The search query to use to filter the results. (optional)
         * @return FollowersRequestBuilder
         */
        public FollowersRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)
         * @return FollowersRequestBuilder
         */
        public FollowersRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for followers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The user&#39;s followers were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return followersCall(userId, direction, page, perPage, query, sort, _callback);
        }


        /**
         * Execute followers request
         * @return List&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The user&#39;s followers were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<User> execute() throws ApiException {
            ApiResponse<List<User>> localVarResp = followersWithHttpInfo(userId, direction, page, perPage, query, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute followers request with HTTP info returned
         * @return ApiResponse&lt;List&lt;User&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The user&#39;s followers were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<User>> executeWithHttpInfo() throws ApiException {
            return followersWithHttpInfo(userId, direction, page, perPage, query, sort);
        }

        /**
         * Execute followers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The user&#39;s followers were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<User>> _callback) throws ApiException {
            return followersAsync(userId, direction, page, perPage, query, sort, _callback);
        }
    }

    /**
     * Get all the followers of the user
     * This method returns every follower of the authenticated user.
     * @param userId The ID of the user. (required)
     * @return FollowersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user&#39;s followers were returned. </td><td>  -  </td></tr>
     </table>
     */
    public FollowersRequestBuilder followers(double userId) throws IllegalArgumentException {
        
        return new FollowersRequestBuilder(userId);
    }
    private okhttp3.Call listAllCall(String direction, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/followers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllValidateBeforeCall(String direction, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        return listAllCall(direction, page, perPage, query, sort, _callback);

    }


    private ApiResponse<List<User>> listAllWithHttpInfo(String direction, Double page, Double perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = listAllValidateBeforeCall(direction, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllAsync(String direction, Double page, Double perPage, String query, String sort, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllValidateBeforeCall(direction, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllRequestBuilder {
        private String direction;
        private Double page;
        private Double perPage;
        private String query;
        private String sort;

        private ListAllRequestBuilder() {
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set query
         * @param query The search query to use to filter the results. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for listAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The user&#39;s followers were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllCall(direction, page, perPage, query, sort, _callback);
        }


        /**
         * Execute listAll request
         * @return List&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The user&#39;s followers were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<User> execute() throws ApiException {
            ApiResponse<List<User>> localVarResp = listAllWithHttpInfo(direction, page, perPage, query, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAll request with HTTP info returned
         * @return ApiResponse&lt;List&lt;User&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The user&#39;s followers were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<User>> executeWithHttpInfo() throws ApiException {
            return listAllWithHttpInfo(direction, page, perPage, query, sort);
        }

        /**
         * Execute listAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The user&#39;s followers were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<User>> _callback) throws ApiException {
            return listAllAsync(direction, page, perPage, query, sort, _callback);
        }
    }

    /**
     * Get all the followers of the user
     * This method returns every follower of the authenticated user.
     * @return ListAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user&#39;s followers were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ListAllRequestBuilder listAll() throws IllegalArgumentException {
        return new ListAllRequestBuilder();
    }
    private okhttp3.Call listOfFollowedUsersCall(Double userId, String direction, String filter, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/following"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOfFollowedUsersValidateBeforeCall(Double userId, String direction, String filter, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listOfFollowedUsers(Async)");
        }

        return listOfFollowedUsersCall(userId, direction, filter, page, perPage, query, sort, _callback);

    }


    private ApiResponse<List<User>> listOfFollowedUsersWithHttpInfo(Double userId, String direction, String filter, Double page, Double perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = listOfFollowedUsersValidateBeforeCall(userId, direction, filter, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listOfFollowedUsersAsync(Double userId, String direction, String filter, Double page, Double perPage, String query, String sort, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOfFollowedUsersValidateBeforeCall(userId, direction, filter, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListOfFollowedUsersRequestBuilder {
        private final Double userId;
        private String direction;
        private String filter;
        private Double page;
        private Double perPage;
        private String query;
        private String sort;

        private ListOfFollowedUsersRequestBuilder(double userId) {
            this.userId = userId;
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return ListOfFollowedUsersRequestBuilder
         */
        public ListOfFollowedUsersRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The attribute by which to filter the results.  Option descriptions:  * &#x60;online&#x60; - Return users who are currently online.  (optional)
         * @return ListOfFollowedUsersRequestBuilder
         */
        public ListOfFollowedUsersRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return ListOfFollowedUsersRequestBuilder
         */
        public ListOfFollowedUsersRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return ListOfFollowedUsersRequestBuilder
         */
        public ListOfFollowedUsersRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set query
         * @param query The search query to use to filter the results. (optional)
         * @return ListOfFollowedUsersRequestBuilder
         */
        public ListOfFollowedUsersRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)
         * @return ListOfFollowedUsersRequestBuilder
         */
        public ListOfFollowedUsersRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for listOfFollowedUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The followed users were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listOfFollowedUsersCall(userId, direction, filter, page, perPage, query, sort, _callback);
        }


        /**
         * Execute listOfFollowedUsers request
         * @return List&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The followed users were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<User> execute() throws ApiException {
            ApiResponse<List<User>> localVarResp = listOfFollowedUsersWithHttpInfo(userId, direction, filter, page, perPage, query, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listOfFollowedUsers request with HTTP info returned
         * @return ApiResponse&lt;List&lt;User&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The followed users were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<User>> executeWithHttpInfo() throws ApiException {
            return listOfFollowedUsersWithHttpInfo(userId, direction, filter, page, perPage, query, sort);
        }

        /**
         * Execute listOfFollowedUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The followed users were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<User>> _callback) throws ApiException {
            return listOfFollowedUsersAsync(userId, direction, filter, page, perPage, query, sort, _callback);
        }
    }

    /**
     * Get all the users that the user is following
     * This method returns every user that the authenticated user is following.
     * @param userId The ID of the user. (required)
     * @return ListOfFollowedUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The followed users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ListOfFollowedUsersRequestBuilder listOfFollowedUsers(double userId) throws IllegalArgumentException {
        
        return new ListOfFollowedUsersRequestBuilder(userId);
    }
    private okhttp3.Call listOfFollowingUsersCall(String direction, String filter, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/following";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOfFollowingUsersValidateBeforeCall(String direction, String filter, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        return listOfFollowingUsersCall(direction, filter, page, perPage, query, sort, _callback);

    }


    private ApiResponse<List<User>> listOfFollowingUsersWithHttpInfo(String direction, String filter, Double page, Double perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = listOfFollowingUsersValidateBeforeCall(direction, filter, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listOfFollowingUsersAsync(String direction, String filter, Double page, Double perPage, String query, String sort, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOfFollowingUsersValidateBeforeCall(direction, filter, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListOfFollowingUsersRequestBuilder {
        private String direction;
        private String filter;
        private Double page;
        private Double perPage;
        private String query;
        private String sort;

        private ListOfFollowingUsersRequestBuilder() {
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return ListOfFollowingUsersRequestBuilder
         */
        public ListOfFollowingUsersRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The attribute by which to filter the results.  Option descriptions:  * &#x60;online&#x60; - Return users who are currently online.  (optional)
         * @return ListOfFollowingUsersRequestBuilder
         */
        public ListOfFollowingUsersRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return ListOfFollowingUsersRequestBuilder
         */
        public ListOfFollowingUsersRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return ListOfFollowingUsersRequestBuilder
         */
        public ListOfFollowingUsersRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set query
         * @param query The search query to use to filter the results. (optional)
         * @return ListOfFollowingUsersRequestBuilder
         */
        public ListOfFollowingUsersRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)
         * @return ListOfFollowingUsersRequestBuilder
         */
        public ListOfFollowingUsersRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for listOfFollowingUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The followed users were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listOfFollowingUsersCall(direction, filter, page, perPage, query, sort, _callback);
        }


        /**
         * Execute listOfFollowingUsers request
         * @return List&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The followed users were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<User> execute() throws ApiException {
            ApiResponse<List<User>> localVarResp = listOfFollowingUsersWithHttpInfo(direction, filter, page, perPage, query, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listOfFollowingUsers request with HTTP info returned
         * @return ApiResponse&lt;List&lt;User&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The followed users were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<User>> executeWithHttpInfo() throws ApiException {
            return listOfFollowingUsersWithHttpInfo(direction, filter, page, perPage, query, sort);
        }

        /**
         * Execute listOfFollowingUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The followed users were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<User>> _callback) throws ApiException {
            return listOfFollowingUsersAsync(direction, filter, page, perPage, query, sort, _callback);
        }
    }

    /**
     * Get all the users that the user is following
     * This method returns every user that the authenticated user is following.
     * @return ListOfFollowingUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The followed users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ListOfFollowingUsersRequestBuilder listOfFollowingUsers() throws IllegalArgumentException {
        return new ListOfFollowingUsersRequestBuilder();
    }
    private okhttp3.Call stopFollowingUserCall(Double followUserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/following/{follow_user_id}"
            .replace("{" + "follow_user_id" + "}", localVarApiClient.escapeString(followUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stopFollowingUserValidateBeforeCall(Double followUserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'followUserId' is set
        if (followUserId == null) {
            throw new ApiException("Missing the required parameter 'followUserId' when calling stopFollowingUser(Async)");
        }

        return stopFollowingUserCall(followUserId, _callback);

    }


    private ApiResponse<Void> stopFollowingUserWithHttpInfo(Double followUserId) throws ApiException {
        okhttp3.Call localVarCall = stopFollowingUserValidateBeforeCall(followUserId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call stopFollowingUserAsync(Double followUserId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stopFollowingUserValidateBeforeCall(followUserId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class StopFollowingUserRequestBuilder {
        private final Double followUserId;

        private StopFollowingUserRequestBuilder(double followUserId) {
            this.followUserId = followUserId;
        }

        /**
         * Build call for stopFollowingUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user was unfollowed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return stopFollowingUserCall(followUserId, _callback);
        }


        /**
         * Execute stopFollowingUser request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user was unfollowed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            stopFollowingUserWithHttpInfo(followUserId);
        }

        /**
         * Execute stopFollowingUser request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user was unfollowed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return stopFollowingUserWithHttpInfo(followUserId);
        }

        /**
         * Execute stopFollowingUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user was unfollowed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return stopFollowingUserAsync(followUserId, _callback);
        }
    }

    /**
     * Unfollow a user
     * This method causes the authenticated user to stop following another user.
     * @param followUserId The ID of the user to unfollow. (required)
     * @return StopFollowingUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was unfollowed. </td><td>  -  </td></tr>
     </table>
     */
    public StopFollowingUserRequestBuilder stopFollowingUser(double followUserId) throws IllegalArgumentException {
        
        return new StopFollowingUserRequestBuilder(followUserId);
    }
    private okhttp3.Call userCall(Double followUserId, Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/following/{follow_user_id}"
            .replace("{" + "follow_user_id" + "}", localVarApiClient.escapeString(followUserId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userValidateBeforeCall(Double followUserId, Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'followUserId' is set
        if (followUserId == null) {
            throw new ApiException("Missing the required parameter 'followUserId' when calling user(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling user(Async)");
        }

        return userCall(followUserId, userId, _callback);

    }


    private ApiResponse<Void> userWithHttpInfo(Double followUserId, Double userId) throws ApiException {
        okhttp3.Call localVarCall = userValidateBeforeCall(followUserId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call userAsync(Double followUserId, Double userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userValidateBeforeCall(followUserId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UserRequestBuilder {
        private final Double followUserId;
        private final Double userId;

        private UserRequestBuilder(double followUserId, double userId) {
            this.followUserId = followUserId;
            this.userId = userId;
        }

        /**
         * Build call for user
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user was followed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return userCall(followUserId, userId, _callback);
        }


        /**
         * Execute user request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user was followed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            userWithHttpInfo(followUserId, userId);
        }

        /**
         * Execute user request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user was followed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return userWithHttpInfo(followUserId, userId);
        }

        /**
         * Execute user request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user was followed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return userAsync(followUserId, userId, _callback);
        }
    }

    /**
     * Follow a specific user
     * This method causes the authenticated user to become the follower of the specified user.
     * @param followUserId The ID of the user to follow. (required)
     * @param userId The ID of the user. (required)
     * @return UserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was followed. </td><td>  -  </td></tr>
     </table>
     */
    public UserRequestBuilder user(double followUserId, double userId) throws IllegalArgumentException {
        
        
        return new UserRequestBuilder(followUserId, userId);
    }
    private okhttp3.Call user_0Call(Double followUserId, Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/following/{follow_user_id}"
            .replace("{" + "follow_user_id" + "}", localVarApiClient.escapeString(followUserId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call user_0ValidateBeforeCall(Double followUserId, Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'followUserId' is set
        if (followUserId == null) {
            throw new ApiException("Missing the required parameter 'followUserId' when calling user_0(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling user_0(Async)");
        }

        return user_0Call(followUserId, userId, _callback);

    }


    private ApiResponse<Void> user_0WithHttpInfo(Double followUserId, Double userId) throws ApiException {
        okhttp3.Call localVarCall = user_0ValidateBeforeCall(followUserId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call user_0Async(Double followUserId, Double userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = user_0ValidateBeforeCall(followUserId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class User0RequestBuilder {
        private final Double followUserId;
        private final Double userId;

        private User0RequestBuilder(double followUserId, double userId) {
            this.followUserId = followUserId;
            this.userId = userId;
        }

        /**
         * Build call for user_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user was unfollowed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return user_0Call(followUserId, userId, _callback);
        }


        /**
         * Execute user_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user was unfollowed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            user_0WithHttpInfo(followUserId, userId);
        }

        /**
         * Execute user_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user was unfollowed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return user_0WithHttpInfo(followUserId, userId);
        }

        /**
         * Execute user_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user was unfollowed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return user_0Async(followUserId, userId, _callback);
        }
    }

    /**
     * Unfollow a user
     * This method causes the authenticated user to stop following another user.
     * @param followUserId The ID of the user to unfollow. (required)
     * @param userId The ID of the user. (required)
     * @return User0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was unfollowed. </td><td>  -  </td></tr>
     </table>
     */
    public User0RequestBuilder user_0(double followUserId, double userId) throws IllegalArgumentException {
        
        
        return new User0RequestBuilder(followUserId, userId);
    }
    private okhttp3.Call usersCall(Double userId, FollowUsersRequest followUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = followUsersRequest;

        // create path and map variables
        String localVarPath = "/users/{user_id}/following"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersValidateBeforeCall(Double userId, FollowUsersRequest followUsersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling users(Async)");
        }

        // verify the required parameter 'followUsersRequest' is set
        if (followUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'followUsersRequest' when calling users(Async)");
        }

        return usersCall(userId, followUsersRequest, _callback);

    }


    private ApiResponse<Void> usersWithHttpInfo(Double userId, FollowUsersRequest followUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = usersValidateBeforeCall(userId, followUsersRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call usersAsync(Double userId, FollowUsersRequest followUsersRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersValidateBeforeCall(userId, followUsersRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UsersRequestBuilder {
        private final List<String> users;
        private final Double userId;

        private UsersRequestBuilder(List<String> users, double userId) {
            this.users = users;
            this.userId = userId;
        }

        /**
         * Build call for users
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The users were followed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FollowUsersRequest followUsersRequest = buildBodyParams();
            return usersCall(userId, followUsersRequest, _callback);
        }

        private FollowUsersRequest buildBodyParams() {
            FollowUsersRequest followUsersRequest = new FollowUsersRequest();
            followUsersRequest.users(this.users);
            return followUsersRequest;
        }

        /**
         * Execute users request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The users were followed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            FollowUsersRequest followUsersRequest = buildBodyParams();
            usersWithHttpInfo(userId, followUsersRequest);
        }

        /**
         * Execute users request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The users were followed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            FollowUsersRequest followUsersRequest = buildBodyParams();
            return usersWithHttpInfo(userId, followUsersRequest);
        }

        /**
         * Execute users request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The users were followed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            FollowUsersRequest followUsersRequest = buildBodyParams();
            return usersAsync(userId, followUsersRequest, _callback);
        }
    }

    /**
     * Follow a list of users
     * This method causes the authenticated user to become a follower of multiple users. In the body of the request, specify the list of users to follow as an array of URIs, where &#x60;user01_id&#x60;, &#x60;user02_id&#x60;, &#x60;user03_id&#x60;, and so on, are the user IDs of the users in question:  &#x60;&#x60;&#x60; {  [      {\&quot;uri\&quot; : \&quot;/users/{user01_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user02_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user03_id}\&quot;}  ] } &#x60;&#x60;&#x60;
     * @param userId The ID of the user. (required)
     * @param followUsersRequest  (required)
     * @return UsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The users were followed. </td><td>  -  </td></tr>
     </table>
     */
    public UsersRequestBuilder users(List<String> users, double userId) throws IllegalArgumentException {
        if (users == null) throw new IllegalArgumentException("\"users\" is required but got null");
        
        return new UsersRequestBuilder(users, userId);
    }
}
