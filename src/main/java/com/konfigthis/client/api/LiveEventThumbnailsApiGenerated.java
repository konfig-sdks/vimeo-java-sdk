/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.LiveEventThumbnailsAddThumbnailRequest;
import com.konfigthis.client.model.LiveEventThumbnailsCreateThumbnailForEventRequest;
import com.konfigthis.client.model.LiveEventThumbnailsCreateThumbnailForEventRequest1;
import com.konfigthis.client.model.LiveEventThumbnailsEditEventThumbnailRequest;
import com.konfigthis.client.model.LiveEventThumbnailsEditLiveEventThumbnailRequest;
import com.konfigthis.client.model.LiveEventThumbnailsUpdateEventThumbnailRequest;
import com.konfigthis.client.model.Picture;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LiveEventThumbnailsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LiveEventThumbnailsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LiveEventThumbnailsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addThumbnailCall(Double liveEventId, LiveEventThumbnailsAddThumbnailRequest liveEventThumbnailsAddThumbnailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = liveEventThumbnailsAddThumbnailRequest;

        // create path and map variables
        String localVarPath = "/me/live_events/{live_event_id}/pictures"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addThumbnailValidateBeforeCall(Double liveEventId, LiveEventThumbnailsAddThumbnailRequest liveEventThumbnailsAddThumbnailRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling addThumbnail(Async)");
        }

        return addThumbnailCall(liveEventId, liveEventThumbnailsAddThumbnailRequest, _callback);

    }


    private ApiResponse<Picture> addThumbnailWithHttpInfo(Double liveEventId, LiveEventThumbnailsAddThumbnailRequest liveEventThumbnailsAddThumbnailRequest) throws ApiException {
        okhttp3.Call localVarCall = addThumbnailValidateBeforeCall(liveEventId, liveEventThumbnailsAddThumbnailRequest, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addThumbnailAsync(Double liveEventId, LiveEventThumbnailsAddThumbnailRequest liveEventThumbnailsAddThumbnailRequest, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = addThumbnailValidateBeforeCall(liveEventId, liveEventThumbnailsAddThumbnailRequest, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddThumbnailRequestBuilder {
        private final Double liveEventId;
        private Boolean active;

        private AddThumbnailRequestBuilder(double liveEventId) {
            this.liveEventId = liveEventId;
        }

        /**
         * Set active
         * @param active Whether the thumbnail is the event&#39;s active thumbnail. (optional)
         * @return AddThumbnailRequestBuilder
         */
        public AddThumbnailRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Build call for addThumbnail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LiveEventThumbnailsAddThumbnailRequest liveEventThumbnailsAddThumbnailRequest = buildBodyParams();
            return addThumbnailCall(liveEventId, liveEventThumbnailsAddThumbnailRequest, _callback);
        }

        private LiveEventThumbnailsAddThumbnailRequest buildBodyParams() {
            LiveEventThumbnailsAddThumbnailRequest liveEventThumbnailsAddThumbnailRequest = new LiveEventThumbnailsAddThumbnailRequest();
            liveEventThumbnailsAddThumbnailRequest.active(this.active);
            return liveEventThumbnailsAddThumbnailRequest;
        }

        /**
         * Execute addThumbnail request
         * @return Picture
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was created. </td><td>  -  </td></tr>
         </table>
         */
        public Picture execute() throws ApiException {
            LiveEventThumbnailsAddThumbnailRequest liveEventThumbnailsAddThumbnailRequest = buildBodyParams();
            ApiResponse<Picture> localVarResp = addThumbnailWithHttpInfo(liveEventId, liveEventThumbnailsAddThumbnailRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addThumbnail request with HTTP info returned
         * @return ApiResponse&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was created. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Picture> executeWithHttpInfo() throws ApiException {
            LiveEventThumbnailsAddThumbnailRequest liveEventThumbnailsAddThumbnailRequest = buildBodyParams();
            return addThumbnailWithHttpInfo(liveEventId, liveEventThumbnailsAddThumbnailRequest);
        }

        /**
         * Execute addThumbnail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Picture> _callback) throws ApiException {
            LiveEventThumbnailsAddThumbnailRequest liveEventThumbnailsAddThumbnailRequest = buildBodyParams();
            return addThumbnailAsync(liveEventId, liveEventThumbnailsAddThumbnailRequest, _callback);
        }
    }

    /**
     * Create a live event thumbnail
     * This method creates a thumbnail image for the specified event.
     * @param liveEventId The ID of the event. (required)
     * @return AddThumbnailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The thumbnail was created. </td><td>  -  </td></tr>
     </table>
     */
    public AddThumbnailRequestBuilder addThumbnail(double liveEventId) throws IllegalArgumentException {
        
        return new AddThumbnailRequestBuilder(liveEventId);
    }
    private okhttp3.Call createThumbnailForEventCall(Double liveEventId, LiveEventThumbnailsCreateThumbnailForEventRequest liveEventThumbnailsCreateThumbnailForEventRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = liveEventThumbnailsCreateThumbnailForEventRequest;

        // create path and map variables
        String localVarPath = "/live_events/{live_event_id}/pictures"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createThumbnailForEventValidateBeforeCall(Double liveEventId, LiveEventThumbnailsCreateThumbnailForEventRequest liveEventThumbnailsCreateThumbnailForEventRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling createThumbnailForEvent(Async)");
        }

        return createThumbnailForEventCall(liveEventId, liveEventThumbnailsCreateThumbnailForEventRequest, _callback);

    }


    private ApiResponse<Picture> createThumbnailForEventWithHttpInfo(Double liveEventId, LiveEventThumbnailsCreateThumbnailForEventRequest liveEventThumbnailsCreateThumbnailForEventRequest) throws ApiException {
        okhttp3.Call localVarCall = createThumbnailForEventValidateBeforeCall(liveEventId, liveEventThumbnailsCreateThumbnailForEventRequest, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createThumbnailForEventAsync(Double liveEventId, LiveEventThumbnailsCreateThumbnailForEventRequest liveEventThumbnailsCreateThumbnailForEventRequest, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = createThumbnailForEventValidateBeforeCall(liveEventId, liveEventThumbnailsCreateThumbnailForEventRequest, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateThumbnailForEventRequestBuilder {
        private final Double liveEventId;
        private Boolean active;

        private CreateThumbnailForEventRequestBuilder(double liveEventId) {
            this.liveEventId = liveEventId;
        }

        /**
         * Set active
         * @param active Whether the thumbnail is the event&#39;s active thumbnail. (optional)
         * @return CreateThumbnailForEventRequestBuilder
         */
        public CreateThumbnailForEventRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Build call for createThumbnailForEvent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LiveEventThumbnailsCreateThumbnailForEventRequest liveEventThumbnailsCreateThumbnailForEventRequest = buildBodyParams();
            return createThumbnailForEventCall(liveEventId, liveEventThumbnailsCreateThumbnailForEventRequest, _callback);
        }

        private LiveEventThumbnailsCreateThumbnailForEventRequest buildBodyParams() {
            LiveEventThumbnailsCreateThumbnailForEventRequest liveEventThumbnailsCreateThumbnailForEventRequest = new LiveEventThumbnailsCreateThumbnailForEventRequest();
            liveEventThumbnailsCreateThumbnailForEventRequest.active(this.active);
            return liveEventThumbnailsCreateThumbnailForEventRequest;
        }

        /**
         * Execute createThumbnailForEvent request
         * @return Picture
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was created. </td><td>  -  </td></tr>
         </table>
         */
        public Picture execute() throws ApiException {
            LiveEventThumbnailsCreateThumbnailForEventRequest liveEventThumbnailsCreateThumbnailForEventRequest = buildBodyParams();
            ApiResponse<Picture> localVarResp = createThumbnailForEventWithHttpInfo(liveEventId, liveEventThumbnailsCreateThumbnailForEventRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createThumbnailForEvent request with HTTP info returned
         * @return ApiResponse&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was created. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Picture> executeWithHttpInfo() throws ApiException {
            LiveEventThumbnailsCreateThumbnailForEventRequest liveEventThumbnailsCreateThumbnailForEventRequest = buildBodyParams();
            return createThumbnailForEventWithHttpInfo(liveEventId, liveEventThumbnailsCreateThumbnailForEventRequest);
        }

        /**
         * Execute createThumbnailForEvent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Picture> _callback) throws ApiException {
            LiveEventThumbnailsCreateThumbnailForEventRequest liveEventThumbnailsCreateThumbnailForEventRequest = buildBodyParams();
            return createThumbnailForEventAsync(liveEventId, liveEventThumbnailsCreateThumbnailForEventRequest, _callback);
        }
    }

    /**
     * Create a live event thumbnail
     * This method creates a thumbnail image for the specified event.
     * @param liveEventId The ID of the event. (required)
     * @return CreateThumbnailForEventRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The thumbnail was created. </td><td>  -  </td></tr>
     </table>
     */
    public CreateThumbnailForEventRequestBuilder createThumbnailForEvent(double liveEventId) throws IllegalArgumentException {
        
        return new CreateThumbnailForEventRequestBuilder(liveEventId);
    }
    private okhttp3.Call createThumbnailForEvent_0Call(Double liveEventId, Double userId, LiveEventThumbnailsCreateThumbnailForEventRequest1 liveEventThumbnailsCreateThumbnailForEventRequest1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = liveEventThumbnailsCreateThumbnailForEventRequest1;

        // create path and map variables
        String localVarPath = "/users/{user_id}/live_events/{live_event_id}/pictures"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createThumbnailForEvent_0ValidateBeforeCall(Double liveEventId, Double userId, LiveEventThumbnailsCreateThumbnailForEventRequest1 liveEventThumbnailsCreateThumbnailForEventRequest1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling createThumbnailForEvent_0(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createThumbnailForEvent_0(Async)");
        }

        return createThumbnailForEvent_0Call(liveEventId, userId, liveEventThumbnailsCreateThumbnailForEventRequest1, _callback);

    }


    private ApiResponse<Picture> createThumbnailForEvent_0WithHttpInfo(Double liveEventId, Double userId, LiveEventThumbnailsCreateThumbnailForEventRequest1 liveEventThumbnailsCreateThumbnailForEventRequest1) throws ApiException {
        okhttp3.Call localVarCall = createThumbnailForEvent_0ValidateBeforeCall(liveEventId, userId, liveEventThumbnailsCreateThumbnailForEventRequest1, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createThumbnailForEvent_0Async(Double liveEventId, Double userId, LiveEventThumbnailsCreateThumbnailForEventRequest1 liveEventThumbnailsCreateThumbnailForEventRequest1, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = createThumbnailForEvent_0ValidateBeforeCall(liveEventId, userId, liveEventThumbnailsCreateThumbnailForEventRequest1, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateThumbnailForEvent0RequestBuilder {
        private final Double liveEventId;
        private final Double userId;
        private Boolean active;

        private CreateThumbnailForEvent0RequestBuilder(double liveEventId, double userId) {
            this.liveEventId = liveEventId;
            this.userId = userId;
        }

        /**
         * Set active
         * @param active Whether the thumbnail is the event&#39;s active thumbnail. (optional)
         * @return CreateThumbnailForEvent0RequestBuilder
         */
        public CreateThumbnailForEvent0RequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Build call for createThumbnailForEvent_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LiveEventThumbnailsCreateThumbnailForEventRequest1 liveEventThumbnailsCreateThumbnailForEventRequest1 = buildBodyParams();
            return createThumbnailForEvent_0Call(liveEventId, userId, liveEventThumbnailsCreateThumbnailForEventRequest1, _callback);
        }

        private LiveEventThumbnailsCreateThumbnailForEventRequest1 buildBodyParams() {
            LiveEventThumbnailsCreateThumbnailForEventRequest1 liveEventThumbnailsCreateThumbnailForEventRequest1 = new LiveEventThumbnailsCreateThumbnailForEventRequest1();
            liveEventThumbnailsCreateThumbnailForEventRequest1.active(this.active);
            return liveEventThumbnailsCreateThumbnailForEventRequest1;
        }

        /**
         * Execute createThumbnailForEvent_0 request
         * @return Picture
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was created. </td><td>  -  </td></tr>
         </table>
         */
        public Picture execute() throws ApiException {
            LiveEventThumbnailsCreateThumbnailForEventRequest1 liveEventThumbnailsCreateThumbnailForEventRequest1 = buildBodyParams();
            ApiResponse<Picture> localVarResp = createThumbnailForEvent_0WithHttpInfo(liveEventId, userId, liveEventThumbnailsCreateThumbnailForEventRequest1);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createThumbnailForEvent_0 request with HTTP info returned
         * @return ApiResponse&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was created. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Picture> executeWithHttpInfo() throws ApiException {
            LiveEventThumbnailsCreateThumbnailForEventRequest1 liveEventThumbnailsCreateThumbnailForEventRequest1 = buildBodyParams();
            return createThumbnailForEvent_0WithHttpInfo(liveEventId, userId, liveEventThumbnailsCreateThumbnailForEventRequest1);
        }

        /**
         * Execute createThumbnailForEvent_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Picture> _callback) throws ApiException {
            LiveEventThumbnailsCreateThumbnailForEventRequest1 liveEventThumbnailsCreateThumbnailForEventRequest1 = buildBodyParams();
            return createThumbnailForEvent_0Async(liveEventId, userId, liveEventThumbnailsCreateThumbnailForEventRequest1, _callback);
        }
    }

    /**
     * Create a live event thumbnail
     * This method creates a thumbnail image for the specified event.
     * @param liveEventId The ID of the event. (required)
     * @param userId The ID of the user. (required)
     * @return CreateThumbnailForEvent0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The thumbnail was created. </td><td>  -  </td></tr>
     </table>
     */
    public CreateThumbnailForEvent0RequestBuilder createThumbnailForEvent_0(double liveEventId, double userId) throws IllegalArgumentException {
        
        
        return new CreateThumbnailForEvent0RequestBuilder(liveEventId, userId);
    }
    private okhttp3.Call deleteForEventCall(Double liveEventId, Double thumbnailId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/live_events/{live_event_id}/pictures/{thumbnail_id}"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()))
            .replace("{" + "thumbnail_id" + "}", localVarApiClient.escapeString(thumbnailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteForEventValidateBeforeCall(Double liveEventId, Double thumbnailId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling deleteForEvent(Async)");
        }

        // verify the required parameter 'thumbnailId' is set
        if (thumbnailId == null) {
            throw new ApiException("Missing the required parameter 'thumbnailId' when calling deleteForEvent(Async)");
        }

        return deleteForEventCall(liveEventId, thumbnailId, _callback);

    }


    private ApiResponse<Void> deleteForEventWithHttpInfo(Double liveEventId, Double thumbnailId) throws ApiException {
        okhttp3.Call localVarCall = deleteForEventValidateBeforeCall(liveEventId, thumbnailId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteForEventAsync(Double liveEventId, Double thumbnailId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteForEventValidateBeforeCall(liveEventId, thumbnailId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteForEventRequestBuilder {
        private final Double liveEventId;
        private final Double thumbnailId;

        private DeleteForEventRequestBuilder(double liveEventId, double thumbnailId) {
            this.liveEventId = liveEventId;
            this.thumbnailId = thumbnailId;
        }

        /**
         * Build call for deleteForEvent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The thumbnail was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteForEventCall(liveEventId, thumbnailId, _callback);
        }


        /**
         * Execute deleteForEvent request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The thumbnail was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteForEventWithHttpInfo(liveEventId, thumbnailId);
        }

        /**
         * Execute deleteForEvent request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The thumbnail was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteForEventWithHttpInfo(liveEventId, thumbnailId);
        }

        /**
         * Execute deleteForEvent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The thumbnail was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteForEventAsync(liveEventId, thumbnailId, _callback);
        }
    }

    /**
     * Delete a live event thumbnail
     * This method deletes a thumbnail image for the specified event.
     * @param liveEventId The ID of the event. (required)
     * @param thumbnailId The ID of the thumbnail. (required)
     * @return DeleteForEventRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The thumbnail was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteForEventRequestBuilder deleteForEvent(double liveEventId, double thumbnailId) throws IllegalArgumentException {
        
        
        return new DeleteForEventRequestBuilder(liveEventId, thumbnailId);
    }
    private okhttp3.Call deleteThumbnailForEventCall(Double liveEventId, Double thumbnailId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/live_events/{live_event_id}/pictures/{thumbnail_id}"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()))
            .replace("{" + "thumbnail_id" + "}", localVarApiClient.escapeString(thumbnailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteThumbnailForEventValidateBeforeCall(Double liveEventId, Double thumbnailId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling deleteThumbnailForEvent(Async)");
        }

        // verify the required parameter 'thumbnailId' is set
        if (thumbnailId == null) {
            throw new ApiException("Missing the required parameter 'thumbnailId' when calling deleteThumbnailForEvent(Async)");
        }

        return deleteThumbnailForEventCall(liveEventId, thumbnailId, _callback);

    }


    private ApiResponse<Void> deleteThumbnailForEventWithHttpInfo(Double liveEventId, Double thumbnailId) throws ApiException {
        okhttp3.Call localVarCall = deleteThumbnailForEventValidateBeforeCall(liveEventId, thumbnailId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteThumbnailForEventAsync(Double liveEventId, Double thumbnailId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteThumbnailForEventValidateBeforeCall(liveEventId, thumbnailId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteThumbnailForEventRequestBuilder {
        private final Double liveEventId;
        private final Double thumbnailId;

        private DeleteThumbnailForEventRequestBuilder(double liveEventId, double thumbnailId) {
            this.liveEventId = liveEventId;
            this.thumbnailId = thumbnailId;
        }

        /**
         * Build call for deleteThumbnailForEvent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The thumbnail was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteThumbnailForEventCall(liveEventId, thumbnailId, _callback);
        }


        /**
         * Execute deleteThumbnailForEvent request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The thumbnail was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteThumbnailForEventWithHttpInfo(liveEventId, thumbnailId);
        }

        /**
         * Execute deleteThumbnailForEvent request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The thumbnail was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteThumbnailForEventWithHttpInfo(liveEventId, thumbnailId);
        }

        /**
         * Execute deleteThumbnailForEvent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The thumbnail was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteThumbnailForEventAsync(liveEventId, thumbnailId, _callback);
        }
    }

    /**
     * Delete a live event thumbnail
     * This method deletes a thumbnail image for the specified event.
     * @param liveEventId The ID of the event. (required)
     * @param thumbnailId The ID of the thumbnail. (required)
     * @return DeleteThumbnailForEventRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The thumbnail was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteThumbnailForEventRequestBuilder deleteThumbnailForEvent(double liveEventId, double thumbnailId) throws IllegalArgumentException {
        
        
        return new DeleteThumbnailForEventRequestBuilder(liveEventId, thumbnailId);
    }
    private okhttp3.Call deleteThumbnailForEvent_0Call(Double liveEventId, Double thumbnailId, Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/live_events/{live_event_id}/pictures/{thumbnail_id}"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()))
            .replace("{" + "thumbnail_id" + "}", localVarApiClient.escapeString(thumbnailId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteThumbnailForEvent_0ValidateBeforeCall(Double liveEventId, Double thumbnailId, Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling deleteThumbnailForEvent_0(Async)");
        }

        // verify the required parameter 'thumbnailId' is set
        if (thumbnailId == null) {
            throw new ApiException("Missing the required parameter 'thumbnailId' when calling deleteThumbnailForEvent_0(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteThumbnailForEvent_0(Async)");
        }

        return deleteThumbnailForEvent_0Call(liveEventId, thumbnailId, userId, _callback);

    }


    private ApiResponse<Void> deleteThumbnailForEvent_0WithHttpInfo(Double liveEventId, Double thumbnailId, Double userId) throws ApiException {
        okhttp3.Call localVarCall = deleteThumbnailForEvent_0ValidateBeforeCall(liveEventId, thumbnailId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteThumbnailForEvent_0Async(Double liveEventId, Double thumbnailId, Double userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteThumbnailForEvent_0ValidateBeforeCall(liveEventId, thumbnailId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteThumbnailForEvent0RequestBuilder {
        private final Double liveEventId;
        private final Double thumbnailId;
        private final Double userId;

        private DeleteThumbnailForEvent0RequestBuilder(double liveEventId, double thumbnailId, double userId) {
            this.liveEventId = liveEventId;
            this.thumbnailId = thumbnailId;
            this.userId = userId;
        }

        /**
         * Build call for deleteThumbnailForEvent_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The thumbnail was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteThumbnailForEvent_0Call(liveEventId, thumbnailId, userId, _callback);
        }


        /**
         * Execute deleteThumbnailForEvent_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The thumbnail was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteThumbnailForEvent_0WithHttpInfo(liveEventId, thumbnailId, userId);
        }

        /**
         * Execute deleteThumbnailForEvent_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The thumbnail was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteThumbnailForEvent_0WithHttpInfo(liveEventId, thumbnailId, userId);
        }

        /**
         * Execute deleteThumbnailForEvent_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The thumbnail was deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteThumbnailForEvent_0Async(liveEventId, thumbnailId, userId, _callback);
        }
    }

    /**
     * Delete a live event thumbnail
     * This method deletes a thumbnail image for the specified event.
     * @param liveEventId The ID of the event. (required)
     * @param thumbnailId The ID of the thumbnail. (required)
     * @param userId The ID of the user. (required)
     * @return DeleteThumbnailForEvent0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The thumbnail was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteThumbnailForEvent0RequestBuilder deleteThumbnailForEvent_0(double liveEventId, double thumbnailId, double userId) throws IllegalArgumentException {
        
        
        
        return new DeleteThumbnailForEvent0RequestBuilder(liveEventId, thumbnailId, userId);
    }
    private okhttp3.Call editEventThumbnailCall(Double liveEventId, Double thumbnailId, Double userId, LiveEventThumbnailsEditEventThumbnailRequest liveEventThumbnailsEditEventThumbnailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = liveEventThumbnailsEditEventThumbnailRequest;

        // create path and map variables
        String localVarPath = "/users/{user_id}/live_events/{live_event_id}/pictures/{thumbnail_id}"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()))
            .replace("{" + "thumbnail_id" + "}", localVarApiClient.escapeString(thumbnailId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editEventThumbnailValidateBeforeCall(Double liveEventId, Double thumbnailId, Double userId, LiveEventThumbnailsEditEventThumbnailRequest liveEventThumbnailsEditEventThumbnailRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling editEventThumbnail(Async)");
        }

        // verify the required parameter 'thumbnailId' is set
        if (thumbnailId == null) {
            throw new ApiException("Missing the required parameter 'thumbnailId' when calling editEventThumbnail(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling editEventThumbnail(Async)");
        }

        return editEventThumbnailCall(liveEventId, thumbnailId, userId, liveEventThumbnailsEditEventThumbnailRequest, _callback);

    }


    private ApiResponse<Picture> editEventThumbnailWithHttpInfo(Double liveEventId, Double thumbnailId, Double userId, LiveEventThumbnailsEditEventThumbnailRequest liveEventThumbnailsEditEventThumbnailRequest) throws ApiException {
        okhttp3.Call localVarCall = editEventThumbnailValidateBeforeCall(liveEventId, thumbnailId, userId, liveEventThumbnailsEditEventThumbnailRequest, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call editEventThumbnailAsync(Double liveEventId, Double thumbnailId, Double userId, LiveEventThumbnailsEditEventThumbnailRequest liveEventThumbnailsEditEventThumbnailRequest, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = editEventThumbnailValidateBeforeCall(liveEventId, thumbnailId, userId, liveEventThumbnailsEditEventThumbnailRequest, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EditEventThumbnailRequestBuilder {
        private final Double liveEventId;
        private final Double thumbnailId;
        private final Double userId;
        private Boolean active;

        private EditEventThumbnailRequestBuilder(double liveEventId, double thumbnailId, double userId) {
            this.liveEventId = liveEventId;
            this.thumbnailId = thumbnailId;
            this.userId = userId;
        }

        /**
         * Set active
         * @param active Whether the thumbnail is the event&#39;s active thumbnail. (optional)
         * @return EditEventThumbnailRequestBuilder
         */
        public EditEventThumbnailRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Build call for editEventThumbnail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LiveEventThumbnailsEditEventThumbnailRequest liveEventThumbnailsEditEventThumbnailRequest = buildBodyParams();
            return editEventThumbnailCall(liveEventId, thumbnailId, userId, liveEventThumbnailsEditEventThumbnailRequest, _callback);
        }

        private LiveEventThumbnailsEditEventThumbnailRequest buildBodyParams() {
            LiveEventThumbnailsEditEventThumbnailRequest liveEventThumbnailsEditEventThumbnailRequest = new LiveEventThumbnailsEditEventThumbnailRequest();
            liveEventThumbnailsEditEventThumbnailRequest.active(this.active);
            return liveEventThumbnailsEditEventThumbnailRequest;
        }

        /**
         * Execute editEventThumbnail request
         * @return Picture
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was edited. </td><td>  -  </td></tr>
         </table>
         */
        public Picture execute() throws ApiException {
            LiveEventThumbnailsEditEventThumbnailRequest liveEventThumbnailsEditEventThumbnailRequest = buildBodyParams();
            ApiResponse<Picture> localVarResp = editEventThumbnailWithHttpInfo(liveEventId, thumbnailId, userId, liveEventThumbnailsEditEventThumbnailRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute editEventThumbnail request with HTTP info returned
         * @return ApiResponse&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was edited. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Picture> executeWithHttpInfo() throws ApiException {
            LiveEventThumbnailsEditEventThumbnailRequest liveEventThumbnailsEditEventThumbnailRequest = buildBodyParams();
            return editEventThumbnailWithHttpInfo(liveEventId, thumbnailId, userId, liveEventThumbnailsEditEventThumbnailRequest);
        }

        /**
         * Execute editEventThumbnail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Picture> _callback) throws ApiException {
            LiveEventThumbnailsEditEventThumbnailRequest liveEventThumbnailsEditEventThumbnailRequest = buildBodyParams();
            return editEventThumbnailAsync(liveEventId, thumbnailId, userId, liveEventThumbnailsEditEventThumbnailRequest, _callback);
        }
    }

    /**
     * Edit a live event thumbnail
     * This method edits a thumbnail image for the specified event.
     * @param liveEventId The ID of the event. (required)
     * @param thumbnailId The ID of the thumbnail. (required)
     * @param userId The ID of the user. (required)
     * @return EditEventThumbnailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The thumbnail was edited. </td><td>  -  </td></tr>
     </table>
     */
    public EditEventThumbnailRequestBuilder editEventThumbnail(double liveEventId, double thumbnailId, double userId) throws IllegalArgumentException {
        
        
        
        return new EditEventThumbnailRequestBuilder(liveEventId, thumbnailId, userId);
    }
    private okhttp3.Call editLiveEventThumbnailCall(Double liveEventId, Double thumbnailId, LiveEventThumbnailsEditLiveEventThumbnailRequest liveEventThumbnailsEditLiveEventThumbnailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = liveEventThumbnailsEditLiveEventThumbnailRequest;

        // create path and map variables
        String localVarPath = "/live_events/{live_event_id}/pictures/{thumbnail_id}"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()))
            .replace("{" + "thumbnail_id" + "}", localVarApiClient.escapeString(thumbnailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editLiveEventThumbnailValidateBeforeCall(Double liveEventId, Double thumbnailId, LiveEventThumbnailsEditLiveEventThumbnailRequest liveEventThumbnailsEditLiveEventThumbnailRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling editLiveEventThumbnail(Async)");
        }

        // verify the required parameter 'thumbnailId' is set
        if (thumbnailId == null) {
            throw new ApiException("Missing the required parameter 'thumbnailId' when calling editLiveEventThumbnail(Async)");
        }

        return editLiveEventThumbnailCall(liveEventId, thumbnailId, liveEventThumbnailsEditLiveEventThumbnailRequest, _callback);

    }


    private ApiResponse<Picture> editLiveEventThumbnailWithHttpInfo(Double liveEventId, Double thumbnailId, LiveEventThumbnailsEditLiveEventThumbnailRequest liveEventThumbnailsEditLiveEventThumbnailRequest) throws ApiException {
        okhttp3.Call localVarCall = editLiveEventThumbnailValidateBeforeCall(liveEventId, thumbnailId, liveEventThumbnailsEditLiveEventThumbnailRequest, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call editLiveEventThumbnailAsync(Double liveEventId, Double thumbnailId, LiveEventThumbnailsEditLiveEventThumbnailRequest liveEventThumbnailsEditLiveEventThumbnailRequest, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = editLiveEventThumbnailValidateBeforeCall(liveEventId, thumbnailId, liveEventThumbnailsEditLiveEventThumbnailRequest, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EditLiveEventThumbnailRequestBuilder {
        private final Double liveEventId;
        private final Double thumbnailId;
        private Boolean active;

        private EditLiveEventThumbnailRequestBuilder(double liveEventId, double thumbnailId) {
            this.liveEventId = liveEventId;
            this.thumbnailId = thumbnailId;
        }

        /**
         * Set active
         * @param active Whether the thumbnail is the event&#39;s active thumbnail. (optional)
         * @return EditLiveEventThumbnailRequestBuilder
         */
        public EditLiveEventThumbnailRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Build call for editLiveEventThumbnail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LiveEventThumbnailsEditLiveEventThumbnailRequest liveEventThumbnailsEditLiveEventThumbnailRequest = buildBodyParams();
            return editLiveEventThumbnailCall(liveEventId, thumbnailId, liveEventThumbnailsEditLiveEventThumbnailRequest, _callback);
        }

        private LiveEventThumbnailsEditLiveEventThumbnailRequest buildBodyParams() {
            LiveEventThumbnailsEditLiveEventThumbnailRequest liveEventThumbnailsEditLiveEventThumbnailRequest = new LiveEventThumbnailsEditLiveEventThumbnailRequest();
            liveEventThumbnailsEditLiveEventThumbnailRequest.active(this.active);
            return liveEventThumbnailsEditLiveEventThumbnailRequest;
        }

        /**
         * Execute editLiveEventThumbnail request
         * @return Picture
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was edited. </td><td>  -  </td></tr>
         </table>
         */
        public Picture execute() throws ApiException {
            LiveEventThumbnailsEditLiveEventThumbnailRequest liveEventThumbnailsEditLiveEventThumbnailRequest = buildBodyParams();
            ApiResponse<Picture> localVarResp = editLiveEventThumbnailWithHttpInfo(liveEventId, thumbnailId, liveEventThumbnailsEditLiveEventThumbnailRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute editLiveEventThumbnail request with HTTP info returned
         * @return ApiResponse&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was edited. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Picture> executeWithHttpInfo() throws ApiException {
            LiveEventThumbnailsEditLiveEventThumbnailRequest liveEventThumbnailsEditLiveEventThumbnailRequest = buildBodyParams();
            return editLiveEventThumbnailWithHttpInfo(liveEventId, thumbnailId, liveEventThumbnailsEditLiveEventThumbnailRequest);
        }

        /**
         * Execute editLiveEventThumbnail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Picture> _callback) throws ApiException {
            LiveEventThumbnailsEditLiveEventThumbnailRequest liveEventThumbnailsEditLiveEventThumbnailRequest = buildBodyParams();
            return editLiveEventThumbnailAsync(liveEventId, thumbnailId, liveEventThumbnailsEditLiveEventThumbnailRequest, _callback);
        }
    }

    /**
     * Edit a live event thumbnail
     * This method edits a thumbnail image for the specified event.
     * @param liveEventId The ID of the event. (required)
     * @param thumbnailId The ID of the thumbnail. (required)
     * @return EditLiveEventThumbnailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The thumbnail was edited. </td><td>  -  </td></tr>
     </table>
     */
    public EditLiveEventThumbnailRequestBuilder editLiveEventThumbnail(double liveEventId, double thumbnailId) throws IllegalArgumentException {
        
        
        return new EditLiveEventThumbnailRequestBuilder(liveEventId, thumbnailId);
    }
    private okhttp3.Call getAllCall(Double liveEventId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/live_events/{live_event_id}/pictures"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(Double liveEventId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling getAll(Async)");
        }

        return getAllCall(liveEventId, _callback);

    }


    private ApiResponse<List<Picture>> getAllWithHttpInfo(Double liveEventId) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(liveEventId, null);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(Double liveEventId, final ApiCallback<List<Picture>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(liveEventId, _callback);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {
        private final Double liveEventId;

        private GetAllRequestBuilder(double liveEventId) {
            this.liveEventId = liveEventId;
        }

        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnails were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(liveEventId, _callback);
        }


        /**
         * Execute getAll request
         * @return List&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnails were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Picture> execute() throws ApiException {
            ApiResponse<List<Picture>> localVarResp = getAllWithHttpInfo(liveEventId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Picture&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnails were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Picture>> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo(liveEventId);
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnails were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Picture>> _callback) throws ApiException {
            return getAllAsync(liveEventId, _callback);
        }
    }

    /**
     * Get all the thumbnails of a live event
     * This method returns every thumbnail image of the specified event.
     * @param liveEventId The ID of the event. (required)
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The thumbnails were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll(double liveEventId) throws IllegalArgumentException {
        
        return new GetAllRequestBuilder(liveEventId);
    }
    private okhttp3.Call getAllThumbnailsCall(Double liveEventId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/live_events/{live_event_id}/pictures"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllThumbnailsValidateBeforeCall(Double liveEventId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling getAllThumbnails(Async)");
        }

        return getAllThumbnailsCall(liveEventId, _callback);

    }


    private ApiResponse<List<Picture>> getAllThumbnailsWithHttpInfo(Double liveEventId) throws ApiException {
        okhttp3.Call localVarCall = getAllThumbnailsValidateBeforeCall(liveEventId, null);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllThumbnailsAsync(Double liveEventId, final ApiCallback<List<Picture>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllThumbnailsValidateBeforeCall(liveEventId, _callback);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllThumbnailsRequestBuilder {
        private final Double liveEventId;

        private GetAllThumbnailsRequestBuilder(double liveEventId) {
            this.liveEventId = liveEventId;
        }

        /**
         * Build call for getAllThumbnails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnails were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllThumbnailsCall(liveEventId, _callback);
        }


        /**
         * Execute getAllThumbnails request
         * @return List&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnails were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Picture> execute() throws ApiException {
            ApiResponse<List<Picture>> localVarResp = getAllThumbnailsWithHttpInfo(liveEventId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllThumbnails request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Picture&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnails were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Picture>> executeWithHttpInfo() throws ApiException {
            return getAllThumbnailsWithHttpInfo(liveEventId);
        }

        /**
         * Execute getAllThumbnails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnails were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Picture>> _callback) throws ApiException {
            return getAllThumbnailsAsync(liveEventId, _callback);
        }
    }

    /**
     * Get all the thumbnails of a live event
     * This method returns every thumbnail image of the specified event.
     * @param liveEventId The ID of the event. (required)
     * @return GetAllThumbnailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The thumbnails were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllThumbnailsRequestBuilder getAllThumbnails(double liveEventId) throws IllegalArgumentException {
        
        return new GetAllThumbnailsRequestBuilder(liveEventId);
    }
    private okhttp3.Call getAllThumbsCall(Double liveEventId, Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/live_events/{live_event_id}/pictures"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllThumbsValidateBeforeCall(Double liveEventId, Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling getAllThumbs(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getAllThumbs(Async)");
        }

        return getAllThumbsCall(liveEventId, userId, _callback);

    }


    private ApiResponse<List<Picture>> getAllThumbsWithHttpInfo(Double liveEventId, Double userId) throws ApiException {
        okhttp3.Call localVarCall = getAllThumbsValidateBeforeCall(liveEventId, userId, null);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllThumbsAsync(Double liveEventId, Double userId, final ApiCallback<List<Picture>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllThumbsValidateBeforeCall(liveEventId, userId, _callback);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllThumbsRequestBuilder {
        private final Double liveEventId;
        private final Double userId;

        private GetAllThumbsRequestBuilder(double liveEventId, double userId) {
            this.liveEventId = liveEventId;
            this.userId = userId;
        }

        /**
         * Build call for getAllThumbs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnails were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllThumbsCall(liveEventId, userId, _callback);
        }


        /**
         * Execute getAllThumbs request
         * @return List&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnails were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Picture> execute() throws ApiException {
            ApiResponse<List<Picture>> localVarResp = getAllThumbsWithHttpInfo(liveEventId, userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllThumbs request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Picture&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnails were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Picture>> executeWithHttpInfo() throws ApiException {
            return getAllThumbsWithHttpInfo(liveEventId, userId);
        }

        /**
         * Execute getAllThumbs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnails were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Picture>> _callback) throws ApiException {
            return getAllThumbsAsync(liveEventId, userId, _callback);
        }
    }

    /**
     * Get all the thumbnails of a live event
     * This method returns every thumbnail image of the specified event.
     * @param liveEventId The ID of the event. (required)
     * @param userId The ID of the user. (required)
     * @return GetAllThumbsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The thumbnails were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllThumbsRequestBuilder getAllThumbs(double liveEventId, double userId) throws IllegalArgumentException {
        
        
        return new GetAllThumbsRequestBuilder(liveEventId, userId);
    }
    private okhttp3.Call getSpecificThumbnailCall(Double liveEventId, Double thumbnailId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/live_events/{live_event_id}/pictures/{thumbnail_id}"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()))
            .replace("{" + "thumbnail_id" + "}", localVarApiClient.escapeString(thumbnailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificThumbnailValidateBeforeCall(Double liveEventId, Double thumbnailId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling getSpecificThumbnail(Async)");
        }

        // verify the required parameter 'thumbnailId' is set
        if (thumbnailId == null) {
            throw new ApiException("Missing the required parameter 'thumbnailId' when calling getSpecificThumbnail(Async)");
        }

        return getSpecificThumbnailCall(liveEventId, thumbnailId, _callback);

    }


    private ApiResponse<Picture> getSpecificThumbnailWithHttpInfo(Double liveEventId, Double thumbnailId) throws ApiException {
        okhttp3.Call localVarCall = getSpecificThumbnailValidateBeforeCall(liveEventId, thumbnailId, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificThumbnailAsync(Double liveEventId, Double thumbnailId, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificThumbnailValidateBeforeCall(liveEventId, thumbnailId, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificThumbnailRequestBuilder {
        private final Double liveEventId;
        private final Double thumbnailId;

        private GetSpecificThumbnailRequestBuilder(double liveEventId, double thumbnailId) {
            this.liveEventId = liveEventId;
            this.thumbnailId = thumbnailId;
        }

        /**
         * Build call for getSpecificThumbnail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificThumbnailCall(liveEventId, thumbnailId, _callback);
        }


        /**
         * Execute getSpecificThumbnail request
         * @return Picture
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was returned. </td><td>  -  </td></tr>
         </table>
         */
        public Picture execute() throws ApiException {
            ApiResponse<Picture> localVarResp = getSpecificThumbnailWithHttpInfo(liveEventId, thumbnailId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificThumbnail request with HTTP info returned
         * @return ApiResponse&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Picture> executeWithHttpInfo() throws ApiException {
            return getSpecificThumbnailWithHttpInfo(liveEventId, thumbnailId);
        }

        /**
         * Execute getSpecificThumbnail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Picture> _callback) throws ApiException {
            return getSpecificThumbnailAsync(liveEventId, thumbnailId, _callback);
        }
    }

    /**
     * Get a specific live event thumbnail
     * This method returns a single thumbnail image of the specified event.
     * @param liveEventId The ID of the event. (required)
     * @param thumbnailId The ID of the thumbnail. (required)
     * @return GetSpecificThumbnailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The thumbnail was returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificThumbnailRequestBuilder getSpecificThumbnail(double liveEventId, double thumbnailId) throws IllegalArgumentException {
        
        
        return new GetSpecificThumbnailRequestBuilder(liveEventId, thumbnailId);
    }
    private okhttp3.Call getSpecificThumbnail_0Call(Double liveEventId, Double thumbnailId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/live_events/{live_event_id}/pictures/{thumbnail_id}"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()))
            .replace("{" + "thumbnail_id" + "}", localVarApiClient.escapeString(thumbnailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificThumbnail_0ValidateBeforeCall(Double liveEventId, Double thumbnailId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling getSpecificThumbnail_0(Async)");
        }

        // verify the required parameter 'thumbnailId' is set
        if (thumbnailId == null) {
            throw new ApiException("Missing the required parameter 'thumbnailId' when calling getSpecificThumbnail_0(Async)");
        }

        return getSpecificThumbnail_0Call(liveEventId, thumbnailId, _callback);

    }


    private ApiResponse<Picture> getSpecificThumbnail_0WithHttpInfo(Double liveEventId, Double thumbnailId) throws ApiException {
        okhttp3.Call localVarCall = getSpecificThumbnail_0ValidateBeforeCall(liveEventId, thumbnailId, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificThumbnail_0Async(Double liveEventId, Double thumbnailId, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificThumbnail_0ValidateBeforeCall(liveEventId, thumbnailId, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificThumbnail0RequestBuilder {
        private final Double liveEventId;
        private final Double thumbnailId;

        private GetSpecificThumbnail0RequestBuilder(double liveEventId, double thumbnailId) {
            this.liveEventId = liveEventId;
            this.thumbnailId = thumbnailId;
        }

        /**
         * Build call for getSpecificThumbnail_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificThumbnail_0Call(liveEventId, thumbnailId, _callback);
        }


        /**
         * Execute getSpecificThumbnail_0 request
         * @return Picture
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was returned. </td><td>  -  </td></tr>
         </table>
         */
        public Picture execute() throws ApiException {
            ApiResponse<Picture> localVarResp = getSpecificThumbnail_0WithHttpInfo(liveEventId, thumbnailId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificThumbnail_0 request with HTTP info returned
         * @return ApiResponse&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Picture> executeWithHttpInfo() throws ApiException {
            return getSpecificThumbnail_0WithHttpInfo(liveEventId, thumbnailId);
        }

        /**
         * Execute getSpecificThumbnail_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Picture> _callback) throws ApiException {
            return getSpecificThumbnail_0Async(liveEventId, thumbnailId, _callback);
        }
    }

    /**
     * Get a specific live event thumbnail
     * This method returns a single thumbnail image of the specified event.
     * @param liveEventId The ID of the event. (required)
     * @param thumbnailId The ID of the thumbnail. (required)
     * @return GetSpecificThumbnail0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The thumbnail was returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificThumbnail0RequestBuilder getSpecificThumbnail_0(double liveEventId, double thumbnailId) throws IllegalArgumentException {
        
        
        return new GetSpecificThumbnail0RequestBuilder(liveEventId, thumbnailId);
    }
    private okhttp3.Call getSpecificThumbnail_1Call(Double liveEventId, Double thumbnailId, Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/live_events/{live_event_id}/pictures/{thumbnail_id}"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()))
            .replace("{" + "thumbnail_id" + "}", localVarApiClient.escapeString(thumbnailId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificThumbnail_1ValidateBeforeCall(Double liveEventId, Double thumbnailId, Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling getSpecificThumbnail_1(Async)");
        }

        // verify the required parameter 'thumbnailId' is set
        if (thumbnailId == null) {
            throw new ApiException("Missing the required parameter 'thumbnailId' when calling getSpecificThumbnail_1(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getSpecificThumbnail_1(Async)");
        }

        return getSpecificThumbnail_1Call(liveEventId, thumbnailId, userId, _callback);

    }


    private ApiResponse<Picture> getSpecificThumbnail_1WithHttpInfo(Double liveEventId, Double thumbnailId, Double userId) throws ApiException {
        okhttp3.Call localVarCall = getSpecificThumbnail_1ValidateBeforeCall(liveEventId, thumbnailId, userId, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificThumbnail_1Async(Double liveEventId, Double thumbnailId, Double userId, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificThumbnail_1ValidateBeforeCall(liveEventId, thumbnailId, userId, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificThumbnail1RequestBuilder {
        private final Double liveEventId;
        private final Double thumbnailId;
        private final Double userId;

        private GetSpecificThumbnail1RequestBuilder(double liveEventId, double thumbnailId, double userId) {
            this.liveEventId = liveEventId;
            this.thumbnailId = thumbnailId;
            this.userId = userId;
        }

        /**
         * Build call for getSpecificThumbnail_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificThumbnail_1Call(liveEventId, thumbnailId, userId, _callback);
        }


        /**
         * Execute getSpecificThumbnail_1 request
         * @return Picture
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was returned. </td><td>  -  </td></tr>
         </table>
         */
        public Picture execute() throws ApiException {
            ApiResponse<Picture> localVarResp = getSpecificThumbnail_1WithHttpInfo(liveEventId, thumbnailId, userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificThumbnail_1 request with HTTP info returned
         * @return ApiResponse&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Picture> executeWithHttpInfo() throws ApiException {
            return getSpecificThumbnail_1WithHttpInfo(liveEventId, thumbnailId, userId);
        }

        /**
         * Execute getSpecificThumbnail_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Picture> _callback) throws ApiException {
            return getSpecificThumbnail_1Async(liveEventId, thumbnailId, userId, _callback);
        }
    }

    /**
     * Get a specific live event thumbnail
     * This method returns a single thumbnail image of the specified event.
     * @param liveEventId The ID of the event. (required)
     * @param thumbnailId The ID of the thumbnail. (required)
     * @param userId The ID of the user. (required)
     * @return GetSpecificThumbnail1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The thumbnail was returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificThumbnail1RequestBuilder getSpecificThumbnail_1(double liveEventId, double thumbnailId, double userId) throws IllegalArgumentException {
        
        
        
        return new GetSpecificThumbnail1RequestBuilder(liveEventId, thumbnailId, userId);
    }
    private okhttp3.Call updateEventThumbnailCall(Double liveEventId, Double thumbnailId, LiveEventThumbnailsUpdateEventThumbnailRequest liveEventThumbnailsUpdateEventThumbnailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = liveEventThumbnailsUpdateEventThumbnailRequest;

        // create path and map variables
        String localVarPath = "/me/live_events/{live_event_id}/pictures/{thumbnail_id}"
            .replace("{" + "live_event_id" + "}", localVarApiClient.escapeString(liveEventId.toString()))
            .replace("{" + "thumbnail_id" + "}", localVarApiClient.escapeString(thumbnailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEventThumbnailValidateBeforeCall(Double liveEventId, Double thumbnailId, LiveEventThumbnailsUpdateEventThumbnailRequest liveEventThumbnailsUpdateEventThumbnailRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveEventId' is set
        if (liveEventId == null) {
            throw new ApiException("Missing the required parameter 'liveEventId' when calling updateEventThumbnail(Async)");
        }

        // verify the required parameter 'thumbnailId' is set
        if (thumbnailId == null) {
            throw new ApiException("Missing the required parameter 'thumbnailId' when calling updateEventThumbnail(Async)");
        }

        return updateEventThumbnailCall(liveEventId, thumbnailId, liveEventThumbnailsUpdateEventThumbnailRequest, _callback);

    }


    private ApiResponse<Picture> updateEventThumbnailWithHttpInfo(Double liveEventId, Double thumbnailId, LiveEventThumbnailsUpdateEventThumbnailRequest liveEventThumbnailsUpdateEventThumbnailRequest) throws ApiException {
        okhttp3.Call localVarCall = updateEventThumbnailValidateBeforeCall(liveEventId, thumbnailId, liveEventThumbnailsUpdateEventThumbnailRequest, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateEventThumbnailAsync(Double liveEventId, Double thumbnailId, LiveEventThumbnailsUpdateEventThumbnailRequest liveEventThumbnailsUpdateEventThumbnailRequest, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEventThumbnailValidateBeforeCall(liveEventId, thumbnailId, liveEventThumbnailsUpdateEventThumbnailRequest, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateEventThumbnailRequestBuilder {
        private final Double liveEventId;
        private final Double thumbnailId;
        private Boolean active;

        private UpdateEventThumbnailRequestBuilder(double liveEventId, double thumbnailId) {
            this.liveEventId = liveEventId;
            this.thumbnailId = thumbnailId;
        }

        /**
         * Set active
         * @param active Whether the thumbnail is the event&#39;s active thumbnail. (optional)
         * @return UpdateEventThumbnailRequestBuilder
         */
        public UpdateEventThumbnailRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Build call for updateEventThumbnail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LiveEventThumbnailsUpdateEventThumbnailRequest liveEventThumbnailsUpdateEventThumbnailRequest = buildBodyParams();
            return updateEventThumbnailCall(liveEventId, thumbnailId, liveEventThumbnailsUpdateEventThumbnailRequest, _callback);
        }

        private LiveEventThumbnailsUpdateEventThumbnailRequest buildBodyParams() {
            LiveEventThumbnailsUpdateEventThumbnailRequest liveEventThumbnailsUpdateEventThumbnailRequest = new LiveEventThumbnailsUpdateEventThumbnailRequest();
            liveEventThumbnailsUpdateEventThumbnailRequest.active(this.active);
            return liveEventThumbnailsUpdateEventThumbnailRequest;
        }

        /**
         * Execute updateEventThumbnail request
         * @return Picture
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was edited. </td><td>  -  </td></tr>
         </table>
         */
        public Picture execute() throws ApiException {
            LiveEventThumbnailsUpdateEventThumbnailRequest liveEventThumbnailsUpdateEventThumbnailRequest = buildBodyParams();
            ApiResponse<Picture> localVarResp = updateEventThumbnailWithHttpInfo(liveEventId, thumbnailId, liveEventThumbnailsUpdateEventThumbnailRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateEventThumbnail request with HTTP info returned
         * @return ApiResponse&lt;Picture&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was edited. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Picture> executeWithHttpInfo() throws ApiException {
            LiveEventThumbnailsUpdateEventThumbnailRequest liveEventThumbnailsUpdateEventThumbnailRequest = buildBodyParams();
            return updateEventThumbnailWithHttpInfo(liveEventId, thumbnailId, liveEventThumbnailsUpdateEventThumbnailRequest);
        }

        /**
         * Execute updateEventThumbnail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The thumbnail was edited. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Picture> _callback) throws ApiException {
            LiveEventThumbnailsUpdateEventThumbnailRequest liveEventThumbnailsUpdateEventThumbnailRequest = buildBodyParams();
            return updateEventThumbnailAsync(liveEventId, thumbnailId, liveEventThumbnailsUpdateEventThumbnailRequest, _callback);
        }
    }

    /**
     * Edit a live event thumbnail
     * This method edits a thumbnail image for the specified event.
     * @param liveEventId The ID of the event. (required)
     * @param thumbnailId The ID of the thumbnail. (required)
     * @return UpdateEventThumbnailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The thumbnail was edited. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEventThumbnailRequestBuilder updateEventThumbnail(double liveEventId, double thumbnailId) throws IllegalArgumentException {
        
        
        return new UpdateEventThumbnailRequestBuilder(liveEventId, thumbnailId);
    }
}
