/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.UploadAttempt;
import com.konfigthis.client.model.UploadVideoRequest;
import com.konfigthis.client.model.UploadVideoRequestEmbed;
import com.konfigthis.client.model.UploadVideoRequestPrivacy;
import com.konfigthis.client.model.UploadVideoRequestReviewPage;
import com.konfigthis.client.model.UploadVideoRequestSpatial;
import com.konfigthis.client.model.UploadVideoRequestUpload;
import com.konfigthis.client.model.Video;
import com.konfigthis.client.model.VideosUploadsBeginVideoUploadProcessRequest;
import com.konfigthis.client.model.VideosUploadsBeginVideoUploadProcessRequestEmbed;
import com.konfigthis.client.model.VideosUploadsBeginVideoUploadProcessRequestPrivacy;
import com.konfigthis.client.model.VideosUploadsBeginVideoUploadProcessRequestReviewPage;
import com.konfigthis.client.model.VideosUploadsBeginVideoUploadProcessRequestSpatial;
import com.konfigthis.client.model.VideosUploadsBeginVideoUploadProcessRequestUpload;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class VideosUploadsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VideosUploadsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public VideosUploadsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call beginVideoUploadProcessCall(VideosUploadsBeginVideoUploadProcessRequest videosUploadsBeginVideoUploadProcessRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = videosUploadsBeginVideoUploadProcessRequest;

        // create path and map variables
        String localVarPath = "/me/videos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call beginVideoUploadProcessValidateBeforeCall(VideosUploadsBeginVideoUploadProcessRequest videosUploadsBeginVideoUploadProcessRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videosUploadsBeginVideoUploadProcessRequest' is set
        if (videosUploadsBeginVideoUploadProcessRequest == null) {
            throw new ApiException("Missing the required parameter 'videosUploadsBeginVideoUploadProcessRequest' when calling beginVideoUploadProcess(Async)");
        }

        return beginVideoUploadProcessCall(videosUploadsBeginVideoUploadProcessRequest, _callback);

    }


    private ApiResponse<Video> beginVideoUploadProcessWithHttpInfo(VideosUploadsBeginVideoUploadProcessRequest videosUploadsBeginVideoUploadProcessRequest) throws ApiException {
        okhttp3.Call localVarCall = beginVideoUploadProcessValidateBeforeCall(videosUploadsBeginVideoUploadProcessRequest, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call beginVideoUploadProcessAsync(VideosUploadsBeginVideoUploadProcessRequest videosUploadsBeginVideoUploadProcessRequest, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = beginVideoUploadProcessValidateBeforeCall(videosUploadsBeginVideoUploadProcessRequest, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class BeginVideoUploadProcessRequestBuilder {
        private final VideosUploadsBeginVideoUploadProcessRequestUpload upload;
        private String description;
        private List<String> contentRating;
        private VideosUploadsBeginVideoUploadProcessRequestEmbed embed;
        private List<String> embedDomains;
        private String folderUri;
        private Boolean hideFromVimeo;
        private String license;
        private String locale;
        private String name;
        private String password;
        private VideosUploadsBeginVideoUploadProcessRequestPrivacy privacy;
        private VideosUploadsBeginVideoUploadProcessRequestReviewPage reviewPage;
        private VideosUploadsBeginVideoUploadProcessRequestSpatial spatial;

        private BeginVideoUploadProcessRequestBuilder(VideosUploadsBeginVideoUploadProcessRequestUpload upload) {
            this.upload = upload;
        }

        /**
         * Set description
         * @param description The description of the video. (optional)
         * @return BeginVideoUploadProcessRequestBuilder
         */
        public BeginVideoUploadProcessRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set contentRating
         * @param contentRating A list of values describing the content in this video. For a full list of values, use the [&#x60;/contentratings&#x60;](https://developer.vimeo.com/api/reference/videos#get_content_ratings) endpoint. (optional)
         * @return BeginVideoUploadProcessRequestBuilder
         */
        public BeginVideoUploadProcessRequestBuilder contentRating(List<String> contentRating) {
            this.contentRating = contentRating;
            return this;
        }
        
        /**
         * Set embed
         * @param embed  (optional)
         * @return BeginVideoUploadProcessRequestBuilder
         */
        public BeginVideoUploadProcessRequestBuilder embed(VideosUploadsBeginVideoUploadProcessRequestEmbed embed) {
            this.embed = embed;
            return this;
        }
        
        /**
         * Set embedDomains
         * @param embedDomains The complete list of domains the video can be embedded on. This field requires that **privacy_embed** have the value &#x60;whitelist&#x60;. (optional)
         * @return BeginVideoUploadProcessRequestBuilder
         */
        public BeginVideoUploadProcessRequestBuilder embedDomains(List<String> embedDomains) {
            this.embedDomains = embedDomains;
            return this;
        }
        
        /**
         * Set folderUri
         * @param folderUri The URI of the folder to which the video is uploaded. (optional)
         * @return BeginVideoUploadProcessRequestBuilder
         */
        public BeginVideoUploadProcessRequestBuilder folderUri(String folderUri) {
            this.folderUri = folderUri;
            return this;
        }
        
        /**
         * Set hideFromVimeo
         * @param hideFromVimeo Whether to hide the video from everyone except the video&#39;s owner. When the value is &#x60;true&#x60;, unlisted video links work only for the video&#39;s owner. (optional)
         * @return BeginVideoUploadProcessRequestBuilder
         */
        public BeginVideoUploadProcessRequestBuilder hideFromVimeo(Boolean hideFromVimeo) {
            this.hideFromVimeo = hideFromVimeo;
            return this;
        }
        
        /**
         * Set license
         * @param license The Creative Commons license under which the video is offered.  Option descriptions:  * &#x60;by&#x60; - The video is offered under CC BY, or the attibution-only license.  * &#x60;by-nc&#x60; - The video is offered under CC BY-NC, or the Attribution-NonCommercial license.  * &#x60;by-nc-nd&#x60; - The video is offered under CC BY-NC-ND, or the Attribution-NonCommercian-NoDerivs license.  * &#x60;by-nc-sa&#x60; - The video is offered under CC BY-NC-SA, or the Attribution-NonCommercial-ShareAlike licence.  * &#x60;by-nd&#x60; - The video is offered under CC BY-ND, or the Attribution-NoDerivs license.  * &#x60;by-sa&#x60; - The video is offered under CC BY-SA, or the Attribution-ShareAlike license.  * &#x60;cc0&#x60; - The video is offered under CC0, or the public domain license.  (optional)
         * @return BeginVideoUploadProcessRequestBuilder
         */
        public BeginVideoUploadProcessRequestBuilder license(String license) {
            this.license = license;
            return this;
        }
        
        /**
         * Set locale
         * @param locale The video&#39;s default language. For a full list of supported languages, use the [&#x60;/languages?filter&#x3D;texttracks&#x60;](https://developer.vimeo.com/api/reference/videos#get_languages) endpoint. (optional)
         * @return BeginVideoUploadProcessRequestBuilder
         */
        public BeginVideoUploadProcessRequestBuilder locale(String locale) {
            this.locale = locale;
            return this;
        }
        
        /**
         * Set name
         * @param name The title of the video. (optional)
         * @return BeginVideoUploadProcessRequestBuilder
         */
        public BeginVideoUploadProcessRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set password
         * @param password The password. This field is required when **privacy.view** is &#x60;password&#x60;. (optional)
         * @return BeginVideoUploadProcessRequestBuilder
         */
        public BeginVideoUploadProcessRequestBuilder password(String password) {
            this.password = password;
            return this;
        }
        
        /**
         * Set privacy
         * @param privacy  (optional)
         * @return BeginVideoUploadProcessRequestBuilder
         */
        public BeginVideoUploadProcessRequestBuilder privacy(VideosUploadsBeginVideoUploadProcessRequestPrivacy privacy) {
            this.privacy = privacy;
            return this;
        }
        
        /**
         * Set reviewPage
         * @param reviewPage  (optional)
         * @return BeginVideoUploadProcessRequestBuilder
         */
        public BeginVideoUploadProcessRequestBuilder reviewPage(VideosUploadsBeginVideoUploadProcessRequestReviewPage reviewPage) {
            this.reviewPage = reviewPage;
            return this;
        }
        
        /**
         * Set spatial
         * @param spatial  (optional)
         * @return BeginVideoUploadProcessRequestBuilder
         */
        public BeginVideoUploadProcessRequestBuilder spatial(VideosUploadsBeginVideoUploadProcessRequestSpatial spatial) {
            this.spatial = spatial;
            return this;
        }
        
        /**
         * Build call for beginVideoUploadProcess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The upload procedure has begun. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VideosUploadsBeginVideoUploadProcessRequest videosUploadsBeginVideoUploadProcessRequest = buildBodyParams();
            return beginVideoUploadProcessCall(videosUploadsBeginVideoUploadProcessRequest, _callback);
        }

        private VideosUploadsBeginVideoUploadProcessRequest buildBodyParams() {
            VideosUploadsBeginVideoUploadProcessRequest videosUploadsBeginVideoUploadProcessRequest = new VideosUploadsBeginVideoUploadProcessRequest();
            videosUploadsBeginVideoUploadProcessRequest.description(this.description);
            videosUploadsBeginVideoUploadProcessRequest.contentRating(this.contentRating);
            videosUploadsBeginVideoUploadProcessRequest.embed(this.embed);
            videosUploadsBeginVideoUploadProcessRequest.embedDomains(this.embedDomains);
            videosUploadsBeginVideoUploadProcessRequest.folderUri(this.folderUri);
            videosUploadsBeginVideoUploadProcessRequest.hideFromVimeo(this.hideFromVimeo);
            if (this.license != null)
            videosUploadsBeginVideoUploadProcessRequest.license(VideosUploadsBeginVideoUploadProcessRequest.LicenseEnum.fromValue(this.license));
            videosUploadsBeginVideoUploadProcessRequest.locale(this.locale);
            videosUploadsBeginVideoUploadProcessRequest.name(this.name);
            videosUploadsBeginVideoUploadProcessRequest.password(this.password);
            videosUploadsBeginVideoUploadProcessRequest.privacy(this.privacy);
            videosUploadsBeginVideoUploadProcessRequest.reviewPage(this.reviewPage);
            videosUploadsBeginVideoUploadProcessRequest.spatial(this.spatial);
            videosUploadsBeginVideoUploadProcessRequest.upload(this.upload);
            return videosUploadsBeginVideoUploadProcessRequest;
        }

        /**
         * Execute beginVideoUploadProcess request
         * @return Video
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The upload procedure has begun. </td><td>  -  </td></tr>
         </table>
         */
        public Video execute() throws ApiException {
            VideosUploadsBeginVideoUploadProcessRequest videosUploadsBeginVideoUploadProcessRequest = buildBodyParams();
            ApiResponse<Video> localVarResp = beginVideoUploadProcessWithHttpInfo(videosUploadsBeginVideoUploadProcessRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute beginVideoUploadProcess request with HTTP info returned
         * @return ApiResponse&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The upload procedure has begun. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Video> executeWithHttpInfo() throws ApiException {
            VideosUploadsBeginVideoUploadProcessRequest videosUploadsBeginVideoUploadProcessRequest = buildBodyParams();
            return beginVideoUploadProcessWithHttpInfo(videosUploadsBeginVideoUploadProcessRequest);
        }

        /**
         * Execute beginVideoUploadProcess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The upload procedure has begun. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Video> _callback) throws ApiException {
            VideosUploadsBeginVideoUploadProcessRequest videosUploadsBeginVideoUploadProcessRequest = buildBodyParams();
            return beginVideoUploadProcessAsync(videosUploadsBeginVideoUploadProcessRequest, _callback);
        }
    }

    /**
     * Upload a video
     * This method begins the video upload process for the authenticated user. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
     * @param videosUploadsBeginVideoUploadProcessRequest  (required)
     * @return BeginVideoUploadProcessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The upload procedure has begun. </td><td>  -  </td></tr>
     </table>
     */
    public BeginVideoUploadProcessRequestBuilder beginVideoUploadProcess(VideosUploadsBeginVideoUploadProcessRequestUpload upload) throws IllegalArgumentException {
        if (upload == null) throw new IllegalArgumentException("\"upload\" is required but got null");
        return new BeginVideoUploadProcessRequestBuilder(upload);
    }
    private okhttp3.Call completeStreamingUploadCall(Double uploadId, Double userId, String signature, Double videoFileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/uploads/{upload_id}"
            .replace("{" + "upload_id" + "}", localVarApiClient.escapeString(uploadId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("signature", signature));
        }

        if (videoFileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("video_file_id", videoFileId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call completeStreamingUploadValidateBeforeCall(Double uploadId, Double userId, String signature, Double videoFileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uploadId' is set
        if (uploadId == null) {
            throw new ApiException("Missing the required parameter 'uploadId' when calling completeStreamingUpload(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling completeStreamingUpload(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling completeStreamingUpload(Async)");
        }

        // verify the required parameter 'videoFileId' is set
        if (videoFileId == null) {
            throw new ApiException("Missing the required parameter 'videoFileId' when calling completeStreamingUpload(Async)");
        }

        return completeStreamingUploadCall(uploadId, userId, signature, videoFileId, _callback);

    }


    private ApiResponse<Void> completeStreamingUploadWithHttpInfo(Double uploadId, Double userId, String signature, Double videoFileId) throws ApiException {
        okhttp3.Call localVarCall = completeStreamingUploadValidateBeforeCall(uploadId, userId, signature, videoFileId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call completeStreamingUploadAsync(Double uploadId, Double userId, String signature, Double videoFileId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = completeStreamingUploadValidateBeforeCall(uploadId, userId, signature, videoFileId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CompleteStreamingUploadRequestBuilder {
        private final Double uploadId;
        private final Double userId;
        private final String signature;
        private final Double videoFileId;

        private CompleteStreamingUploadRequestBuilder(double uploadId, double userId, String signature, double videoFileId) {
            this.uploadId = uploadId;
            this.userId = userId;
            this.signature = signature;
            this.videoFileId = videoFileId;
        }

        /**
         * Build call for completeStreamingUpload
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The streaming upload has been completed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return completeStreamingUploadCall(uploadId, userId, signature, videoFileId, _callback);
        }


        /**
         * Execute completeStreamingUpload request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The streaming upload has been completed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            completeStreamingUploadWithHttpInfo(uploadId, userId, signature, videoFileId);
        }

        /**
         * Execute completeStreamingUpload request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The streaming upload has been completed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return completeStreamingUploadWithHttpInfo(uploadId, userId, signature, videoFileId);
        }

        /**
         * Execute completeStreamingUpload request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The streaming upload has been completed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return completeStreamingUploadAsync(uploadId, userId, signature, videoFileId, _callback);
        }
    }

    /**
     * Complete a streaming upload
     * This method completes the specified streaming upload of the authenticated user.
     * @param uploadId The ID of the streaming upload. (required)
     * @param userId The ID of the user. (required)
     * @param signature The crypto signature of the completed upload. (required)
     * @param videoFileId The ID of the uploaded file. (required)
     * @return CompleteStreamingUploadRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The streaming upload has been completed. </td><td>  -  </td></tr>
     </table>
     */
    public CompleteStreamingUploadRequestBuilder completeStreamingUpload(double uploadId, double userId, String signature, double videoFileId) throws IllegalArgumentException {
        
        
        if (signature == null) throw new IllegalArgumentException("\"signature\" is required but got null");
            

        
        return new CompleteStreamingUploadRequestBuilder(uploadId, userId, signature, videoFileId);
    }
    private okhttp3.Call getUploadAttemptCall(Double uploadId, Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/uploads/{upload_id}"
            .replace("{" + "upload_id" + "}", localVarApiClient.escapeString(uploadId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.uploadattempt+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUploadAttemptValidateBeforeCall(Double uploadId, Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uploadId' is set
        if (uploadId == null) {
            throw new ApiException("Missing the required parameter 'uploadId' when calling getUploadAttempt(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUploadAttempt(Async)");
        }

        return getUploadAttemptCall(uploadId, userId, _callback);

    }


    private ApiResponse<UploadAttempt> getUploadAttemptWithHttpInfo(Double uploadId, Double userId) throws ApiException {
        okhttp3.Call localVarCall = getUploadAttemptValidateBeforeCall(uploadId, userId, null);
        Type localVarReturnType = new TypeToken<UploadAttempt>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUploadAttemptAsync(Double uploadId, Double userId, final ApiCallback<UploadAttempt> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUploadAttemptValidateBeforeCall(uploadId, userId, _callback);
        Type localVarReturnType = new TypeToken<UploadAttempt>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUploadAttemptRequestBuilder {
        private final Double uploadId;
        private final Double userId;

        private GetUploadAttemptRequestBuilder(double uploadId, double userId) {
            this.uploadId = uploadId;
            this.userId = userId;
        }

        /**
         * Build call for getUploadAttempt
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The upload attempt was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUploadAttemptCall(uploadId, userId, _callback);
        }


        /**
         * Execute getUploadAttempt request
         * @return UploadAttempt
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The upload attempt was returned. </td><td>  -  </td></tr>
         </table>
         */
        public UploadAttempt execute() throws ApiException {
            ApiResponse<UploadAttempt> localVarResp = getUploadAttemptWithHttpInfo(uploadId, userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUploadAttempt request with HTTP info returned
         * @return ApiResponse&lt;UploadAttempt&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The upload attempt was returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UploadAttempt> executeWithHttpInfo() throws ApiException {
            return getUploadAttemptWithHttpInfo(uploadId, userId);
        }

        /**
         * Execute getUploadAttempt request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The upload attempt was returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UploadAttempt> _callback) throws ApiException {
            return getUploadAttemptAsync(uploadId, userId, _callback);
        }
    }

    /**
     * Get an upload attempt
     * This method returns the specified upload attempt of the authenticated user. _This method has been deprecated. For information on our currently supported upload approaches, see our [Working with Video Uploads](https://developer.vimeo.com/api/upload/videos) guide._
     * @param uploadId The ID of the upload attempt. (required)
     * @param userId The ID of the user. (required)
     * @return GetUploadAttemptRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The upload attempt was returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetUploadAttemptRequestBuilder getUploadAttempt(double uploadId, double userId) throws IllegalArgumentException {
        
        
        return new GetUploadAttemptRequestBuilder(uploadId, userId);
    }
    private okhttp3.Call videoCall(Double userId, UploadVideoRequest uploadVideoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadVideoRequest;

        // create path and map variables
        String localVarPath = "/users/{user_id}/videos"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call videoValidateBeforeCall(Double userId, UploadVideoRequest uploadVideoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling video(Async)");
        }

        // verify the required parameter 'uploadVideoRequest' is set
        if (uploadVideoRequest == null) {
            throw new ApiException("Missing the required parameter 'uploadVideoRequest' when calling video(Async)");
        }

        return videoCall(userId, uploadVideoRequest, _callback);

    }


    private ApiResponse<Video> videoWithHttpInfo(Double userId, UploadVideoRequest uploadVideoRequest) throws ApiException {
        okhttp3.Call localVarCall = videoValidateBeforeCall(userId, uploadVideoRequest, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call videoAsync(Double userId, UploadVideoRequest uploadVideoRequest, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = videoValidateBeforeCall(userId, uploadVideoRequest, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VideoRequestBuilder {
        private final UploadVideoRequestUpload upload;
        private final Double userId;
        private String description;
        private List<String> contentRating;
        private UploadVideoRequestEmbed embed;
        private List<String> embedDomains;
        private String folderUri;
        private Boolean hideFromVimeo;
        private String license;
        private String locale;
        private String name;
        private String password;
        private UploadVideoRequestPrivacy privacy;
        private UploadVideoRequestReviewPage reviewPage;
        private UploadVideoRequestSpatial spatial;

        private VideoRequestBuilder(UploadVideoRequestUpload upload, double userId) {
            this.upload = upload;
            this.userId = userId;
        }

        /**
         * Set description
         * @param description The description of the video. (optional)
         * @return VideoRequestBuilder
         */
        public VideoRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set contentRating
         * @param contentRating A list of values describing the content in this video. For a full list of values, use the [&#x60;/contentratings&#x60;](https://developer.vimeo.com/api/reference/videos#get_content_ratings) endpoint. (optional)
         * @return VideoRequestBuilder
         */
        public VideoRequestBuilder contentRating(List<String> contentRating) {
            this.contentRating = contentRating;
            return this;
        }
        
        /**
         * Set embed
         * @param embed  (optional)
         * @return VideoRequestBuilder
         */
        public VideoRequestBuilder embed(UploadVideoRequestEmbed embed) {
            this.embed = embed;
            return this;
        }
        
        /**
         * Set embedDomains
         * @param embedDomains The complete list of domains the video can be embedded on. This field requires that **privacy_embed** have the value &#x60;whitelist&#x60;. (optional)
         * @return VideoRequestBuilder
         */
        public VideoRequestBuilder embedDomains(List<String> embedDomains) {
            this.embedDomains = embedDomains;
            return this;
        }
        
        /**
         * Set folderUri
         * @param folderUri The URI of the folder to which the video is uploaded. (optional)
         * @return VideoRequestBuilder
         */
        public VideoRequestBuilder folderUri(String folderUri) {
            this.folderUri = folderUri;
            return this;
        }
        
        /**
         * Set hideFromVimeo
         * @param hideFromVimeo Whether to hide the video from everyone except the video&#39;s owner. When the value is &#x60;true&#x60;, unlisted video links work only for the video&#39;s owner. (optional)
         * @return VideoRequestBuilder
         */
        public VideoRequestBuilder hideFromVimeo(Boolean hideFromVimeo) {
            this.hideFromVimeo = hideFromVimeo;
            return this;
        }
        
        /**
         * Set license
         * @param license The Creative Commons license under which the video is offered.  Option descriptions:  * &#x60;by&#x60; - The video is offered under CC BY, or the attibution-only license.  * &#x60;by-nc&#x60; - The video is offered under CC BY-NC, or the Attribution-NonCommercial license.  * &#x60;by-nc-nd&#x60; - The video is offered under CC BY-NC-ND, or the Attribution-NonCommercian-NoDerivs license.  * &#x60;by-nc-sa&#x60; - The video is offered under CC BY-NC-SA, or the Attribution-NonCommercial-ShareAlike licence.  * &#x60;by-nd&#x60; - The video is offered under CC BY-ND, or the Attribution-NoDerivs license.  * &#x60;by-sa&#x60; - The video is offered under CC BY-SA, or the Attribution-ShareAlike license.  * &#x60;cc0&#x60; - The video is offered under CC0, or the public domain license.  (optional)
         * @return VideoRequestBuilder
         */
        public VideoRequestBuilder license(String license) {
            this.license = license;
            return this;
        }
        
        /**
         * Set locale
         * @param locale The video&#39;s default language. For a full list of supported languages, use the [&#x60;/languages?filter&#x3D;texttracks&#x60;](https://developer.vimeo.com/api/reference/videos#get_languages) endpoint. (optional)
         * @return VideoRequestBuilder
         */
        public VideoRequestBuilder locale(String locale) {
            this.locale = locale;
            return this;
        }
        
        /**
         * Set name
         * @param name The title of the video. (optional)
         * @return VideoRequestBuilder
         */
        public VideoRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set password
         * @param password The password. This field is required when **privacy.view** is &#x60;password&#x60;. (optional)
         * @return VideoRequestBuilder
         */
        public VideoRequestBuilder password(String password) {
            this.password = password;
            return this;
        }
        
        /**
         * Set privacy
         * @param privacy  (optional)
         * @return VideoRequestBuilder
         */
        public VideoRequestBuilder privacy(UploadVideoRequestPrivacy privacy) {
            this.privacy = privacy;
            return this;
        }
        
        /**
         * Set reviewPage
         * @param reviewPage  (optional)
         * @return VideoRequestBuilder
         */
        public VideoRequestBuilder reviewPage(UploadVideoRequestReviewPage reviewPage) {
            this.reviewPage = reviewPage;
            return this;
        }
        
        /**
         * Set spatial
         * @param spatial  (optional)
         * @return VideoRequestBuilder
         */
        public VideoRequestBuilder spatial(UploadVideoRequestSpatial spatial) {
            this.spatial = spatial;
            return this;
        }
        
        /**
         * Build call for video
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The upload procedure has begun. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UploadVideoRequest uploadVideoRequest = buildBodyParams();
            return videoCall(userId, uploadVideoRequest, _callback);
        }

        private UploadVideoRequest buildBodyParams() {
            UploadVideoRequest uploadVideoRequest = new UploadVideoRequest();
            uploadVideoRequest.description(this.description);
            uploadVideoRequest.contentRating(this.contentRating);
            uploadVideoRequest.embed(this.embed);
            uploadVideoRequest.embedDomains(this.embedDomains);
            uploadVideoRequest.folderUri(this.folderUri);
            uploadVideoRequest.hideFromVimeo(this.hideFromVimeo);
            if (this.license != null)
            uploadVideoRequest.license(UploadVideoRequest.LicenseEnum.fromValue(this.license));
            uploadVideoRequest.locale(this.locale);
            uploadVideoRequest.name(this.name);
            uploadVideoRequest.password(this.password);
            uploadVideoRequest.privacy(this.privacy);
            uploadVideoRequest.reviewPage(this.reviewPage);
            uploadVideoRequest.spatial(this.spatial);
            uploadVideoRequest.upload(this.upload);
            return uploadVideoRequest;
        }

        /**
         * Execute video request
         * @return Video
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The upload procedure has begun. </td><td>  -  </td></tr>
         </table>
         */
        public Video execute() throws ApiException {
            UploadVideoRequest uploadVideoRequest = buildBodyParams();
            ApiResponse<Video> localVarResp = videoWithHttpInfo(userId, uploadVideoRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute video request with HTTP info returned
         * @return ApiResponse&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The upload procedure has begun. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Video> executeWithHttpInfo() throws ApiException {
            UploadVideoRequest uploadVideoRequest = buildBodyParams();
            return videoWithHttpInfo(userId, uploadVideoRequest);
        }

        /**
         * Execute video request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The upload procedure has begun. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Video> _callback) throws ApiException {
            UploadVideoRequest uploadVideoRequest = buildBodyParams();
            return videoAsync(userId, uploadVideoRequest, _callback);
        }
    }

    /**
     * Upload a video
     * This method begins the video upload process for the authenticated user. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
     * @param userId The ID of the user. (required)
     * @param uploadVideoRequest  (required)
     * @return VideoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The upload procedure has begun. </td><td>  -  </td></tr>
     </table>
     */
    public VideoRequestBuilder video(UploadVideoRequestUpload upload, double userId) throws IllegalArgumentException {
        if (upload == null) throw new IllegalArgumentException("\"upload\" is required but got null");
        
        return new VideoRequestBuilder(upload, userId);
    }
}
