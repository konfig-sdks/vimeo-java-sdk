/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.VideoSpatialDirectorTimelineInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The video&#39;s 360 spatial data.
 */
@ApiModel(description = "The video's 360 spatial data.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class VideoSpatial {
  public static final String SERIALIZED_NAME_DIRECTOR_TIMELINE = "director_timeline";
  @SerializedName(SERIALIZED_NAME_DIRECTOR_TIMELINE)
  private List<VideoSpatialDirectorTimelineInner> directorTimeline = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIELD_OF_VIEW = "field_of_view";
  @SerializedName(SERIALIZED_NAME_FIELD_OF_VIEW)
  private Double fieldOfView;

  /**
   * The video&#39;s 360 spatial projection.  Option descriptions:  * &#x60;cubical&#x60; - The spatial projection is cubical.  * &#x60;cylindrical&#x60; - The spatial projection is cylindrical.  * &#x60;dome&#x60; - The spatial projection is dome-shaped.  * &#x60;equirectangular&#x60; - The spatial projection is equirectangular.  * &#x60;pyramid&#x60; - The spatial projection is pyramid-shaped. 
   */
  @JsonAdapter(ProjectionEnum.Adapter.class)
 public enum ProjectionEnum {
    CUBICAL("cubical"),
    
    CYLINDRICAL("cylindrical"),
    
    DOME("dome"),
    
    EQUIRECTANGULAR("equirectangular"),
    
    PYRAMID("pyramid");

    private String value;

    ProjectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProjectionEnum fromValue(String value) {
      for (ProjectionEnum b : ProjectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ProjectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProjectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProjectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProjectionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PROJECTION = "projection";
  @SerializedName(SERIALIZED_NAME_PROJECTION)
  private ProjectionEnum projection;

  /**
   * The video&#39;s 360 stereo format.  Option descriptions:  * &#x60;left-right&#x60; - The stereo format is left-right.  * &#x60;mono&#x60; - The audio is monaural.  * &#x60;top-bottom&#x60; - The stereo format is top-bottom. 
   */
  @JsonAdapter(StereoFormatEnum.Adapter.class)
 public enum StereoFormatEnum {
    LEFT_RIGHT("left-right"),
    
    MONO("mono"),
    
    TOP_BOTTOM("top-bottom");

    private String value;

    StereoFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StereoFormatEnum fromValue(String value) {
      for (StereoFormatEnum b : StereoFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StereoFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StereoFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StereoFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StereoFormatEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STEREO_FORMAT = "stereo_format";
  @SerializedName(SERIALIZED_NAME_STEREO_FORMAT)
  private StereoFormatEnum stereoFormat;

  public VideoSpatial() {
  }

  public VideoSpatial directorTimeline(List<VideoSpatialDirectorTimelineInner> directorTimeline) {
    
    
    
    
    this.directorTimeline = directorTimeline;
    return this;
  }

  public VideoSpatial addDirectorTimelineItem(VideoSpatialDirectorTimelineInner directorTimelineItem) {
    this.directorTimeline.add(directorTimelineItem);
    return this;
  }

   /**
   * The video&#39;s 360 director timeline.
   * @return directorTimeline
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The video's 360 director timeline.")

  public List<VideoSpatialDirectorTimelineInner> getDirectorTimeline() {
    return directorTimeline;
  }


  public void setDirectorTimeline(List<VideoSpatialDirectorTimelineInner> directorTimeline) {
    
    
    
    this.directorTimeline = directorTimeline;
  }


  public VideoSpatial fieldOfView(Double fieldOfView) {
    
    
    
    
    this.fieldOfView = fieldOfView;
    return this;
  }

  public VideoSpatial fieldOfView(Integer fieldOfView) {
    
    
    
    
    this.fieldOfView = fieldOfView.doubleValue();
    return this;
  }

   /**
   * The video&#39;s 360 field of view value, ranging from a mininum of &#x60;30&#x60; to a maximum of &#x60;90&#x60;. The default value is &#x60;50&#x60;.
   * @return fieldOfView
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "50", required = true, value = "The video's 360 field of view value, ranging from a mininum of `30` to a maximum of `90`. The default value is `50`.")

  public Double getFieldOfView() {
    return fieldOfView;
  }


  public void setFieldOfView(Double fieldOfView) {
    
    
    
    this.fieldOfView = fieldOfView;
  }


  public VideoSpatial projection(ProjectionEnum projection) {
    
    
    
    
    this.projection = projection;
    return this;
  }

   /**
   * The video&#39;s 360 spatial projection.  Option descriptions:  * &#x60;cubical&#x60; - The spatial projection is cubical.  * &#x60;cylindrical&#x60; - The spatial projection is cylindrical.  * &#x60;dome&#x60; - The spatial projection is dome-shaped.  * &#x60;equirectangular&#x60; - The spatial projection is equirectangular.  * &#x60;pyramid&#x60; - The spatial projection is pyramid-shaped. 
   * @return projection
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CUBICAL", required = true, value = "The video's 360 spatial projection.  Option descriptions:  * `cubical` - The spatial projection is cubical.  * `cylindrical` - The spatial projection is cylindrical.  * `dome` - The spatial projection is dome-shaped.  * `equirectangular` - The spatial projection is equirectangular.  * `pyramid` - The spatial projection is pyramid-shaped. ")

  public ProjectionEnum getProjection() {
    return projection;
  }


  public void setProjection(ProjectionEnum projection) {
    
    
    
    this.projection = projection;
  }


  public VideoSpatial stereoFormat(StereoFormatEnum stereoFormat) {
    
    
    
    
    this.stereoFormat = stereoFormat;
    return this;
  }

   /**
   * The video&#39;s 360 stereo format.  Option descriptions:  * &#x60;left-right&#x60; - The stereo format is left-right.  * &#x60;mono&#x60; - The audio is monaural.  * &#x60;top-bottom&#x60; - The stereo format is top-bottom. 
   * @return stereoFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "LEFT_RIGHT", required = true, value = "The video's 360 stereo format.  Option descriptions:  * `left-right` - The stereo format is left-right.  * `mono` - The audio is monaural.  * `top-bottom` - The stereo format is top-bottom. ")

  public StereoFormatEnum getStereoFormat() {
    return stereoFormat;
  }


  public void setStereoFormat(StereoFormatEnum stereoFormat) {
    
    
    
    this.stereoFormat = stereoFormat;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the VideoSpatial instance itself
   */
  public VideoSpatial putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoSpatial videoSpatial = (VideoSpatial) o;
    return Objects.equals(this.directorTimeline, videoSpatial.directorTimeline) &&
        Objects.equals(this.fieldOfView, videoSpatial.fieldOfView) &&
        Objects.equals(this.projection, videoSpatial.projection) &&
        Objects.equals(this.stereoFormat, videoSpatial.stereoFormat)&&
        Objects.equals(this.additionalProperties, videoSpatial.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(directorTimeline, fieldOfView, projection, stereoFormat, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoSpatial {\n");
    sb.append("    directorTimeline: ").append(toIndentedString(directorTimeline)).append("\n");
    sb.append("    fieldOfView: ").append(toIndentedString(fieldOfView)).append("\n");
    sb.append("    projection: ").append(toIndentedString(projection)).append("\n");
    sb.append("    stereoFormat: ").append(toIndentedString(stereoFormat)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("director_timeline");
    openapiFields.add("field_of_view");
    openapiFields.add("projection");
    openapiFields.add("stereo_format");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("director_timeline");
    openapiRequiredFields.add("field_of_view");
    openapiRequiredFields.add("projection");
    openapiRequiredFields.add("stereo_format");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VideoSpatial
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!VideoSpatial.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoSpatial is not found in the empty JSON string", VideoSpatial.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VideoSpatial.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("director_timeline").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `director_timeline` to be an array in the JSON string but got `%s`", jsonObj.get("director_timeline").toString()));
      }

      JsonArray jsonArraydirectorTimeline = jsonObj.getAsJsonArray("director_timeline");
      // validate the required field `director_timeline` (array)
      for (int i = 0; i < jsonArraydirectorTimeline.size(); i++) {
        VideoSpatialDirectorTimelineInner.validateJsonObject(jsonArraydirectorTimeline.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("projection").isJsonNull() && !jsonObj.get("projection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projection").toString()));
      }
      if (!jsonObj.get("stereo_format").isJsonNull() && !jsonObj.get("stereo_format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stereo_format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stereo_format").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoSpatial.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoSpatial' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoSpatial> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoSpatial.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoSpatial>() {
           @Override
           public void write(JsonWriter out, VideoSpatial value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoSpatial read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             VideoSpatial instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VideoSpatial given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VideoSpatial
  * @throws IOException if the JSON string is invalid with respect to VideoSpatial
  */
  public static VideoSpatial fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoSpatial.class);
  }

 /**
  * Convert an instance of VideoSpatial to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

