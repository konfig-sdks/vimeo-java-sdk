/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Tag;
import com.konfigthis.client.model.Video;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VideosTagsApi
 */
@Disabled
public class VideosTagsApiTest {

    private static VideosTagsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new VideosTagsApi(apiClient);
    }

    /**
     * Add a list of tags to a video
     *
     * This method adds multiple tags to the specified video. Include the tags as a JSON array  as the body of the request with the  **name** field, like this: &#x60;[{ \&quot;name\&quot;: \&quot;funny\&quot;}, {\&quot;name\&quot;: \&quot;concert\&quot; }]&#x60;. The authenticated user must have edit access to the video. For more information on batch requests like this one, see [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMultipleTest() throws ApiException {
        Double videoId = null;
        Double page = null;
        Double perPage = null;
        List<Tag> response = api.addMultiple(videoId)
                .page(page)
                .perPage(perPage)
                .execute();
        // TODO: test validations
    }

    /**
     * Add a specific tag to a video
     *
     * This method adds a single tag to the specified video. The authenticated user must be the owner of the video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTagToVideoTest() throws ApiException {
        Double videoId = null;
        String word = null;
        Tag response = api.addTagToVideo(videoId, word)
                .execute();
        // TODO: test validations
    }

    /**
     * Check if a tag has been added to a video
     *
     * This method determines whether the specified tag has been added to a video. The authenticated user must be the owner of the video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkTagVideoTest() throws ApiException {
        Double videoId = null;
        String word = null;
        Tag response = api.checkTagVideo(videoId, word)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the videos with a specific tag
     *
     * This method returns all the public videos associated with the specified tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllByTagTest() throws ApiException {
        String word = null;
        String direction = null;
        Double page = null;
        Double perPage = null;
        String sort = null;
        List<Video> response = api.getAllByTag(word)
                .direction(direction)
                .page(page)
                .perPage(perPage)
                .sort(sort)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the tags of a video
     *
     * This method returns all the tags associated with the specified video. The authenticated user must be the owner of the video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVideoTagsTest() throws ApiException {
        Double videoId = null;
        Double page = null;
        Double perPage = null;
        List<Tag> response = api.getVideoTags(videoId)
                .page(page)
                .perPage(perPage)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove a tag from a video
     *
     * This method removes the specified tag from a video. The authenticated user must have edit access to the video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeTagTest() throws ApiException {
        Double videoId = null;
        String word = null;
        api.removeTag(videoId, word)
                .execute();
        // TODO: test validations
    }

}
