/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Activity31;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UsersFeedsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersFeedsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UsersFeedsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call feedCall(Double userId, String offset, Double page, Double perPage, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/feed"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.activity+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call feedValidateBeforeCall(Double userId, String offset, Double page, Double perPage, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling feed(Async)");
        }

        return feedCall(userId, offset, page, perPage, type, _callback);

    }


    private ApiResponse<List<Activity31>> feedWithHttpInfo(Double userId, String offset, Double page, Double perPage, String type) throws ApiException {
        okhttp3.Call localVarCall = feedValidateBeforeCall(userId, offset, page, perPage, type, null);
        Type localVarReturnType = new TypeToken<List<Activity31>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call feedAsync(Double userId, String offset, Double page, Double perPage, String type, final ApiCallback<List<Activity31>> _callback) throws ApiException {

        okhttp3.Call localVarCall = feedValidateBeforeCall(userId, offset, page, perPage, type, _callback);
        Type localVarReturnType = new TypeToken<List<Activity31>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FeedRequestBuilder {
        private final Double userId;
        private String offset;
        private Double page;
        private Double perPage;
        private String type;

        private FeedRequestBuilder(double userId) {
            this.userId = userId;
        }

        /**
         * Set offset
         * @param offset The pagination offset. We recommend that you use the pagination links in the feed response instead of working with this value directly. For more details, see our [pagination documentation](https://developer.vimeo.com/api/common-formats#using-the-pagination-parameter). (optional)
         * @return FeedRequestBuilder
         */
        public FeedRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return FeedRequestBuilder
         */
        public FeedRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return FeedRequestBuilder
         */
        public FeedRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set type
         * @param type The feed type.  Option descriptions:  * &#x60;appears&#x60; - Videos in which the user appears.  * &#x60;category_featured&#x60; - Featured videos.  * &#x60;channel&#x60; - Channel videos.  * &#x60;facebook_feed&#x60; - Videos from the user&#39;s Facebook feed.  * &#x60;following&#x60; - Videos from accounts that the user follows.  * &#x60;group&#x60; - Group videos.  * &#x60;likes&#x60; - Liked videos.  * &#x60;ondemand_publish&#x60; - On Demand videos.  * &#x60;share&#x60; - Shared videos.  * &#x60;tagged_with&#x60; - Tagged videos.  * &#x60;twitter_timeline&#x60; - Videos from the user&#39;s Twitter timeline.  * &#x60;uploads&#x60; - Uploaded videos.  (optional)
         * @return FeedRequestBuilder
         */
        public FeedRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for feed
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return feedCall(userId, offset, page, perPage, type, _callback);
        }


        /**
         * Execute feed request
         * @return List&lt;Activity31&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Activity31> execute() throws ApiException {
            ApiResponse<List<Activity31>> localVarResp = feedWithHttpInfo(userId, offset, page, perPage, type);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute feed request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Activity31&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Activity31>> executeWithHttpInfo() throws ApiException {
            return feedWithHttpInfo(userId, offset, page, perPage, type);
        }

        /**
         * Execute feed request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Activity31>> _callback) throws ApiException {
            return feedAsync(userId, offset, page, perPage, type, _callback);
        }
    }

    /**
     * Get all the videos in the user&#39;s feed
     * This method returns every video in the authenticated user&#39;s feed.
     * @param userId The ID of the user. (required)
     * @return FeedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public FeedRequestBuilder feed(double userId) throws IllegalArgumentException {
        
        return new FeedRequestBuilder(userId);
    }
    private okhttp3.Call getUserFeedVideosCall(String offset, Double page, Double perPage, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/feed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.activity+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserFeedVideosValidateBeforeCall(String offset, Double page, Double perPage, String type, final ApiCallback _callback) throws ApiException {
        return getUserFeedVideosCall(offset, page, perPage, type, _callback);

    }


    private ApiResponse<List<Activity31>> getUserFeedVideosWithHttpInfo(String offset, Double page, Double perPage, String type) throws ApiException {
        okhttp3.Call localVarCall = getUserFeedVideosValidateBeforeCall(offset, page, perPage, type, null);
        Type localVarReturnType = new TypeToken<List<Activity31>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserFeedVideosAsync(String offset, Double page, Double perPage, String type, final ApiCallback<List<Activity31>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserFeedVideosValidateBeforeCall(offset, page, perPage, type, _callback);
        Type localVarReturnType = new TypeToken<List<Activity31>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserFeedVideosRequestBuilder {
        private String offset;
        private Double page;
        private Double perPage;
        private String type;

        private GetUserFeedVideosRequestBuilder() {
        }

        /**
         * Set offset
         * @param offset The pagination offset. We recommend that you use the pagination links in the feed response instead of working with this value directly. For more details, see our [pagination documentation](https://developer.vimeo.com/api/common-formats#using-the-pagination-parameter). (optional)
         * @return GetUserFeedVideosRequestBuilder
         */
        public GetUserFeedVideosRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetUserFeedVideosRequestBuilder
         */
        public GetUserFeedVideosRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetUserFeedVideosRequestBuilder
         */
        public GetUserFeedVideosRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set type
         * @param type The feed type.  Option descriptions:  * &#x60;appears&#x60; - Videos in which the user appears.  * &#x60;category_featured&#x60; - Featured videos.  * &#x60;channel&#x60; - Channel videos.  * &#x60;facebook_feed&#x60; - Videos from the user&#39;s Facebook feed.  * &#x60;following&#x60; - Videos from accounts that the user follows.  * &#x60;group&#x60; - Group videos.  * &#x60;likes&#x60; - Liked videos.  * &#x60;ondemand_publish&#x60; - On Demand videos.  * &#x60;share&#x60; - Shared videos.  * &#x60;tagged_with&#x60; - Tagged videos.  * &#x60;twitter_timeline&#x60; - Videos from the user&#39;s Twitter timeline.  * &#x60;uploads&#x60; - Uploaded videos.  (optional)
         * @return GetUserFeedVideosRequestBuilder
         */
        public GetUserFeedVideosRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for getUserFeedVideos
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserFeedVideosCall(offset, page, perPage, type, _callback);
        }


        /**
         * Execute getUserFeedVideos request
         * @return List&lt;Activity31&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public List<Activity31> execute() throws ApiException {
            ApiResponse<List<Activity31>> localVarResp = getUserFeedVideosWithHttpInfo(offset, page, perPage, type);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserFeedVideos request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Activity31&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Activity31>> executeWithHttpInfo() throws ApiException {
            return getUserFeedVideosWithHttpInfo(offset, page, perPage, type);
        }

        /**
         * Execute getUserFeedVideos request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Activity31>> _callback) throws ApiException {
            return getUserFeedVideosAsync(offset, page, perPage, type, _callback);
        }
    }

    /**
     * Get all the videos in the user&#39;s feed
     * This method returns every video in the authenticated user&#39;s feed.
     * @return GetUserFeedVideosRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public GetUserFeedVideosRequestBuilder getUserFeedVideos() throws IllegalArgumentException {
        return new GetUserFeedVideosRequestBuilder();
    }
}
