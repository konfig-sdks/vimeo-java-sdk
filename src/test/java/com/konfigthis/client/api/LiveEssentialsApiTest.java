/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.LiveEssentialsCreateEventForUserRequest;
import com.konfigthis.client.model.LiveEssentialsCreateEventForUserRequestEmbed;
import com.konfigthis.client.model.LiveEssentialsCreateEventForUserRequestInteractionToolsSettings;
import com.konfigthis.client.model.LiveEssentialsCreateEventForUserRequestSchedule;
import com.konfigthis.client.model.LiveEssentialsCreateEventForUserRequestStreamEmbed;
import com.konfigthis.client.model.LiveEssentialsCreateEventForUserRequestStreamPrivacy;
import com.konfigthis.client.model.LiveEssentialsCreateEventRequest;
import com.konfigthis.client.model.LiveEssentialsCreateEventRequestEmbed;
import com.konfigthis.client.model.LiveEssentialsCreateEventRequestInteractionToolsSettings;
import com.konfigthis.client.model.LiveEssentialsCreateEventRequestSchedule;
import com.konfigthis.client.model.LiveEssentialsCreateEventRequestStreamEmbed;
import com.konfigthis.client.model.LiveEssentialsCreateEventRequestStreamPrivacy;
import com.konfigthis.client.model.LiveEssentialsCreateLiveEventRequest;
import com.konfigthis.client.model.LiveEssentialsCreateLiveEventRequestEmbed;
import com.konfigthis.client.model.LiveEssentialsCreateLiveEventRequestInteractionToolsSettings;
import com.konfigthis.client.model.LiveEssentialsCreateLiveEventRequestSchedule;
import com.konfigthis.client.model.LiveEssentialsCreateLiveEventRequestStreamEmbed;
import com.konfigthis.client.model.LiveEssentialsCreateLiveEventRequestStreamPrivacy;
import com.konfigthis.client.model.LiveEssentialsDeleteMultipleEventsRequest;
import com.konfigthis.client.model.LiveEssentialsDeleteMultipleEventsRequest1;
import com.konfigthis.client.model.LiveEssentialsDeleteMultipleEventsRequest2;
import com.konfigthis.client.model.LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest;
import com.konfigthis.client.model.LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest1;
import com.konfigthis.client.model.LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest1Embed;
import com.konfigthis.client.model.LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest1InteractionToolsSettings;
import com.konfigthis.client.model.LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest1Schedule;
import com.konfigthis.client.model.LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest1StreamEmbed;
import com.konfigthis.client.model.LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest1StreamPrivacy;
import com.konfigthis.client.model.LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2;
import com.konfigthis.client.model.LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed;
import com.konfigthis.client.model.LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2InteractionToolsSettings;
import com.konfigthis.client.model.LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Schedule;
import com.konfigthis.client.model.LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2StreamEmbed;
import com.konfigthis.client.model.LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2StreamPrivacy;
import com.konfigthis.client.model.LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequestEmbed;
import com.konfigthis.client.model.LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequestInteractionToolsSettings;
import com.konfigthis.client.model.LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequestSchedule;
import com.konfigthis.client.model.LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequestStreamEmbed;
import com.konfigthis.client.model.LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequestStreamPrivacy;
import com.konfigthis.client.model.LiveEvent;
import com.konfigthis.client.model.LiveEventRecurring;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LiveEssentialsApi
 */
@Disabled
public class LiveEssentialsApiTest {

    private static LiveEssentialsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new LiveEssentialsApi(apiClient);
    }

    /**
     * Create a live event
     *
     * This method creates a new event for the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEventTest() throws ApiException {
        String title = null;
        Boolean allowShareLink = null;
        Boolean autoCcEnabled = null;
        String autoCcKeywords = null;
        String autoCcLang = null;
        Boolean automaticallyTitleStream = null;
        Boolean chatEnabled = null;
        List<String> contentRating = null;
        Boolean dvr = null;
        LiveEssentialsCreateEventRequestEmbed embed = null;
        String folderUri = null;
        LiveEssentialsCreateEventRequestInteractionToolsSettings interactionToolsSettings = null;
        Boolean lowLatency = null;
        String playlistSort = null;
        Boolean rtmpPreview = null;
        LiveEssentialsCreateEventRequestSchedule schedule = null;
        Boolean scheduledPlayback = null;
        String streamDescription = null;
        LiveEssentialsCreateEventRequestStreamEmbed streamEmbed = null;
        String streamPassword = null;
        LiveEssentialsCreateEventRequestStreamPrivacy streamPrivacy = null;
        String streamTitle = null;
        String timeZone = null;
        LiveEventRecurring response = api.createEvent(title)
                .allowShareLink(allowShareLink)
                .autoCcEnabled(autoCcEnabled)
                .autoCcKeywords(autoCcKeywords)
                .autoCcLang(autoCcLang)
                .automaticallyTitleStream(automaticallyTitleStream)
                .chatEnabled(chatEnabled)
                .contentRating(contentRating)
                .dvr(dvr)
                .embed(embed)
                .folderUri(folderUri)
                .interactionToolsSettings(interactionToolsSettings)
                .lowLatency(lowLatency)
                .playlistSort(playlistSort)
                .rtmpPreview(rtmpPreview)
                .schedule(schedule)
                .scheduledPlayback(scheduledPlayback)
                .streamDescription(streamDescription)
                .streamEmbed(streamEmbed)
                .streamPassword(streamPassword)
                .streamPrivacy(streamPrivacy)
                .streamTitle(streamTitle)
                .timeZone(timeZone)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a live event
     *
     * This method creates a new event for the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEventForUserTest() throws ApiException {
        String title = null;
        Double userId = null;
        Boolean allowShareLink = null;
        Boolean autoCcEnabled = null;
        String autoCcKeywords = null;
        String autoCcLang = null;
        Boolean automaticallyTitleStream = null;
        Boolean chatEnabled = null;
        List<String> contentRating = null;
        Boolean dvr = null;
        LiveEssentialsCreateEventForUserRequestEmbed embed = null;
        String folderUri = null;
        LiveEssentialsCreateEventForUserRequestInteractionToolsSettings interactionToolsSettings = null;
        Boolean lowLatency = null;
        String playlistSort = null;
        Boolean rtmpPreview = null;
        LiveEssentialsCreateEventForUserRequestSchedule schedule = null;
        Boolean scheduledPlayback = null;
        String streamDescription = null;
        LiveEssentialsCreateEventForUserRequestStreamEmbed streamEmbed = null;
        String streamPassword = null;
        LiveEssentialsCreateEventForUserRequestStreamPrivacy streamPrivacy = null;
        String streamTitle = null;
        String timeZone = null;
        LiveEventRecurring response = api.createEventForUser(title, userId)
                .allowShareLink(allowShareLink)
                .autoCcEnabled(autoCcEnabled)
                .autoCcKeywords(autoCcKeywords)
                .autoCcLang(autoCcLang)
                .automaticallyTitleStream(automaticallyTitleStream)
                .chatEnabled(chatEnabled)
                .contentRating(contentRating)
                .dvr(dvr)
                .embed(embed)
                .folderUri(folderUri)
                .interactionToolsSettings(interactionToolsSettings)
                .lowLatency(lowLatency)
                .playlistSort(playlistSort)
                .rtmpPreview(rtmpPreview)
                .schedule(schedule)
                .scheduledPlayback(scheduledPlayback)
                .streamDescription(streamDescription)
                .streamEmbed(streamEmbed)
                .streamPassword(streamPassword)
                .streamPrivacy(streamPrivacy)
                .streamTitle(streamTitle)
                .timeZone(timeZone)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a live event
     *
     * This method creates a new event for the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLiveEventTest() throws ApiException {
        String title = null;
        Boolean allowShareLink = null;
        Boolean autoCcEnabled = null;
        String autoCcKeywords = null;
        String autoCcLang = null;
        Boolean automaticallyTitleStream = null;
        Boolean chatEnabled = null;
        List<String> contentRating = null;
        Boolean dvr = null;
        LiveEssentialsCreateLiveEventRequestEmbed embed = null;
        String folderUri = null;
        LiveEssentialsCreateLiveEventRequestInteractionToolsSettings interactionToolsSettings = null;
        Boolean lowLatency = null;
        String playlistSort = null;
        Boolean rtmpPreview = null;
        LiveEssentialsCreateLiveEventRequestSchedule schedule = null;
        Boolean scheduledPlayback = null;
        String streamDescription = null;
        LiveEssentialsCreateLiveEventRequestStreamEmbed streamEmbed = null;
        String streamPassword = null;
        LiveEssentialsCreateLiveEventRequestStreamPrivacy streamPrivacy = null;
        String streamTitle = null;
        String timeZone = null;
        LiveEventRecurring response = api.createLiveEvent(title)
                .allowShareLink(allowShareLink)
                .autoCcEnabled(autoCcEnabled)
                .autoCcKeywords(autoCcKeywords)
                .autoCcLang(autoCcLang)
                .automaticallyTitleStream(automaticallyTitleStream)
                .chatEnabled(chatEnabled)
                .contentRating(contentRating)
                .dvr(dvr)
                .embed(embed)
                .folderUri(folderUri)
                .interactionToolsSettings(interactionToolsSettings)
                .lowLatency(lowLatency)
                .playlistSort(playlistSort)
                .rtmpPreview(rtmpPreview)
                .schedule(schedule)
                .scheduledPlayback(scheduledPlayback)
                .streamDescription(streamDescription)
                .streamEmbed(streamEmbed)
                .streamPassword(streamPassword)
                .streamPrivacy(streamPrivacy)
                .streamTitle(streamTitle)
                .timeZone(timeZone)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a list of live events
     *
     * This method deletes multiple events belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMultipleEventsTest() throws ApiException {
        String password = null;
        api.deleteMultipleEvents(password)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a list of live events
     *
     * This method deletes multiple events belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMultipleEvents_0Test() throws ApiException {
        String password = null;
        api.deleteMultipleEvents_0(password)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a list of live events
     *
     * This method deletes multiple events belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMultipleEvents_1Test() throws ApiException {
        String password = null;
        Double userId = null;
        api.deleteMultipleEvents_1(password, userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a specific live event
     *
     * This method deletes a single event belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSingleEventTest() throws ApiException {
        Double liveEventId = null;
        api.deleteSingleEvent(liveEventId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a specific live event
     *
     * This method deletes a single event belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSpecificEventTest() throws ApiException {
        Double liveEventId = null;
        Double userId = null;
        api.deleteSpecificEvent(liveEventId, userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a specific live event
     *
     * This method deletes a single event belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSpecificLiveEventTest() throws ApiException {
        Double liveEventId = null;
        api.deleteSpecificLiveEvent(liveEventId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the live events that belong to the user
     *
     * The method returns every event belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllUserLiveEventsTest() throws ApiException {
        String direction = null;
        String filter = null;
        Double page = null;
        Double perPage = null;
        String query = null;
        String sort = null;
        String type = null;
        List<LiveEvent> response = api.getAllUserLiveEvents()
                .direction(direction)
                .filter(filter)
                .page(page)
                .perPage(perPage)
                .query(query)
                .sort(sort)
                .type(type)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a specific live event
     *
     * This method returns a single event belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventByIdTest() throws ApiException {
        Double liveEventId = null;
        String password = null;
        LiveEventRecurring response = api.getEventById(liveEventId)
                .password(password)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a specific live event
     *
     * This method returns a single event belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventById_0Test() throws ApiException {
        Double liveEventId = null;
        Double userId = null;
        String password = null;
        LiveEventRecurring response = api.getEventById_0(liveEventId, userId)
                .password(password)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a specific live event
     *
     * This method returns a single event belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSpecificLiveEventTest() throws ApiException {
        Double liveEventId = null;
        String password = null;
        LiveEventRecurring response = api.getSpecificLiveEvent(liveEventId)
                .password(password)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the live events that belong to the user
     *
     * The method returns every event belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserLiveEventsTest() throws ApiException {
        String direction = null;
        String filter = null;
        Double page = null;
        Double perPage = null;
        String query = null;
        String sort = null;
        String type = null;
        List<LiveEvent> response = api.getUserLiveEvents()
                .direction(direction)
                .filter(filter)
                .page(page)
                .perPage(perPage)
                .query(query)
                .sort(sort)
                .type(type)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the live events that belong to the user
     *
     * The method returns every event belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserLiveEvents_0Test() throws ApiException {
        Double userId = null;
        String direction = null;
        String filter = null;
        Double page = null;
        Double perPage = null;
        String query = null;
        String sort = null;
        String type = null;
        List<LiveEvent> response = api.getUserLiveEvents_0(userId)
                .direction(direction)
                .filter(filter)
                .page(page)
                .perPage(perPage)
                .query(query)
                .sort(sort)
                .type(type)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a live event
     *
     * This method updates an event belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEventBelongingToAuthenticatedUserTest() throws ApiException {
        Double liveEventId = null;
        String title = null;
        Boolean autoCcEnabled = null;
        String autoCcKeywords = null;
        String autoCcLanguage = null;
        Boolean automaticallyTitleStream = null;
        Boolean chatEnabled = null;
        List<String> contentRating = null;
        Boolean dvr = null;
        LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequestEmbed embed = null;
        LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequestInteractionToolsSettings interactionToolsSettings = null;
        String playlistSort = null;
        LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequestSchedule schedule = null;
        Boolean scheduledPlayback = null;
        String streamDescription = null;
        LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequestStreamEmbed streamEmbed = null;
        String streamMode = null;
        String streamPassword = null;
        LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequestStreamPrivacy streamPrivacy = null;
        String streamTitle = null;
        String timeZone = null;
        LiveEventRecurring response = api.updateEventBelongingToAuthenticatedUser(liveEventId)
                .title(title)
                .autoCcEnabled(autoCcEnabled)
                .autoCcKeywords(autoCcKeywords)
                .autoCcLanguage(autoCcLanguage)
                .automaticallyTitleStream(automaticallyTitleStream)
                .chatEnabled(chatEnabled)
                .contentRating(contentRating)
                .dvr(dvr)
                .embed(embed)
                .interactionToolsSettings(interactionToolsSettings)
                .playlistSort(playlistSort)
                .schedule(schedule)
                .scheduledPlayback(scheduledPlayback)
                .streamDescription(streamDescription)
                .streamEmbed(streamEmbed)
                .streamMode(streamMode)
                .streamPassword(streamPassword)
                .streamPrivacy(streamPrivacy)
                .streamTitle(streamTitle)
                .timeZone(timeZone)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a live event
     *
     * This method updates an event belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEventBelongingToAuthenticatedUser_0Test() throws ApiException {
        Double liveEventId = null;
        String title = null;
        Boolean autoCcEnabled = null;
        String autoCcKeywords = null;
        String autoCcLanguage = null;
        Boolean automaticallyTitleStream = null;
        Boolean chatEnabled = null;
        List<String> contentRating = null;
        Boolean dvr = null;
        LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest1Embed embed = null;
        LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest1InteractionToolsSettings interactionToolsSettings = null;
        String playlistSort = null;
        LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest1Schedule schedule = null;
        Boolean scheduledPlayback = null;
        String streamDescription = null;
        LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest1StreamEmbed streamEmbed = null;
        String streamMode = null;
        String streamPassword = null;
        LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest1StreamPrivacy streamPrivacy = null;
        String streamTitle = null;
        String timeZone = null;
        LiveEventRecurring response = api.updateEventBelongingToAuthenticatedUser_0(liveEventId)
                .title(title)
                .autoCcEnabled(autoCcEnabled)
                .autoCcKeywords(autoCcKeywords)
                .autoCcLanguage(autoCcLanguage)
                .automaticallyTitleStream(automaticallyTitleStream)
                .chatEnabled(chatEnabled)
                .contentRating(contentRating)
                .dvr(dvr)
                .embed(embed)
                .interactionToolsSettings(interactionToolsSettings)
                .playlistSort(playlistSort)
                .schedule(schedule)
                .scheduledPlayback(scheduledPlayback)
                .streamDescription(streamDescription)
                .streamEmbed(streamEmbed)
                .streamMode(streamMode)
                .streamPassword(streamPassword)
                .streamPrivacy(streamPrivacy)
                .streamTitle(streamTitle)
                .timeZone(timeZone)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a live event
     *
     * This method updates an event belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEventBelongingToAuthenticatedUser_1Test() throws ApiException {
        Double liveEventId = null;
        Double userId = null;
        String title = null;
        Boolean autoCcEnabled = null;
        String autoCcKeywords = null;
        String autoCcLanguage = null;
        Boolean automaticallyTitleStream = null;
        Boolean chatEnabled = null;
        List<String> contentRating = null;
        Boolean dvr = null;
        LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Embed embed = null;
        LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2InteractionToolsSettings interactionToolsSettings = null;
        String playlistSort = null;
        LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2Schedule schedule = null;
        Boolean scheduledPlayback = null;
        String streamDescription = null;
        LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2StreamEmbed streamEmbed = null;
        String streamMode = null;
        String streamPassword = null;
        LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2StreamPrivacy streamPrivacy = null;
        String streamTitle = null;
        String timeZone = null;
        LiveEventRecurring response = api.updateEventBelongingToAuthenticatedUser_1(liveEventId, userId)
                .title(title)
                .autoCcEnabled(autoCcEnabled)
                .autoCcKeywords(autoCcKeywords)
                .autoCcLanguage(autoCcLanguage)
                .automaticallyTitleStream(automaticallyTitleStream)
                .chatEnabled(chatEnabled)
                .contentRating(contentRating)
                .dvr(dvr)
                .embed(embed)
                .interactionToolsSettings(interactionToolsSettings)
                .playlistSort(playlistSort)
                .schedule(schedule)
                .scheduledPlayback(scheduledPlayback)
                .streamDescription(streamDescription)
                .streamEmbed(streamEmbed)
                .streamMode(streamMode)
                .streamPassword(streamPassword)
                .streamPrivacy(streamPrivacy)
                .streamTitle(streamTitle)
                .timeZone(timeZone)
                .execute();
        // TODO: test validations
    }

}
