/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ChannelsPrivateChannelMembersPermitUserAccessRequest;
import com.konfigthis.client.model.User;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ChannelsPrivateChannelMembersApi
 */
@Disabled
public class ChannelsPrivateChannelMembersApiTest {

    private static ChannelsPrivateChannelMembersApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ChannelsPrivateChannelMembersApi(apiClient);
    }

    /**
     * Get all the users who can access a private channel
     *
     * This method returns all the users who have access to the specified private channel. The authenticated user must be the owner of the channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccessibleUsersTest() throws ApiException {
        Double channelId = null;
        String direction = null;
        Double page = null;
        Double perPage = null;
        List<User> response = api.getAccessibleUsers(channelId)
                .direction(direction)
                .page(page)
                .perPage(perPage)
                .execute();
        // TODO: test validations
    }

    /**
     * Permit a list of users to access a private channel
     *
     * This method gives multiple users access to the specified private channel. The authenticated user must be the owner of the channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void permitUserAccessTest() throws ApiException {
        List<String> users = null;
        Double channelId = null;
        List<User> response = api.permitUserAccess(users, channelId)
                .execute();
        // TODO: test validations
    }

    /**
     * Permit a specific user to access a private channel
     *
     * This method gives a single user access to the specified private channel. The authenticated user must be the owner of the channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void permitUserAccess_0Test() throws ApiException {
        Double channelId = null;
        Double userId = null;
        api.permitUserAccess_0(channelId, userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Restrict a user from accessing a private channel
     *
     * This method prevents a single user from being able to access the specified private channel. The authenticated user must be the owner of the channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restrictUserAccessTest() throws ApiException {
        Double channelId = null;
        Double userId = null;
        api.restrictUserAccess(channelId, userId)
                .execute();
        // TODO: test validations
    }

}
