/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Video;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WatchLaterQueueEssentialsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WatchLaterQueueEssentialsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WatchLaterQueueEssentialsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addVideoToQueueCall(Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/watchlater/{video_id}"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVideoToQueueValidateBeforeCall(Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addVideoToQueue(Async)");
        }

        return addVideoToQueueCall(videoId, _callback);

    }


    private ApiResponse<Void> addVideoToQueueWithHttpInfo(Double videoId) throws ApiException {
        okhttp3.Call localVarCall = addVideoToQueueValidateBeforeCall(videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addVideoToQueueAsync(Double videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVideoToQueueValidateBeforeCall(videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddVideoToQueueRequestBuilder {
        private final Double videoId;

        private AddVideoToQueueRequestBuilder(double videoId) {
            this.videoId = videoId;
        }

        /**
         * Build call for addVideoToQueue
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addVideoToQueueCall(videoId, _callback);
        }


        /**
         * Execute addVideoToQueue request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            addVideoToQueueWithHttpInfo(videoId);
        }

        /**
         * Execute addVideoToQueue request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return addVideoToQueueWithHttpInfo(videoId);
        }

        /**
         * Execute addVideoToQueue request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return addVideoToQueueAsync(videoId, _callback);
        }
    }

    /**
     * Add a video to the user&#39;s Watch Later queue
     * This method adds the specified video to the authenticated user&#39;s Watch Later queue.
     * @param videoId The ID of the video. (required)
     * @return AddVideoToQueueRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
     </table>
     */
    public AddVideoToQueueRequestBuilder addVideoToQueue(double videoId) throws IllegalArgumentException {
        
        return new AddVideoToQueueRequestBuilder(videoId);
    }
    private okhttp3.Call addVideoToQueue_0Call(Double userId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/watchlater/{video_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVideoToQueue_0ValidateBeforeCall(Double userId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling addVideoToQueue_0(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addVideoToQueue_0(Async)");
        }

        return addVideoToQueue_0Call(userId, videoId, _callback);

    }


    private ApiResponse<Void> addVideoToQueue_0WithHttpInfo(Double userId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = addVideoToQueue_0ValidateBeforeCall(userId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addVideoToQueue_0Async(Double userId, Double videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVideoToQueue_0ValidateBeforeCall(userId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddVideoToQueue0RequestBuilder {
        private final Double userId;
        private final Double videoId;

        private AddVideoToQueue0RequestBuilder(double userId, double videoId) {
            this.userId = userId;
            this.videoId = videoId;
        }

        /**
         * Build call for addVideoToQueue_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addVideoToQueue_0Call(userId, videoId, _callback);
        }


        /**
         * Execute addVideoToQueue_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            addVideoToQueue_0WithHttpInfo(userId, videoId);
        }

        /**
         * Execute addVideoToQueue_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return addVideoToQueue_0WithHttpInfo(userId, videoId);
        }

        /**
         * Execute addVideoToQueue_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return addVideoToQueue_0Async(userId, videoId, _callback);
        }
    }

    /**
     * Add a video to the user&#39;s Watch Later queue
     * This method adds the specified video to the authenticated user&#39;s Watch Later queue.
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @return AddVideoToQueue0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
     </table>
     */
    public AddVideoToQueue0RequestBuilder addVideoToQueue_0(double userId, double videoId) throws IllegalArgumentException {
        
        
        return new AddVideoToQueue0RequestBuilder(userId, videoId);
    }
    private okhttp3.Call checkVideoInQueueCall(Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/watchlater/{video_id}"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkVideoInQueueValidateBeforeCall(Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling checkVideoInQueue(Async)");
        }

        return checkVideoInQueueCall(videoId, _callback);

    }


    private ApiResponse<Video> checkVideoInQueueWithHttpInfo(Double videoId) throws ApiException {
        okhttp3.Call localVarCall = checkVideoInQueueValidateBeforeCall(videoId, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkVideoInQueueAsync(Double videoId, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkVideoInQueueValidateBeforeCall(videoId, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckVideoInQueueRequestBuilder {
        private final Double videoId;

        private CheckVideoInQueueRequestBuilder(double videoId) {
            this.videoId = videoId;
        }

        /**
         * Build call for checkVideoInQueue
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video is in the user&#39;s Watch Later queue. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkVideoInQueueCall(videoId, _callback);
        }


        /**
         * Execute checkVideoInQueue request
         * @return Video
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video is in the user&#39;s Watch Later queue. </td><td>  -  </td></tr>
         </table>
         */
        public Video execute() throws ApiException {
            ApiResponse<Video> localVarResp = checkVideoInQueueWithHttpInfo(videoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkVideoInQueue request with HTTP info returned
         * @return ApiResponse&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video is in the user&#39;s Watch Later queue. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Video> executeWithHttpInfo() throws ApiException {
            return checkVideoInQueueWithHttpInfo(videoId);
        }

        /**
         * Execute checkVideoInQueue request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video is in the user&#39;s Watch Later queue. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Video> _callback) throws ApiException {
            return checkVideoInQueueAsync(videoId, _callback);
        }
    }

    /**
     * Check if the user has added a video to their Watch Later queue
     * This method checks the authenticated user&#39;s Watch Later queue for the specified video.
     * @param videoId The ID of the video. (required)
     * @return CheckVideoInQueueRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video is in the user&#39;s Watch Later queue. </td><td>  -  </td></tr>
     </table>
     */
    public CheckVideoInQueueRequestBuilder checkVideoInQueue(double videoId) throws IllegalArgumentException {
        
        return new CheckVideoInQueueRequestBuilder(videoId);
    }
    private okhttp3.Call checkVideoInQueue_0Call(Double userId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/watchlater/{video_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkVideoInQueue_0ValidateBeforeCall(Double userId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling checkVideoInQueue_0(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling checkVideoInQueue_0(Async)");
        }

        return checkVideoInQueue_0Call(userId, videoId, _callback);

    }


    private ApiResponse<Video> checkVideoInQueue_0WithHttpInfo(Double userId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = checkVideoInQueue_0ValidateBeforeCall(userId, videoId, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkVideoInQueue_0Async(Double userId, Double videoId, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkVideoInQueue_0ValidateBeforeCall(userId, videoId, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckVideoInQueue0RequestBuilder {
        private final Double userId;
        private final Double videoId;

        private CheckVideoInQueue0RequestBuilder(double userId, double videoId) {
            this.userId = userId;
            this.videoId = videoId;
        }

        /**
         * Build call for checkVideoInQueue_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video is in the user&#39;s Watch Later queue. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkVideoInQueue_0Call(userId, videoId, _callback);
        }


        /**
         * Execute checkVideoInQueue_0 request
         * @return Video
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video is in the user&#39;s Watch Later queue. </td><td>  -  </td></tr>
         </table>
         */
        public Video execute() throws ApiException {
            ApiResponse<Video> localVarResp = checkVideoInQueue_0WithHttpInfo(userId, videoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkVideoInQueue_0 request with HTTP info returned
         * @return ApiResponse&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video is in the user&#39;s Watch Later queue. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Video> executeWithHttpInfo() throws ApiException {
            return checkVideoInQueue_0WithHttpInfo(userId, videoId);
        }

        /**
         * Execute checkVideoInQueue_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The video is in the user&#39;s Watch Later queue. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Video> _callback) throws ApiException {
            return checkVideoInQueue_0Async(userId, videoId, _callback);
        }
    }

    /**
     * Check if the user has added a video to their Watch Later queue
     * This method checks the authenticated user&#39;s Watch Later queue for the specified video.
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @return CheckVideoInQueue0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video is in the user&#39;s Watch Later queue. </td><td>  -  </td></tr>
     </table>
     */
    public CheckVideoInQueue0RequestBuilder checkVideoInQueue_0(double userId, double videoId) throws IllegalArgumentException {
        
        
        return new CheckVideoInQueue0RequestBuilder(userId, videoId);
    }
    private okhttp3.Call getVideosInQueueCall(String direction, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/watchlater";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (filterEmbeddable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_embeddable", filterEmbeddable));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideosInQueueValidateBeforeCall(String direction, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        return getVideosInQueueCall(direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);

    }


    private ApiResponse<List<Video>> getVideosInQueueWithHttpInfo(String direction, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = getVideosInQueueValidateBeforeCall(direction, filter, filterEmbeddable, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getVideosInQueueAsync(String direction, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideosInQueueValidateBeforeCall(direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetVideosInQueueRequestBuilder {
        private String direction;
        private String filter;
        private Boolean filterEmbeddable;
        private Double page;
        private Double perPage;
        private String query;
        private String sort;

        private GetVideosInQueueRequestBuilder() {
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return GetVideosInQueueRequestBuilder
         */
        public GetVideosInQueueRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)
         * @return GetVideosInQueueRequestBuilder
         */
        public GetVideosInQueueRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set filterEmbeddable
         * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)
         * @return GetVideosInQueueRequestBuilder
         */
        public GetVideosInQueueRequestBuilder filterEmbeddable(Boolean filterEmbeddable) {
            this.filterEmbeddable = filterEmbeddable;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return GetVideosInQueueRequestBuilder
         */
        public GetVideosInQueueRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return GetVideosInQueueRequestBuilder
         */
        public GetVideosInQueueRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set query
         * @param query The search query to use to filter the results. (optional)
         * @return GetVideosInQueueRequestBuilder
         */
        public GetVideosInQueueRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date added.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)
         * @return GetVideosInQueueRequestBuilder
         */
        public GetVideosInQueueRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getVideosInQueue
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> The user hasn&#39;t added any videos to their Watch Later queue since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getVideosInQueueCall(direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);
        }


        /**
         * Execute getVideosInQueue request
         * @return List&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> The user hasn&#39;t added any videos to their Watch Later queue since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
         </table>
         */
        public List<Video> execute() throws ApiException {
            ApiResponse<List<Video>> localVarResp = getVideosInQueueWithHttpInfo(direction, filter, filterEmbeddable, page, perPage, query, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getVideosInQueue request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Video&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> The user hasn&#39;t added any videos to their Watch Later queue since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Video>> executeWithHttpInfo() throws ApiException {
            return getVideosInQueueWithHttpInfo(direction, filter, filterEmbeddable, page, perPage, query, sort);
        }

        /**
         * Execute getVideosInQueue request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> The user hasn&#39;t added any videos to their Watch Later queue since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Video>> _callback) throws ApiException {
            return getVideosInQueueAsync(direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);
        }
    }

    /**
     * Get all the videos in the user&#39;s Watch Later queue
     * This method returns every video from the authenticated user&#39;s Watch Later queue.
     * @return GetVideosInQueueRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The user hasn&#39;t added any videos to their Watch Later queue since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
     </table>
     */
    public GetVideosInQueueRequestBuilder getVideosInQueue() throws IllegalArgumentException {
        return new GetVideosInQueueRequestBuilder();
    }
    private okhttp3.Call listUserQueueVideosCall(Double userId, String direction, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/watchlater"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (filterEmbeddable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_embeddable", filterEmbeddable));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUserQueueVideosValidateBeforeCall(Double userId, String direction, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listUserQueueVideos(Async)");
        }

        return listUserQueueVideosCall(userId, direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);

    }


    private ApiResponse<List<Video>> listUserQueueVideosWithHttpInfo(Double userId, String direction, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = listUserQueueVideosValidateBeforeCall(userId, direction, filter, filterEmbeddable, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listUserQueueVideosAsync(Double userId, String direction, String filter, Boolean filterEmbeddable, Double page, Double perPage, String query, String sort, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUserQueueVideosValidateBeforeCall(userId, direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListUserQueueVideosRequestBuilder {
        private final Double userId;
        private String direction;
        private String filter;
        private Boolean filterEmbeddable;
        private Double page;
        private Double perPage;
        private String query;
        private String sort;

        private ListUserQueueVideosRequestBuilder(double userId) {
            this.userId = userId;
        }

        /**
         * Set direction
         * @param direction The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)
         * @return ListUserQueueVideosRequestBuilder
         */
        public ListUserQueueVideosRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)
         * @return ListUserQueueVideosRequestBuilder
         */
        public ListUserQueueVideosRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set filterEmbeddable
         * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)
         * @return ListUserQueueVideosRequestBuilder
         */
        public ListUserQueueVideosRequestBuilder filterEmbeddable(Boolean filterEmbeddable) {
            this.filterEmbeddable = filterEmbeddable;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number of the results to show. (optional)
         * @return ListUserQueueVideosRequestBuilder
         */
        public ListUserQueueVideosRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
         * @return ListUserQueueVideosRequestBuilder
         */
        public ListUserQueueVideosRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set query
         * @param query The search query to use to filter the results. (optional)
         * @return ListUserQueueVideosRequestBuilder
         */
        public ListUserQueueVideosRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date added.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)
         * @return ListUserQueueVideosRequestBuilder
         */
        public ListUserQueueVideosRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for listUserQueueVideos
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> The user hasn&#39;t added any videos to their Watch Later queue since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listUserQueueVideosCall(userId, direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);
        }


        /**
         * Execute listUserQueueVideos request
         * @return List&lt;Video&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> The user hasn&#39;t added any videos to their Watch Later queue since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
         </table>
         */
        public List<Video> execute() throws ApiException {
            ApiResponse<List<Video>> localVarResp = listUserQueueVideosWithHttpInfo(userId, direction, filter, filterEmbeddable, page, perPage, query, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listUserQueueVideos request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Video&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> The user hasn&#39;t added any videos to their Watch Later queue since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Video>> executeWithHttpInfo() throws ApiException {
            return listUserQueueVideosWithHttpInfo(userId, direction, filter, filterEmbeddable, page, perPage, query, sort);
        }

        /**
         * Execute listUserQueueVideos request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> The user hasn&#39;t added any videos to their Watch Later queue since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Video>> _callback) throws ApiException {
            return listUserQueueVideosAsync(userId, direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);
        }
    }

    /**
     * Get all the videos in the user&#39;s Watch Later queue
     * This method returns every video from the authenticated user&#39;s Watch Later queue.
     * @param userId The ID of the user. (required)
     * @return ListUserQueueVideosRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The user hasn&#39;t added any videos to their Watch Later queue since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
     </table>
     */
    public ListUserQueueVideosRequestBuilder listUserQueueVideos(double userId) throws IllegalArgumentException {
        
        return new ListUserQueueVideosRequestBuilder(userId);
    }
    private okhttp3.Call removeVideoFromQueueCall(Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/watchlater/{video_id}"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeVideoFromQueueValidateBeforeCall(Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling removeVideoFromQueue(Async)");
        }

        return removeVideoFromQueueCall(videoId, _callback);

    }


    private ApiResponse<Void> removeVideoFromQueueWithHttpInfo(Double videoId) throws ApiException {
        okhttp3.Call localVarCall = removeVideoFromQueueValidateBeforeCall(videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeVideoFromQueueAsync(Double videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeVideoFromQueueValidateBeforeCall(videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveVideoFromQueueRequestBuilder {
        private final Double videoId;

        private RemoveVideoFromQueueRequestBuilder(double videoId) {
            this.videoId = videoId;
        }

        /**
         * Build call for removeVideoFromQueue
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeVideoFromQueueCall(videoId, _callback);
        }


        /**
         * Execute removeVideoFromQueue request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeVideoFromQueueWithHttpInfo(videoId);
        }

        /**
         * Execute removeVideoFromQueue request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeVideoFromQueueWithHttpInfo(videoId);
        }

        /**
         * Execute removeVideoFromQueue request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeVideoFromQueueAsync(videoId, _callback);
        }
    }

    /**
     * Remove a video from the user&#39;s Watch Later queue
     * This method removes the specified video from the authenticated user&#39;s Watch Later queue.
     * @param videoId The ID of the video. (required)
     * @return RemoveVideoFromQueueRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveVideoFromQueueRequestBuilder removeVideoFromQueue(double videoId) throws IllegalArgumentException {
        
        return new RemoveVideoFromQueueRequestBuilder(videoId);
    }
    private okhttp3.Call removeVideoFromQueue_0Call(Double userId, Double videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/watchlater/{video_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeVideoFromQueue_0ValidateBeforeCall(Double userId, Double videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling removeVideoFromQueue_0(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling removeVideoFromQueue_0(Async)");
        }

        return removeVideoFromQueue_0Call(userId, videoId, _callback);

    }


    private ApiResponse<Void> removeVideoFromQueue_0WithHttpInfo(Double userId, Double videoId) throws ApiException {
        okhttp3.Call localVarCall = removeVideoFromQueue_0ValidateBeforeCall(userId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeVideoFromQueue_0Async(Double userId, Double videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeVideoFromQueue_0ValidateBeforeCall(userId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveVideoFromQueue0RequestBuilder {
        private final Double userId;
        private final Double videoId;

        private RemoveVideoFromQueue0RequestBuilder(double userId, double videoId) {
            this.userId = userId;
            this.videoId = videoId;
        }

        /**
         * Build call for removeVideoFromQueue_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeVideoFromQueue_0Call(userId, videoId, _callback);
        }


        /**
         * Execute removeVideoFromQueue_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeVideoFromQueue_0WithHttpInfo(userId, videoId);
        }

        /**
         * Execute removeVideoFromQueue_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeVideoFromQueue_0WithHttpInfo(userId, videoId);
        }

        /**
         * Execute removeVideoFromQueue_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeVideoFromQueue_0Async(userId, videoId, _callback);
        }
    }

    /**
     * Remove a video from the user&#39;s Watch Later queue
     * This method removes the specified video from the authenticated user&#39;s Watch Later queue.
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @return RemoveVideoFromQueue0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveVideoFromQueue0RequestBuilder removeVideoFromQueue_0(double userId, double videoId) throws IllegalArgumentException {
        
        
        return new RemoveVideoFromQueue0RequestBuilder(userId, videoId);
    }
}
