/*
 * Vimeo API
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EditVideoRequestEmbedCardsInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EditVideoRequestEmbedCardsInner {
  public static final String SERIALIZED_NAME_DISPLAY_TIME = "display_time";
  @SerializedName(SERIALIZED_NAME_DISPLAY_TIME)
  private Double displayTime;

  public static final String SERIALIZED_NAME_HEADLINE = "headline";
  @SerializedName(SERIALIZED_NAME_HEADLINE)
  private String headline;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE_URL = "image_url";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_TEASER = "teaser";
  @SerializedName(SERIALIZED_NAME_TEASER)
  private String teaser;

  public static final String SERIALIZED_NAME_TIMECODE = "timecode";
  @SerializedName(SERIALIZED_NAME_TIMECODE)
  private Double timecode;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public EditVideoRequestEmbedCardsInner() {
  }

  public EditVideoRequestEmbedCardsInner displayTime(Double displayTime) {
    
    
    
    
    this.displayTime = displayTime;
    return this;
  }

  public EditVideoRequestEmbedCardsInner displayTime(Integer displayTime) {
    
    
    
    
    this.displayTime = displayTime.doubleValue();
    return this;
  }

   /**
   * The number of seconds for which the card appears.
   * @return displayTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of seconds for which the card appears.")

  public Double getDisplayTime() {
    return displayTime;
  }


  public void setDisplayTime(Double displayTime) {
    
    
    
    this.displayTime = displayTime;
  }


  public EditVideoRequestEmbedCardsInner headline(String headline) {
    
    
    
    
    this.headline = headline;
    return this;
  }

   /**
   * The title of the card.
   * @return headline
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The title of the card.")

  public String getHeadline() {
    return headline;
  }


  public void setHeadline(String headline) {
    
    
    
    this.headline = headline;
  }


  public EditVideoRequestEmbedCardsInner id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The UUID of the card.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The UUID of the card.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public EditVideoRequestEmbedCardsInner imageUrl(String imageUrl) {
    
    
    
    
    this.imageUrl = imageUrl;
    return this;
  }

   /**
   * The URL of the thumbnail for the card.
   * @return imageUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The URL of the thumbnail for the card.")

  public String getImageUrl() {
    return imageUrl;
  }


  public void setImageUrl(String imageUrl) {
    
    
    
    this.imageUrl = imageUrl;
  }


  public EditVideoRequestEmbedCardsInner teaser(String teaser) {
    
    
    
    
    this.teaser = teaser;
    return this;
  }

   /**
   * The description of the card.
   * @return teaser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The description of the card.")

  public String getTeaser() {
    return teaser;
  }


  public void setTeaser(String teaser) {
    
    
    
    this.teaser = teaser;
  }


  public EditVideoRequestEmbedCardsInner timecode(Double timecode) {
    
    
    
    
    this.timecode = timecode;
    return this;
  }

  public EditVideoRequestEmbedCardsInner timecode(Integer timecode) {
    
    
    
    
    this.timecode = timecode.doubleValue();
    return this;
  }

   /**
   * The playback timestamp, given in seconds, when the card appears.
   * @return timecode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The playback timestamp, given in seconds, when the card appears.")

  public Double getTimecode() {
    return timecode;
  }


  public void setTimecode(Double timecode) {
    
    
    
    this.timecode = timecode;
  }


  public EditVideoRequestEmbedCardsInner url(String url) {
    
    
    
    
    this.url = url;
    return this;
  }

   /**
   * The URL of the card.
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The URL of the card.")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    
    
    
    this.url = url;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EditVideoRequestEmbedCardsInner instance itself
   */
  public EditVideoRequestEmbedCardsInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EditVideoRequestEmbedCardsInner editVideoRequestEmbedCardsInner = (EditVideoRequestEmbedCardsInner) o;
    return Objects.equals(this.displayTime, editVideoRequestEmbedCardsInner.displayTime) &&
        Objects.equals(this.headline, editVideoRequestEmbedCardsInner.headline) &&
        Objects.equals(this.id, editVideoRequestEmbedCardsInner.id) &&
        Objects.equals(this.imageUrl, editVideoRequestEmbedCardsInner.imageUrl) &&
        Objects.equals(this.teaser, editVideoRequestEmbedCardsInner.teaser) &&
        Objects.equals(this.timecode, editVideoRequestEmbedCardsInner.timecode) &&
        Objects.equals(this.url, editVideoRequestEmbedCardsInner.url)&&
        Objects.equals(this.additionalProperties, editVideoRequestEmbedCardsInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayTime, headline, id, imageUrl, teaser, timecode, url, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EditVideoRequestEmbedCardsInner {\n");
    sb.append("    displayTime: ").append(toIndentedString(displayTime)).append("\n");
    sb.append("    headline: ").append(toIndentedString(headline)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    teaser: ").append(toIndentedString(teaser)).append("\n");
    sb.append("    timecode: ").append(toIndentedString(timecode)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("display_time");
    openapiFields.add("headline");
    openapiFields.add("id");
    openapiFields.add("image_url");
    openapiFields.add("teaser");
    openapiFields.add("timecode");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EditVideoRequestEmbedCardsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EditVideoRequestEmbedCardsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EditVideoRequestEmbedCardsInner is not found in the empty JSON string", EditVideoRequestEmbedCardsInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("headline") != null && !jsonObj.get("headline").isJsonNull()) && !jsonObj.get("headline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `headline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("headline").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("image_url") != null && !jsonObj.get("image_url").isJsonNull()) && !jsonObj.get("image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_url").toString()));
      }
      if ((jsonObj.get("teaser") != null && !jsonObj.get("teaser").isJsonNull()) && !jsonObj.get("teaser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `teaser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("teaser").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EditVideoRequestEmbedCardsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EditVideoRequestEmbedCardsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EditVideoRequestEmbedCardsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EditVideoRequestEmbedCardsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<EditVideoRequestEmbedCardsInner>() {
           @Override
           public void write(JsonWriter out, EditVideoRequestEmbedCardsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EditVideoRequestEmbedCardsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EditVideoRequestEmbedCardsInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EditVideoRequestEmbedCardsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EditVideoRequestEmbedCardsInner
  * @throws IOException if the JSON string is invalid with respect to EditVideoRequestEmbedCardsInner
  */
  public static EditVideoRequestEmbedCardsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EditVideoRequestEmbedCardsInner.class);
  }

 /**
  * Convert an instance of EditVideoRequestEmbedCardsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

